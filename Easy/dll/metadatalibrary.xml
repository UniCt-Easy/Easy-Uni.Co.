<?xml version="1.0"?>
<doc>
    <assembly>
        <name>metadatalibrary</name>
    </assembly>
    <members>
        <member name="T:metadatalibrary.StartClearMainRowEvent">
            <summary>
            Event generated at the beginning of the clear of a row
            </summary>
        </member>
        <member name="T:metadatalibrary.FormActivated">
            <summary>
            Event generated at the beginning of the clear of a row
            </summary>
        </member>
        <member name="T:metadatalibrary.StopClearMainRowEvent">
            <summary>
            Event generated at the beginning of the selection of a row
            </summary>
        </member>
        <member name="T:metadatalibrary.StartMainRowSelectionEvent">
            <summary>
            Event generated at the beginning of the selection of a row
            </summary>
        </member>
        <member name="P:metadatalibrary.StartMainRowSelectionEvent.mainRow">
            <summary>
            Row being selected
            </summary>
        </member>
        <member name="M:metadatalibrary.StartMainRowSelectionEvent.#ctor(System.Data.DataRow)">
            <summary>
            
            </summary>
            <param name="r">Selected row</param>
        </member>
        <member name="T:metadatalibrary.StopMainRowSelectionEvent">
            <summary>
            Event generated after the completion of the selection of a row
            </summary>
        </member>
        <member name="P:metadatalibrary.StopMainRowSelectionEvent.mainRow">
            <summary>
            Row being selected, can be null if form was emptied
            </summary>
        </member>
        <member name="M:metadatalibrary.StopMainRowSelectionEvent.#ctor(System.Data.DataRow)">
            <summary>
            
            </summary>
            <param name="r">Selected row</param>
        </member>
        <member name="T:metadatalibrary.StartRowSelectionEvent">
            <summary>
            Event generated at the beginning of the selection of a row
            </summary>
        </member>
        <member name="P:metadatalibrary.StartRowSelectionEvent.Row">
            <summary>
            Row being selected
            </summary>
        </member>
        <member name="M:metadatalibrary.StartRowSelectionEvent.#ctor(System.Data.DataRow)">
            <summary>
            
            </summary>
            <param name="r">Selected row</param>
        </member>
        <member name="T:metadatalibrary.StopRowSelectionEvent">
            <summary>
            Event generated after the completion of the selection of a row
            </summary>
        </member>
        <member name="P:metadatalibrary.StopRowSelectionEvent.Row">
            <summary>
            Row being selected, can be null if form was emptied
            </summary>
        </member>
        <member name="M:metadatalibrary.StopRowSelectionEvent.#ctor(System.Data.DataRow)">
            <summary>
            
            </summary>
            <param name="r">Selected row</param>
        </member>
        <member name="F:metadatalibrary.ApplicationFormState.Empty">
            <summary>
            Empty state
            </summary>
        </member>
        <member name="F:metadatalibrary.ApplicationFormState.Insert">
            <summary>
            Insert mode
            </summary>
        </member>
        <member name="F:metadatalibrary.ApplicationFormState.Edit">
            <summary>
            Edit mode
            </summary>
        </member>
        <member name="P:metadatalibrary.ChangeFormState.state">
            <summary>
            Current form state
            </summary>
        </member>
        <member name="M:metadatalibrary.ChangeFormState.#ctor(metadatalibrary.ApplicationFormState)">
            <summary>
            
            </summary>
            <param name="fState"></param>
        </member>
        <member name="T:metadatalibrary.AskParameter">
            <summary>
            Descrizione di riepilogo per AskParameter.
            </summary>
        </member>
        <member name="F:metadatalibrary.AskParameter.val">
            <summary>
            string read in TextBox
            </summary>
        </member>
        <member name="F:metadatalibrary.AskParameter.components">
            <summary>
            Variabile di progettazione necessaria.
            </summary>
        </member>
        <member name="M:metadatalibrary.AskParameter.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructor of askParameter Form
            </summary>
            <param name="campo">name of field to ask</param>
            <param name="operatore">name of operator (es. >= )</param>
            <param name="n_ops">n. of operands to ask</param>
        </member>
        <member name="M:metadatalibrary.AskParameter.Dispose(System.Boolean)">
            <summary>
            Pulire le risorse in uso.
            </summary>
        </member>
        <member name="M:metadatalibrary.AskParameter.InitializeComponent">
            <summary>
            Metodo necessario per il supporto della finestra di progettazione. Non modificare
            il contenuto del metodo con l'editor di codice.
            </summary>
        </member>
        <member name="T:metadatalibrary.ClearDataSet">
            <summary>
            Utility functions to strip DataSet from Framework-added constraints 
             and undesired structures.
            </summary>
        </member>
        <member name="M:metadatalibrary.ClearDataSet.Clear(System.Data.DataSet)">
            <summary>
            Creates a "stripped version" of a DataSet, preserving only:
             Tables structure (column names, types, expressions)
             Tables parent/child relations
             Tables Primary Keys
            </summary>
            <param name="d">DataSet to process</param>
            <returns>Garbage-Stripped DataSet</returns>
        </member>
        <member name="M:metadatalibrary.ClearDataSet.RemoveConstraints(System.Data.DataSet)">
            <summary>
            Removes all possibly-removable constraint from a DataSet.
             Unique-type constraint are not removed.
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:metadatalibrary.IComboBoxManager.fillRelatedToRowControl(System.Windows.Forms.ComboBox,System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Update a combobox when a row has been selected 
            </summary>
            <param name="c"></param>
            <param name="changed"></param>
            <param name="changedRow"></param>
        </member>
        <member name="M:metadatalibrary.IComboBoxManager.comboTip(System.Windows.Forms.ComboBox)">
            <summary>
            Gets the tip linked to a combo
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IComboBoxManager.filteredPreFillCombo(System.Windows.Forms.ComboBox,System.String,System.Boolean)">
            <summary>
            Prefills a combo with a specified filter, optionally changing its value
            </summary>
            <param name="c"></param>
            <param name="filter"></param>
            <param name="freshvalue"></param>
        </member>
        <member name="M:metadatalibrary.IComboBoxManager.filteredPreFillCombo(System.Windows.Forms.ComboBox,System.String,System.Boolean,System.Collections.Generic.List{metadatalibrary.SelectBuilder})">
            <summary>
            Fills a combobox with related data. It adds a dummy empty row to 
             the PARENT table if the master selector allows null. This row
             is marked as temp_row
            </summary>
            <remarks>combobox Tag field should be set to a "Table.column" string
             that has to be displayed on that box. The table should be a PARENT
             of the PrimaryTable linked to GetData object. 
             More, the table have not to be a CHILD table itself
            </remarks>
            <param name="c"></param>
            <param name="filter">filter to apply</param>
            <param name="freshvalue">true if a RowChange Should be generated</param>
            <param name="selList"></param>
        </member>
        <member name="M:metadatalibrary.IComboBoxManager.fillComboBoxTable(System.Windows.Forms.ComboBox,System.Boolean)">
            <summary>
            Fill the table  related to a combobox.
            </summary>
            <param name="c">ComboBox to fill</param>
            <param name="freshvalue">when true, a redraw of combobox table related fields
             is forced</param>
        </member>
        <member name="M:metadatalibrary.IComboBoxManager.resetComboBoxSource(System.Windows.Forms.ComboBox,System.String)">
            <summary>
            Reimposta il ComboBox C per far si che contenga le voci di search
            </summary>
            <param name="c"></param>
            <param name="tablename"></param>
        </member>
        <member name="M:metadatalibrary.IComboBoxManager.refilterComboBoxSource(System.Windows.Forms.ComboBox,System.String)">
            <summary>
            Reimposta il ComboBox C per far si che contenga tutte le voci operative in inserimento
            </summary>
            <param name="c"></param>
            <param name="tablename"></param>
        </member>
        <member name="M:metadatalibrary.IComboBoxManager.setComboBoxFilteredSource(System.Windows.Forms.ComboBox,System.String,System.String)">
            <summary>
            Imposta il ComboBox C con un sotto insieme delle righe della tabella principale del combo
            </summary>
            <param name="c"></param>
            <param name="combotable"></param>
            <param name="filter"></param>
        </member>
        <member name="M:metadatalibrary.IComboBoxManager.checkComboBoxSource(System.Windows.Forms.ComboBox,System.Object)">
            <summary>
            Imposta il DataSource del Combo in modo adeguato alla modalità corrente ed in modo che
             possa visualizzare il valore OldValue
            </summary>
            <param name="c"></param>
            <param name="oldValue"></param>        
        </member>
        <member name="M:metadatalibrary.IComboBoxManager.setCombo(System.Windows.Forms.ComboBox,System.Data.DataTable,System.String,System.Object)">
            <summary>
            Set the value of a specified ComboBox - given the DS DataSet
            The Tag of the ComboBox Should be like "masterfield[:parenttable.parentfield]" 
            </summary>
            <param name="c">ComboBox to fill</param>
            <param name="T"></param>
            <param name="field">field value to consider for combo</param>
            <param name="val"></param>
        </member>
        <member name="M:metadatalibrary.IComboBoxManager.setComboBoxValue(System.Windows.Forms.ComboBox,System.Object)">
            <summary>
            Sets the value of a combo
            </summary>
            <param name="c"></param>
            <param name="s"></param>
        </member>
        <member name="M:metadatalibrary.IComboBoxManager.setComboBoxStringValue(System.Windows.Forms.ComboBox,System.String)">
            <summary>
            Sets the value of a combo
            </summary>
            <param name="c"></param>
            <param name="s"></param>
        </member>
        <member name="M:metadatalibrary.IComboBoxManager.clearCombo(System.Windows.Forms.ComboBox,System.Data.DataTable)">
            <summary>
            Clear combobox selected value
            </summary>
            <param name="c"></param>
            <param name="t"></param>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.#ctor">
            <summary>
            Manages a combobox
            </summary>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.init(System.Windows.Forms.Form)">
            <summary>
            
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.filteredPreFillCombo(System.Windows.Forms.ComboBox,System.String,System.Boolean)">
            <summary>
            Prefills a combo with a specified filter, optionally changing its value
            </summary>
            <param name="c"></param>
            <param name="filter"></param>
            <param name="freshvalue"></param>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.filteredPreFillCombo(System.Windows.Forms.ComboBox,System.String,System.Boolean,System.Collections.Generic.List{metadatalibrary.SelectBuilder})">
            <summary>
            Fills a combobox with related data. It adds a dummy empty row to 
             the PARENT table if the master selector allows null. This row
             is marked as temp_row
            </summary>
            <remarks>combobox Tag field should be set to a "Table.column" string
             that has to be displayed on that box. The table should be a PARENT
             of the PrimaryTable linked to GetData object. 
             More, the table have not to be a CHILD table itself
            </remarks>
            <param name="c"></param>
            <param name="filter">filter to apply</param>
            <param name="freshvalue">true if a RowChange Should be generated</param>
            <param name="selList"></param>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.fillComboBoxTable(System.Data.DataTable,System.Object)">
            <summary>
            
            </summary>
            <param name="realTable"></param>
            <param name="context"></param>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.fillComboBoxTable(System.Windows.Forms.ComboBox,System.Boolean)">
            <summary>
            Fill the table  related to a combobox.
            </summary>
            <param name="C">ComboBox to fill</param>
            <param name="freshvalue">when true, a redraw of combobox table related fields
             is forced</param>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.comboTableKind(System.Data.DataTable)">
            <summary>
            Get the kind of a table viewed in a combobox
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.setComboTableKind(System.Data.DataTable,System.String)">
            <summary>
            Set the kind of a table viewed in a combobox
            </summary>
            <param name="T"></param>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.resetComboBoxSource(System.Windows.Forms.ComboBox,System.String)">
            <summary>
            Reimposta il ComboBox C per far si che contenga le voci di search
            </summary>
            <param name="c"></param>
            <param name="tablename"></param>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.refilterComboBoxSource(System.Windows.Forms.ComboBox,System.String)">
            <summary>
            Reimposta il ComboBox C per far si che contenga tutte le voci operative in inserimento
            </summary>
            <param name="c"></param>
            <param name="tablename"></param>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.setComboBoxFilteredSource(System.Windows.Forms.ComboBox,System.String,System.String)">
            <summary>
            Imposta il ComboBox C con un sotto insieme delle righe della tabella principale del combo
            </summary>
            <param name="c"></param>
            <param name="combotable"></param>
            <param name="filter"></param>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.checkComboBoxSource(System.Windows.Forms.ComboBox,System.Object)">
            <summary>
            Imposta il DataSource del Combo in modo adeguato alla modalità corrente ed in modo che
             possa visualizzare il valore OldValue
            </summary>
            <param name="c"></param>
            <param name="oldValue"></param>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.setComboBoxStringValue(System.Windows.Forms.ComboBox,System.String)">
            <summary>
            Sets the value for a combobox
            </summary>
            <param name="c"></param>
            <param name="s"></param>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.SetComboBoxStringValue(System.Windows.Forms.ComboBox,System.String)">
            <summary>
            Sets the value for a combobox
            </summary>
            <param name="c"></param>
            <param name="s"></param>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.setComboBoxValue(System.Windows.Forms.ComboBox,System.Object)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="s"></param>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.SetComboBoxValue(System.Windows.Forms.ComboBox,System.Object)">
            <summary>
            Sets the value of a ComboBox making it displaying (valuemember) S if possible,
             disregarding case
            </summary>
            <param name="c">ComboBox to fill</param>
            <param name="valueToSet">string wanted as SelectedValue</param>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.setCombo(System.Windows.Forms.ComboBox,System.Data.DataTable,System.String,System.Object)">
            <summary>
            Set the value of a specified ComboBox - given the DS DataSet
            The Tag of the ComboBox Should be like "masterfield[:parenttable.parentfield]" 
            </summary>
            <param name="c">ComboBox to fill</param>
            <param name="T"></param>
            <param name="field">field value to consider for combo</param>
            <param name="val"></param>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.fillRelatedToRowControl(System.Windows.Forms.ComboBox,System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Update a combobox when a row has been selected 
            </summary>
            <param name="c">Combobox to (eventually) update</param>
            <param name="changed">Table from where a new row has been selected</param>
            <param name="changedRow">Row selected in some control</param>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.addEvents(System.Windows.Forms.ComboBox)">
            <summary>
            Add internal events to manage combobox
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.keyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Evento generato ad ogni pressione di tasto tale che "IsInputKey() = true"; 
            pertanto anche "ESC", "INVIO" e "BACKSPACE" ma non,
            ad esempio, "SINISTRA", "DESTRA", "HOME" e "CANC" che devono essere gestiti
            dall'evento "KeyDown".
            Precondizione: nel ComboBox DEVE ESSERE DropDownStyle = DropDown
            </summary>
            <param name="sender">il ComboBox che si vuole gestire</param>
            <param name="e">l'evento</param>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.keyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Evento generato prima di KeyPress. Lo uso per gestire la pressione dei tasti 
            "SINISTRA", "DESTRA", "HOME" e "CANC"
            che altrimenti non riuscirei ad intercettare con KeyPress.
            Precondizione: nel ComboBox DEVE ESSERE DropDownStyle = DropDown
            </summary>
            <param name="sender">il ComboBox da gestire</param>
            <param name="e">l'evento</param>
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.comboTip(System.Windows.Forms.ComboBox)">
            <inheritdoc />
        </member>
        <member name="M:metadatalibrary.ComboBoxManager.clearCombo(System.Windows.Forms.ComboBox,System.Data.DataTable)">
            <inheritdoc />
        </member>
        <member name="T:metadatalibrary.Compiler">
            <summary>
            Helper class for compiling c# code
            </summary>
        </member>
        <member name="F:metadatalibrary.Compiler.Nvars">
            <summary>
            Number of temporary vars declared
            </summary>
        </member>
        <member name="M:metadatalibrary.Compiler.getNewFunName">
            <summary>
            Retursn a new function name
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.Compiler.getNewVarName">
            <summary>
            Get a new variable name
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.Compiler.addSegment(System.String)">
            <summary>
            Adding a segment of code to compile
            </summary>
            <param name="segment"></param>
        </member>
        <member name="M:metadatalibrary.Compiler.compile(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="typeName">Name of the class containing the method to compile</param>
            <param name="funcBody">Function body</param>
            <param name="referencedAssemblies"></param>
            <param name="referencedDll"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.ContextMenuItem">
            <summary>
             Class derived from MenuItem in order to add some properties
            </summary>
        </member>
        <member name="F:metadatalibrary.ContextMenuItem.Insert">
            <summary>
            True if it is a "create document menu item"
            </summary>
        </member>
        <member name="F:metadatalibrary.ContextMenuItem.Relation">
            <summary>
            Relation implemented by this menu item
            </summary>
        </member>
        <member name="M:metadatalibrary.ContextMenuItem.#ctor(System.String,System.Boolean,System.Data.DataRow)">
            <summary>
            Creates a navigation menu item
            </summary>
            <param name="text"></param>
            <param name="insert"></param>
            <param name="relation"></param>
        </member>
        <member name="T:metadatalibrary.CommandMenuItem">
            <summary>
             Class derived from MenuItem in order to add some properties
            </summary>
        </member>
        <member name="F:metadatalibrary.CommandMenuItem.Command">
            <summary>
            Attached menu item main command
            </summary>
        </member>
        <member name="M:metadatalibrary.CommandMenuItem.#ctor(System.String,System.String)">
            <summary>
            Creates a main command menu item
            </summary>
            <param name="text"></param>
            <param name="command"></param>
        </member>
        <member name="T:metadatalibrary.IContextMenuManager">
            <summary>
            Manager for context menu (activated with the right mouse button)
            </summary>
        </member>
        <member name="M:metadatalibrary.IContextMenuManager.destroy">
            <summary>
            Release all resources
            </summary>
        </member>
        <member name="M:metadatalibrary.IContextMenuManager.addContextMenuToForm(System.Windows.Forms.Form)">
            <summary>
            Adds a context menu to a form
            </summary>
            <param name="f"></param>
        </member>
        <member name="T:metadatalibrary.ContextMenuManager">
            <summary>
            Manager for context menu (activated with the right mouse button)
            </summary>
        </member>
        <member name="M:metadatalibrary.ContextMenuManager.destroy">
            <summary>
            Release all resources
            </summary>
        </member>
        <member name="F:metadatalibrary.ContextMenuManager._cm">
            <summary>
            Managed context menu
            </summary>
        </member>
        <member name="M:metadatalibrary.ContextMenuManager.addContextMenuToForm(System.Windows.Forms.Form)">
            <summary>
            Adds a context menu to a form
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:metadatalibrary.ContextMenuManager.checkFilter(System.Data.DataRow,System.String)">
            <summary>
            Check if a condition is satisfied by a row
            </summary>
            <param name="r"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ContextMenuManager.verifyCustomCondition(System.String,System.String,System.String,System.String,System.Data.DataRow)">
            <summary>
            Check if a row satisfies custom conditions given by    sp_getcustomrelationfilter
            </summary>
            <param name="fromTable"></param>
            <param name="toTable"></param>
            <param name="editType"></param>
            <param name="operation"></param>
            <param name="fromRow"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ContextMenuManager.setCustomDefaults(System.String,System.String,System.String,System.Data.DataTable)">
            <summary>
            Sets custom default on dataTable T given by sp_getcustomrelationdefault
            </summary>
            <param name="fromTable"></param>
            <param name="toTable"></param>
            <param name="editType"></param>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.ContextMenuManager.checkOpenFormAuthorizations(System.String,System.String)">
            <summary>
            Check if an edittype is available for current user
            </summary>
            <param name="tablename"></param>
            <param name="edittype"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ContextMenuManager.addMenuOpenDocument">
            <summary>
            Creates submenu "OpenDocument"
            </summary>
        </member>
        <member name="M:metadatalibrary.ContextMenuManager.addMenuCreateDocument">
            <summary>
            Creates submenu "CreateDocument"
            </summary>
        </member>
        <member name="M:metadatalibrary.ContextMenuManager.addMainCommands">
            <summary>
            Add all main commands to main menu
            </summary>
        </member>
        <member name="M:metadatalibrary.ContextMenuManager.updateMenu">
            <summary>
            Must update menu items
            </summary>
        </member>
        <member name="M:metadatalibrary.ContextMenuManager.navigateDirect(System.Data.DataRow)">
            <summary>
            Do a navigate direct with a specified relation
            </summary>
            <param name="relation"></param>
        </member>
        <member name="M:metadatalibrary.ContextMenuManager.navigateIndirect(System.Data.DataRow)">
            <summary>
            Do a navigate indirect  using the specified relation
            </summary>
            <param name="relation"></param>
        </member>
        <member name="M:metadatalibrary.ContextMenuManager.insertDirect(System.Data.DataRow)">
            <summary>
            Insert a row directly using the specified relation
            </summary>
            <param name="relation"></param>
        </member>
        <member name="M:metadatalibrary.ContextMenuManager.insertIndirect(System.Data.DataRow)">
            <summary>
            Insert a row indirectly using the specified relation
            </summary>
            <param name="relation"></param>
        </member>
        <member name="M:metadatalibrary.ContextMenuManager.Dispose(System.Boolean)">
            <summary>
            Necessary method to implement IDisposable
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:metadatalibrary.ContextMenuManager.Dispose">
            <summary>
            This code added to correctly implement the disposable pattern.
            </summary>
        </member>
        <member name="T:metadatalibrary.IControEnabler">
            <summary>
            Manages control enabling / disabling
            </summary>
        </member>
        <member name="M:metadatalibrary.IControEnabler.init(System.Data.DataTable)">
            <summary>
            Initializes an instance on a specified primary Table. 
            </summary>
            <param name="primaryTable"></param>
        </member>
        <member name="M:metadatalibrary.IControEnabler.enableDisable(System.Windows.Forms.Control,System.Data.DataTable,System.String,metadatalibrary.HelpForm.drawmode)">
            <summary>
            Set a control as enabled or disabled basing on tag and form data:
            -  design-time disabled controls are left disabled
            -  autoincrement fields are always disabled (also hidden on insert mode)
            -  other primary fields are left enabled
            -  primary key are disabled on edit mode
            -  other primary fields are left enabled
            </summary>
            <param name="c"></param>
            <param name="T"></param>
            <param name="field"></param>
            <param name="drawMode"></param>
        </member>
        <member name="M:metadatalibrary.IControEnabler.reEnable(System.Windows.Forms.Control)">
            <summary>
            Enables a control that has been disabled from the framework because it was on a primary key column or it was an autoincrement field
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:metadatalibrary.IControEnabler.enableButton(System.Windows.Forms.Button,System.Boolean)">
            <summary>
            Enablesor disables a button
            </summary>
            <param name="b"></param>
            <param name="enable"></param>
        </member>
        <member name="T:metadatalibrary.ControEnabler">
            <inheritdoc />
        </member>
        <member name="M:metadatalibrary.ControEnabler.init(System.Data.DataTable)">
            <inheritdoc />
            <summary>
            </summary>
            <param name="primaryTable"></param>
        </member>
        <member name="M:metadatalibrary.ControEnabler.doDisable(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Disable a control and adds it to the "toenable" list.
            Optionally tries to hide content of control
            </summary>
            <param name="c"></param>
            <param name="hideContent">When true, textbox are threated like passwords</param>
        </member>
        <member name="M:metadatalibrary.ControEnabler.enableDisable(System.Windows.Forms.Control,System.Data.DataTable,System.String,metadatalibrary.HelpForm.drawmode)">
            <inheritdoc />
        </member>
        <member name="M:metadatalibrary.ControEnabler.reEnable(System.Windows.Forms.Control)">
            <inheritdoc />
        </member>
        <member name="M:metadatalibrary.ControEnabler.enableButton(System.Windows.Forms.Button,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:metadatalibrary.creaDatiSistema">
            <summary>
            Summary description for creaDatiSistema.
            </summary>
        </member>
        <member name="M:metadatalibrary.creaDatiSistema.Settacustomobject(metadatalibrary.dbstructure)">
            <summary>
            Crea in ds.columntypes le righe relative a customobject
            </summary>
            <param name="ds"></param>
        </member>
        <member name="M:metadatalibrary.creaDatiSistema.Settacustomview(metadatalibrary.dbstructure)">
            <summary>
            Crea in ds.columntypes le righe relative a customview
            </summary>
            <param name="ds"></param>
        </member>
        <member name="M:metadatalibrary.creaDatiSistema.Settacustomviewcolumn(metadatalibrary.dbstructure)">
            <summary>
            Crea in ds.columntypes le righe relative a customviewcolumn
            </summary>
            <param name="ds"></param>
        </member>
        <member name="M:metadatalibrary.creaDatiSistema.Settacustomvieworderby(metadatalibrary.dbstructure)">
            <summary>
            Crea in ds.columntypes le righe relative a customorderby
            </summary>
            <param name="ds"></param>
        </member>
        <member name="M:metadatalibrary.creaDatiSistema.Settacustomviewwhere(metadatalibrary.dbstructure)">
            <summary>
            Crea in ds.columntypes le righe relative a customoviewwhere
            </summary>
            <param name="ds"></param>
        </member>
        <member name="M:metadatalibrary.creaDatiSistema.Settacustomtablestructure(metadatalibrary.dbstructure)">
            <summary>
            Crea in ds.columntypes le righe relative a customtablestructure
            </summary>
            <param name="ds"></param>
        </member>
        <member name="M:metadatalibrary.creaDatiSistema.Settacustomredirect(metadatalibrary.dbstructure)">
            <summary>
            Crea in ds.columntypes le righe relative a customredirect
            </summary>
            <param name="ds"></param>
        </member>
        <member name="M:metadatalibrary.creaDatiSistema.Settacustomedit(metadatalibrary.dbstructure)">
            <summary>
            Crea in ds.columntypes le righe relative a customedit
            </summary>
            <param name="ds"></param>
        </member>
        <member name="M:metadatalibrary.creaDatiSistema.Settaviewcolumn(metadatalibrary.dbstructure)">
            <summary>
            Crea in ds.columntypes le righe relative a viewcolumn
            </summary>
            <param name="ds"></param>
        </member>
        <member name="M:metadatalibrary.creaDatiSistema.Settacolumntypes(metadatalibrary.dbstructure)">
            <summary>
            Crea in ds.columntypes le righe relative a columntypes
            </summary>
            <param name="ds"></param>
        </member>
        <member name="T:metadatalibrary.TagObj">
            <summary>
            Informations about a node of the tree-view, stored in related tag.
            This class is OBSOLETE
            </summary>
        </member>
        <member name="F:metadatalibrary.TagObj.idclass">
            <summary>
            ID for current object 
            </summary>
        </member>
        <member name="F:metadatalibrary.TagObj.level">
            <summary>
            level of node
            </summary>
        </member>
        <member name="F:metadatalibrary.TagObj.operativo">
            <summary>
            node is selectable
            </summary>
        </member>
        <member name="F:metadatalibrary.TagObj.Descrizione">
            <summary>
            description
            </summary>
        </member>
        <member name="F:metadatalibrary.TagObj.DescrizioneLivello">
            <summary>
            level descr.
            </summary>
        </member>
        <member name="M:metadatalibrary.TagObj.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="idclass"></param>
            <param name="level"></param>
            <param name="descrizione"></param>
            <param name="descrizioneLivello"></param>
            <param name="operativo"></param>
        </member>
        <member name="M:metadatalibrary.TagObj.ToString">
            <summary>
            gets caption for the node
            </summary>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.CreateTreeClass">
            <summary>
            Summary description for CreateTreeClass.
            </summary>
        </member>
        <member name="M:metadatalibrary.CreateTreeClass.#ctor(System.String,System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Creates a tree 
            </summary>
            <param name="codicetipoclass">usually idsorkind</param>
            <param name="tableClass">table that contains the sort table</param>
            <param name="descrLivelli">table for the sorting levels</param>
        </member>
        <member name="M:metadatalibrary.CreateTreeClass.Fill(System.Windows.Forms.TreeView)">
            <summary>
            Displays the tree filling the tree node gerarchy
            </summary>
            <param name="tree"></param>
        </member>
        <member name="T:metadatalibrary.DataAccess">
            <summary>
            Information about connection
            </summary>
            <remarks>
            This class exists for historical reasons. 
            Actually it only stores some data about the work session. It is an
             envelope for future addition to user-session information.
            </remarks>
        </member>
        <member name="M:metadatalibrary.DataAccess.InitializeLifetimeService">
            <summary>
            Unused
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetSys(System.String)">
            <summary>
            Get a system environment variable
            </summary>
            <param name="name">variable name</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.SetSys(System.String,System.String)">
            <summary>
            Set a system environment variable
            </summary>
            <param name="name">variable name</param>
            <param name="O">value to set</param>
        </member>
        <member name="M:metadatalibrary.DataAccess.SetSys(System.String,System.Object)">
            <summary>
            Set a system environment variable
            </summary>
            <param name="name">variable name</param>
            <param name="O">value to set</param>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetUsr(System.String)">
            <summary>
            Get a user environment variable
            </summary>
            <param name="name">variable name</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.SetUsr(System.String,System.Object)">
            <summary>
            Set a user environment variable
            </summary>
            <param name="name">variable name</param>
            <param name="O">value to set</param>
        </member>
        <member name="M:metadatalibrary.DataAccess.SetUsr(System.String,System.String)">
            <summary>
            Set a user environment variable
            </summary>
            <param name="name">variable name</param>
            <param name="O">value to set</param>
        </member>
        <member name="P:metadatalibrary.DataAccess.Security">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.DataAccess.Dispose">
            <summary>
            Public implementation of Dispose pattern callable by consumers.
            </summary>
        </member>
        <member name="M:metadatalibrary.DataAccess.Dispose(System.Boolean)">
            <summary>
             Protected implementation of Dispose pattern.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="F:metadatalibrary.DataAccess.QHS">
            <summary>
            Query helper for DB query
            </summary>
        </member>
        <member name="F:metadatalibrary.DataAccess.QHC">
            <summary>
            Query helper for dataset query
            </summary>
        </member>
        <member name="M:metadatalibrary.DataAccess.setTransactionConnection(System.Data.SqlClient.SqlConnection)">
            <summary>
            Set a connection as the currently connected to a transaction
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.clearTransactionConnection">
            <summary>
            Clears the current connection transaction
            </summary>
        </member>
        <member name="M:metadatalibrary.DataAccess.startPosting(metadatalibrary.IDataAccess)">
            <summary>
            Start a "post" process, this doesnt mean to be called by applications
            </summary>
            <param name="mainConn"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.stopPosting">
            <summary>
            Ends a "post" process , this doesnt mean to be called by applications
            </summary>
        </member>
        <member name="P:metadatalibrary.DataAccess.MySqlConnection">
            <summary>
            Sql connection used for physical connection. Should not be
             used from external classes
            </summary>
        </member>
        <member name="F:metadatalibrary.DataAccess.Mypersisting">
            <summary>
            When true (default), connection is opened at first and closed at end of program
            When false, connection is opened/closed at every db access
            </summary>
        </member>
        <member name="F:metadatalibrary.DataAccess.ManagedByDB">
            <summary>
             True if all listtype and db properties are contained in system tables
            </summary>
        </member>
        <member name="M:metadatalibrary.DataAccess.SureClosing">
            <summary>
            Closes the connection without throwing exceptions
            </summary>
        </member>
        <member name="P:metadatalibrary.DataAccess.persisting">
            <summary>
            Return true if Connection is using Persisting connections mode, i.e.
             it is open at the beginning aand closed at the end
            </summary>
        </member>
        <member name="P:metadatalibrary.DataAccess.sqlConnection">
            <summary>
            
            </summary>
        </member>
        <member name="F:metadatalibrary.DataAccess.PrepareEnabled">
            <summary>
            When true (default) preparing of command is enabled
            </summary>
        </member>
        <member name="F:metadatalibrary.DataAccess.LocalToDB">
            <summary>
            True When runned locally. False if is used in a remote client
            </summary>
        </member>
        <member name="F:metadatalibrary.DataAccess.IsLocal">
            <summary>
            Normally true, false if operating in 3-tier mode (obsolete)
            </summary>
        </member>
        <member name="F:metadatalibrary.DataAccess.external_user">
            <summary>
            Name of the customer login, not the user used to connect to operate on the database
            </summary>
        </member>
        <member name="P:metadatalibrary.DataAccess.LastError">
            <summary>
            Returns last error and resets it.
            </summary>
        </member>
        <member name="M:metadatalibrary.DataAccess.SecureGetLastError">
            <summary>
            Get last error without clearing it
            </summary>
            <returns></returns>
        </member>
        <member name="F:metadatalibrary.DataAccess.PreparedCommands">
            <summary>
            Prepared SQL commands. Key is the SqlCommandText
            </summary>
        </member>
        <member name="F:metadatalibrary.DataAccess.DBstructures">
            <summary>
            the dbstructure dataset  - one dataset for each objectname
            </summary>
        </member>
        <member name="F:metadatalibrary.DataAccess.SSPI">
            <summary>
            True if SSPI is used, False if SQL security is used
            </summary>
        </member>
        <member name="F:metadatalibrary.DataAccess.OpenError">
            <summary>
            True if opening problems encountered 
            </summary>
        </member>
        <member name="M:metadatalibrary.DataAccess.CanSelect(System.Data.DataRow)">
            <summary>
            Check if a row can appear in a list
            </summary>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetEsercizio">
            <summary>
            Gets accounting year
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetDataContabile">
            <summary>
            Gets logging date
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.get_OpenError">
            <summary>
            Gets last error occurred
            </summary>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.DataAccess.openError">
            <summary>
            True if opening problems encountered  
            </summary>
        </member>
        <member name="F:metadatalibrary.DataAccess.ConnectionHasBeenClosedBySystem">
            <summary>
            True if connection was establisched, then system errors has broken it
            </summary>
        </member>
        <member name="F:metadatalibrary.DataAccess.MultiDB">
            <summary>
            True if Multi DB connection is to be used
            </summary>
        </member>
        <member name="F:metadatalibrary.DataAccess.UseCustomObject">
            <summary>
            If true, customobject and column types are used to describe table structure, 
             when false, those are always obtained from DB
            </summary>
        </member>
        <member name="M:metadatalibrary.DataAccess.CryptString(System.String)">
            <summary>
            Crypts a string with 3-des
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.DecryptString(System.Byte[])">
            <summary>
            Decrypts a string with 3-des
            </summary>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.CryptBytes(System.Byte[])">
            <summary>
            Crypts an array of bytes  with 3-des
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.DecryptBytes(System.Byte[])">
            <summary>
            Decryps an array of bytes   with 3-des
            </summary>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetHashFromString(System.String)">
            <summary>
            Convert a string like a='2';b=#3#;c='12'.. into a string hashtable
            </summary>
            <param name="S1"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetStringFromHashTable(System.Collections.Hashtable)">
            <summary>
            Convert an hashtable into a string like a='2';b=#3#;c='12'.. 
            </summary>
            <param name="H"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.createDataAccess(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            Creates a DataAccess
            </summary>
            <param name="MainConnection"></param>
            <param name="DSN"></param>
            <param name="Server"></param>
            <param name="Database"></param>
            <param name="UserDB"></param>
            <param name="PasswordDB"></param>
            <param name="User"></param>
            <param name="Password"></param>
            <param name="esercizio_sessione"></param>
            <param name="DataContabile"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.CreateDataAccess(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            Constructor of DataAccess
            </summary>
            <param name="MainConnection"></param>
            <param name="DSN">Simbolic name for the connection</param>
            <param name="Server">Server name or Server address</param>
            <param name="Database">DataBase name, eventually with port</param>
            <param name="UserDB"></param>
            <param name="PasswordDB"></param>
            <param name="User"></param>
            <param name="Password"></param>
            <param name="esercizio_sessione"></param>
            <param name="DataContabile"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.ServerVersion">
            <summary>
            Get Sql Server Version
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetOSVersion">
            <summary>
            Gets OS Version
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            Constructor for WEB 
            </summary>
            <param name="DSN">Simbolic name for the connection</param>
            <param name="Server">Server name or Server address</param>
            <param name="Database">DataBase name, eventually with port</param>
            <param name="UserDB"></param>
            <param name="PasswordDB"></param>
            <param name="User"></param>
            <param name="Password"></param>
            <param name="esercizio_sessione"></param>
            <param name="DataContabile"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.#ctor(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            protected constructor
            </summary>
            <param name="MainConn"></param>
            <param name="DSN">Simbolic name for the connection</param>
            <param name="Server">Server name or Server address</param>
            <param name="Database">DataBase name, eventually with port</param>
            <param name="UserDB"></param>
            <param name="PasswordDB"></param>
            <param name="User"></param>
            <param name="Password"></param>
            <param name="esercizio_sessione"></param>
            <param name="DataContabile"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.createDataAccess(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            Creates a DataAccess
            </summary>
            <param name="MainConnection"></param>
            <param name="DSN"></param>
            <param name="Server"></param>
            <param name="Database"></param>
            <param name="User"></param>
            <param name="Password"></param>
            <param name="esercizio_sessione"></param>
            <param name="DataContabile"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.CreateDataAccess(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            protected constructor
            </summary>
            <param name="MainConnection"></param>
            <param name="DSN">Simbolic name for the connection</param>
            <param name="Server">Server name or Server address</param>
            <param name="Database">DataBase name, eventually with port</param>
            <param name="User"></param>
            <param name="Password"></param>
            <param name="esercizio_sessione"></param>
            <param name="DataContabile"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.createSecurity">
            <summary>
            Called when a security class is needed
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            Constructuctor for SQL Based Security  
            </summary>
            <param name="DSN">Simbolic name for the connection</param>
            <param name="Server">Server name or Server address</param>
            <param name="Database">DataBase name, eventually with port</param>
            <param name="User"></param>
            <param name="Password"></param>
            <param name="esercizio_sessione"></param>
            <param name="DataContabile"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.#ctor(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            Constructuctor for SQL Based Security  that accept a MainConnection parameter
            </summary>
            <param name="MainConn">True for Main connection, false for temporary connections</param>
            <param name="DSN">Simbolic name for the connection</param>
            <param name="Server">Server name or Server address</param>
            <param name="Database">DataBase name, eventually with port</param>
            <param name="User"></param>
            <param name="Password"></param>
            <param name="esercizio_sessione"></param>
            <param name="DataContabile"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.CreateDataAccess(System.Boolean,System.String,System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            Create a DataAccess using SSPI Integrated Security
            </summary>
            <param name="MainConnection">It's true for the main connection of the application, false for Connection used in threads</param>
            <param name="DSN">Simbolic name for the connection</param>
            <param name="Server">Server name or Server address</param>
            <param name="Database">DataBase name, eventually with port</param>
            <param name="esercizio_sessione"></param>
            <param name="DataContabile"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.#ctor(System.String,System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            Constructor for Windows Based Security, the connection is marked as primary
            </summary>
            <param name="DSN">Simbolic name for the connection</param>
            <param name="Server">Server name or Server address</param>
            <param name="Database">DataBase name, eventually with port</param>
            <param name="esercizio_sessione"></param>
            <param name="DataContabile"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.#ctor(System.Boolean,System.String,System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            
            </summary>
            <param name="MainConn">true for the main connection of the application, false for Connection used in threads</param>
            <param name="DSN">Simbolic name for the connection</param>
            <param name="Server">Server name or Server address</param>
            <param name="Database">DataBase name, eventually with port</param>
            <param name="esercizio_sessione"></param>
            <param name="DataContabile"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.Reset">
            <summary>
            Forces read of all tables info structure again
            </summary>
        </member>
        <member name="M:metadatalibrary.DataAccess.Reset(System.Boolean)">
            <summary>
            Forces read of all tables info structure again
            </summary>
            <param name="clearDbStructure"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.TableIsCentralized(System.String)">
            <summary>
            When true, access to the table are prefixed with DBO.  
            </summary>
            <param name="tablename"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.ProcedureIsCentralized(System.String)">
            <summary>
            When true, access to the table are prefixed with DBO. 
            </summary>
            <param name="procname"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.ChangeDataBase(System.String)">
            <summary>
            Use another database with this connection
            </summary>
            <param name="DBName"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.SetLastRead">
            <summary>
            Updates last read access stamp to db 
            </summary>
        </member>
        <member name="M:metadatalibrary.DataAccess.SetLastWrite">
            <summary>
            Updates last write access stamp to db 
            </summary>
        </member>
        <member name="M:metadatalibrary.DataAccess.Duplicate">
            <summary>
            Crea un duplicato di un DataAccess, con una nuova connessione allo stesso DB. 
            Utile se la connessione deve essere usata in un nuovo thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.Destroy">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:metadatalibrary.DataAccess.openAsync">
            <summary>
            Opens connection asyncronously
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.Open">
            <summary>
            Open the connection (or increment nesting if already open)
            </summary>
            <returns> true when successfull </returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.Close">
            <summary>
            Close the connection
            </summary>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetEntireStructure(System.String)">
            <summary>
            Reads all data from MetaData-System Tables into a new DBstructure
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.IsToRead(metadatalibrary.dbstructure,System.String)">
            <summary>
            When false table is not cached in the initialization for a given table
            </summary>
            <param name="DBS"></param>
            <param name="tablename"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetStructureNoCustomAsync(System.String)">
            <summary>
            Get structure of a table without reading columntypes
            </summary>
            <param name="objectname"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetStructureNoCustom(System.String)">
            <summary>
            Get structure of a table without reading columntypes
            </summary>
            <param name="objectname"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.preScanStructures(System.String[])">
            <summary>
            Reads table structure of a list of tables
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetStructure(System.String)">
            <summary>
            Gets DB structure related to table objectname. The dbstructure returned
             is the same used for sys operations (it is not a copy of it)
            </summary>
            <param name="objectname"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetStructureAsync(System.String)">
            <summary>
            Gets DB structure related to table objectname. The dbstructure returned
             is the same used for sys operations (it is not a copy of it)
            </summary>
            <param name="objectname"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.PrefillStructures(System.Data.DataSet,System.String)">
            <summary>
            Read a bunch of table structures, all those present in the DataSet
            </summary>
            <param name="D"></param>
            <param name="primarytable"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.SaveStructure(metadatalibrary.dbstructure)">
            <summary>
            Saves a table structure to DB (customobject, columntypes..)
            </summary>
            <param name="DBS"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.SaveStructure">
            <summary>
            Saves all changes made to all dbstructures
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.AutoDetectTable(metadatalibrary.dbstructure,System.String,System.Boolean)">
            <summary>
            Evaluate columntypes and customobject analizing db table properties
            </summary>
            <param name="DBS"></param>
            <param name="objectname"></param>
            <param name="forcerefresh">if false, only new tables are scanned</param>
        </member>
        <member name="M:metadatalibrary.DataAccess.GenerateCustomObjects">
            <summary>
            Gets all custom objects and columntypes info from db
            </summary>
        </member>
        <member name="M:metadatalibrary.DataAccess.RefreshStructure(System.String)">
            <summary>
            Forces ColumnTypes to be read again from DB for tablename
            </summary>
            <param name="tablename"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetViewStructureExtProperties(System.Data.DataTable)">
            <summary>
            Reads extended informations for a table related to a view,
             in order to use it for posting. Reads data from viewcolumn.
             Sets table and columnfor posting and also 
             sets ViewExpression as tablename.columnname (for each field)
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetViewStructureExtPropertiesAsync(System.Data.DataTable)">
            <summary>
            Reads extended informations for a table related to a view,
             in order to use it for posting. Reads data from viewcolumn.
             Sets table and columnfor posting and also 
             sets ViewExpression as tablename.columnname (for each field)
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.CreateTableByName(metadatalibrary.DataAccess,System.String,System.String)">
            <summary>
            Creates a DataTable given it's db name
            </summary>
            <param name="Conn"></param>
            <param name="tablename"></param>
            <param name="columnlist">list of columns to include in the table</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.CreateTableByName(System.String,System.String)">
            <summary>
             Creates a DataTable given it's db name
            </summary>
            <param name="tablename"></param>
            <param name="columnlist"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.createTableByNameAsync(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new table basing on columntypes info. Adds also primary key 
             information to the table, and allownull to each field.
             Columnlist must include primary table, or can be "*"
            </summary>
            <param name="tablename">name of table to create. Can be in the form DBO.tablename or department.tablename</param>
            <param name="columnlist"></param>
            <param name="addextprop">Add db information as extended propery of columns (column length, precision...)</param>
            <returns>a table with same types as DB table</returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.CreateTableByName(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new table basing on columntypes info. Adds also primary key 
             information to the table, and allownull to each field.
             Columnlist must include primary table, or can be "*"
            </summary>
            <param name="tablename">name of table to create. Can be in the form DBO.tablename or department.tablename</param>
            <param name="columnlist"></param>
            <param name="addextprop">Add db information as extended propery of columns (column length, precision...)</param>
            <returns>a table with same types as DB table</returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.AddExtendedPropertyAsync(System.Data.DataTable)">
            <summary>
            Adds all extended information to table T reading it from columntypes.
            Every Row of columntypes is assigned to the corresponding extended 
             properties of a DataColumn of T. Each Column of the Row is assigned
             to an extended property with the same name of the Column
             Es. R["a"] is assigned to Col.ExtendedProperty["a"]
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.AddExtendedProperty(System.Data.DataTable)">
            <summary>
            Adds all extended information to table T reading it from columntypes.
            Every Row of columntypes is assigned to the corresponding extended 
             properties of a DataColumn of T. Each Column of the Row is assigned
             to an extended property with the same name of the Column
             Es. R["a"] is assigned to Col.ExtendedProperty["a"]
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.AddExtendedProperty(metadatalibrary.DataAccess,System.Data.DataTable)">
            <summary>
            Adds all extended information to table T reading it from columntypes.
            Every Row of columntypes is assigned to the corresponding extended 
             properties of a DataColumn of T. Each Column of the Row is assigned
             to an extended property with the same name of the Column
             Es. R["a"] is assigned to Col.ExtendedProperty["a"]
            </summary>
            <param name="Conn"></param>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.addExtendedProperty(metadatalibrary.IDataAccess,System.Data.DataTable)">
            <summary>
            Adds extended properties on the columns of a table
            </summary>
            <param name="Conn"></param>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.PrimaryTableOf(metadatalibrary.dbstructure)">
            <summary>
            Returns the primary table of a given DBstructure. It is the objectname of
             the only row contained in DBS.customobject
            </summary>
            <param name="DBS"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetPreparedCommand(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a prepared version of cmd, retrieving it from cache if it
             has already been prepared.
            </summary>
        </member>
        <member name="M:metadatalibrary.DataAccess.CompileConditionInParenthesis(System.Data.SqlClient.SqlCommand@,System.String,System.Int32,System.Int32,System.Int32@,System.String@,System.Int32@,System.Data.DataTable)">
            <summary>
            Does not Assumes Open parenthesis read
            </summary>
            <param name="Cmd"></param>
            <param name="filter"></param>
            <param name="len"></param>
            <param name="nesting"></param>
            <param name="pos">index of first character to be read</param>
            <param name="compiled"></param>
            <param name="paramsfound"></param>
            <param name="ColumnTypes"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.AddWhereClauses(System.Data.SqlClient.SqlCommand@,System.String,System.String)">
            <summary>
            Adds where clauses to Cmd, using variables to store constants found in
             filter. DateTime values should be like {ts "yyyy:mm:dd hh:mm:ss:mmmm"}
            </summary>
            <param name="Cmd"></param>
            <param name="filter"></param>
            <param name="tablename"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.ResetListType(System.String,System.String)">
            <summary>
            Empty table structure information about a listing type of a table
            </summary>
            <param name="tablename"></param>
            <param name="listtype"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.ResetAllListType(System.String,System.String)">
            <summary>
            Empty table structure information about any listing type of a table
            </summary>
            <param name="tablename"></param>
            <param name="listtype"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetListType(metadatalibrary.dbstructure@,System.String,System.String)">
            <summary>
            Gets a DBS to describe columns of a list. returns also target-list type, that
             can be different from input parameter listtype. Reads from customview,
              customviewcolumn, customorderby, customviewwhere and from customredirect
             Target-Table can be determined as DBS.customobject.rows[0]
            </summary>
            <param name="DBS"></param>
            <param name="tablename"></param>
            <param name="listtype"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetFormInfo(System.String,System.String)">
            <summary>
            Get information about an edit type. Reads from customedit 
            </summary>
            <param name="objectname"></param>
            <param name="edittype"></param>
            <returns>CustomEdit DataRow about an edit-type</returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetFieldSystemTypeName(metadatalibrary.dbstructure,System.String)">
            <summary>
            Gets the system type name of a field named fieldname
            </summary>
            <param name="DBS"></param>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetFieldSystemType(metadatalibrary.dbstructure,System.String)">
            <summary>
            Gets the corresponding system type of a db column named fieldname
            </summary>
            <param name="DBS"></param>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.MarkException(System.String,System.Exception)">
            <summary>
            Marks an Exception and set Last Error
            </summary>
            <param name="main">Main description</param>
            <param name="E"></param>
        </member>
        <member name="P:metadatalibrary.DataAccess.errorLogger">
            <summary>
            Class for logging errors
            </summary>
        </member>
        <member name="M:metadatalibrary.DataAccess.CurrTransaction">
            <summary>
            Gets Current used Transaction
            </summary>
            <returns>null if no transaction is open</returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a new transaction 
            </summary>
            <param name="L"></param>
            <returns>error message, or null if OK</returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.Commit">
            <summary>
            Commit the transaction
            </summary>
            <returns>error message, or null if OK</returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.RollBack">
            <summary>
            Rollbacks transaction
            </summary>
            <returns>Error message, or null if OK</returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.validTransaction">
            <summary>
            True if current transaction  is still alive, i.e. has a connection attached to it
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetCentralizedTableName(System.String)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.readObject(System.String,System.String)">
            <summary>
              Read a set of fields from a table  and return a dictionary fieldName -&gt; value assuming that
               the table contains only one row
            </summary>
            <param name="table"></param>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.readObject(System.String,metadatalibrary.MetaExpression,System.String)">
            <summary>
             Read a set of fields from a table  and return a dictionary fieldName -&gt; value
            </summary>
            <param name="table"></param>
            <param name="filter"></param>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.readObject(System.String,System.String,System.String)">
            <summary>
            Read a set of fields from a table  and return a dictionary fieldName -&gt; value
            </summary>
            <param name="table"></param>
            <param name="condition"></param>
            <param name="expr">list of fields to read</param>
            <returns>An object dictionary</returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.readValue(System.String,metadatalibrary.MetaExpression,System.String,System.String)">
            <summary>
            Returns a single value executing a SELECT expr FROM table WHERE condition. If no row is found, NULL is returned 
            </summary>
            <param name="table"></param>
            <param name="filter"></param>
            <param name="expr"></param>
            <param name="orderby"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.DO_READ_VALUE(System.String,System.String,System.String,System.String)">
            <summary>
            Returns a single value executing a SELECT expr FROM table WHERE condition. If no row is found, NULL is returned 
            </summary>
            <param name="table"></param>
            <param name="condition"></param>
            <param name="expr"></param>
            <param name="orderby"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.DO_READ_VALUE(System.String,System.String,System.String)">
            <summary>
            Returns a value executing a SELECT expr FROM table WHERE condition. If no row is found, NULL is returned 
            </summary>
            <param name="table"></param>
            <param name="condition"></param>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.DO_SYS_CMD(System.String)">
            <summary>
            Returns a value executing a generic sql command 
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.DO_SYS_CMD(System.String,System.String@)">
            <summary>
            Returns a value executing a generic sql command 
            </summary>
            <param name="cmd"></param>
            <param name="ErrMsg">eventual error message</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.DO_SYS_CMD_LASTRESULT(System.String,System.String@)">
            <summary>
            Reads all value from a generic sql command and returns the last value read
            </summary>
            <param name="cmd"></param>
            <param name="ErrMsg"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.DO_SYS_CMD(System.String,System.Boolean)">
            <summary>
            Runs a sql command that returns a single value
            </summary>
            <param name="cmd">command to run</param>
            <param name="silent">when false a message box appears on errors</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.DO_SYS_CMD(metadatalibrary.DataAccess,System.String,System.Boolean)">
            <summary>
            Runs a sql command that returns a single value
            </summary>
            <param name="Conn"></param>
            <param name="cmd">command to run</param>
            <param name="silent">when false a message box appears on errors</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.SQLRunner(metadatalibrary.DataAccess,System.String)">
            <summary>
            Runs a sql command that returns a DataTable
            </summary>
            <param name="Conn"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.SQLRunner(System.String)">
            <summary>
            Runs a sql command that returns a DataTable
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.SQLRunner(metadatalibrary.DataAccess,System.String,System.Boolean)">
            <summary>
            Runs a sql command that returns a DataTable
            </summary>
            <param name="Conn"></param>
            <param name="command"></param>
            <param name="silent">when false a message box appears on errors</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.SQLRunner(System.String,System.Boolean)">
            <summary>
            Runs a sql command that returns a DataTable
            </summary>
            <param name="command"></param>
            <param name="silent">when false a message box appears on errors</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.readObjectArray(System.String,System.Int32,System.String@)">
            <summary>
            Get a list of "objects" from a table using  a specified query, every object is encapsulated in a dictionary
            </summary>
            <param name="query">sql command to run</param>
            <param name="timeout"></param>
            <param name="ErrMsg"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.SQLRunner(System.String,System.Int32,System.String@)">
            <summary>
            Runs a sql command that return a DataTable
            </summary>
            <param name="command"></param>
            <param name="timeout">Timeout in seconds, 0 means no timeout, -1 means default timeout</param>
            <param name="ErrMsg">Error message or null when no errors</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.SQLRunner(System.String,System.Boolean,System.Int32)">
            <summary>
            Executes a generic SQL command that returns a Table
            </summary>
            <param name="command"></param>
            <param name="silent">set true non visualizza messaggi di errore</param>
            <param name="timeout">Timeout in secondi</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.SQLRunner(metadatalibrary.DataAccess,System.String,System.Boolean,System.Int32)">
            <summary>
             Executes a generic SQL command that returns a Table
            </summary>
            <param name="Conn"></param>
            <param name="command"></param>
            <param name="silent">set true non visualizza messaggi di errore</param>
            <param name="timeout">Timeout in secondi</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetDeleteCommand(System.String,System.String)">
            <summary>
            Builds a sql DELETE command 
            </summary>
            <param name="table">table implied</param>
            <param name="condition">condition for the deletion</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.DO_DELETE(System.String,System.String)">
            <summary>
            Executes a delete command using current transaction
            </summary>
            <param name="table"></param>
            <param name="condition"></param>
            <returns>Error message or null if OK</returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.getInsertCommand(System.String,System.String[],System.String[],System.Int32)">
            <summary>
            Builds a sql INSERT command
            </summary>
            <param name="table"></param>
            <param name="columns">column names</param>
            <param name="values">values to insert</param>
            <param name="len">number of columns</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.DO_INSERT(System.String,System.String[],System.String[],System.Int32)">
            <summary>
            Executes an INSERT command using current tranactin
            </summary>
            <param name="table"></param>
            <param name="columns">column names</param>
            <param name="values">values to insert</param>
            <param name="len">number of columns</param>
            <returns>Error message or null if OK</returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.getUpdateCommand(System.String,System.String,System.String[],System.String[],System.Int32)">
            <summary>
            Builds an UPDATE sql command
            </summary>
            <param name="table"></param>
            <param name="condition"></param>
            <param name="columns">column names</param>
            <param name="values">values to be set</param>
            <param name="ncol">number of columns to update</param>
            <returns>Error msg or null if OK</returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.DO_UPDATE(System.String,System.String,System.String[],System.String[],System.Int32)">
            <summary>
            Executes an UPDATE command
            </summary>
            <param name="table"></param>
            <param name="condition">where condition to apply</param>
            <param name="columns">Name of columns to update</param>
            <param name="values">Values to set</param>
            <param name="ncol">N. of columns</param>
            <returns>Error msg or null if OK</returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.CallSP(System.String,System.Object[])">
            <summary>
            Calls a stored procedure with specified parameters
            </summary>
            <param name="procname">stored proc. name</param>
            <param name="list">Parameter list</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.CallSP(System.String,System.Object[],System.Boolean)">
            <summary>
            Calls a stored procedure with specified parameters
            </summary>
            <param name="procname">stored proc. name</param>
            <param name="list">Parameter list</param>
            <param name="silent">when false a message box appears on errors</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.CallSP(metadatalibrary.DataAccess,System.String,System.Object[],System.Boolean,System.Int32)">
            <summary>
            Calls a stored procedure with specified parameters
            </summary>
            <param name="Conn"></param>
            <param name="procname">stored proc. name</param>
            <param name="list">Parameter list</param>
            <param name="silent">when false a message box appears on errors</param>
            <param name="timeout">Timeout in seconds, 0 means no timeout, -1 means default timeout</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.sqlRunnerintoDataSet(System.Data.DataSet,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="sql"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.sqlRunnerDataSet(System.String,System.Int32,System.String@)">
            <summary>
            Execute a sql cmd that returns a dataset (eventually with more than one table in it)
            </summary>
            <param name="sql">sql command to run</param>
            <param name="timeout">Timeout in seconds, 0 means no timeout, -1 means default timeout</param>
            <param name="ErrMess">null if ok, Error message otherwise</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.CallSP(System.String,System.Object[],System.Int32,System.String@)">
            <summary>
            Calls a stored procedure with specified parameters
            </summary>
            <param name="procname">stored proc. name</param>
            <param name="list">Parameter list</param>
            <param name="timeout">Timeout in seconds, 0 means no timeout, -1 means default timeout</param>
            <param name="ErrMess">null if ok, Error message otherwise</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.CallSP(System.String,System.Object[],System.Boolean,System.Int32)">
            <summary>
            Calls a stored procedure and reads output in a DataSet. First table can be retrieved in result.Tables[0]
            </summary>
            <param name="procname">name of stored procedure to call</param>
            <param name="list">parameters to give to the stored procedure</param>
            <param name="silent">when false a message box appears on errors</param>
            <param name="timeout">Timeout in seconds, 0 means no timeout, -1 means default timeout</param>
            <returns>null on errors, in which case also LastError is set</returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.CallSPParameter(System.String,System.String[],System.Data.SqlDbType[],System.Int32[],System.Data.ParameterDirection[],System.Object[]@,System.Int32,System.String@)">
            <summary>
            Calls a stored procedure, return true if ok
            </summary>
            <param name="sp_name">name of stored procedure to call</param>
            <param name="ParamName">parameter names to give to the stored procedure</param>
            <param name="ParamType">parameter types to give to the stored procedure</param>
            <param name="ParamTypeLength">Length of parameters</param>
            <param name="ParamDirection">Type of parameters</param>
            <param name="ParamValues">Value for parameters</param>
            <param name="timeout">Timeout in seconds, 0 means no timeout, -1 means default timeout</param>
            <param name="ErrMsg">null if ok, Error message otherwise</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.CallSPParameterDataSet(System.String,System.String[],System.Data.SqlDbType[],System.Int32[],System.Data.ParameterDirection[],System.Object[]@,System.Int32,System.String@)">
            <summary>
            Calls a stored procedure and returns a DataSet. First table can be retrieved in result.Tables[0]
            </summary>
            <param name="sp_name">name of stored procedure to call</param>
            <param name="ParamName">parameter names to give to the stored procedure</param>
            <param name="ParamType">parameter types to give to the stored procedure</param>
            <param name="ParamTypeLength">Length of parameters</param>
            <param name="ParamDirection">Type of parameters</param>
            <param name="ParamValues">Value for parameters</param>
            <param name="timeout">Timeout in seconds, 0 means no timeout, -1 means default timeout</param>
            <param name="ErrMsg">null if ok, Error message otherwise</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.CallSPParameter(System.String,System.String[],System.Data.SqlDbType[],System.Int32[],System.Data.ParameterDirection[],System.Object[]@,System.Boolean,System.Int32)">
            <summary>
            Calls a stored procedure and returns a DataSet.  return true if ok
            </summary>
            <param name="sp_name">name of stored procedure to call</param>
            <param name="ParamName">parameter names to give to the stored procedure</param>
            <param name="ParamType">parameter types to give to the stored procedure</param>
            <param name="ParamTypeLength">Length of parameters</param>
            <param name="ParamDirection">Type of parameters</param>
            <param name="ParamValues">Value for parameters</param>
            <param name="silent">when false a message box appears on errors</param>
            <param name="timeout">Timeout in seconds, 0 means no timeout, -1 means default timeout</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.CallSPParameter(metadatalibrary.DataAccess,System.String,System.String[],System.Data.SqlDbType[],System.Int32[],System.Data.ParameterDirection[],System.Object[]@,System.Boolean,System.Int32)">
            <summary>
            Calls a stored procedure and returns a DataSet.  return true if ok
            </summary>
            <param name="Conn"></param>
            <param name="sp_name">name of stored procedure to call</param>
            <param name="ParamName">parameter names to give to the stored procedure</param>
            <param name="ParamType">parameter types to give to the stored procedure</param>
            <param name="ParamTypeLength">Length of parameters</param>
            <param name="ParamDirection">Type of parameters</param>
            <param name="ParamValues">Value for parameters</param>
            <param name="silent">when false a message box appears on errors</param>
            <param name="timeout">Timeout in seconds, 0 means no timeout, -1 means default timeout</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.SetTableForReading(System.Data.DataTable,System.String)">
            <summary>
            Set the table from which T will be read. I.e. T is a virtual ALIAS for tablename.
            </summary>
            <param name="T">Table to set as Alias</param>
            <param name="tablename">Real table name</param>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetTableForReading(System.Data.DataTable)">
            <summary>
            Gets the "unaliased" name of T, i.e. the table to use for reading into T
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.SimplifiedTableClone(System.Data.DataTable,System.Boolean)">
            <summary>
            Only copy columns without any costraints, key or other ilarious things
            </summary>
            <param name="T"></param>
            <param name="copykey">if true primary key is copied</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.SingleTableClone(System.Data.DataTable,System.Boolean)">
            <summary>
            Returns the copy of a single DataTable. This is quicker than .Clone(), especially if copyProperties is false
            DataTable properties are always copyed.
            </summary>
            <param name="T"></param>
            <param name="copyProperties">true if ext.properties should be copyed</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.SelectCondition(System.String,System.Boolean)">
            <summary>
            Get the condition the rows in a list must satisfy
            </summary>
            <param name="tablename"></param>
            <param name="SQL"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.RUN_SELECT_INTO_TABLE(metadatalibrary.DataAccess,System.Data.DataTable,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Reads data into an existing table
            </summary>
            <param name="conn"></param>
            <param name="T">Table into which data will be read</param>
            <param name="sortBy">sorting for db reading</param>
            <param name="filter">condition to apply</param>
            <param name="top"></param>
            <param name="prepare">leave this to false</param>
        </member>
        <member name="M:metadatalibrary.DataAccess.RUN_SELECT_INTO_TABLE(System.Data.DataTable,metadatalibrary.MetaExpression,System.String,System.String)">
            <summary>
            Reads data into a given table, skipping temporary columns
            </summary>
            <param name="T"></param>
            <param name="filter"></param>
            <param name="sort_by"></param>
            <param name="TOP"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.RUN_SELECT_INTO_TABLE(System.Data.DataTable,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Reads data into a given table, skipping temporary columns
            </summary>
            <param name="T"></param>
            <param name="sortBy">sorting for db reading</param>
            <param name="filter">condition to apply</param>
            <param name="top"></param>
            <param name="prepare"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.SQLRUN_INTO_TABLE(System.Data.DataTable,System.String)">
            <summary>
            Reads data into a given table, skipping temporary columns
            </summary>
            <param name="T"></param>
            <param name="sql">sorting for db reading</param>
        </member>
        <member name="M:metadatalibrary.DataAccess.RUN_SELECT(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Reads data into a table. The table is created at run-time using information
             stored in columntypes
            </summary>
            <param name="tablename"></param>
            <param name="columnlist">list of field names separated by commas</param>
            <param name="order_by">list of field names separated by commas</param>
            <param name="filter">condition to apply</param>
            <param name="TOP">how many rows to get</param>
            <param name="prepare">if true the command is prepared before being runned</param>
            <returns>DataTable read</returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.RUN_SELECT(metadatalibrary.DataAccess,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Reads data from db and return a DataTable
            </summary>
            <param name="Conn"></param>
            <param name="tablename"></param>
            <param name="columnlist"></param>
            <param name="order_by"></param>
            <param name="filter"></param>
            <param name="TOP"></param>
            <param name="group_by"></param>
            <param name="prepare"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.RUN_SELECT(metadatalibrary.DataAccess,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Reads data from db and return a DataTable 
            </summary>
            <param name="Conn"></param>
            <param name="tablename"></param>
            <param name="columnlist"></param>
            <param name="order_by"></param>
            <param name="filter"></param>
            <param name="TOP"></param>
            <param name="prepare"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.RUN_SELECT(metadatalibrary.DataAccess,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Reads data from db and return a DataTable
            </summary>
            <param name="Conn"></param>
            <param name="tablename"></param>
            <param name="columnlist"></param>
            <param name="order_by"></param>
            <param name="filter"></param>
            <param name="prepare"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.MAIN_RUN_SELECT(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Reads data from db and return a dataset serialized to a byte array
            </summary>
            <param name="tablename"></param>
            <param name="columnlist"></param>
            <param name="order_by"></param>
            <param name="filter"></param>
            <param name="TOP"></param>
            <param name="group_by"></param>
            <param name="prepare"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.readTable(System.String,metadatalibrary.MetaExpression,System.String,System.String,System.String)">
            <summary>
            Reads data into a table. The table is created at run-time using information
             stored in columntypes
            </summary>
            <param name="tablename"></param>
            <param name="filter"></param>
            <param name="columnlist"></param>
            <param name="order_by"></param>
            <param name="TOP"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.RUN_SELECT(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Reads data into a table. The table is created at run-time using information
             stored in columntypes
            </summary>
            <param name="tablename"></param>
            <param name="columnlist">list of field names separated by commas</param>
            <param name="order_by">list of field names separated by commas</param>
            <param name="filter">condition to apply</param>
            <param name="TOP">how many rows to get</param>
            <param name="group_by">list of field names separated by commas</param>
            <param name="prepare">if true the command is prepared before being runned</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.RUN_SELECT_2ndVer(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Reads data into a table. The table is created at run-time using information
             stored in columntypes
            </summary>
            <param name="tablename"></param>
            <param name="columnlist">list of field names separated by commas</param>
            <param name="order_by">list of field names separated by commas</param>
            <param name="filter">condition to apply</param>
            <param name="TOP">how many rows to get</param>
            <param name="group_by">list of field names separated by commas</param>
            <param name="prepare">if true the command is prepared before being runned</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.readSimpleDictionary``2(System.String,metadatalibrary.MetaExpression,System.String,System.String)">
            <summary>
            Creates a dictionary from a query on a table
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="S"></typeparam>
            <param name="tablename"></param>
            <param name="keyField"></param>
            <param name="valueField"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.readSimpleDictionary``2(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a dictionary from a query on a table
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="S"></typeparam>
            <param name="tablename"></param>
            <param name="keyField">key field of dictionary</param>
            <param name="valueField">value field of dictionary</param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.readRowObjectDictionary``1(System.String,metadatalibrary.MetaExpression,System.String,System.String)">
            <summary>
            Creates a dictionary key => rowObject from a query on a table
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tablename"></param>
            <param name="keyField"></param>
            <param name="fieldList"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.readRowObjectDictionary``1(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a dictionary key => rowObject from a query on a table
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tablename"></param>
            <param name="keyField">key field of dictionary</param>
            <param name="fieldList">list value to read (must not include keyField)</param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.multiRowObject_Select(System.String,System.String[])">
            <summary>
            Selects a set of rowobjects from db
            </summary>
            <param name="cmd"></param>
            <param name="tables">logical table names</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.RowObjectSelect(System.String,System.String,metadatalibrary.MetaExpression,System.String,System.String)">
            <summary>
            Selects a set of rowobjects from db
            </summary>
            <param name="tablename"></param>
            <param name="columnlist"></param>
            <param name="filter"></param>
            <param name="order_by"></param>
            <param name="TOP"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.RowObject_Select(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Selects a set of rowobjects from db
            </summary>
            <param name="tablename"></param>
            <param name="columnlist"></param>
            <param name="filter"></param>
            <param name="order_by"></param>
            <param name="TOP"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.MULTI_RUN_SELECT_SIMPLIFIED(System.Collections.Generic.List{metadatalibrary.SelectBuilder})">
            <summary>
            Executes a List of Select, returning data into empty tables specified by each select. 
            return dataset
            </summary>
            <param name="SelList"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.MULTI_RUN_SELECT(System.Collections.Generic.List{metadatalibrary.SelectBuilder})">
            <summary>
            Executes a List of Select, returning data in the tables specified by each select. 
            </summary>
            <param name="SelList"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.RUN_SELECT_INTO_TABLE_direct(System.Data.DataTable,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Experimental function, unused
            </summary>
            <param name="t"></param>
            <param name="order_by"></param>
            <param name="filter"></param>
            <param name="TOP"></param>
            <param name="group_by"></param>
            <param name="prepare"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.readFromTable(System.String,metadatalibrary.MetaExpression,System.String,System.String,System.String)">
            <summary>
            Reads a table without reading the schema. Result table has no primary key set.
            This is quicker than a normal select but slower than a RowObject_select
            </summary>
            <param name="tablename"></param>
            <param name="columnlist"></param>
            <param name="filter"></param>
            <param name="order_by"></param>
            <param name="TOP"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.readFromTable(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Reads a table without reading the schema. Result table has no primary key set.
            This is quicker than a normal select but slower than a RowObject_select
            </summary>
            <param name="tablename"></param>
            <param name="columnlist"></param>
            <param name="filter"></param>
            <param name="order_by"></param>
            <param name="TOP"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetSqlAdapter(System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates a data adapter for a given sql command
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.RUN_SELECT_INTO_EMPTY_TABLE(System.Data.DataSet@,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Reads data into a table. Data are read from DB table named EmptyTable.Tablename
            </summary>
            <param name="QuiteEmptyDataSet"></param>
            <param name="columnlist"></param>
            <param name="orderBy"></param>
            <param name="filter"></param>
            <param name="top"></param>
            <param name="groupBy"></param>
            <param name="prepare"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.count(System.String,metadatalibrary.MetaExpression)">
            <summary>
            Executes a SELECT COUNT on a table.
            </summary>
            <param name="tablename"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.RUN_SELECT_COUNT(System.String,System.String,System.Boolean)">
            <summary>
            Executes a SELECT COUNT on a table.
            </summary>
            <param name="tablename"></param>
            <param name="filter">condition to apply</param>
            <param name="prepare">when true, command has to be prepared</param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.DataAccess.DataRowReader">
            <summary>
            Reads data row by row
            </summary>
        </member>
        <member name="M:metadatalibrary.DataAccess.DataRowReader.#ctor(metadatalibrary.IDataAccess,System.String,System.String,System.String,System.String)">
            <summary>
            Creates the iterator
            </summary>
            <param name="Conn"></param>
            <param name="table"></param>
            <param name="columnlist"></param>
            <param name="order_by"></param>
            <param name="filter"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.DataRowReader.#ctor(metadatalibrary.IDataAccess,System.String,metadatalibrary.MetaExpression,System.String,System.String)">
            <summary>
             Creates the iterator
            </summary>
            <param name="Conn"></param>
            <param name="table"></param>
            <param name="columnlist"></param>
            <param name="order_by"></param>
            <param name="filter"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.DataRowReader.MoveNext">
            <summary>
            Necessary method to implement the iteratorinterface
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.DataRowReader.Reset">
            <summary>
            Restars the iterator 
            </summary>
        </member>
        <member name="M:metadatalibrary.DataAccess.DataRowReader.Dispose(System.Boolean)">
            <summary>
            Disposes the iterator
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.DataRowReader.Dispose">
            <summary>
            Disposes the iterator
            </summary>
        </member>
        <member name="M:metadatalibrary.DataAccess.DataRowReader.GetEnumerator">
            <summary>
            Necessary method to implement the iteratorinterface
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.DataRowReader.Finalize">
            <summary>
            public destructor
            </summary>
        </member>
        <member name="M:metadatalibrary.DataAccess.executeQueryValue(System.String,System.Int32)">
            <summary>
            Run a non query command string and get result asynchronously
            </summary>
            <param name="cmd"></param>
            <param name="timeOut"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.executeNonQuery(System.String,System.Int32)">
            <summary>
            Returns a value executing a generic sql command 
            </summary>
            <param name="cmd"></param>
            <param name="timeOut"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.executeSelectBuilderCallback(System.Collections.Generic.List{metadatalibrary.SelectBuilder},System.Int32,System.Func{metadatalibrary.SelectBuilder,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Run a command string and get result asynchronously
            </summary>
            <param name="selList"></param>
            <param name="packetSize"></param>
            <param name="timeout"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.executeQuery(System.String,System.Int32)">
            <summary>
            Executes a sql command and returns a DataTable
            </summary>
            <param name="sql"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.executeQueryTablesCallback(System.String,System.Int32,System.Int32,System.Func{System.Object,System.Threading.Tasks.Task})">
            <summary>
            Run a command string and get result asynchronously
            </summary>
            <param name="commandString"></param>
            <param name="packetSize"></param>
            <param name="timeout"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.compile(System.Object)">
            <summary>
            creates a string filter from a generi filter (string o MetaExpression)
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.executeQueryIntoTable(System.Data.DataTable,System.Object,System.Int32)">
            <summary>
            Reads data into a table
            </summary>
            <param name="table"></param>
            <param name="filter"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.executeQueryTable(System.String,System.String,System.Object,System.Int32)">
            <summary>
            Reads data from a table
            </summary>
            <param name="tableName"></param>
            <param name="columnList"></param>
            <param name="filter"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.LogError(System.String,System.Exception)">
            <summary>
            Logs an error to the remote logger
            </summary>
            <param name="errmsg"></param>
            <param name="E"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.myImportRow(System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Insert a datarow in a table preserving it's state
            </summary>
            <param name="t"></param>
            <param name="r"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.CanPrint(System.Data.DataRow)">
            <summary>
            Check if R can be "printed". 
            </summary>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.DeleteAllUnselectable(System.Data.DataTable)">
            <summary>
            Removes all rows that can't be selected
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.DataAccess.Compile(System.String,System.Boolean)">
            <summary>
            Substitute environment variables in the string
            </summary>
            <param name="s"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.isSystemAdmin">
            <summary>
            Check if current user has system administration privileges
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.CanPost(metadatalibrary.DataAccess,System.Data.DataRow)">
            <summary>
            Check if a generic write operation is allowed on a row. The operation depends on the row status
            </summary>
            <param name="Conn"></param>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.CanSelect(metadatalibrary.DataAccess,System.Data.DataRow)">
            <summary>
             Check if a specified row of a table can be selected
            </summary>
            <param name="Conn"></param>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.CanSelect(System.Data.DataTable,System.Int32)">
            <summary>
            Check if  a row from a table with a specified index can be selected
            </summary>
            <param name="T"></param>
            <param name="RowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.EnumUsrKeys">
            <summary>
            Gets all user variables name in the environment
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.EnumSysKeys">
             <summary>
            Gets all system variables name in the environment 
             </summary>
             <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.CanPrint(metadatalibrary.DataAccess,System.Data.DataRow)">
            <summary>
            Check if a specified row can be "printed"
            </summary>
            <param name="Conn"></param>
            <param name="R"></param>
            <returns></returns>            
        </member>
        <member name="M:metadatalibrary.DataAccess.CantUnconditionallyPost(metadatalibrary.DataAccess,System.Data.DataTable,System.String)">
            <summary>
            Check if there is a total deny of writing/deleting/inserting on a table
            </summary>
            <param name="conn"></param>
            <param name="T"></param>
            <param name="opKind"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.zip(System.Byte[])">
            <summary>
            Compresses an array of bytes
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.unzip(System.Byte[])">
            <summary>
            Decompress an array of bytes
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.UnpackDataSet(metadatalibrary.DataAccess,System.Byte[],System.Boolean)">
            <summary>
            Unzip/decrypts a DataSet stored in a byte array
            </summary>
            <param name="Conn"></param>
            <param name="A"></param>
            <param name="zip">if true, byte array is first unzipped then converted to a dataset</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.UnpackDataSet(metadatalibrary.DataAccess,System.Byte[])">
            <summary>
            Unzip a DataSet stored in a byte array
            </summary>
            <param name="Conn"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.PackDataSet(metadatalibrary.DataAccess,System.Data.DataSet)">
            <summary>
            Zips/crypts an DataSet string it in a byte array
            </summary>
            <param name="Conn"></param>
            <param name="D"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.PackDataSet(metadatalibrary.DataAccess,System.Data.DataSet,System.Boolean)">
            <summary>
            Zips/crypts an DataSet string it in a byte array
            </summary>
            <param name="Conn"></param>
            <param name="D"></param>
            <param name="zip">if true, byte array is compressed</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.PackDataSet(System.Data.DataSet,System.Boolean)">
            <summary>
            Zips/crypts an DataSet string it in a byte array
            </summary>
            <param name="D"></param>
            <param name="zip">if true, byte array is compressed</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.getUpdateCommand(System.String,metadatalibrary.MetaExpression,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Object})">
            <summary>
            Builds an UPDATE sql command
            </summary>
            <param name="table"></param>
            <param name="condition"></param>
            <param name="columns">column names</param>
            <param name="values">values to be set</param>
            <param name="ncol">number of columns to update</param>
            <returns>Error msg or null if OK</returns>
        </member>
        <member name="M:metadatalibrary.DataAccess.GetQueryHelper">
            <summary>
            Returns the queryhelper attached to this kind of DataAccess
            </summary>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.MultiCompare">
            <summary>
            Compare an ordered set of field to an ordered set of values
            </summary>
        </member>
        <member name="F:metadatalibrary.MultiCompare.values">
            <summary>
            Values to compare with the fields
            </summary>
        </member>
        <member name="F:metadatalibrary.MultiCompare.fields">
            <summary>
            Fields to compare
            </summary>
        </member>
        <member name="M:metadatalibrary.MultiCompare.#ctor(System.String[],System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="fields"></param>
            <param name="values"></param>
        </member>
        <member name="M:metadatalibrary.MultiCompare.SameFieldsAs(metadatalibrary.MultiCompare)">
            <summary>
            Check if the fields of this comparator are the same of the specified one
            </summary>
            <param name="C"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.OptimizedMultiCompare">
            <summary>
            Class for creating optimized queries
            </summary>
        </member>
        <member name="F:metadatalibrary.OptimizedMultiCompare.fields">
            <summary>
            List of fields to be compared
            </summary>
        </member>
        <member name="F:metadatalibrary.OptimizedMultiCompare.values">
            <summary>
            List of values to compare with  the multivalue field
            </summary>
        </member>
        <member name="F:metadatalibrary.OptimizedMultiCompare.multival_pos">
            <summary>
            Position of the only field that can differ in a join between two OptimizedMulticompare
            </summary>
        </member>
        <member name="M:metadatalibrary.OptimizedMultiCompare.IsMultivalue">
            <summary>
            True when there is a field to compare with a set of values
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.OptimizedMultiCompare.#ctor(metadatalibrary.MultiCompare)">
            <summary>
            Constructor
            </summary>
            <param name="C"></param>
        </member>
        <member name="M:metadatalibrary.OptimizedMultiCompare.SameFieldsAs(metadatalibrary.OptimizedMultiCompare)">
            <summary>
            Return true if this Compare operates on the same fields as the specified one
            </summary>
            <param name="C"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.OptimizedMultiCompare.JoinWith(metadatalibrary.OptimizedMultiCompare)">
            <summary>
            Join this Multicompare with another one, return false  if it is not possible
            </summary>
            <param name="C"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.OptimizedMultiCompare.GetFilter(metadatalibrary.QueryHelper)">
            <summary>
            Gets the optimized filter to obtain rows 
            </summary>
            <param name="QH"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.ISelectBuilder">
            <summary>
            Manage the construction of a sql - select command
            </summary>
        </member>
        <member name="P:metadatalibrary.ISelectBuilder.filter">
            <summary>
            Overall filter to be used in the select command
            </summary>
        </member>
        <member name="M:metadatalibrary.ISelectBuilder.AddOnRead(metadatalibrary.SelectBuilder.AfterReadDelegate,System.Object)">
            <summary>
            Adds an AfterRead delegate to be called in a specified context
            </summary>
            <param name="Fun"></param>
            <param name="Context"></param>
        </member>
        <member name="M:metadatalibrary.ISelectBuilder.OnRead">
            <summary>
            Method to be invoked after data have been retrived from db
            </summary>
        </member>
        <member name="M:metadatalibrary.ISelectBuilder.Where(System.String)">
            <summary>
            Specify a filter for the query
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISelectBuilder.MultiCompare(metadatalibrary.MultiCompare)">
            <summary>
            Specify a MultiCompare as filter
            </summary>
            <param name="MC"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISelectBuilder.From(System.String)">
            <summary>
            Specify the table to be read
            </summary>
            <param name="tablename"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISelectBuilder.OrderBy(System.String)">
            <summary>
            Specify the sorting order
            </summary>
            <param name="order_by"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISelectBuilder.Top(System.String)">
            <summary>
            Specify the TOP clause of the select command
            </summary>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISelectBuilder.GroupBy(System.String)">
            <summary>
            Specify the groupBy clause
            </summary>
            <param name="groupBy"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISelectBuilder.IntoTable(System.Data.DataTable)">
            <summary>
            Specify the destination table for reading data
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISelectBuilder.CanAppendTo(metadatalibrary.SelectBuilder)">
            <summary>
            Check if this select can be added to the specified one
            </summary>
            <param name="S"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISelectBuilder.isOptimized">
            <summary>
            Check if this select is optimized (so can be joined to other)
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISelectBuilder.OptimizedAppendTo(metadatalibrary.SelectBuilder,metadatalibrary.QueryHelper)">
            <summary>
            Merge this select the specified one in an optimized way, return false if it was not possibile
            </summary>
            <param name="S"></param>
            <param name="QH"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISelectBuilder.AppendTo(metadatalibrary.SelectBuilder,metadatalibrary.QueryHelper)">
            <summary>
            Append this select to another one as a separate command to be executed (not-optimized)
            </summary>
            <param name="S"></param>
            <param name="QH"></param>
        </member>
        <member name="T:metadatalibrary.SelectBuilder">
            <summary>
            Manage the construction of a sql - select command
            </summary>
        </member>
        <member name="F:metadatalibrary.SelectBuilder.DestTable">
            <summary>
            Table where rows will be read into
            </summary>
        </member>
        <member name="T:metadatalibrary.SelectBuilder.AfterReadDelegate">
            <summary>
            Delegate kind to be called after the table is read
            </summary>
            <param name="T"></param>
            <param name="Context"></param>
        </member>
        <member name="P:metadatalibrary.SelectBuilder.filter">
            <summary>
            Overall filter to be used in the select command
            </summary>
        </member>
        <member name="M:metadatalibrary.SelectBuilder.AddOnRead(metadatalibrary.SelectBuilder.AfterReadDelegate,System.Object)">
            <summary>
            Adds an AfterRead delegate to be called in a specified context
            </summary>
            <param name="Fun"></param>
            <param name="Context"></param>
        </member>
        <member name="M:metadatalibrary.SelectBuilder.OnRead">
            <summary>
            Method to be invoked after data have been retrived from db
            </summary>
        </member>
        <member name="M:metadatalibrary.SelectBuilder.#ctor(System.String)">
            <summary>
            Constructor for reading specified columns
            </summary>
            <param name="columnlist"></param>
        </member>
        <member name="M:metadatalibrary.SelectBuilder.#ctor">
            <summary>
            Constructor for reading all columns
            </summary>
        </member>
        <member name="M:metadatalibrary.SelectBuilder.Where(System.String)">
            <summary>
            Specify a filter for the query
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SelectBuilder.MultiCompare(metadatalibrary.MultiCompare)">
            <summary>
            Specify a MultiCompare as filter
            </summary>
            <param name="MC"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SelectBuilder.From(System.String)">
            <summary>
            Specify the table to be read
            </summary>
            <param name="tablename"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SelectBuilder.OrderBy(System.String)">
            <summary>
            Specify the sorting order
            </summary>
            <param name="order_by"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SelectBuilder.Top(System.String)">
            <summary>
            Specify the TOP clause of the select command
            </summary>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SelectBuilder.GroupBy(System.String)">
            <summary>
            Specify the groupBy clause
            </summary>
            <param name="groupBy"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SelectBuilder.IntoTable(System.Data.DataTable)">
            <summary>
            Specify the destination table for reading data
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SelectBuilder.CanAppendTo(metadatalibrary.SelectBuilder)">
            <summary>
            Check if this select can be added to the specified one
            </summary>
            <param name="S"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SelectBuilder.isOptimized">
            <summary>
            Check if this select is optimized (so can be joined to other)
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SelectBuilder.OptimizedAppendTo(metadatalibrary.SelectBuilder,metadatalibrary.QueryHelper)">
            <summary>
            Merge this select the specified one in an optimized way, return false if it was not possibile
            </summary>
            <param name="S"></param>
            <param name="QH"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SelectBuilder.AppendTo(metadatalibrary.SelectBuilder,metadatalibrary.QueryHelper)">
            <summary>
            Append this select to another one as a separate command to be executed (not-optimized)
            </summary>
            <param name="S"></param>
            <param name="QH"></param>
        </member>
        <member name="T:metadatalibrary.GetType_Util">
            <summary>
            Class used to manage system type conversions
            </summary>
        </member>
        <member name="M:metadatalibrary.GetType_Util.GetSystemType_From_StringSystemType(System.String)">
            <summary>
            Converts a system type name into a aystem type
            </summary>
            <param name="Stype">type name</param>
            <returns>corresponding system type</returns>
        </member>
        <member name="M:metadatalibrary.GetType_Util.GetSystemType_From_SqlDbType(System.String)">
            <summary>
            Converts a SqlDBtype into a corresponding .net type suitable to store it.
            </summary>
            <param name="sqlDbType"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.GetType_Util.GetSqlType_From_StringSqlDbType(System.String)">
            <summary>
            Gets a SQL-specific data type for use in an SQL parameter in order to
             store a given dbtype
            </summary>
            <param name="sqlDbType"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.AllLocal_DataAccess">
            <summary>
            Connection to database with current user = owner of schema
            </summary>
        </member>
        <member name="M:metadatalibrary.AllLocal_DataAccess.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            Creates a connection to db with the UserDB being the schema name
            </summary>
            <param name="DSN"></param>
            <param name="Server"></param>
            <param name="Database"></param>
            <param name="UserDB">This must be the SCHEMA name</param>
            <param name="PasswordDB">Password for UserDB</param>
            <param name="User">Application user</param>
            <param name="Password">Password for application user</param>
            <param name="esercizio_sessione"></param>
            <param name="DataContabile"></param>
        </member>
        <member name="M:metadatalibrary.AllLocal_DataAccess.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32,System.DateTime)">
            <summary>
             Creates a connection to db with the UserDB being the schema name
            </summary>
            <param name="DSN"></param>
            <param name="Server"></param>
            <param name="Database"></param>
            <param name="UserDB">This must be the SCHEMA name</param>
            <param name="PasswordDB">Password for UserDB</param>
            <param name="esercizio_sessione"></param>
            <param name="DataContabile"></param>
        </member>
        <member name="M:metadatalibrary.AllLocal_DataAccess.Duplicate">
            <summary>
            Crea un duplicato di un DataAccess, con una nuova connessione allo stesso DB. 
            Utile se la connessione deve essere usata in un nuovo thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.AllLocal_DataAccess.TableIsCentralized(System.String)">
            <summary>
            Check if tablename must be prefixed with DBO during access
            </summary>
            <param name="tablename"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.AllLocal_DataAccess.ProcedureIsCentralized(System.String)">
            <summary>
            Check if procname must be prefixed with DBO during access
            </summary>
            <param name="procname"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.dbanalyzer">
            <summary>
            Summary description for dbanalyzer.
            </summary>
        </member>
        <member name="M:metadatalibrary.dbanalyzer.ObjectListFromDB(metadatalibrary.DataAccess,System.String)">
            <summary>
            Gets object description from db filtering on xtype field
            </summary>
            <param name="conn"></param>
            <param name="kind">xtype parameter, use U for tables, V for views</param>
            <returns>list of specified db object names</returns>
        </member>
        <member name="M:metadatalibrary.dbanalyzer.TableListFromDB(metadatalibrary.DataAccess)">
            <summary>
            Returns an arraylist of names of DataBase (real) tables 
            </summary>
            <param name="conn"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.dbanalyzer.ViewListFromDB(metadatalibrary.DataAccess)">
            <summary>
            Returns an arraylist of names of DataBase Views
            </summary>
            <param name="conn"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.dbanalyzer.GetPrimaryKey(System.String,metadatalibrary.DataAccess)">
            <summary>
            Gets the names of primary keys field of a DB table querying the DB by sp_pkeys
            </summary>
            <param name="tableName"></param>
            <param name="conn"></param>
            <returns>null on errors</returns>
        </member>
        <member name="M:metadatalibrary.dbanalyzer.ReadColumnTypes(System.Data.DataTable,System.String,metadatalibrary.DataAccess)">
            <summary>
            Gets from DataBase info about a table, and add/update/deletes 
              ColTypes to reflect info read
            </summary>
            <param name="colTypes"></param>
            <param name="tableName"></param>
            <param name="conn"></param>
            <returns>true when successfull</returns>
        </member>
        <member name="M:metadatalibrary.dbanalyzer.ExportTableToXML(System.String,System.String,metadatalibrary.DataAccess,System.String)">
            <summary>
            Export Data from a DB table to an XML file. The XML also contains 
            extended informations that allow re-creating the table into another DB
            </summary>
            <param name="filename">XML filename to create</param>
            <param name="tablename"></param>
            <param name="conn"></param>
            <param name="filter"></param>
            <returns>true if OK</returns>
        </member>
        <member name="M:metadatalibrary.dbanalyzer.ExportDataSetToXML(System.String,metadatalibrary.DataAccess,System.Data.DataSet,System.Boolean)">
            <summary>
            Export an entire DataSet to XML file. The XML (on request) also contains 
            extended informations that allow re-creating the table into another DB
            </summary>
            <param name="filename">XML file name to be created</param>
            <param name="conn"></param>
            <param name="ds">DataSet to Export</param>
            <param name="addExtedendProperties">when true, extended information is added 
             to the DataSet in order to allo all tables to be re-generated in the
             target DB</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.dbanalyzer.ImportDataSetFromXML(System.String,metadatalibrary.DataAccess,System.Data.DataSet@)">
            <summary>
            Reads a DataSet from an XML file and returns it
            </summary>
            <param name="filename">XML filename to read</param>
            <param name="Conn"></param>
            <param name="DS">returned DataSet (empty on errors)</param>
            <returns>true if Ok</returns>
        </member>
        <member name="M:metadatalibrary.dbanalyzer.ClearTable(System.String,metadatalibrary.DataAccess)">
            <summary>
            Clear a DataBase Table with an unconditioned DELETE from tablename
            </summary>
            <param name="tablename"></param>
            <param name="Conn"></param>
            <returns>true when successfull</returns>
        </member>
        <member name="M:metadatalibrary.dbanalyzer.GetOverallDataSet(metadatalibrary.DataAccess)">
            <summary>
            Returns a representation of all real tables of the DB.  Foreach DB
             table, a corresponding table is created in DS (without extended properties)
            </summary>
            <param name="Conn"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.dbanalyzer.ImportTableFromXML(System.String,System.Data.DataSet@)">
            <summary>
            Reads data from a XML table into a DataSet 
            </summary>
            <param name="filename">Esempio C:\\cartella\\nomefile.xml</param>
            <param name="DS"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.dbanalyzer.WriteDataTableToDB(System.Data.DataTable,metadatalibrary.DataAccess,System.Boolean,System.Boolean,System.String)">
            <summary>
            Write a DataTable into a DB table with the same name. If the db table
             does not exist or miss some columns, it is created or columns
             are added to dbtable
            </summary>
            <param name="T">Table to store in the DB</param>
            <param name="Conn"></param>
            <param name="Clear">when true, table is cleared before being written</param>
            <param name="Replace">when true, rows with matching keys are update. When false,
             those are skipped</param>
            <param name="filter">condition to apply on data in DataTable</param>
            <returns>true if OK</returns>
        </member>
        <member name="M:metadatalibrary.dbanalyzer.ApplyStructureToDB(System.Data.DataSet,metadatalibrary.DataAccess)">
            <summary>
            Apply the structure of DS tables to the DB (create tables, adds columns)
            This function does not delete columns or rows. No data is written to db.
            Only DB schema is (eventually) modified.
            </summary>
            <param name="DS"></param>
            <param name="Conn"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.dbanalyzer.WriteDataSetToDB(System.Data.DataSet,metadatalibrary.DataAccess,System.Boolean,System.Boolean,System.String)">
            <summary>
            Writes all data in DS into corresponding DB tables. If some DB table
             does not exist or misses come columns, it is created or columns are
             added to it.
            </summary>
            <param name="DS"></param>
            <param name="Conn"></param>
            <param name="clear"></param>
            <param name="Replace"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.dbanalyzer.CheckDbTableStructure(System.String,System.Data.DataTable,metadatalibrary.DataAccess)">
            <summary>
            Check that tablename exists on DB and that has all necessary fields.
            If it does not exist, it is created. If it lacks some fields,
             those are added to table
            </summary>
            <param name="tablename">Name of table to be checked fo existence</param>
            <param name="T">Table (extended with schema info)  to check</param>
            <param name="Conn"></param>
            <returns>true when successfull</returns>
        </member>
        <member name="M:metadatalibrary.dbanalyzer.CreateTableLike(System.String,System.Data.DataTable,metadatalibrary.DataAccess)">
            <summary>
            Create a DB table like a given DataTable
            </summary>
            <param name="tablename">name of table to create</param>
            <param name="T">DataTable with DataColumn-extended info about DB schema</param>
            <param name="Conn"></param>
            <returns>true when successfull</returns>
        </member>
        <member name="M:metadatalibrary.dbanalyzer.TableExists(System.String,metadatalibrary.DataAccess)">
            <summary>
            Verify the existence of a Table
            </summary>
            <param name="TableName">Name of the Table</param>
            <param name="Conn"></param>
            <returns>True when Table exists </returns>
        </member>
        <member name="M:metadatalibrary.dbanalyzer.ColumnExists(System.String,System.String,metadatalibrary.DataAccess)">
            <summary>
            Verify the existence of a column in a DB table. Makes use of db system tables.
            </summary>
            <param name="TableName"></param>
            <param name="ColumnName"></param>
            <param name="Conn"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.dbanalyzer.CreateTable(System.String,System.String[0:,0:],System.String[],metadatalibrary.DataAccess)">
            <summary>
            Build and Execute an SqlCommand that creates the Table 
            </summary>
            <param name="TableName">Name of the Table</param>
            <param name="Column">Array containing schema of the table (columnname, 
            	type, [NOT] NULL</param>
            <param name="PKey">Array containg the Primary Key of the Table</param>
            <param name="Conn"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.dbanalyzer.AddColumns(System.String,System.String[0:,0:],metadatalibrary.DataAccess)">
            <summary>
            Add columns to a DB table
            </summary>
            <param name="TableName">name of table to which add columns</param>
            <param name="Column">array of columns to add (fieldname, sqltype)</param>
            <param name="Conn"></param>
            <returns>true when successfull</returns>
        </member>
        <member name="T:metadatalibrary.IEntityDispatcher">
            <summary>
            Interface for meta data dispatcher
            </summary>
        </member>
        <member name="M:metadatalibrary.IEntityDispatcher.GetSys(System.String)">
            <summary>
            Get a system environment variable
            </summary>
            <param name="name">variable name</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IEntityDispatcher.SetSys(System.String,System.Object)">
            <summary>
            Set a system environment variable
            </summary>
            <param name="name">variable name</param>
            <param name="O">value to set</param>
        </member>
        <member name="M:metadatalibrary.IEntityDispatcher.GetUsr(System.String)">
            <summary>
            Get a user environment variable
            </summary>
            <param name="name">variable name</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IEntityDispatcher.SetUsr(System.String,System.Object)">
            <summary>
            Set a user environment variable
            </summary>
            <param name="name">variable name</param>
            <param name="O">value to set</param>
        </member>
        <member name="T:metadatalibrary.EntityDispatcher">
            <summary>
            Application Meta Data Dispatcher
            </summary>
        </member>
        <member name="M:metadatalibrary.EntityDispatcher.#ctor(metadatalibrary.DataAccess)">
            <summary>
            Creates a new EntityDispatcher
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:metadatalibrary.EntityDispatcher.#ctor(metadatalibrary.IDataAccess)">
            <summary>
            
            </summary>
            <param name="conn"></param>        
        </member>
        <member name="M:metadatalibrary.EntityDispatcher.GetFormByDllName(System.String)">
            <summary>
            Gets a form, given it's dll name. The first public form with a default constructor in the assembly is taken.
            </summary>
            <param name="dllName"></param>
            <returns></returns>
        </member>
        <member name="F:metadatalibrary.EntityDispatcher.LoadError">
            <summary>
            Errors encountered during dll load phase
            </summary>
        </member>
        <member name="M:metadatalibrary.EntityDispatcher.Get(System.String)">
            <summary>
            Gets a MetaData Class given it's name
            </summary>
            <param name="metaDataName"></param>
            <returns></returns>
            
        </member>
        <member name="T:metadatalibrary.IErrorLogger">
            <summary>
            Interface for local and remote error logging 
            </summary>
        </member>
        <member name="P:metadatalibrary.IErrorLogger.unrecoverableError">
            <summary>
            This is set when a shutdown is necessary
            </summary>
        </member>
        <member name="M:metadatalibrary.IErrorLogger.markException(System.Exception,System.String)">
            <summary>
            Marks an Exception and set Last Error
            </summary>
            <param name="e"></param>
            <param name="main">Main description</param>
        </member>
        <member name="M:metadatalibrary.IErrorLogger.formatException(System.Exception,System.String)">
            <summary>
            Gets a string describing an error with an exception
            </summary>
            <param name="e"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IErrorLogger.logException(System.String,System.Exception,metadatalibrary.ISecurity,metadatalibrary.IDataAccess,metadatalibrary.IFormController,metadatalibrary.IMetaData)">
            <summary>
            Sends an exception to a remote error logger
            </summary>
            <param name="main"></param>
            <param name="exception"></param>
            <param name="security"></param>
            <param name="dataAccess"></param>
            <param name="controller"></param>
            <param name="meta"></param>
        </member>
        <member name="M:metadatalibrary.IErrorLogger.markEvent(System.String)">
            <summary>
            Adds an event to a local log
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.IErrorLogger.warnEvent(System.String)">
            <summary>
            Adds a warn (not an error) to a local log
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:metadatalibrary.ErrorLogger">
            <summary>
            Implements logging facilities
            </summary>
        </member>
        <member name="F:metadatalibrary.ErrorLogger.Logger">
            <summary>
            Default logger for the application
            </summary>
        </member>
        <member name="M:metadatalibrary.ErrorLogger.markEvent(System.String)">
            <summary>
             Adds an event to a local log
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.ErrorLogger.warnEvent(System.String)">
            <summary>
             Adds an event to a local log
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.ErrorLogger.formatException(System.Exception,System.String)">
            <summary>
            Gets a string describing an error with an exception
            </summary>
            <param name="e"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ErrorLogger.logException(System.String,System.Exception,metadatalibrary.ISecurity,metadatalibrary.IDataAccess,metadatalibrary.IFormController,metadatalibrary.IMetaData)">
            <summary>
            Sends an exception to a remote error logger
            </summary>
            <param name="main"></param>
            <param name="exception"></param>
            <param name="security"></param>
            <param name="dataAccess"></param>
            <param name="controller"></param>
            <param name="meta"></param>
        </member>
        <member name="M:metadatalibrary.ErrorLogger.markException(System.Exception,System.String)">
            <summary>
            Marks an Exception and set Last Error
            </summary>
            <param name="e"></param>
            <param name="main">Main description</param>       
        </member>
        <member name="T:metadatalibrary.EventSuppressor">
            <summary>
            Helper class to suppress events
            </summary>
        </member>
        <member name="M:metadatalibrary.EventSuppressor.EventSuppress(System.Windows.Forms.Control)">
            <summary>
            Suppresses events linked to a control
            </summary>
            <param name="control"></param>
        </member>
        <member name="T:metadatalibrary.exportclass">
            <summary>
            Classe per l'esportazione di Dati.
            Reference: Microsoft Excel 9.0 Object Library
            Metodo da utilizzare per l'esportazione in Excel:
            public static void DataTableToExcel(System.Data.DataTable DT,bool Header)
            Codice di chiamata: exportdata.exportclass.DataTableToExcel(MyDS.Tables[0],true);
            Max 08 ottobre 2002
            </summary>
        </member>
        <member name="M:metadatalibrary.exportclass.SituazioneToDataGrid(System.Data.DataTable,System.Windows.Forms.DataGrid)">
            <summary>
            Visualizza una situazione (memorizzata in un DataTable) in un DataGrid
            </summary>
            <param name="dt">DataTable con la situazione</param>
            <param name="dg">Grid in cui visualizzare la situazione</param>
        </member>
        <member name="M:metadatalibrary.exportclass.SaveTableToCSV(System.Data.DataTable,System.Boolean)">
            <summary>
            Save a data table to a file, asking user for  the file name
            </summary>
            <param name="dt"></param>
            <param name="header">when true, an header rows is inserted</param>
        </member>
        <member name="M:metadatalibrary.exportclass.SaveTableToCSV(System.Data.DataTable,System.Boolean,System.String)">
            <summary>
            Save a data table to a file, asking user for  the file name
            </summary>
            <param name="dt"></param>
            <param name="header"></param>
            <param name="filename"></param>
        </member>
        <member name="M:metadatalibrary.exportclass.DataTableToExcel(System.Data.DataTable,System.Boolean)">
            <summary>
            Save a datatable to an xlsx file
            </summary>
            <param name="DT">Input table</param>
            <param name="Header">true if headers have to be shown in Excel</param>
        </member>
        <member name="M:metadatalibrary.exportclass.DataTableToExcel(System.Data.DataTable,System.Boolean,System.Int32[],System.Object[])">
            <summary>
            Save a datatable to an xlsx file
            </summary>
            <param name="DT">Input table</param>
            <param name="Header">true if headers have to be shown in Excel</param>
            <param name="groupby">column position of column onto which create a group</param>
            <param name="totals">columns numbeposition of columns to be totalized</param>
        </member>
        <member name="M:metadatalibrary.exportclass.DataTableToExcel(System.Data.DataTable,System.Boolean,System.Int32[],System.Object[],System.String)">
            <summary>
            Save a datatable to an xlsx file
            </summary>
            <param name="DT">Input table</param>
            <param name="Header">true if headers have to be shown in Excel</param>
            <param name="groupby">column position of column onto which create a group</param>
            <param name="totals">columns numbeposition of columns to be totalized</param>
            <param name="filename">filename of file to create</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.exportclass.iDataTableToExcel(System.Data.DataTable,System.Boolean,System.Int32[],System.Object[])">
            <summary>
            Export all data in a datatable into an Excel sheet
            </summary>
            <param name="DT">DataTable to export</param>
            <param name="Header">true if headers have to be shown in Excel</param>
            <param name="groupby">columns number to be grouped</param>
            <param name="totals">columns number to be totalized</param>
        </member>
        <member name="M:metadatalibrary.exportclass.importXlsx(System.Data.DataTable,System.String,System.Int32)">
            <summary>
            Import an xlsx file
            </summary>
            <param name="DT"></param>
            <param name="fileName"></param>
            <param name="headerRows"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.exportclass.iDataTableToOfficeXML(System.Data.DataTable,System.Boolean,System.Int32[],System.Object[])">
            <summary>
            Utilizzata per elaborare il file XLSX se non presente il nome del file di output
            </summary>
            <param name="DT">DataTable di imput</param>
            <param name="Header">Flag per la visualizzazione dell'header</param>
            <param name="groupby">group by</param>
            <param name="totals">colonne su cui effettuare i totali</param>
        </member>
        <member name="M:metadatalibrary.exportclass.CreateSheet(OfficeOpenXml.ExcelPackage,System.String)">
            <summary>
            Create an excel work sheet (EPPlus Object) and set font type, font dimension and sheet name
            </summary>
            <param name="p">Excel Package</param>
            <param name="sheetName">Sheet Name</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.exportclass.GetSelector(System.Data.DataRow,System.Int32[],System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32)">
            <summary>
            Restituisce il selettore della riga in base alle colonne di groupby
            </summary>
            <param name="r"></param>
            <param name="groupBy"></param>
            <param name="colLookup">Lookup per ottnere il numero effettivo di colonna (non quello logico) </param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.exportclass.SituazioneToListView(System.Windows.Forms.ListView,System.Windows.Forms.ListView,System.Data.DataTable)">
            <summary>
            Esegue il Fill del ListView passato, leggendo i dati dal datatable avente tre colonne
            Descrizione
            Importo
            Formato
            </summary>
            <param name="head">ListView to fill with Headings</param>
            <param name="body">ListView to fill with Body</param>
            <param name="dt">DataTable da visualizzare come listview</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.exportclass.SituazioneToExcel(System.Data.DataTable,System.Boolean)">
            <summary>
            Esporta una situazione come da sp sit_ in un file xlsx
            </summary>
            <param name="dt"></param>
            <param name="header"></param>
        </member>
        <member name="M:metadatalibrary.exportclass.ISituazioneToExcel(System.Data.DataTable,System.Boolean)">
            <summary>
            Esporta tutti i dati di una situazione in un foglio Excel
            </summary>
            <param name="dt"></param>
            <param name="header">true se le colonne devono avere l'intestazione</param>
        </member>
        <member name="M:metadatalibrary.exportclass.dataTableToFixedLengthFile(System.Data.DataTable,System.Boolean,System.String)">
            <summary>
            Esporta tutti i dati del Datatable in un "File a lunghezza fissa"
            </summary>
            <param name="dt"></param>
            <param name="header"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:metadatalibrary.exportclass.dataTableToSeparatedValues(System.Data.DataTable,System.Boolean,System.Char,System.String)">
            <summary>
            Esporta tutti i dati del Datatable in un file di testo con i valori delle colonne separati da un carattere specificato.
            </summary>
            <param name="dt">DataTable da importare</param>
            <param name="header">true se si vuole importare anche l'intestazione delle colonne</param>
            <param name="separator">carattere separatore delle colonne</param>
            <param name="fileName"></param>
        </member>
        <member name="M:metadatalibrary.exportclass.dataTableToTabulationSeparatedValues(System.Data.DataTable,System.Boolean,System.String)">
            <summary>
            Esporta tutti i dati del DataTable in un "File con campi separati da tabulatori"
            </summary>
            <param name="dt">Datatable da importare</param>
            <param name="header">true se si vuole importare anche l'intestazione delle colonne</param>
            <param name="filename"></param>
        </member>
        <member name="M:metadatalibrary.exportclass.dataTableToCommaSeparatedValues(System.Data.DataTable,System.Boolean,System.String)">
            <summary>
            Esporta tutti i dati del Datatable in un "File con campi separati da punto e virgola"
            </summary>
            <param name="dt">DataTable da importare</param>
            <param name="header">true se si vuole importare anche l'intestazione delle colonne</param>
               /// <param name="filename"></param>
        </member>
        <member name="M:metadatalibrary.exportclass.NN(System.String)">
            <summary>
            Restituisce una stringa vuota se è NULL la stringa passata
            Altrimenti restituisce la stringa originale
            </summary>
            <param name="MyString"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.exportclass.DataTableToCSV(System.Data.DataTable,System.Boolean)">
            <summary>
            Create a string that represent a datatable in CSV  format
            </summary>
            <param name="DT"></param>
            <param name="Header"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.MyGridColumn">
            <summary>
            Helper class used to calc best size for column
            </summary>
        </member>
        <member name="M:metadatalibrary.MyGridColumn.#ctor(System.ComponentModel.PropertyDescriptor,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="C"></param>
            <param name="format"></param>
        </member>
        <member name="M:metadatalibrary.MyGridColumn.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:metadatalibrary.MyGridColumn.GetPrefSize(System.Drawing.Graphics,System.String)">
            <summary>
            Gets Best size of column to display a string value
            </summary>
            <param name="g"></param>
            <param name="thisString"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.formatgrids">
            <summary>
            Classe per la formattazione delle colonne di un DataGrid per la corretta
            visualizzazione del loro contenuto.
            E' necessario implementare nel form chiamante codice simile al seguente:
            DataGridTableStyle MyTableStyle = new DataGridTableStyle();
            MyTableStyle.MappingName = TableStyle;
            DataGridColumnStyle C1 = new MyGridColumn(); \r
            MyTableStyle.GridColumnStyles.Add(C1); \r
            dataGrid1.TableStyles.Add(MyTableStyle);
            </summary>
        </member>
        <member name="M:metadatalibrary.formatgrids.#ctor(System.Windows.Forms.DataGrid)">
            <summary>
            Creates a grid formatter linked to a given DataGrid
            </summary>
            <param name="MyDataGrid"></param>
        </member>
        <member name="M:metadatalibrary.formatgrids.AutosizeColumnWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.formatgrids.SuppressNulls">
            <summary>
            Set the displaying of null values as empty strings
            </summary>
        </member>
        <member name="T:metadatalibrary.ColorPalette">
            <summary>
            Class containing all form colors 
            </summary>
        </member>
        <member name="M:metadatalibrary.ColorPalette.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:metadatalibrary.ColorPalette.#ctor(System.String)">
            <summary>
            Creates a default palette
            </summary>
            <param name="paletteDefaultName"></param>
        </member>
        <member name="M:metadatalibrary.ColorPalette.SetTo(metadatalibrary.ColorPalette)">
            <summary>
            Copy data from another Palette
            </summary>
            <param name="P"></param>
        </member>
        <member name="T:metadatalibrary.formcolors">
            <summary>
            Get color for application components
            </summary>
            
        </member>
        <member name="F:metadatalibrary.formcolors.metaPalette">
            <summary>
            Standard palette for metadata
            </summary>
        </member>
        <member name="M:metadatalibrary.formcolors.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.MainRefreshEnabled">
            <summary>
            true if MainRefresh is enabled
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.MainSelectionEnabled">
            <summary>
            True if "mainselect" is enabled
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.DontWarnOnInsertCancel">
            <summary>
            When true, does not warn if canceling an insert operation.
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.SearchEnabled">
            <summary>
            must be set to false if SetSearch/DoSearch must be disabled on form.
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.CanInsert">
            <summary>
            When false main insert button is disabled
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.CanInsertCopy">
            <summary>
            When false main insert copy button is disabled
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.CanCancel">
            <summary>
            When false main Cancel button is disabled
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.CanSave">
            <summary>
            when false, "mainsave" button is disabled
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.eventManager">
            <summary>
            Events manager 
            </summary>
        </member>
        <member name="M:metadatalibrary.FormController.init(System.Windows.Forms.Form)">
            <summary>
            
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:metadatalibrary.FormController.doLink">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.FormController.searchRow(System.String,System.String,System.Boolean)">
            <summary>
            Searches a row on primarytable given  a base filter and select it in the form
            </summary>
            <param name="listType"></param>
            <param name="baseFilter"></param>
            <param name="emptylist">When 0, an empty list is displayed</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.FormController.DoMainCommand(System.String)">
            <summary>
            
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:metadatalibrary.FormController.DoubleClickNavManager(System.Object,System.EventArgs)">
            <summary>
            Event called when user double clicks a TreeNavigator
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:metadatalibrary.FormController.extraParams">
            <summary>
            Index of DataTable Extended Property used for storing 
            	Form ExtraParameters
            </summary>
        </member>
        <member name="M:metadatalibrary.FormController.setMetaDataManager(System.Windows.Forms.Control)">
            <summary>
            Sets the Control Manager for datagrids, treeviews
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:metadatalibrary.FormController.beforeCollapseManager(System.Object,System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
            Event called when a node is collapsed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.FormController.Edit_Click(System.Object,System.EventArgs)">
            <summary>
            Sender is a BUTTON - tag like table.edit_type
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.FormController.Edit_Grid_Row(System.Windows.Forms.DataGrid,System.String)">
            <summary>
            Function called when a grid-edit button is pressed
            </summary>
            <param name="g">Data Grid containing entity rows</param>
            <param name="editType">edit type to use for editing current grid row</param>
            <returns>Edited DataRow</returns>
        </member>
        <member name="M:metadatalibrary.FormController.Button_Click(System.Object,System.EventArgs)">
            <summary>
            Managed click of grid buttons
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.FormController.SetAutoMode(System.Windows.Forms.GroupBox)">
            <summary>
            G has tag: AutoChoose.TextBoxName.ListType.StartFilter or
                       AutoManage.TextBoxName.EditType.StartFilter
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:metadatalibrary.FormController.GetAutoInfo(System.String)">
            <summary>
            Get the Autoinfo relate to a TextBox given the TextBon name
            </summary>
            <param name="textBoxName"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.FormController.textBoxGotFocus(System.Object,System.EventArgs)">
            <summary>
            Called for AutoManage purposes
            </summary>
            <param name="s"></param>
            <param name="e"></param>
            
        </member>
        <member name="M:metadatalibrary.FormController.myAdjustTablesForGridDisplay(System.Windows.Forms.Form)">
            <summary>
            Add calculated fields in order to display grid
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:metadatalibrary.FormController.UnregisterAllEvents(System.Windows.Forms.Control)">
            <summary>
            Unregister all events from a control
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:metadatalibrary.FormController.UnlinkListForm">
            <summary>
            Disconnects from list form 
            </summary>
        </member>
        <member name="M:metadatalibrary.FormController.focusDetail">
            <inheritdoc />
        </member>
        <member name="M:metadatalibrary.FormController.getFormDataSet(System.Windows.Forms.Form)">
            <summary>
            Uses reflection functions to detect the DataSet linked to a Form
            </summary>
        </member>
        <member name="M:metadatalibrary.FormController.detailControl(System.Windows.Forms.Form)">
            <summary>
            Gets the form control having name "MetaDataSetail"
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.FormController.GetContextMenuManager">
            <summary>
            Creates a ContextMenuManager for this form
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.FormController.GetHelpFileName(System.Windows.Forms.Form)">
            <summary>
            Gets the Help file name for a form
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.FormController.AddAfterRowSelect">
            <summary>
            Adds AfterRowSelect event to all form's conrols
            </summary>
        </member>
        <member name="F:metadatalibrary.FormController.CMM">
            <summary>
            Context menu menager linked to form
            </summary>
        </member>
        <member name="M:metadatalibrary.FormController.afterRowSelect(System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Calls MetaData_AfterRowSelect
            </summary>
            <param name="T"></param>
            <param name="R"></param>
        </member>
        <member name="M:metadatalibrary.FormController.beforeRowSelect(System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Used internally to safely call MetaData_BeforeRowSelect
            </summary>
            <param name="T"></param>
            <param name="R"></param>
        </member>
        <member name="M:metadatalibrary.FormController.SelectRow(System.Data.DataRow,System.String)">
            <summary>
            Called when a row is selected form a list, should fill the mainform 
             subsequently. In case of a list-form, entity table should not be cleared
            R is the row from which start the filling of the form  - does not belong to DS
            </summary>
            <param name="r"></param>
            <param name="listType"></param>
        </member>
        <member name="M:metadatalibrary.FormController.DO_GET(System.Boolean,System.Data.DataRow)">
            <summary>
            Gets form data, starting from primary table.
            </summary>
            <param name="onlyperipherals">if true, only pheriperals table are read,
             i.e primary table and childs of primary table are not read</param>
            <param name="oneRow">if true, data getting only considers one row 
             of primary table</param>
        </member>
        <member name="M:metadatalibrary.FormController.setFormText">
            <summary>
            Set the caption for this form
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.ErroreIrrecuperabile">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.FormController.FreshForm(System.Boolean,System.Boolean)">
            <summary>
            Refills the form. If RefreshPeripherals is set to true, secondary tables
             are read again from DB (i.e. all tables in the view that are not
             cached, primary or child of primary).
            </summary>
            <param name="refreshPeripherals">when true, not -entity-or-cached- tables are cleared and read again from DB</param>
            <param name="doPrefill">When true, also prefill is done, this is more expensive and should be done only once in a form</param>
        </member>
        <member name="M:metadatalibrary.FormController.Do_Prefill">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.FormController.Do_Prefill(System.String)">
            <summary>
            
            </summary>
            <param name="tablename"></param>
        </member>
        <member name="P:metadatalibrary.FormController.isClosing">
            <summary>
            True if form is being closed
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.linkedForm">
            <summary>
            Managed form
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.locked">
            <summary>
            Ignores any incoming command to this form
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.firstFillForThisRow">
            <summary>
            True  the  first time an AfterFill is invoked on a certain row  
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.GointToInsertMode">
            <summary>
            True if an insert is coming after the clear
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.GoingToEditMode">
            <summary>
            True if an edit is coming after the clear
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.IsRealClear">
            <summary>
            True if  no insert or edit are coming after the clear
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.IsEmpty">
            <summary>
            true if the MetaData object has not been filled
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.formState">
            <summary>
            Current form state
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.curroperation">
            <summary>
            Current operation runned
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.DrawState">
            <summary>
            Current Draw state of the form
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.InsertMode">
            <summary>
            True when form is in insert mode (NOT EDIT!!)
            </summary>
        </member>
        <member name="P:metadatalibrary.FormController.EditMode">
            <summary>
            True when form is in "edit mode" (not INSERT!)
            </summary>
        </member>
        <member name="M:metadatalibrary.FormController.FreshToolBar">
            <summary>
            Refreshes toolbar basing it to this MetaData linked form
            </summary>
        </member>
        <member name="M:metadatalibrary.FormController.manageValidResult(System.Data.DataRow)">
            <summary>
            Calls the appropriate IsValid method on R and if not valid cancels form closing
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.FormController.GetSourceChanges">
            <summary>
            Takes values for the Source Row from linked Form Data. The goal is to propagate to
             the parent form the changes made (in LinkedForm) in this form
            </summary>
            <remarks>
             Necessary condition is that FormDataSet does contain only one row of the same
             table as SourceRow. This function can be redefined to implement additional operations
             to do in SourceRow.Table when changes to SourceRow are accepted. 
             </remarks>
             <returns>true when operation successfull</returns>
        </member>
        <member name="M:metadatalibrary.FormController.xCopy(System.Data.DataSet,System.Data.DataSet,System.Data.DataRow,System.Data.DataRow)">
            <summary>
            Copia un DataRow da un DS ad un altro.
            Ipotesi abbastanza fondamentale è che RSource e RDest abbiano la stessa chiave, o perlomeno
             che RSource non generi conflitti in Dest
            </summary>
            <param name="source">DataSet origine della copia</param>
            <param name="dest">Dataset di destinazione</param>
            <param name="rSource">Riga da copiare</param>                                                                         
            <param name="rDest">Riga di destinazione</param>
        </member>
        <member name="M:metadatalibrary.FormController.xRemoveChilds(System.Data.DataSet,System.Data.DataRow)">
            <summary>
            Removes a Row with all his subentity childs. 
            Only considers tables of D inters. Rif
            </summary>
            <param name="rif">Referring DataSet. Tables not existing in this DataSet are not recursively scanned</param>
            <param name="rDest">DataRow to be removed with all subentities</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.FormController.xCopyChilds(System.Data.DataSet,System.Data.DataTable,System.Data.DataSet,System.Data.DataRow,System.Boolean)">
            <summary>
            
            </summary>
            <param name="dest"></param>
            <param name="TDest"></param>
            <param name="rif"></param>
            <param name="rSource">Belongs to Rif</param>
            <param name="forceAddState"></param>
        </member>
        <member name="M:metadatalibrary.FormController.CopyDataRow(System.Data.DataTable,System.Data.DataRow,System.Boolean)">
            <summary>
            
            </summary>
            <param name="destTable"></param>
            <param name="toCopy"></param>
            <param name="forceAddState"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.FormController.GetFormData(System.Boolean)">
            <summary>
            Gets data from linked Form control, returning false if some errors occured
            </summary>
            <param name="quick">true if no validity checks have to be made</param>
            <returns>true on success</returns>
        </member>
        <member name="M:metadatalibrary.FormController.HasUnsavedChanges">
            <summary>
            Returns true if there are unsaved changes
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.FormController.warnUnsaved">
            <summary>
            Dsiplays a message and stop form closing if ther are unsaved changes
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.FormController.TryToSelectRow(System.Data.DataRow,System.String)">
            <summary>
            Tries to select a row in the Form. Checks for unsaved data, and also
             verifies whether the row is selectable (CanSelect(R,listtype)==true).
            </summary>
            <param name="r">Row to select</param>
            <param name="listtype">listing type used for Selectability Check</param>
            <returns>true if Row has been selected, false otherwise</returns>
        </member>
        <member name="M:metadatalibrary.FormController.makeChild(System.Data.DataRow,System.Data.DataTable,System.String)">
            <summary>
            If possible, makes PrimaryEntity child (or other subentity) of R (of table T) 
            </summary>
            <param name="r">Possible Parent Row (can be null)</param>
            <param name="T">DataTable to which R belongs (can't be null)</param>
            <param name="relname">relation to use between PrimaryTable and T</param>
        </member>
        <member name="M:metadatalibrary.FormController.CheckEntityChildRowAdditions(System.Data.DataRow,System.String)">
            <summary>
             If possible, makes R child of current PrimaryEntity 
            </summary>
            <param name="r"></param>
            <param name="relname"></param>
        </member>
        <member name="M:metadatalibrary.FormController.unlinkMultipleRows(System.Collections.Generic.List{System.Data.DataRow})">
            <summary>
            Optimized version to unlink a set of rows
            </summary>
            <param name="toUnlink"></param>
        </member>
        <member name="M:metadatalibrary.FormController.unlink(System.Data.DataRow)">
            <summary>
            Unlinks a specified row and set/unset the table as entitychild consequently. 
            Invoked during a Unlink_Grid_Row grid command
            </summary>
            <param name="r">Row to unlink</param>
            <returns>Unliked row or null if action canceled</returns>
        </member>
        <member name="M:metadatalibrary.FormController.FreshForm(System.Windows.Forms.Control.ControlCollection,System.Boolean,System.String)">
            <summary>
            Prefills a Table and Refills a set of controls
            </summary>
            <param name="cs">Collection of controls to fill (whith childs)</param>
            <param name="freshperipherals">when true, not -entity-or-cached- tables are cleared and read again from DB</param>
            <param name="tablename">Table to Prefill</param>
        </member>
        <member name="T:metadatalibrary.FormCopyList">
            <summary>
            Form che chiede il nome dell'elenco da salvare
            </summary>
        </member>
        <member name="F:metadatalibrary.FormCopyList.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:metadatalibrary.FormCopyList.newlisttype">
            <summary>
            Listing Type selezionato
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCopyList.#ctor(System.String[])">
            <summary>
            Costruisce il form con l'elenco passato
            </summary>
            <param name="elenchi">elenco dei listingtype esistenti</param>
        </member>
        <member name="M:metadatalibrary.FormCopyList.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCopyList.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:metadatalibrary.FormCustomViewList">
            <summary>
            Summary description for FormCustomViewList.
            </summary>
        </member>
        <member name="F:metadatalibrary.FormCustomViewList.DT">
            <summary>
            DataTable containing data displayed in the list
            </summary>
        </member>
        <member name="F:metadatalibrary.FormCustomViewList.running">
            <summary>
            True when form is active
            </summary>
        </member>
        <member name="F:metadatalibrary.FormCustomViewList.m_listtypeissystem">
             <summary>
            true se il listtype è di sistema 
             </summary>
        </member>
        <member name="F:metadatalibrary.FormCustomViewList.DescribeColumnsApplied">
            <summary>
            True se DescribColumns è stato applicato su listing type
            (di sistema) corrente.
            </summary>
        </member>
        <member name="F:metadatalibrary.FormCustomViewList.LastSelectedRow">
            <summary>
            Last DataRow Selected in the list
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.Destroy">
            <summary>
            Dispose all resources
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.#ctor(metadatalibrary.MetaData,System.String,System.String,System.String,System.String,System.Data.DataTable,System.String,System.Boolean,System.Int32)">
            <summary>
            Creates a list
            </summary>
            <param name="linked">Linked metadata</param>
            <param name="columnlist">list of columns to be read</param>
            <param name="filter">filter to apply</param>
            <param name="tablename">table name for reading data</param>
            <param name="listtype">listtype to use</param>
            <param name="ToMerge">A table to be merged with results from db</param>
            <param name="sorting">sorting to appy to list</param>
            <param name="filterlocked">When true, user is not allowed to change list filter</param>
            <param name="top"></param>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.#ctor(metadatalibrary.MetaData,System.String,System.String,System.String,System.String,System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="linked">MetaData linked to the list</param>
            <param name="columnlist">list of column names separated by commas</param>
            <param name="filter">search condition to use</param>
            <param name="tablename">name of table where data must be retrieved</param>
            <param name="listtype">list type to use</param>
            <param name="ToMerge">DataTable containing rows that must be merged with found rows</param>
            <param name="sorting"></param>
            <param name="filterlocked">if true, filter can't be cleared and is not possible to change listtype</param>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.RestartWithNewListType(System.String)">
            <summary>
            Seleziona un nuovo listing type e riempie il combo dei listing type.
            </summary>
            <param name="listtype"></param>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.SelectNewListType(System.String,System.Boolean)">
            Nota: i metodi delle varie griglie si distinguono in
            XXXGridNomeXXXXX , al momento abbiamo:
            GridElenchi (grid del tab elenchi)
            GridColonne (grid del tab colonne)
            Attenzione, i metodi che terminano per Columns fanno riferimento
            alle impostazioni delle colonne nella relativa griglia e non
            al tab colonne.
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.EnableDisableButtons(System.Boolean)">
            <summary>
            Imposta l'abilitazione dei bottoni
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.AddEventsToGridElenchi">
            <summary>
            Add events to cells. Must be called after every databinding
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.SetGridElenchi">
            <summary>
            Impostazioni statiche della grid Elenchi
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.CreaESalvaDummyListType(System.String,System.String)">
            <summary>
            Crea un listtype temporaneo con tutti i dati a null eccetto per il colname
            Si verifica se per quel tablename non è presente sul DB nessun listtype
            Output: DS
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.GetFont(System.Data.DataRow)">
            <summary>
            Ottiene il Font con tutte le sue proprietà (Stile, family, etc.)
            </summary>
            <param name="row">Datarow che contiene tutti i parametri
            delle proprietà del Font</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.FillComboList">
            <summary>
            Fills the combo of list-types, getting values from DB
            Does not change current listing type
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.GridElenchiSelectCell">
            <summary>
            Called when users clicks on the list grid
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.ImpostaTabsImpostazioni">
            <summary>
            Imposta i due grid leggendo le impostazioni sul listtype
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.SetGridColonneColumns">
            <summary>
            Assegna le impostazioni statiche del Grid Colonne
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.BuildOrderByCondition">
            <summary>
            Costruisce la condizione di ordinamento
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.AllineaDatasetImpostazioni(System.Data.DataTable)">
            <summary>
            Memorizzo nel DS l'indice di visualizzazione, la width e la caption
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.SetPageSelezione">
            <summary>
            Imposta il tab di selezione ed effettua il binding con DS
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.EnableDisableDeleteAllCond">
            <summary>
            Abilita / disabilita il tasto Elimina tutte (le condizioni di where)
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.SetGridSelezione">
            <summary>
            Imposta  gridSelezione ed effettua binding con DS
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.ApplicaStatoSelezione(System.String)">
            <summary>
            In base allo stato del form abilita/disabilita buttons
            </summary>
            <param name="stato">Stato del form</param>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.SalvaWhereCondition">
            <summary>
            Memorizza/cancella nel DS le where condition
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.UpdateCustomViewWhere">
            <summary>
            Aggiorna la riga selezionata
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.DeleteCustomViewWhere">
            <summary>
            Elimina la riga selezionata da customviewwhere
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.DeleteAllCustomViewWhere">
            <summary>
            Elimina dal dataset tutte le righe di customviewwhere per listtype
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.SetDataWhereCond(System.Data.DataRow)">
            <summary>
            Valorizza la datarow con i dati selezionati dall'utente
            </summary>
            <param name="row">riga da valorizzare</param>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.AddToCustomViewWhere">
            <summary>
            Aggiunge una riga customviewwhere al Dataset
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.EnableDisableWhereEnvironment(System.Boolean)">
            <summary>
            Abilita/disabilita campi del form (DIPENDE DA ApplicaStato)
            </summary>
            <param name="valore"></param>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.SetPageOrdinamento">
            <summary>
            Imposta Tab Ordinamento ed effettua binding con DS
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.SetGridOrdinamento">
            <summary>
            Imposta il grid Ordinamento ed effettua binding con DS
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.LoadCustomDirection">
            <summary>
            Inserisce due righe nella tabella temporanea customdirection
            per mappare 0 - Crescente e 1 - Decrescente
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.ApplicaStatoOrdinamento(System.String)">
            <summary>
            In base allo stato del form abilita/disabilita buttons
            </summary>
            <param name="stato">Stato del form</param>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.SalvaOrderBy">
            <summary>
            Memorizza/cancella nel DS gli orderby
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.AddToCustomViewOrderBy">
            <summary>
            Aggiunge una riga customvieworderby al Dataset
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.SetDataOrderBy(System.Data.DataRow)">
            <summary>
            Valorizza la datarow con i dati selezionati dall'utente
            </summary>
            <param name="row">riga da valorizzare</param>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.UpdateCustomViewOrderBy">
            <summary>
            Aggiorna la riga selezionata
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.DeleteCustomViewOrderBy">
            <summary>
            Elimina la riga selezionata da customvieworderby
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.DeleteAllCustomViewOrderBy">
            <summary>
            Elimina dal dataset tutte le righe di customvieworderby per listtype
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.EnableDisableOrderByEnvironment(System.Boolean)">
            <summary>
            Abilita/disabilita campi del page orderby (DIPENDE DA ApplicaStato)
            </summary>
            <param name="valore">Abilita/disabilita</param>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.EnableDisableDeleteAllOrderBy">
            <summary>
            Abilita / disabilita il tasto Elimina tutti (ordinamenti)
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.CreateContextMenu">
            <summary>
            Crea il menu contestuale con le voci Nascondi colonna, Salva Elenco,
             Copia Elenco, Elimina Elenco 
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.UpdateContextMenu(System.Boolean)">
            <summary>
            Abilita/Disabilita le voci del menu contestuale in base al fatto che 
              il listing type è di tipo system e/o filter locked
            </summary>
            <param name="m_listtypeissystem"></param>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.GetSelectedRow(Xceed.Grid.GridControl,System.Data.DataSet,System.String)">
            <summary>
            Ultima riga selezionata sulla grid
            </summary>
            <param name="grid">Xceed GridControl</param>
            <param name="DataSource">Il dataset a cui è agganciato il grid</param>
            <param name="TableName">Il nome della tabella</param>
            <returns>DataRow</returns>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.EseguiPostData(metadatalibrary.VistaFormCustomView)">
            <summary>
            Esegue il commit dei dati relativi alle impostazioni della grid
            Elenchi
            </summary>
            <param name="ds">Il dataset tipizzato custom view</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.GetBaseGridComboBox">
            <summary>
            Impostazioni comuni a tutte le combo della grid
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.GetListType">
            <summary>
            Gets the current List Type name
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.SalvaConNome(System.String)">
            <summary>
            Cambia il nome del listing type corrente, modificando il dataset DS,
             e poi salva su DB la nuova versione
            </summary>
            <param name="newlisttype"></param>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.gridX_GroupingUpdated(System.Object,System.EventArgs)">
            <summary>
            nasconde le colonne presenti nel group-by
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.LeggiElenco(metadatalibrary.MetaData,System.String,System.String,System.String,System.String,System.Data.DataTable)">
            <summary>
            LEGGE DSDati ed effettua BINDING e ORDINAMENTO
            </summary>
            <param name="linked"></param>
            <param name="filter"></param>
            <param name="tablename"></param>
            <param name="columnlist"></param>
            <param name="orderby"></param>
            <param name="ToMerge"></param>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.leggiImpostazioniListType(System.String)">
            <summary>
            Riempie il DataSet (DS) delle impostazioni dell'elenco
            </summary>
            <param name="list_type">nome dell'elenco da caricare</param>
        </member>
        <member name="F:metadatalibrary.FormCustomViewList.n_connector">
            <summary>
            N. of available connector
            </summary>
        </member>
        <member name="F:metadatalibrary.FormCustomViewList.AND_CONNECTOR">
            <summary>
            AND connector code
            </summary>
        </member>
        <member name="F:metadatalibrary.FormCustomViewList.OR_CONNECTOR">
            <summary>
            OR connector code
            </summary>
        </member>
        <member name="F:metadatalibrary.FormCustomViewList.PREV_CONNECTOR">
            <summary>
            "AND with base filter" connector code
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.DescribeConnector(System.Int32)">
            <summary>
            Gives Connector name given its code
            </summary>
            <param name="_connector"></param>
            <returns></returns>
        </member>
        <member name="F:metadatalibrary.FormCustomViewList.n_operators">
            <summary>
            N. of operators available
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.CountOperands(System.Int32)">
            <summary>
            Gets n. of operands of operator.
            </summary>
            <param name="_operator"></param>
            <returns>-1 if variable number (one or more)</returns>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.GetRunTimeParams(System.String[]@,System.String,System.String,System.Int32)">
            <summary>
            Returns true if params got, false if clause was skipped
            </summary>
            <param name="result">parameters got</param>
            <param name="campo">field name for which parameters are read</param>
            <param name="caption"></param>
            <param name="operatore">Operator code that will be used with parameters</param>
            <returns>true when successfull</returns>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.DescribeOperator(System.Int32)">
            <summary>
            Get operator description given its code
            </summary>
            <param name="_operator"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.compileOneClause(metadatalibrary.ISecurity,System.Data.DataRow,System.Data.DataTable,System.Boolean)">
            <summary>
            Evaluates a single where clause, eventually asking parameters at run time
             if CanAskAtRuntime is true and Clause["runtime"]="1"
            </summary>
            <param name="security"></param>
            <param name="clause">customviewwhere row</param>
            <param name="T"></param>
            <param name="canAskAtRunTime"></param>
            <returns>compiled where clause</returns>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.GetSqlClause(System.String,System.Int32,System.Object[])">
            <summary>
            Gets a single where clause
            </summary>
            <param name="fieldname"></param>
            <param name="_operator">operator code</param>
            <param name="operands">array of quoted operands</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.GetParams(System.String[]@,System.String,System.Int32)">
            <summary>
            Splits val in nparams substrings, returns true when successfull
            </summary>
            <param name="result">result parameter array</param>
            <param name="val">string containing parameters separated by semicolon (;)</param>
            <param name="nparams">N. of parameter to get</param>
            <returns>true when successfull</returns>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.getFilterFromCustomViewWhere(metadatalibrary.ISecurity,System.Data.DataTable,System.String,System.Data.DataRow[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="security"></param>
            <param name="T"></param>
            <param name="basefilter"></param>
            <param name="whereClauses"></param>
            <param name="canAskAtRunTime"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.OttieniFiltro(System.Data.DataTable)">
            <summary>
            Costruisce la where condition  (merge di Impostazioni e filtro ingresso)
            Input: Filtro iniziale, DS, checkbox "usa"
            </summary>
            param name="T" usato per le caption dei parametri a run time
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.isColumnVisibleByListType(System.String)">
            TODO: impostazioni del colore
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.ApplicaImpostazioniListType">
            <summary>
            Imposta le proprietà (ordine colonne, captio, visibilità) del grid dei dati in base a customviewcolumn
            </summary>
            <remarks>Il binding dei dati deve essere già stato fatto.
            </remarks>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.ApplicaImpostazioniDaCodice_pre(System.String,System.Boolean)">
            <summary>
            Assegna visible=0 a tutte le colonne che hanno caption vuota o iniziante con il punto
            </summary>
            <param name="listingtype"></param>
            <param name="issystem"></param>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.getCaptionNoDot(System.String)">
            <summary>
            Restituisce la caption senza l'eventuale punto davanti
            </summary>
            <param name="caption"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.ApplicaImpostazioniDaCodice_post(System.String,System.Boolean)">
            <summary>
            Imposta caption e visibilità delle colonne dei dati in base alle impostazioni da codice, solo per 
             gli elenchi di sistema.  Inoltre nasconde colonne senza dati e colonna senza impostazioni nel dataset
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.UpdateSysListType(System.String)">
            <summary>
            Aggiorna il flag m_listtypeissystem, i bottoni ed il menu contestuale
            </summary>
            <param name="listtype"></param>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.LeggiListingType(System.String)">
            <summary>
            Legge il listing type e ne crea uno dummy di sistema se non esiste
            Aggiorna il menu contestuale ed i bottoni
            Output = DS
            </summary>
            <param name="listtype"></param>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.RefitColumns">
            <summary>
            Effettua il refit di tutte le colonne visibili per cui non è 
             ancora stato effettuato
            </summary>
        </member>
        <member name="P:metadatalibrary.FormCustomViewList.errorLogger">
            <summary>
            Class for logging errors
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.ApplicaListType">
            <summary>
            Input = DS
            Legge i dati (se necessario) e li visualizza con il listtype corrente 
            Assume m_listtype e m_listtypeissystem già calcolati
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.ConvertPositionToIndex(System.Int32,System.Boolean)">
            <summary>
            First column has index 1
            </summary>
            <param name="Position"></param>
            <param name="AbilitaGruppi"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.HasNext">
            <summary>
            Check if there is a next row in the list
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.HasPrev">
            <summary>
            Check if there is a previous row in the list
            </summary>
            <returns></returns>
        </member>
        <member name="F:metadatalibrary.FormCustomViewList.GOTOPilotato">
            <summary>
            True if rowchange is made by runing code
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.GotoNext">
            <summary>
            Advance to next row  in list
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.GotoPrev">
            <summary>
            Goes on row up in the list
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.GotoFirst">
            <summary>
            Move to the first row of the list
            </summary>
        </member>
        <member name="M:metadatalibrary.FormCustomViewList.GotoLast">
            <summary>
            Go to the last   row of the list
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormEventsManager.AutoEventEnabled">
            <summary>
            True if autoevents are enabled (i.e. all automatic actions called when
             a current row selected in control like combobox, grid, tree changes
            </summary>
        </member>
        <member name="M:metadatalibrary.IFormEventsManager.EnableAutoEvents">
            <summary>
            (Re)Enable Automatic Events (i.e. ControlChanged)
            </summary>
        </member>
        <member name="M:metadatalibrary.IFormEventsManager.DisableAutoEvents">
            <summary>
            Disable Automatic Events, i.e. ControlChanged Events 
            </summary>
        </member>
        <member name="M:metadatalibrary.IFormEventsManager.addListener``1(metadatalibrary.ApplicationEventHandlerDelegate{``0})">
            <summary>
             Adds a listener to a specified event
            </summary>
            <param name="handler"></param>
            <typeparam name="TEvent"></typeparam>
        </member>
        <member name="M:metadatalibrary.IFormEventsManager.removeListener``1(metadatalibrary.ApplicationEventHandlerDelegate{``0})">
            <summary>
            Removes a listener from a specified event
            </summary>
            <param name="handler"></param>
            <typeparam name="TEvent"></typeparam>
        </member>
        <member name="M:metadatalibrary.IFormEventsManager.dispatch``1(``0)">
            <summary>
            Fires an event unless events have been disabled
            </summary>
            <param name="event"></param>
            <typeparam name="TEvent"></typeparam>
        </member>
        <member name="P:metadatalibrary.FormEventsManager.AutoEventEnabled">
            <summary>
            True if autoevents are enabled (i.e. all automatic actions called when
             a current row selected in control like combobox, grid, tree changes
            </summary>
        </member>
        <member name="M:metadatalibrary.FormEventsManager.EnableAutoEvents">
            <summary>
            (Re)Enable Automatic Events (i.e. ControlChanged)
            </summary>
        </member>
        <member name="M:metadatalibrary.FormEventsManager.DisableAutoEvents">
            <summary>
            Disable Automatic Events, i.e. ControlChanged Events 
            </summary>
        </member>
        <member name="M:metadatalibrary.FormEventsManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.FormEventsManager.addListener``1(metadatalibrary.ApplicationEventHandlerDelegate{``0})">
            <inheritdoc />
        </member>
        <member name="M:metadatalibrary.FormEventsManager.removeListener``1(metadatalibrary.ApplicationEventHandlerDelegate{``0})">
            <inheritdoc />
        </member>
        <member name="M:metadatalibrary.FormEventsManager.dispatch``1(``0)">
            <inheritdoc />
        </member>
        <member name="T:metadatalibrary.frmAvvisoNessunaRigaTrovata">
            <summary>
            Summary description for frmAvvisoNessunaRigaTrovata.
            </summary>
        </member>
        <member name="F:metadatalibrary.frmAvvisoNessunaRigaTrovata.labMessage">
            <summary>
            Label for "no found rows"
            </summary>
        </member>
        <member name="F:metadatalibrary.frmAvvisoNessunaRigaTrovata.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:metadatalibrary.frmAvvisoNessunaRigaTrovata.#ctor(System.String,System.String)">
            <summary>
            Show a message for "no rows was found with the given conditions"
            </summary>
            <param name="mainmessage"></param>
            <param name="longmsg"></param>
        </member>
        <member name="M:metadatalibrary.frmAvvisoNessunaRigaTrovata.#ctor(System.String)">
            <summary>
            Shows a message for "no row was found"
            </summary>
            <param name="longmsg"></param>
        </member>
        <member name="M:metadatalibrary.frmAvvisoNessunaRigaTrovata.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:metadatalibrary.frmAvvisoNessunaRigaTrovata.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:metadatalibrary.FrmCheckExpression">
            <summary>
            Summary description for FrmCheckExpression.
            </summary>
        </member>
        <member name="F:metadatalibrary.FrmCheckExpression.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:metadatalibrary.FrmCheckExpression.#ctor(metadatalibrary.MetaData,System.Data.DataSet)">
            <summary>
            Debug form, used by developers to evaluate expressions run time
            </summary>
            <param name="Meta"></param>
            <param name="DS"></param>
        </member>
        <member name="M:metadatalibrary.FrmCheckExpression.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:metadatalibrary.FrmCheckExpression.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:metadatalibrary.FrmCheckExpression.UpdateType">
            <summary>
            Kind of sql generation
            </summary>
        </member>
        <member name="F:metadatalibrary.FrmCheckExpression.UpdateType.onlyInsert">
            <summary>
            Only insert
            </summary>
        </member>
        <member name="F:metadatalibrary.FrmCheckExpression.UpdateType.onlyUpdate">
            <summary>
            Onlu updates of existings rows
            </summary>
        </member>
        <member name="F:metadatalibrary.FrmCheckExpression.UpdateType.insertAndUpdate">
            <summary>
            Insert and updates
            </summary>
        </member>
        <member name="F:metadatalibrary.FrmCheckExpression.UpdateType.bulkinsert">
            <summary>
            unchecked insert
            </summary>
        </member>
        <member name="M:metadatalibrary.FrmCheckExpression.GetSQLData(System.Data.DataTable,metadatalibrary.FrmCheckExpression.UpdateType,System.IO.TextWriter,System.Int32,System.String)">
            <summary>
            Crea uno script di soli dati di una tabella
            </summary>
            <param name="T">Tabella di cui si vuole creare lo script</param>
            <param name="updateType">tipo di aggiornamento (onlyInsert, bulkInsert, InsertAndUpdate)</param>
            <param name="writer">TextWriter su cui scrivere</param>
            <param name="rowsPerBlock">Se maggiore di 0, indica ogni quante righe nello script deve essere inserito un go;
            Se minore o uguale a 0 allora nello script non verranno inseriti i go</param>
            <param name="cfilter"></param>
        </member>
        <member name="M:metadatalibrary.FrmCheckExpression.GetSQLDataValues(System.Data.DataRow)">
            <summary>
            Returns quoted values of a row separated by commas
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.frmConnect">
            <summary>
            Summary description for frmConnenct.
            </summary>
        </member>
        <member name="F:metadatalibrary.frmConnect.MyDataAccess">
            <summary>
            Output DataAccess Object
            </summary>
        </member>
        <member name="F:metadatalibrary.frmConnect.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:metadatalibrary.frmConnect.DBIdentifier">
            <summary>
            String to search in ODBC registry for DB description. Es. "Campus Local Source"
            </summary>
        </member>
        <member name="M:metadatalibrary.frmConnect.UpdateList(metadatalibrary.dblist)">
            <summary>
            
            </summary>
            <param name="dbl"></param>
        </member>
        <member name="M:metadatalibrary.frmConnect.#ctor(System.String)">
            <summary>
            Form that allows selection of the database connection from those
               available, and set a DataAccess object when the connection is
               successfully established.
            </summary>
        </member>
        <member name="M:metadatalibrary.frmConnect.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>        
        </member>
        <member name="M:metadatalibrary.frmConnect.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:metadatalibrary.FrmFiltraColonna">
            <summary>
            Form to ask an operator  to use in a custom query conditions
            </summary>
        </member>
        <member name="M:metadatalibrary.FrmFiltraColonna.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:metadatalibrary.FrmFiltraColonna.result">
            <summary>
            number of selected operator
            </summary>
        </member>
        <member name="F:metadatalibrary.FrmFiltraColonna.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:metadatalibrary.FrmFiltraColonna.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:metadatalibrary.FrmFiltraColonna.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:metadatalibrary.FrmFiltraColonna.txtColName">
            <summary>
            Displays the column name on which apply the selected operator
            </summary>
        </member>
        <member name="F:metadatalibrary.FrmFiltraColonna.txtValore">
            <summary>
            Optional additional operand to apply the selected operator
            </summary>
        </member>
        <member name="T:metadatalibrary.FrmMeter">
            <summary>
            Summary description for FrmMeter.
            </summary>
        </member>
        <member name="F:metadatalibrary.FrmMeter.pBar">
            <summary>
            Progress bar displayed
            </summary>
        </member>
        <member name="F:metadatalibrary.FrmMeter.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:metadatalibrary.FrmMeter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:metadatalibrary.FrmMeter.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:metadatalibrary.FrmMeter.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:metadatalibrary.frmMultipleSelection">
            <summary>
            Summary description for frmMultipleSelection.
            </summary>
        </member>
        <member name="F:metadatalibrary.frmMultipleSelection.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:metadatalibrary.frmMultipleSelection.#ctor(metadatalibrary.MetaData,metadatalibrary.IFormController,System.String,System.String,System.String,System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="linked">Linked metadata</param>
            <param name="Title">Caption for the form</param>
            <param name="labelAdded">Label for already added rows</param>
            <param name="labelToAdd">Label for rows to add</param>
            <param name="SourceTable">Source table to edit</param>
            <param name="filter">filter to search rows to add in memory</param>
            <param name="filterSQL">filter to search rows to add in database</param>
            <param name="listingtype">listtype for grids</param>
        </member>
        <member name="M:metadatalibrary.frmMultipleSelection.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:metadatalibrary.frmMultipleSelection.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:metadatalibrary.NotesOleNotes">
            <summary>
            Summary description for NotesOleNotes.
            </summary>
        </member>
        <member name="M:metadatalibrary.NotesOleNotes.#ctor(metadatalibrary.MetaData)">
            <summary>
            Constructor
            </summary>
            <param name="Meta">MetaData to edit</param>
        </member>
        <member name="M:metadatalibrary.NotesOleNotes.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:metadatalibrary.NotesOleNotes.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:metadatalibrary.frmSelezioneValori">
            <summary>
            Allow the user to select a value between all possible values assumed
             by a field into a table.
            </summary>
        </member>
        <member name="F:metadatalibrary.frmSelezioneValori.listBox1">
            <summary>
            ListBox containing all selectable values
            </summary>
        </member>
        <member name="F:metadatalibrary.frmSelezioneValori.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:metadatalibrary.frmSelezioneValori.#ctor(System.Data.DataTable,System.String)">
            <summary>
            Form constructor
            </summary>
            <param name="T">Table containing data</param>
            <param name="field">field to select data</param>
        </member>
        <member name="M:metadatalibrary.frmSelezioneValori.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:metadatalibrary.frmSelezioneValori.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:metadatalibrary.FrmShowException">
            <summary>
            Summary description for FrmShowException.
            </summary>
        </member>
        <member name="F:metadatalibrary.FrmShowException.logurl">
            <summary>
            remote url for log errors
            </summary>
        </member>
        <member name="F:metadatalibrary.FrmShowException.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:metadatalibrary.FrmShowException.#ctor(System.String,System.Exception,metadatalibrary.EntityDispatcher)">
            <summary>
            Display a message with an error
            </summary>
            <param name="MainMsg"></param>
            <param name="E"></param>
            <param name="D">used to log additional informations</param>
        </member>
        <member name="M:metadatalibrary.FrmShowException.#ctor(System.String,System.Exception,metadatalibrary.MetaData)">
            <summary>
             Displays an exception with a main message
            </summary>
            <param name="MainMsg"></param>
            <param name="E"></param>
            <param name="m">used to log additional informations</param>
        </member>
        <member name="M:metadatalibrary.FrmShowException.#ctor(System.String,System.Exception)">
            <summary>
            Shows an exception with a message, doesnt log to remote server
            </summary>
            <param name="MainMsg"></param>
            <param name="E"></param>
        </member>
        <member name="M:metadatalibrary.FrmShowException.#ctor(System.String,System.String)">
            <summary>
            Displays a message with an optional detailed message, doesnt log to remote server
            </summary>
            <param name="MainMsg"></param>
            <param name="Long"></param>
        </member>
        <member name="M:metadatalibrary.FrmShowException.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:metadatalibrary.FrmShowException.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:metadatalibrary.IGetData.Destroy">
            <summary>
            Dispose all resource
            </summary>
        </member>
        <member name="P:metadatalibrary.IGetData.PrimaryTable">
            <summary>
            Primary Table Name
            </summary>
        </member>
        <member name="P:metadatalibrary.IGetData.PrimaryDataTable">
            <summary>
            Primary Table of the DataSet. Primary Table is the first table scanned 
             when data is read from db.
            </summary>
        </member>
        <member name="P:metadatalibrary.IGetData.security">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.IGetData.CacheTable(System.String)">
            <summary>
            Set a table as "cached", i.e. it will be read only one time 
            	in the life of the form.
            </summary>
            <param name="tablename"></param>
        </member>
        <member name="M:metadatalibrary.IGetData.ReadCached">
            <summary>
            Read all tables marked as "ToCache" with CacheTable() that haven't yet been read
            </summary>
        </member>
        <member name="M:metadatalibrary.IGetData.InitClass(System.Data.DataSet,metadatalibrary.DataAccess,System.String)">
            <summary>
            Initialize class. Necessary before doing any other operation
            </summary>
            <param name="DS"></param>
            <param name="Conn"></param>
            <param name="PrimaryTable"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IGetData.InitClass(System.Data.DataSet,metadatalibrary.IDataAccess,System.String)">
            <summary>
            Initialize class. Necessary before doing any other operation
            </summary>
            <param name="DS"></param>
            <param name="Conn"></param>
            <param name="PrimaryTable"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IGetData.SetStaticFilter(System.String,System.String)">
            <summary>
            Apply a filter on a table during any further read
            </summary>
            <param name="tablename"></param>
            <param name="filter"></param>
        </member>
        <member name="M:metadatalibrary.IGetData.CLEAR_ENTITY">
            <summary>
            Clears all tables except for temporary and cached (including pre-filled combobox).
            Also undoes the effect of denyclear on all secondary tables setting tables 
             with AllowClear()
            </summary>
        </member>
        <member name="M:metadatalibrary.IGetData.START_FROM(System.Data.DataRow)">
            <summary>
            Fill the primary table starting with a row equal to Start. Start Row should not
             belong to PrimaryTable. Infact PrimaryTable is cleared before getting values from Start fields 
            </summary>
            <param name="Start"></param>
        </member>
        <member name="M:metadatalibrary.IGetData.SEARCH_BY_KEY(System.Data.DataRow)">
            <summary>
            Fill the primary table with a row searched from database. R is not required to belong to
             PrimaryTable, but should have the same primary key columns.
            </summary>
            <param name="R"></param>
        </member>
        <member name="M:metadatalibrary.IGetData.GetByKey(System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Gets a primary table DataRow from db, given its primary key
            </summary>
            <param name="Dest">Table into which putting the row read</param>
            <param name="Key">DataRow with the same key as wanted row</param>
            <returns>null if row was not found</returns>
        </member>
        <member name="M:metadatalibrary.IGetData.GetFromViewByKey(System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Try to get a row from an in-memory view if there is one. This function
             is obsolete cause now it's possible to write view table as if they
             were real table.
            </summary>
            <param name="Dest"></param>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IGetData.GET_PRIMARY_TABLE(System.String)">
            <summary>
            Clears &amp; Fill the primary table with all records from a database table
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:metadatalibrary.IGetData.DO_GET(System.Boolean,System.Data.DataRow)">
            <summary>
            Gets all data of the DataSet cascated-related to the primary table.
            The first relations considered are child of primary, then
             proper child / parent relations are called in cascade style.
            </summary>
             <param name="onlyperipherals">if true, only peripheral (not primary or secondary) tables are refilled</param>
             <param name="OneRow">The (eventually) only primary table row on which
              get the entire sub-graph. Can be null if PrimaryDataTable 
              already contains rows.  R is not required to belong to PrimaryDataTable.</param>
            <returns>always true</returns>
        </member>
        <member name="M:metadatalibrary.IGetData.VerifyTableExistence(System.String)">
            <summary>
            Checks for DataTable existence in a DataSet
            </summary>
            <param name="TableName"></param>
            <returns>tablename if table exists, null otherwise</returns>
        </member>
        <member name="M:metadatalibrary.IGetData.VerifyColumnExistence(System.String,System.String)">
            <summary>
            Checks for column existence in a table
            </summary>
            <param name="FieldName"></param>
            <param name="TableName"></param>
            <returns>columnname if column exists, null otherwise</returns>
        </member>
        <member name="M:metadatalibrary.IGetData.DO_GET_TABLE(System.Data.DataTable,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Reads a filtered table from DB
            </summary>
            <param name="T"></param>
            <param name="sort_by"></param>
            <param name="filter"></param>
            <param name="clear"></param>
            <param name="TOP"></param>
        </member>
        <member name="M:metadatalibrary.IGetData.DO_GET_TABLE(System.Data.DataTable,System.String,System.String,System.Boolean,System.String,System.Collections.Generic.List{metadatalibrary.SelectBuilder})">
            <summary>
            Gets a DataTable with an optional set of Select 
            </summary>
            <param name="T">DataTable to Get from DataBase</param>
            <param name="sort_by">parameter to pass to "order by" clause</param>
            <param name="filter"></param>
            <param name="clear">if true table is cleared before reading</param>
            <param name="TOP">parameter for "top" clause of select</param>
            <param name="selList"></param>
        </member>
        <member name="M:metadatalibrary.IGetData.DO_GET_TABLE(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets a table from DB using sort,filter and clear parameter
            </summary>
            <param name="TableName"></param>
            <param name="sort_by">list of sort-clauses. Es. "code ASC, name DESC</param>
            <param name="filter">filter to apply for reading</param>
            <param name="clear">true if existent table must be cleared</param>
        </member>
        <member name="M:metadatalibrary.IGetData.RefreshTable(System.Data.DataTable)">
            <summary>
            Reads a table accordingly to DataSet properties:
            if it is a cached table, it is read entirely again
            if it is a non-cached table, it is considered a lookup table, i.e. a parent 
             table, so parent rows of existent childs are read.
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.IGetData.DO_GET_TABLE(System.String,System.String)">
            <summary>
            Gets a Table from DB filtering by filter and clearing existent
            </summary>
            <param name="T"></param>
            <param name="filter"></param>
        </member>
        <member name="M:metadatalibrary.IGetData.GetTemporaryValues(System.Data.DataTable)">
            <summary>
            Gets evaluated fields, taking the ExtendedProperties QueryCreator.IsTempColumn
              and considering it in a "childtable.childfield" format
            Also calls CalcFieldsDelegate of the table for every rows (when needed)
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.IGetData.CalcTemporaryValues(System.Data.DataRow)">
            <summary>
            Gets calculated fields from related table (Calculated fields are those 
            	provided with an expression). 
            </summary>
            <param name="R"></param>
        </member>
        <member name="M:metadatalibrary.IGetData.EntityRelatedByRel(System.String)">
            <summary>
            Gets a DataTable related with PrimaryTable via a given Relation Name.
            Also gets columns implied in the relation of related table.
            </summary>
            <param name="relname"></param>
            <returns>related DataTable</returns>
        </member>
        <member name="M:metadatalibrary.IGetData.EntityRelatedByRel(System.String,System.Data.DataColumn[]@)">
            <summary>
            Gets a DataTable related with PrimaryTable via a given Relation Name.
            Also gets columns implied in the relation of related table 
            </summary>
            <param name="relname"></param>
            <param name="Cs">Columns of related table, implied in the relation</param>
            <returns>Related table</returns>
        </member>
        <member name="M:metadatalibrary.IGetData.GetParentRows(System.Data.DataRow,System.Collections.Hashtable,System.Collections.Generic.List{metadatalibrary.SelectBuilder})">
            <summary>
            Get parent rows of a given Row, in a set of specified  tables.
            </summary>
            <param name="R">DataRow whose parents are wanted</param>
            <param name="Allowed">Tables in which to search parent rows</param>
            <param name="selList"></param>
            <returns>true if any of parent DataRows was already in memory. This is not 
             granted if rows are taken from a view</returns>
        </member>
        <member name="T:metadatalibrary.GetData">
            <summary>
            GetData is a class to automatically get all data related to a set of rows
             in a primary table, given a DataSet that describes all relations between data
             to get. 
            When getting data, temporary tables are skipped, and temporary field are
              calculated when possible.
            GetData is part of the Model Layer
            </summary>
        </member>
        <member name="M:metadatalibrary.GetData.Destroy">
            <summary>
            Dispose all resource
            </summary>
        </member>
        <member name="P:metadatalibrary.GetData.PrimaryTable">
            <summary>
            Primary Table Name
            </summary>
        </member>
        <member name="P:metadatalibrary.GetData.PrimaryDataTable">
            <summary>
            Primary Table of the DataSet. Primary Table is the first table scanned 
             when data is read from db.
            </summary>
        </member>
        <member name="F:metadatalibrary.GetData.Conn">
            <summary>
            Connection to DataBase
            </summary>
        </member>
        <member name="P:metadatalibrary.GetData.security">
            <summary>
            
            </summary>
        </member>
        <member name="F:metadatalibrary.GetData.VisitedFully">
            <summary>
            A collection of tables that have been read with a null filter. These are not read 
             again.
            </summary>
        </member>
        <member name="M:metadatalibrary.GetData.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:metadatalibrary.GetData.CacheTable(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            Set Table T to be read once for all when ReadCached will be called next time
            </summary>
            <param name="T"></param>
            <param name="filter"></param>
            <param name="sort"></param>
            <param name="AddBlankRow">when true, a blank row is added as first row of T</param>
        </member>
        <member name="M:metadatalibrary.GetData.CacheTable(System.Data.DataTable)">
            <summary>
            Tells GetData to read T once for all
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.GetData.UnCacheTable(System.Data.DataTable)">
            <summary>
            Undo any CacheTable / DenyClear on T
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.GetData.CacheTable(System.String)">
            <summary>
            Set a table as "cached", i.e. it will be read only one time 
            	in the life of the form.
            </summary>
            <param name="tablename"></param>
        </member>
        <member name="M:metadatalibrary.GetData.ReCache(System.Data.DataTable)">
            <summary>
            If a table is cached, is marked to be read again in next
             ReadCached. If the table is not cached, has no effect
            </summary>
            <param name="T">Table to cache again</param>
        </member>
        <member name="M:metadatalibrary.GetData.IsCached(System.Data.DataTable)">
            <summary>
            Returns true if table is cached (the table may or may not 
             have been read) 
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.GetData.LockRead(System.Data.DataTable)">
            <summary>
            Table T will never be read. It is marked like a cached table that has already been read.
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.GetData.TableHasBeenRead(System.Data.DataTable)">
            <summary>
            Set a table as "read". Has no effect if table isn't a chaed table
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.GetData.CanRead(System.Data.DataTable)">
            <summary>
            Tells if a table should be cleared and read again during a refresh.
            Cached tables are not read again during refresh if they have been already been read
            </summary>
            <param name="T"></param>
            <returns>true if table should be read</returns>
        </member>
        <member name="M:metadatalibrary.GetData.DenyClear(System.Data.DataTable)">
            <summary>
            Deny table clear when DO_GET() is called. If this is not called, a
              table that is not cached, entity or subentity will be cleared during DO_GET
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.GetData.AllowClear(System.Data.DataTable)">
            <summary>
            Re-Allow table clear when DO_GET() is called. Undoes the effect of a DenyClear
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.GetData.CanClear(System.Data.DataTable)">
            <summary>
            Tells if Table will be cleared during next DO_GET()
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.GetData.ReadCached">
            <summary>
            Read all tables marked as "ToCache" with CacheTable() that haven't yet been read
            </summary>
        </member>
        <member name="T:metadatalibrary.GetData.CalcFieldsDelegate">
            <summary>
            Delegates for custom field-calculations
            </summary>
        </member>
        <member name="M:metadatalibrary.GetData.ComputeRowsAs(System.Data.DataTable,System.String,metadatalibrary.GetData.CalcFieldsDelegate)">
            <summary>
            Tells MetaData Engine to call CalculateFields(R,ListingType) whenever:
             - a row is loaded from DataBase
             - a row is changed in a sub-entity form and modification accepted with mainsave
            </summary>
            <param name="T">DataTable to be custom calculated</param>
            <param name="ListingType">Listing type to use for delegate calling</param>
            <param name="Calc">Delegate function to call</param>
        </member>
        <member name="M:metadatalibrary.GetData.CalculateTable(System.Data.DataTable)">
            <summary>
            Evaluates custom fields for every row of a Table. Calls the delegate linked to the table,
             corresponding to the MetaData.CalculateFields() virtual method (if it has been defined).
            </summary>
            <param name="T"></param>
            <remarks>No action is taken on deleted rows. Unchanged rows remain unchanged anyway</remarks>
        </member>
        <member name="M:metadatalibrary.GetData.CalculateRow(System.Data.DataRow)">
            <summary>
            Evaluates custom fields for a single row. Calls the delegate linked to the table,
             corresponding to the MetaData.CalculateFields() virtual method (if it has been defined).
            </summary>
            <param name="R"></param>
            <remarks>No action is taken on deleted rows. Unchanged rows remain unchanged anyway</remarks>
        </member>
        <member name="M:metadatalibrary.GetData.InitClass(System.Data.DataSet,metadatalibrary.DataAccess,System.String)">
            <summary>
            Initialize class. Necessary before doing any other operation
            </summary>
            <param name="DS"></param>
            <param name="Conn"></param>
            <param name="PrimaryTable"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.GetData.InitClass(System.Data.DataSet,metadatalibrary.IDataAccess,System.String)">
            <summary>
            Initialize class. Necessary before doing any other operation
            </summary>
            <param name="ds"></param>
            <param name="conn"></param>
            <param name="primaryTable"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.GetData.SetStaticFilter(System.Data.DataTable,System.String)">
            <summary>
            Apply a filter on a table during any further read
            </summary>
            <param name="T"></param>
            <param name="filter"></param>
        </member>
        <member name="M:metadatalibrary.GetData.SetStaticFilter(System.String,System.String)">
            <summary>
            Apply a filter on a table during any further read
            </summary>
            <param name="tablename"></param>
            <param name="filter"></param>
        </member>
        <member name="M:metadatalibrary.GetData.CLEAR_ENTITY">
            <summary>
            Clears all tables except for temporary and cached (including pre-filled combobox).
            Also undoes the effect of denyclear on all secondary tables setting tables 
             with AllowClear()
            </summary>
        </member>
        <member name="M:metadatalibrary.GetData.CheckChildRel(System.Data.DataRelation)">
            <summary>
            Check if a relation connects any field that is primarykey for both parent and child
            </summary>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.GetData.START_FROM(System.Data.DataRow)">
            <summary>
            Fill the primary table starting with a row equal to Start. Start Row should not
             belong to PrimaryTable. Infact PrimaryTable is cleared before getting values from Start fields 
            </summary>
            <param name="Start"></param>
        </member>
        <member name="M:metadatalibrary.GetData.SEARCH_BY_KEY(System.Data.DataRow)">
            <summary>
            Fill the primary table with a row searched from database. R is not required to belong to
             PrimaryTable, but should have the same primary key columns.
            </summary>
            <param name="R"></param>
        </member>
        <member name="M:metadatalibrary.GetData.GetByKey(System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Gets a primary table DataRow from db, given its primary key
            </summary>
            <param name="Dest">Table into which putting the row read</param>
            <param name="Key">DataRow with the same key as wanted row</param>
            <returns>null if row was not found</returns>
        </member>
        <member name="M:metadatalibrary.GetData.GetFromViewByKey(System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Try to get a row from an in-memory view if there is one. This function
             is obsolete cause now it's possible to write view table as if they
             were real table.
            </summary>
            <param name="Dest"></param>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.GetData.MergeFilters(System.String,System.Data.DataTable)">
            <summary>
            Merge a filter (Filter1) with the static filter of a DataTable and
             gives the resulting (AND) filter
            </summary>
            <param name="Filter1"></param>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.GetData.MergeWithOperator(System.String,System.String,System.String)">
            <summary>
            Merges two filters (AND) without throwing exception if some or 
            	both are null
            </summary>
            <param name="Filter1"></param>
            <param name="Filter2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.GetData.MergeWithOperator(System.String[],System.String)">
            <summary>
            Merges two filters (AND) without throwing exception if some or 
            	both are null
            </summary>
            <param name="filter"></param>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.GetData.MergeFilters(System.String,System.String)">
            <summary>
            Merges two filters (AND) without throwing exception if some or 
            	both are null
            </summary>
            <param name="Filter1"></param>
            <param name="Filter2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.GetData.AppendOR(System.String,System.String)">
            <summary>
            Merge two condition A and B as  (A) OR (B)
            </summary>
            <param name="Filter1"></param>
            <param name="Filter2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.GetData.GET_PRIMARY_TABLE(System.String)">
            <summary>
            Clears &amp; Fill the primary table with all records from a database table
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:metadatalibrary.GetData.DO_GET(System.Boolean,System.Data.DataRow)">
            <summary>
            Gets all data of the DataSet cascated-related to the primary table.
            The first relations considered are child of primary, then
             proper child / parent relations are called in cascade style.
            </summary>
             <param name="onlyperipherals">if true, only peripheral (not primary or secondary) tables are refilled</param>
             <param name="OneRow">The (eventually) only primary table row on which
              get the entire sub-graph. Can be null if PrimaryDataTable 
              already contains rows.  R is not required to belong to PrimaryDataTable.</param>
            <returns>always true</returns>
        </member>
        <member name="M:metadatalibrary.GetData.VerifyTableExistence(System.String)">
            <summary>
            Checks for DataTable existence in a DataSet
            </summary>
            <param name="TableName"></param>
            <returns>tablename if table exists, null otherwise</returns>
        </member>
        <member name="M:metadatalibrary.GetData.VerifyColumnExistence(System.String,System.String)">
            <summary>
            Checks for column existence in a table
            </summary>
            <param name="FieldName"></param>
            <param name="TableName"></param>
            <returns>columnname if column exists, null otherwise</returns>
        </member>
        <member name="M:metadatalibrary.GetData.MarkToAddBlankRow(System.Data.DataTable)">
            <summary>
            Must be called for combobox-related tables
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.GetData.MarkedToAddBlankRow(System.Data.DataTable)">
            <summary>
            Check if a table was marjed to add a blank row 
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.GetData.MarkSkipSecurity(System.Data.DataTable)">
            <summary>
            Mark a table for skipping security controls
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.GetData.IsSkipSecurity(System.Data.DataTable)">
            <summary>
            Check if a table ha been marked as SkipSecurity
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.GetData.DO_GET_TABLE(System.Data.DataTable,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Reads a filtered table from DB
            </summary>
            <param name="T"></param>
            <param name="sort_by"></param>
            <param name="filter"></param>
            <param name="clear"></param>
            <param name="TOP"></param>
        </member>
        <member name="M:metadatalibrary.GetData.DO_GET_TABLE(System.Data.DataTable,System.String,System.String,System.Boolean,System.String,System.Collections.Generic.List{metadatalibrary.SelectBuilder})">
            <summary>
            Gets a DataTable with an optional set of Select 
            </summary>
            <param name="T">DataTable to Get from DataBase</param>
            <param name="sortBy">parameter to pass to "order by" clause</param>
            <param name="filter"></param>
            <param name="clear">if true table is cleared before reading</param>
            <param name="top">parameter for "top" clause of select</param>
            <param name="selList"></param>
        </member>
        <member name="M:metadatalibrary.GetData.GetSorting(System.Data.DataTable,System.String)">
            <summary>
            Gets the sorting property for a table
            </summary>
            <param name="T"></param>
            <param name="sort"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.GetData.SetSorting(System.Data.DataTable,System.String)">
            <summary>
            Set sorting property of a DataTable
            </summary>
            <param name="T"></param>
            <param name="sort"></param>
        </member>
        <member name="M:metadatalibrary.GetData.Add_Blank_Row(System.Data.DataTable)">
            <summary>
            Adds an empty (all fields blank) row to a table if the table has been marked
             with MarkToAddBlankRow
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.GetData.DO_GET_TABLE(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets a table from DB using sort,filter and clear parameter
            </summary>
            <param name="TableName"></param>
            <param name="sort_by">list of sort-clauses. Es. "code ASC, name DESC</param>
            <param name="filter">filter to apply for reading</param>
            <param name="clear">true if existent table must be cleared</param>
        </member>
        <member name="M:metadatalibrary.GetData.RefreshTable(System.Data.DataTable)">
            <summary>
            Reads a table accordingly to DataSet properties:
            if it is a cached table, it is read entirely again
            if it is a non-cached table, it is considered a lookup table, i.e. a parent 
             table, so parent rows of existent childs are read.
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.GetData.DO_GET_TABLE(System.String,System.String)">
            <summary>
            Gets a Table from DB filtering by filter and clearing existent
            </summary>
            <param name="T"></param>
            <param name="filter"></param>
        </member>
        <member name="M:metadatalibrary.GetData.CheckColumnProperty(System.String,System.String@,System.String@)">
            <summary>
            Checks that a Column Property is in the format parenttable.parentcolumn
            </summary>
            <param name="Tag">Extended Property of a DataColumn</param>
            <param name="table">table part if successfull</param>
            <param name="column">column part if successfull</param>
            <returns>true if the property is in a correct format</returns>
        </member>
        <member name="M:metadatalibrary.GetData.DO_GET_TABLE_ROOTS(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Gets some row from a datatable, with all child rows in the same table
            </summary>
            <remarks>TODO: This method will be removed</remarks>
            <param name="T">DataTable to Get from DataBase</param>
            <param name="filter">Filter to apply in order to retrieve roots</param>
            <param name="clear">true if table has to be cleared</param>
        </member>
        <member name="M:metadatalibrary.GetData.expandChilds(System.Data.DataRow[])">
            <summary>
            Gets child of a selected set of rows, and gets related tables
            </summary>
            <remarks>TODO: This method will be removed </remarks>
            <param name="ToExpand"></param>
        </member>
        <member name="M:metadatalibrary.GetData.DO_GET_PARENTS(System.Data.DataRow,System.Boolean)">
            <summary>
            Gets all necessary rows from table in order to rebuild R genealogy
            </summary>
            <param name="R"></param>
            <param name="AddChild">when true, all child of every parent found
             are retrieved
             </param>
        </member>
        <member name="M:metadatalibrary.GetData.GetSpecificChild(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            Gets a row from a table T taking the first row by the filter
             StartConndition AND (startfield like startval%)
            If more than oe row is found, the one with the smallest startfield is
             returned. Used for AutoManage functions.
            </summary>
            <param name="T"></param>
            <param name="StartCondition"></param>
            <param name="startval"></param>
            <param name="startfield"></param>
            <returns>null if no row was found</returns>
        </member>
        <member name="M:metadatalibrary.GetData.GetAutoChildRelation(System.Data.DataTable)">
            <summary>
            Gets a relation that connects a table with its self. Should be the same
             as AutoParent
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:metadatalibrary.GetData.ExpandChilds(System.Data.DataRow[])" -->
        <member name="M:metadatalibrary.GetData.DO_GET_PARENTS(System.Data.DataRow,System.Boolean,System.Data.DataRelation)">
            <summary>
            Gets all necessary rows from table in order to rebuild R genealogy
            </summary>
            <remarks>TODO: This method will be removed  </remarks>
            <param name="r"></param>
            <param name="addChild">when true, all child of every parent found are retrieved </param>
            <param name="autoParentRelation"></param>
        </member>
        <member name="M:metadatalibrary.GetData.ScanRow2(System.Collections.Hashtable,System.Data.DataRow,System.Boolean)">
            <summary>
            Gets only directly related (Parents and eventually childs) rows to OneRow
            </summary>
            <param name="Visited">Not-to-visit tables</param>
            <param name="OneRow">Row to scan for related ros</param>
            <param name="OnlyParents">true if only parent rows have to be taken</param>
        </member>
        <member name="M:metadatalibrary.GetData.ScanTables(System.Collections.Hashtable,System.Collections.Hashtable,System.Data.DataRow)">
            <summary>
            Get all child and parent rows of tables in "ToVisit", assuming that Tables in
            "Visited" table's rows have already been retrieved and so must not be 
            retrieved again. "Visited" can be considered as a barrier that can't be 
            overpassed in the scanning process.
            </summary>
            <param name="ToVisit">List of tables to scan</param>
            <param name="Visited">List of tables that are not to be scanned</param>
            <param name="OneRow">when not null, is the only primary table row for 
             which are taken child rows.</param>
        </member>
        <member name="M:metadatalibrary.GetData.GetTemporaryValues(System.Data.DataTable)">
            <summary>
            Gets evaluated fields, taking the ExtendedProperties QueryCreator.IsTempColumn
              and considering it in a "childtable.childfield" format
            Also calls CalcFieldsDelegate of the table for every rows (when needed)
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.GetData.CalcTemporaryValues(System.Data.DataRow)">
            <summary>
            Gets calculated fields from related table (Calculated fields are those 
            	provided with an expression). 
            </summary>
            <param name="R"></param>
        </member>
        <member name="M:metadatalibrary.GetData.GetRelatedRow(System.Data.DataRow,System.String,System.String)">
            <summary>
            Evaluate a field of a row R taking the value from a related row of
              a specified Table - Column
            </summary>
            <param name="R">DataRow to fill</param>
            <param name="relatedTableName">Table from which value has to be taken</param>
            <param name="relatedColumn">Column from which value has to be taken</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.GetData.iGetViewChildTable(System.Data.DataRow,System.Data.DataRelation)">
            <summary>
            Gets a table reading it from a view
            Here ViewTable.ExtendedProperties["RealTable"]==Rel.ChildTable
            </summary>
            <param name="R"></param>
            <param name="Rel"></param>
        </member>
        <member name="M:metadatalibrary.GetData.iGetParentRowsFromView(System.Data.DataRow,System.Data.DataRelation)">
            <summary>
            Gets R parent (by relation Rel)row from a view. Assumes that the view table has
             already been read.
            Here ViewTable.ExtendedProperties["RealTable"]==R.Table
            </summary>
            <param name="R"></param>
            <param name="Rel"></param>
            <returns>true if row has been read (it was in the view)</returns>
        </member>
        <member name="M:metadatalibrary.GetData.GetChildRows(System.Data.DataRow,System.Collections.Hashtable,System.Collections.Generic.List{metadatalibrary.SelectBuilder})">
            <summary>
            Gets R childs in a set of allowed Tables
            </summary>
            <param name="R"></param>
            <param name="Allowed">List of tables of which childs must be searched</param>
            <param name="selList"></param>
        </member>
        <member name="M:metadatalibrary.GetData.GetParentRows(System.Data.DataRow,System.Collections.Hashtable,System.Collections.Generic.List{metadatalibrary.SelectBuilder})">
            <summary>
            Get parent rows of a given Row, in a set of specified  tables.
            </summary>
            <param name="r">DataRow whose parents are wanted</param>
            <param name="allowed">Tables in which to search parent rows</param>
            <param name="selList"></param>
            <returns>true if any of parent DataRows was already in memory. This is not 
             granted if rows are taken from a view</returns>
        </member>
        <member name="M:metadatalibrary.GetData.EntityRelatedByRel(System.String)">
            <summary>
            Gets a DataTable related with PrimaryTable via a given Relation Name.
            Also gets columns implied in the relation of related table.
            </summary>
            <param name="relname"></param>
            <returns>related DataTable</returns>
        </member>
        <member name="M:metadatalibrary.GetData.EntityRelatedByRel(System.String,System.Data.DataColumn[]@)">
            <summary>
            Gets a DataTable related with PrimaryTable via a given Relation Name.
            Also gets columns implied in the relation of related table 
            </summary>
            <param name="relname"></param>
            <param name="Cs">Columns of related table, implied in the relation</param>
            <returns>Related table</returns>
        </member>
        <member name="M:metadatalibrary.GetData.GetFilterFromCustomViewWhere(metadatalibrary.DataAccess,System.Data.DataTable,System.String,System.Data.DataRow[],System.Boolean)">
            <summary>
            Evaluates a filetr string given a basefilter set of WhereClauses
            </summary>
            <param name="conn"></param>
            <param name="T"></param>
            <param name="basefilter">Filter to merge with WhereClauses</param>
            <param name="whereClauses">DataRow of customviewwhwere type</param>
            <param name="canAskAtRunTime">if true, it's allowed to ask parameter 
            	at run time when the whereclause needs it</param>
            <returns>evaluated filter</returns>
        </member>
        <member name="M:metadatalibrary.GetData.getFilterFromCustomViewWhere(metadatalibrary.ISecurity,System.Data.DataTable,System.String,System.Data.DataRow[])">
            <summary>
            
            </summary>
            <param name="security"></param>
            <param name="T"></param>
            <param name="basefilter">Filter to merge with WhereClauses</param>
            <param name="whereClauses">DataRow of customviewwhwere type</param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.HelpForm">
            <summary>
            Contains functions to help handling data in Windows Forms
            </summary>
            
        </member>
        <member name="M:metadatalibrary.HelpForm.addExtraEntity(System.String)">
            <summary>
            Start consider a table as an entity when drawing the form and reading data from the form. There should be 
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.getExtraEntities">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.HelpForm.drawmode">
            <summary>
            Possible draw states for a form. 
            </summary>
        </member>
        <member name="F:metadatalibrary.HelpForm.drawmode.insert">
            <summary>
            used when adding a new row on primary table
            </summary>
        </member>
        <member name="F:metadatalibrary.HelpForm.drawmode.edit">
            <summary>
            used when modifying an existing row
            </summary>
        </member>
        <member name="F:metadatalibrary.HelpForm.drawmode.setsearch">
            <summary>
            used when setting a search filter
            </summary>
        </member>
        <member name="F:metadatalibrary.HelpForm.tooltipOnControl">
            <summary>
            WHen true, debug tooltip are showed
            </summary>
        </member>
        <member name="T:metadatalibrary.HelpForm.ApplyOnControl">
            <summary>
            Method to be applied ricorsively through IterateControls
            </summary>
            <param name="C"></param>
        </member>
        <member name="F:metadatalibrary.HelpForm.tip">
            <summary>
            Tooltip for showing standard debug tooltip
            </summary>
        </member>
        <member name="T:metadatalibrary.HelpForm.AfterRowSelectDelegate">
            <summary>
            Delegate for the event "AfterRowSelect" 
            </summary>
        </member>
        <member name="F:metadatalibrary.HelpForm.dbQuery">
            <summary>
            QueryHelper for db conditions
            </summary>
        </member>
        <member name="F:metadatalibrary.HelpForm.ExtraEntities">
            <summary>
            Tables linked to "SubEntity" controls. These are read during GetForm(). 
            </summary>
        </member>
        <member name="F:metadatalibrary.HelpForm.DS">
            <summary>
            When true combobox are refilled. This is true when a main rows is read the first time, to 
             properly consider security conditions
            </summary>
        </member>
        <member name="F:metadatalibrary.HelpForm.FilterTree">
            <summary>
            Extended property for tree-filtering
            </summary>
        </member>
        <member name="F:metadatalibrary.HelpForm.dmode">
            <summary>
            Current draw mode, set by the MetaData that owns this class
            </summary>
        </member>
        <member name="M:metadatalibrary.HelpForm.Destroy">
            <summary>
            Dispose all resources
            </summary>
        </member>
        <member name="M:metadatalibrary.HelpForm.#ctor(metadatalibrary.GetData,System.Data.DataSet)">
            <summary>
            Initialize the class with a GetData object
            </summary>
            <param name="getd"></param>
            <param name="ds"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.#ctor">
            <summary>
            Initialize the class with a GetData object
            </summary>
            <param name="primaryTable"></param>
            <param name="q"></param>
            <param name="conn"></param>
            <param name="eventsManager"></param>        
        </member>
        <member name="M:metadatalibrary.HelpForm.init(System.Windows.Forms.Form)">
            <summary>
            Do all necessary initializations
            </summary>
        </member>
        <member name="F:metadatalibrary.HelpForm._myAutoEventEnabled">
            <summary>
            Events are Enabled only if AutoEventEnabled=0
            </summary>
        </member>
        <member name="M:metadatalibrary.HelpForm.SetFilterToTree(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="treeTable"></param>
            <param name="rowsAllowed"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.SetDenyNull(System.Data.DataColumn,System.Boolean)">
            <summary>
            Sets the DenyNull property of a DataColumn
            </summary>
            <param name="C"></param>
            <param name="deny"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.SetDenyZero(System.Data.DataColumn,System.Boolean)">
            <summary>
            Sets a DataColumn to deny zero values
            </summary>
            <param name="C"></param>                                                 
            <param name="deny"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.IsDenyNull(System.Data.DataColumn)">
            <summary>
            Returns true if a DataColumn is denied to store null values
            </summary>
            <param name="C"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.IsDenyZero(System.Data.DataColumn)">
            <summary>
             Returns true if a DataColumn is denied to store zero values
            </summary>
            <param name="C"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetLastField(System.String,System.Int32)">
            <summary>
            Gets the Nth field in a list of dot - separated fields. Assumes the field
             is the last of the list, so that the extracted string is allowed to 
             include dots.
            </summary>
            <param name="S">input string </param>
            <param name="N">0 for first field</param>
            <returns>null if field not found</returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetField(System.String,System.Int32)">
            <summary>
            Gets the Nth field in a list of dot separated fields
            </summary>
            <param name="S">input string</param>
            <param name="N">0 for first field</param>
            <returns>null if field not found</returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetFieldLower(System.String,System.Int32)">
            <summary>
            Gets a piece of tag, converted into lower
            </summary>
            <param name="S"></param>
            <param name="N"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetAnyTag(System.Object)">
            <summary>
            Gets Standard tag, or search tag if Standard is not present
            </summary>
            <param name="Tag"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.BlankToNull(System.String)">
            <summary>
            return S, or empty string if S is null
            </summary>
            <param name="S"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetStandardTag(System.Object)">
            <summary>
            Gets standard tag from a tag object
            </summary>
            <param name="Tag"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetSearchTag(System.Object)">
            <summary>
            Gets Search tag from a tag object
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.HasSpecificSearchTag(System.Object)">
            <summary>
            Returns true if Tag contains  an extended ? clause
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetTableName(System.String)">
            <summary>
            Get Tag gives Table
            </summary>
            <param name="tablecolumnval1val2">tag in the format table.field[:val1:val2]</param>
            <returns>table</returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetLookup(System.String)">
            <summary>
            Get ComboBox Tag gives parenttable.parentfield
            </summary>
            <param name="sourcetablecolumnval1val2">Tag in the format table.field[:val1:val2]</param>
            <returns>"table.field"</returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetColumnName(System.String)">
            <summary>
            Get Tag gives field
            </summary>
            <param name="sourcetablecolumnval1val2">Control Tag</param>
            <returns>ChildColumn</returns>
            <remarks>Tag in the format table.field[:val1:val2]  </remarks>
        </member>
        <member name="M:metadatalibrary.HelpForm.checkTag(System.String)">
            <summary>
            Checks that a Tag is in the format table.field[:val1:val2]
            </summary>
            <param name="Tag">ComboBox Tag</param>
            <returns>true if the Tag is in a correct format</returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.CheckStandardTag(System.Object)">
            <summary>
            Checks that a Tag is in the format master[:parenttable.parentcolumn]
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.CheckSearchTag(System.Object)">
            <summary>
            Return true if Tag contains a valid search tag, i.e. tablename and fieldname exists in DataSet
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetCurrChildRow(System.Data.DataRow,System.Data.DataTable)">
            <summary>
            Gets a child row of parentRow in childTable.
            It's necessary that only one child row exists in that table.
            </summary>
            <param name="parentRow"></param>
            <param name="childTable"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetCurrParentRow(System.Data.DataRow,System.Data.DataTable)">
            <summary>
            Takes parent row of current selected primary row. Also apply some logic
             to give reasonable results on errors:
             - if a parent relation is not found and the both the Primary and the Parent 
            	table only contains one  row, that row is retuned
             - if the parent table only has one child table and that child table has a
              row parent of the given row (by the same logic), that row is returned
            </summary>
            <param name="childRow">Primary whose parent is searched</param>
            <param name="parentTable">Parent Table</param>
            <returns>Parent Row of given Row</returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetCurrParentRow(System.Data.DataRow,System.Data.DataTable,System.String)">
            <summary>
            Gets the current parent Row of the specified Primary row. Can return null if the answer is not sure.
            </summary>
            <param name="primary"></param>
            <param name="parent"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetControls(System.Windows.Forms.Form)">
            <summary>
            Gets data from all textbox, checkboxes, radiobuttons and comboboxes of the form linked
             to the primary table.
            </summary>
            <param name="F">Form to Get</param>
            <remarks>The primary assumption for this function to work is that for every control
               in the form, a tag is set that logically links it to a field of the Primary Table.
               The exact format of the tag depends on the Control Type:
               TextBox:  fieldname
               ComboBox: master[:parenttable.parentfield]
               RadioButton: fieldname:value (to assign when checked)
               CheckBox: fieldname:valueYes:valueNo
              </remarks>
        </member>
        <member name="M:metadatalibrary.HelpForm.IterateGetControls(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Recursively Iterate GetControl over a Control Collection
            </summary>
            <param name="Cs"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.CompleteTag(System.String,System.Data.DataColumn)">
            <summary>
            Return tag for a datacolumn, completing it with DataColumn format properties
             if the tag does not contain format informations
            </summary>
            <param name="tag"></param>
            <param name="C"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetString(System.String,System.String,System.Data.DataRow,System.String)">
            <summary>
            Sets R[fieldname] to (string) S but:
            - don't do anything if R[fieldname] is already equal to S
            - convert S to  R[fieldname] type according to S'tag 
            </summary>
            <param name="S"></param>
            <param name="fieldname"></param>
            <param name="R"></param>
            <param name="tag"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetText(System.Windows.Forms.TextBox,System.String,System.Data.DataRow)">
            <summary>
            Takes value from a TextBox and put it in a row field
            </summary>
            <param name="T"></param>
            <param name="fieldname"></param>
            <param name="R"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetValueSignedGroup(System.Windows.Forms.GroupBox,System.String,System.Data.DataRow)">
            <summary>
            Gets a value in a ValueSigned groupbox
            </summary>
            <param name="G"></param>
            <param name="fieldname"></param>
            <param name="R"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.IsOnlyTimeStyle(System.String)">
            <summary>
            Check if format only displays time
            </summary>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetObjectFromString(System.Type,System.String,System.String)">
            <summary>
            Gets an object given a string representation of it, and a format "tag"
            </summary>
            <param name="T"></param>
            <param name="S"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.FillParentControls(System.Windows.Forms.Form,System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Sets controls of forms so that primary table controls describes a child of ParentRow
             Affected controls are only TextBox, prefilled combobox, prefilled
               TreeView, RadioButtons and CheckBoxes. Assumes form in "setsearch" mode
            </summary>
            <param name="f">Calling Form</param>
            <param name="parentTable">Table considered as Parent </param>
            <param name="parentRow">Row that should belong to getd.DS and should be
             in a parent table of primary table</param>
        </member>
        <member name="M:metadatalibrary.HelpForm.FillParentControls(System.Windows.Forms.Control.ControlCollection,System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Fills a collection of controls related to a specified parent Table
            </summary>
            <param name="cs"></param>
            <param name="parentTable"></param>
            <param name="parentRow"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.FillParentControls(System.Windows.Forms.Form,System.Data.DataRow,System.Data.DataRelation)">
            <summary>
            Fills all form controls related to a specified parent Table by a specified condition
            </summary>
            <param name="f"></param>
            <param name="parentRow"></param>
            <param name="rel"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.FillParentControls(System.Windows.Forms.Control.ControlCollection,System.Data.DataRow,System.Data.DataRelation)">
            <summary>
            Fills controls of forms to display a Parent Row so that primary table 
            	controls becomes a child of ParentRow
            </summary>
            <param name="cs"></param>
            <param name="parentRow"></param>
            <param name="rel"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.FillParentControls(System.Windows.Forms.Form,System.Data.DataRow,System.String)">
            <summary>
            Fill  parent's related controls so that current primary row controls
             describe a child of that row
            </summary>
            <param name="f"></param>
            <param name="parentRow"></param>
            <param name="relname"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.FillTableControls(System.Windows.Forms.Form,System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Fills form's controls linked to a Table. If a Row is given,
             it is used for getting values. Otherwise, values are cleared
            </summary>
            <param name="f"></param>
            <param name="table"></param>
            <param name="row"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.FillTableControls(System.Windows.Forms.Form,System.Data.DataTable,System.Data.DataRow,System.Data.DataColumn[])">
            <summary>
            Fill form's control related to some fields of a row
            </summary>
            <param name="f">Form to fill</param>
            <param name="table">Table whose controls have to be filled</param>
            <param name="row">Row from which values have to be taken</param>
            <param name="cs">Collection of columns to be displayed</param>
        </member>
        <member name="M:metadatalibrary.HelpForm.FillSpecificRowControls(System.Windows.Forms.Control.ControlCollection,System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Fill form's control related to all fields of a row
            </summary>
            <param name="cs"></param>
            <param name="table"></param>
            <param name="r">Row from which values have to be taken</param>
        </member>
        <member name="M:metadatalibrary.HelpForm.SetFormatForColumn(System.Data.DataColumn,System.String)">
            <summary>
            Sets the display format for a DataColumn. This should be one of the
             available Windows formats. I.e.: "c" (currency), "d" (datetime), 
             "n" (numbers), and so on
            </summary>
            <param name="c"></param>
            <param name="fmt"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetFormatForColumn(System.Data.DataColumn)">
            <summary>
            Returns the display format for a column, or a default format if a
             format has not been specified for that column
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.SetAlignForColumn(System.Data.DataColumn,System.String)">
            <summary>
            Sets the horizontal-alignment for a column. Valid inputs are C (center), 
            	L (left), R (right)
            </summary>
            <param name="c"></param>
            <param name="clr"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetAlignForColumn(System.Data.DataColumn)">
            <summary>
            Gets the horizontal-alignment for a column, or a default one if
             an alignemnt has not been specified for that column
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.SetGridStyle(System.Windows.Forms.DataGrid,System.Data.DataTable)">
            <summary>
            Set association between grid columns and DataTable Columns and
             sets Caption and NullText of any grid columns.	
            </summary>
            <param name="g"></param>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.SetDataGrid(System.Windows.Forms.DataGrid,System.Data.DataTable)">
            <summary>
            Sets some property of DataGrid to make it good-looking: 
             - decimal viewed as "numbers"
             - Headers = Caption
             - no "null" values
             - adjust column width
            and binds a (eventually) filtered duplicate of the table to the grid
            </summary>
            <param name="G"></param>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.SetAllowMultiSelection(System.Data.DataTable,System.Boolean)">
            <summary>
            Allow grid multiple selection on a DataTable
            </summary>
            <param name="T"></param>
            <param name="allow"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetAllowMultiSelection(System.Data.DataTable)">
            <summary>
            Check if grid multiple selection is enabled on a DataTable
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.ClearSelection(System.Windows.Forms.DataGrid)">
            <summary>
            Removes the selection from all frid rows
            </summary>
            <param name="G"></param>
        </member>
        <member name="T:metadatalibrary.HelpForm.AdjustTable">
            <summary>
            Delegate for DataTable Adjuster. It is called when a DataTable
             is going to be displayed on a gird or on a treeviw
            </summary>
        </member>
        <member name="M:metadatalibrary.HelpForm.AdjustTablesForDisplay(System.Windows.Forms.Form,metadatalibrary.HelpForm.AdjustTable)">
            <summary>
            Adjust all tables in order to be displayed on grids or tree
            </summary>
            <param name="F"></param>
            <param name="adjust"></param>
        </member>
        <member name="T:metadatalibrary.HelpForm.FilterRowsDelegate">
            <summary>
            Delegate for implementing custom filter on grid displaying
            </summary>
        </member>
        <member name="M:metadatalibrary.HelpForm.FilterRowsWith(System.Data.DataTable,metadatalibrary.HelpForm.FilterRowsDelegate)">
            <summary>
            Add a filter function to a DataTable, that will be used when 
             the table will be displayed in grids
            </summary>
            <param name="T"></param>
            <param name="filter"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.FilterRow(System.Data.DataRow,System.String)">
            <summary>
            Tells whether a row should be display or not within a certain list-type
            </summary>
            <param name="r"></param>
            <param name="listType"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.SetGridCurrentRow(System.Windows.Forms.DataGrid,System.Data.DataRow)">
            <summary>
            Sets the current selected row of a grid
            </summary>
            <param name="g"></param>
            <param name="r">Row that must become the current row of the grid.</param>
        </member>
        <member name="M:metadatalibrary.HelpForm.IterateControls(System.Windows.Forms.Control.ControlCollection,metadatalibrary.HelpForm.ApplyOnControl)">
            <summary>
            Apply a method on each control of the form
            </summary>
            <param name="cs"></param>
            <param name="apply"></param>
        </member>
        <member name="T:metadatalibrary.HelpForm.SetMainManagerDelegate">
            <summary>
            Delegate for using with SetMainManagers function
            </summary>
        </member>
        <member name="M:metadatalibrary.HelpForm.SetMainManagers(System.Windows.Forms.Form,metadatalibrary.HelpForm.SetMainManagerDelegate)">
            <summary>
            Call MainManager Delegate for an entire form. MainManager function is called
             for every TreeNavigator control, and for every control linked to PrimaryTable
            </summary>
            <param name="f"></param>
            <param name="mainManager"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.AddEvents(System.Windows.Forms.Control)">
            <summary>
            Add standard events to a control
            </summary>
            <param name="c"></param>
        </member>
        <member name="F:metadatalibrary.HelpForm.LastTextBoxChanged">
            <summary>
            Last TextBox modified by user
            </summary>
        </member>
        <member name="M:metadatalibrary.HelpForm.AddEvents(System.Windows.Forms.Form)">
            <summary>
            Add Helpform events to form controls (Buttons click, grid click,
             combobox slection changed and so on)
            </summary>
            <param name="f"></param>
        </member>
        <member name="F:metadatalibrary.HelpForm.MainTableSelector">
            <summary>
            Points to primary table datagrid/treeview, if any is present
            </summary>
        </member>
        <member name="M:metadatalibrary.HelpForm.FillNavigator2(System.Windows.Forms.DataGrid)">
            <summary>
            Fills grid in order to follow selected tree node changes
            </summary>
            <param name="Nav"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.CompileFormFilter(System.Windows.Forms.Form,System.String)">
            <summary>
            Sostituisce ogni  (LT)% Form[ControlName] %> con 
            QueryCreator.quotedstrvalue(valore,true) ove valore è
             il valore del controllo di nome ControlName. Per i ComboBox  è considerato
             il SelectedValue.
            </summary>
            <param name="f"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.NavigatorDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Event fired when a navigator is double clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.NavigatorChanged(System.Object,System.EventArgs)">
            <summary>
            Event fired where the selection of a Navigator changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.NavigatorChanged2(System.Object,System.EventArgs)">
            <summary>
            Internal event called by NavigatorChanged
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:metadatalibrary.HelpForm._tableToMonitor">
            <summary>
            Table to which belongs LastSelectedRow 
            </summary>
        </member>
        <member name="M:metadatalibrary.HelpForm.SetTableToMonitor(System.String)">
            <summary>
            Sets the table that will be used for returning the selected row
            </summary>
            <param name="tablename"></param>
        </member>
        <member name="P:metadatalibrary.HelpForm.LastSelectedRow">
            <summary>
            Last selected row in TableToMonitor DataTable
            </summary>
        </member>
        <member name="M:metadatalibrary.HelpForm.SetLastSelected(System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Keeps the last selected row of a Table in an extended properties of the Table
            </summary>
            <param name="T"></param>
            <param name="r"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetLastSelected(System.Data.DataTable)">
            <summary>
            Get Last Selected Row in a specified DataTable
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.ControlChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when any DataRow selection control is changed (grid, combo, listview..)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.extendedControlChanged(System.Object,System.EventArgs,System.Data.DataRow)">
            <summary>
            Called whenever the selection of a combobox, datagrid or treeview changes.
            Sets LastSelectedRow of the Table. Further, if table is not primary, every 
             table's control in the same box as sender is refilled.
             If changed row belongs to primary table, a DO_GET(false, RowChanged) is
              performed and form refilled.
             Also calls AfterRowSelect of the linked form
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <param name="defaultRow">Row used as changed row where it can't be sorted out from sender</param>
        </member>
        <member name="M:metadatalibrary.HelpForm.DisplayTree(System.Windows.Forms.TreeView,System.String)">
            <summary>
            Data of the tree has already been retrieved.
            In this case, the tree refers to primary DataTable, and should be
             displayed in a LIST-type form.
            </summary>
            <param name="c"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.StartTreeView(System.Windows.Forms.TreeView,System.String,System.Boolean)">
            <summary>
            Fill a treeview. If SetFilterTree has been called, the nodes are taken
             from Extended property (not from DB) ex SetTreeByStart
            </summary>
            <param name="treeView"></param>
            <param name="rootfilterSql"></param>
            <param name="clear"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.SetTreeByStart(System.Windows.Forms.TreeView,System.String,System.String,System.String)">
            <summary>
            Fills a tree given a start condition. Also Accepts FilterTree
            </summary>
            <param name="C"></param>
            <param name="startCondition"></param>
            <param name="startValueWanted"></param>
            <param name="startFieldWanted"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.FillControls(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Fills a set of controls (with childs)
            </summary>
            <param name="Cs"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.FillControls(System.Windows.Forms.Form)">
            <summary>
            Fills all textbox, checkboxes, radiobuttons and comboboxes of the form linked
             to the primary table.
            </summary>
            <param name="F">Form to Fill</param>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetSortedControlList(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Get a list of controls, putting parent-controls before childs
            </summary>
            <param name="Cs"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.StringValue(System.Object,System.String,System.Data.DataColumn)">
            <summary>
            Returns a String representation of an Object O, given a format tag and
             a DataColumn stroing eventually other format properties
            </summary>
            <param name="O"></param>
            <param name="tag"></param>
            <param name="C"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.StringValue(System.Object,System.String)">
            <summary>
            Gives the string representation of an object
            </summary>
            <param name="O"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.SetText(System.Windows.Forms.TextBox,System.Data.DataTable,System.String,System.Object)">
            <summary>
            Sets the content and the status of a textbox basing on his tag
            </summary>
            <param name="T"></param>
            <param name="table"></param>
            <param name="fieldname"></param>
            <param name="val"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.FillControl(System.Windows.Forms.Control)">
            <summary>
            Fills a control basing on it's tag
            </summary>
            <param name="c"></param>
        </member>
        <member name="F:metadatalibrary.HelpForm.LastTextNoFound">
            <summary>
            Hash for the last focused textbox name and content
            </summary>
        </member>
        <member name="P:metadatalibrary.HelpForm.lastTextNoFound">
            <inheritdoc />
        </member>
        <member name="M:metadatalibrary.HelpForm.FilteredPreFillTree(System.Windows.Forms.TreeView,System.String,System.Boolean)">
            <summary>
            Reads some row related to a tree in order to display it at beginning
            </summary>
            <param name="c">treeView to fill</param>
            <param name="filter">filter to apply when getting root nodes</param>
            <param name="skipPrimary">if true, no action is done if tree-table is 
            	primary table</param>
        </member>
        <member name="M:metadatalibrary.HelpForm.PreFillControls(System.Windows.Forms.Control,System.Collections.Generic.List{metadatalibrary.SelectBuilder})">
            <summary>
            Prefill a control, with an optional select list to compile
            </summary>
            <param name="Co"></param>
            <param name="selList"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetMaxLen(System.Data.DataColumn)">
            <summary>
            Gets the maximum length allowed for a string field. This is set during form
             fill dependingly of DB-structure
            </summary>
            <param name="C"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.SetMaxLen(System.Data.DataColumn,System.Int32)">
            <summary>
            Sets the maximum length allowed for a string field
            </summary>
            <param name="C"></param>
            <param name="len"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.PreFillControlsTable(System.Windows.Forms.Control,System.String)">
            <summary>
            Prefill controls for a specified table
            </summary>
            <param name="Co"></param>
            <param name="tablewanted"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.setToolTip(System.Windows.Forms.Control)">
            <summary>
            Set the standard tooltip for a control 
            </summary>
            <param name="c"></param>
        </member>
        <member name="F:metadatalibrary.HelpForm.additionalInfo">
            <summary>
            Some additional information displayed in tooltips
            </summary>
        </member>
        <member name="M:metadatalibrary.HelpForm.PreFillControlsTable(System.Windows.Forms.Control,System.String,System.Collections.Generic.List{metadatalibrary.SelectBuilder})">
            <summary>
            prefill controls of tablewanted (or all if tablewanted is null)
            </summary>
            <param name="Co"></param>
            <param name="tablewanted"></param>
            <param name="selList"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.PreFillControls(System.Windows.Forms.Form)">
            <summary>
            Fills all tables related as parent to primary table who have
             some linked combobox in the form and do not have parent themself.
            </summary>
            <param name="F">Form to scan for comboboxes</param>
        </member>
        <member name="M:metadatalibrary.HelpForm.PreFillControls(System.Windows.Forms.Form,System.String)">
            <summary>
            Prefills every control on a form belonging to a table
            </summary>
            <param name="F"></param>
            <param name="tablename"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.LeaveNumTextBox(System.Object,System.EventArgs)">
            <summary>
            Event called when leaving a numeric textbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.ExtLeaveNumTextBox(System.Windows.Forms.TextBox,System.String)">
            <summary>
            Formats a numeric textbox when leaving it
            </summary>
            <param name="T"></param>
            <param name="tag"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.LeaveDecTextBox(System.Object,System.EventArgs)">
            <summary>
            Event called when leaving a decimal textbox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.ExtLeaveDecTextBox(System.Windows.Forms.TextBox,System.String)">
            <summary>
            Formats a Decimal textbox when exiting it
            </summary>
            <param name="T"></param>
            <param name="tag"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.EnterNumTextBox(System.Object,System.EventArgs)">
            <summary>
            Called on textBox enter-event of numeric fields.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.ExtEnterNumTextBox(System.Windows.Forms.TextBox,System.String)">
            <summary>
            Formats the content of a TextBox so it's more easy to edit for
             the user.
            </summary>
            <param name="T"></param>
            <param name="tag">tag to consider for the format. The only managed 
             format is actually "fixed"</param>
        </member>
        <member name="M:metadatalibrary.HelpForm.EnterDecTextBox(System.Object,System.EventArgs)">
            <summary>
            Formats a decimal textbox when entering in it
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.ExtEnterDecTextBox(System.Windows.Forms.TextBox,System.String)">
            <summary>
            Formats a TextBox when entering on it
            </summary>
            <param name="T"></param>
            <param name="tag"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.LeaveIntTextBox(System.Object,System.EventArgs)">
            <summary>
            Formats a (int) TextBox when leaving it
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.ExtLeaveIntTextBox(System.Windows.Forms.TextBox,System.String)">
            <summary>
            Formats an int TextBox when leaving it
            </summary>
            <param name="T"></param>
            <param name="tag"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.LeaveDateTimeTextBox(System.Object,System.EventArgs)">
            <summary>
            Formats a DateTime TextBox when leaving it
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.ExtLeaveDateTimeTextBox(System.Windows.Forms.TextBox,System.String)">
            <summary>
            Formats a DateTime TextBox when leaving it
            </summary>
            <param name="T"></param>
            <param name="tag"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.GeneralLeaveDateTextBox(System.Object,System.EventArgs)">
            <summary>
            Formats a textbox when leaving it
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.GeneralLeaveTextBox(System.Object,System.EventArgs)">
            <summary>
            Formats a textbox when leaving it
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.FindExternalRow(System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Takes from a table T a row having same key as R
            </summary>
            <param name="T"></param>
            <param name="r">Row to search</param>
            <returns>Row found in T with same key of given Row</returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetCurrentRow(System.Windows.Forms.Control,System.Data.DataTable@,System.Data.DataRow@)">
            <summary>
            Gets current row from ComboBox, Grids and tree-views, return false on errors
            </summary>
            <param name="c">Control to analyze</param>
            <param name="T">Table containing rows</param>
            <param name="currentRow">Current selected row (null if none)</param>
            <returns>false on errors</returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.setMainButtons(System.Windows.Forms.Button)">
            <summary>
            Enable/Disable a button depending on form status information
            </summary>
            <param name="B"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.ClearForm(System.Windows.Forms.Form)">
            <summary>
            Clears form controls, unbinding datagrids and setting comboboxes to "no selection" state.
            Note that combobox lists are cleared only if combobox has no parent tables
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.ClearControls(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Clear control specified in a collection, recursively
            </summary>
            <param name="cs"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetSearchCondition(System.Windows.Forms.Form)">
            <summary>
            Gets the mainsearch condition scanning all control of a Form
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetSpecificCondition(System.Windows.Forms.Control.ControlCollection,System.String)">
            <summary>
            Gets the mainsearch condition scanning a specified set of controls (and childs)
            </summary>
            <param name="cs"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.IterateFillRelatedControls(System.Windows.Forms.Control.ControlCollection,System.Windows.Forms.Control,System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Fills a collection of controls (and childs) to reflect a new row selected
             in a Control
            </summary>
            <param name="cs">Controls to fill</param>
            <param name="changed">Control that generated the row change event</param>
            <param name="T">Table containing the changed row</param>
            <param name="rowChanged">New selected row</param>
        </member>
        <member name="M:metadatalibrary.HelpForm.CheckToClear(System.Data.DataTable,System.String,System.Data.DataRelation)">
            <summary>
            States if a control displaying  childcolumn of child table is to clear, knowing that
            relation with parent was on column tagcolumn, assuming Parent Row was not found
            </summary>
            <param name="childtable">Child table linked to Control</param>
            <param name="childcolumn">Child column linked to COntrol</param>
            <param name="rchild">relation between ChildTable and Parent(Changed) row</param>
            <returns>true if control is to clear</returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.SetDataRowRelated(System.Windows.Forms.Form,System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Fills a control in order to display a specified row. 
            Only controls linked to the right table are affected. All other are left
             unchanged.
            </summary>
            <param name="f"></param>
            <param name="T"></param>
            <param name="changedRow"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.IterateSetDataRowRelated(System.Windows.Forms.Control.ControlCollection,System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Fills a collection of controls in order to display a specified row. 
            Only controls linked to the right table are affected. All other are left
             unchanged.
            </summary>
            <param name="cs"></param>
            <param name="T"></param>
            <param name="changedRow">Row to display</param>
        </member>
        <member name="M:metadatalibrary.HelpForm.FocusField(System.Windows.Forms.Form,System.String)">
            <summary>
            Sets the focus on a field having a specified (standard) tag
            </summary>
            <param name="f"></param>
            <param name="fieldTag"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.FocusControl(System.Windows.Forms.Control)">
            <summary>
            Makes a Control Focuses &amp; visible
            </summary>
            <param name="C"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.FormatLikeYear(System.Windows.Forms.TextBox)">
            <summary>
            Formats a textbox assuming it contains a year value
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.GetLinkedGrid(System.Windows.Forms.Control)">
            <summary>
            Get a grid contained in the same container of C
            </summary>
            <param name="C"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelpForm.HelpForm_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Event called when key up is operated on a grid
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.HelpForm_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Event called when mouse up is operated on a grid
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.Dispose(System.Boolean)">
            <summary>
            Implements Idisposable interface
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:metadatalibrary.HelpForm.Dispose">
            <summary>
            This code added to correctly implement the disposable pattern. 
            </summary>
        </member>
        <member name="T:metadatalibrary.ITransactionManagement">
            <summary>
            Interface that manages database transactions
            </summary>
        </member>
        <member name="M:metadatalibrary.ITransactionManagement.setTransactionConnection(System.Data.SqlClient.SqlConnection)">
            <summary>
            Set a connection as the currently connected to a transaction
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:metadatalibrary.ITransactionManagement.clearTransactionConnection">
            <summary>
            Clears the current connection transaction
            </summary>
        </member>
        <member name="M:metadatalibrary.ITransactionManagement.startPosting(metadatalibrary.IDataAccess)">
            <summary>
            Start a "post" process, this doesnt mean to be called by applications
            </summary>
            <param name="mainConn"></param>
        </member>
        <member name="M:metadatalibrary.ITransactionManagement.stopPosting">
            <summary>
            Ends a "post" process , this doesnt mean to be called by applications
            </summary>
        </member>
        <member name="M:metadatalibrary.ITransactionManagement.CurrTransaction">
            <summary>
            Gets Current used Transaction
            </summary>
            <returns>null if no transaction is open</returns>
        </member>
        <member name="M:metadatalibrary.ITransactionManagement.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a new transaction 
            </summary>
            <param name="L"></param>
            <returns>error message, or null if OK</returns>
        </member>
        <member name="M:metadatalibrary.ITransactionManagement.Commit">
            <summary>
            Commit the transaction
            </summary>
            <returns>error message, or null if OK</returns>
        </member>
        <member name="M:metadatalibrary.ITransactionManagement.RollBack">
            <summary>
            Rollbacks transaction
            </summary>
            <returns>Error message, or null if OK</returns>
        </member>
        <member name="M:metadatalibrary.ITransactionManagement.validTransaction">
            <summary>
            True if current transaction  is still alive, i.e. has a connection attached to it
            </summary>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.ITransactionManagement.sqlConnection">
            <summary>
            
            </summary>
        </member>
        <member name="T:metadatalibrary.IDataAccess">
            <summary>
            Interface to db access
            </summary>
        </member>
        <member name="M:metadatalibrary.IDataAccess.GetCentralizedTableName(System.String)">
            <summary>
            Gets the db name of a table
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.GetUsr(System.String)">
            <summary>
            Get user environment variable 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.GetSys(System.String)">
            <summary>
            Get system environment variable
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.SetUsr(System.String,System.Object)">
            <summary>
            NON USARE !
            </summary>
            <param name="key"></param>
            <param name="O"></param>
        </member>
        <member name="M:metadatalibrary.IDataAccess.SetUsr(System.String,System.String)">
            <summary>
            Sets user environment variable
            </summary>
            <param name="key"></param>
            <param name="O"></param>
        </member>
        <member name="P:metadatalibrary.IDataAccess.Security">
            <summary>
            Manages security conditions with this connection 
            </summary>
        </member>
        <member name="P:metadatalibrary.IDataAccess.externalUser">
            <summary>
            Actual namen of the connected user
            </summary>
        </member>
        <member name="P:metadatalibrary.IDataAccess.openError">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IDataAccess.persisting">
            <summary>
            Return true if Connection is using Persisting connections mode, i.e.
             it is open at the beginning aand closed at the end
            </summary>
        </member>
        <member name="P:metadatalibrary.IDataAccess.LastError">
            <summary>
            Returns last error and resets it.
            </summary>
        </member>
        <member name="M:metadatalibrary.IDataAccess.SecureGetLastError">
            <summary>
            Get last error without clearing it
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.ServerVersion">
            <summary>
            Get Sql Server Version
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.Reset">
            <summary>
            Forces read of all tables info structure again
            </summary>
        </member>
        <member name="M:metadatalibrary.IDataAccess.Reset(System.Boolean)">
            <summary>
            Forces read of all tables info structure again
            </summary>
            <param name="clearDbStructure"></param>
        </member>
        <member name="M:metadatalibrary.IDataAccess.TableIsCentralized(System.String)">
            <summary>
            When true, access to the table are prefixed with DBO.  
            </summary>
            <param name="tablename"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.ProcedureIsCentralized(System.String)">
            <summary>
            When true, access to the table are prefixed with DBO. 
            </summary>
            <param name="procname"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.ChangeDataBase(System.String)">
            <summary>
            Use another database with this connection
            </summary>
            <param name="DBName"></param>
        </member>
        <member name="M:metadatalibrary.IDataAccess.SetLastRead">
            <summary>
            Updates last read access stamp to db 
            </summary>
        </member>
        <member name="M:metadatalibrary.IDataAccess.SetLastWrite">
            <summary>
            Updates last write access stamp to db 
            </summary>
        </member>
        <member name="M:metadatalibrary.IDataAccess.Duplicate">
            <summary>
            Crea un duplicato di un DataAccess, con una nuova connessione allo stesso DB. 
            Utile se la connessione deve essere usata in un nuovo thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.Destroy">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="M:metadatalibrary.IDataAccess.Open">
            <summary>
            Open the connection (or increment nesting if already open)
            </summary>
            <returns> true when successfull </returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.Close">
            <summary>
            Close the connection
            </summary>
        </member>
        <member name="M:metadatalibrary.IDataAccess.GetEntireStructure(System.String)">
            <summary>
            Reads all data from MetaData-System Tables into a new DBstructure
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.IsToRead(metadatalibrary.dbstructure,System.String)">
            <summary>
            When false table is not cached in the initialization for a given table
            </summary>
            <param name="DBS"></param>
            <param name="tablename"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.GetStructureNoCustom(System.String)">
            <summary>
            Get structure of a table without reading columntypes
            </summary>
            <param name="objectname"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.preScanStructures(System.String[])">
            <summary>
            Reads table structure of a list of tables
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:metadatalibrary.IDataAccess.GetStructure(System.String)">
            <summary>
            Gets DB structure related to table objectname. The dbstructure returned
             is the same used for sys operations (it is not a copy of it)
            </summary>
            <param name="objectname"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.PrefillStructures(System.Data.DataSet,System.String)">
            <summary>
            Read a bunch of table structures, all those present in the DataSet
            </summary>
            <param name="D"></param>
            <param name="primarytable"></param>
        </member>
        <member name="M:metadatalibrary.IDataAccess.SaveStructure(metadatalibrary.dbstructure)">
            <summary>
            Saves a table structure to DB (customobject, columntypes..)
            </summary>
            <param name="DBS"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.SaveStructure">
            <summary>
            Saves all changes made to all dbstructures
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.AutoDetectTable(metadatalibrary.dbstructure,System.String,System.Boolean)">
            <summary>
            Evaluate columntypes and customobject analizing db table properties
            </summary>
            <param name="DBS"></param>
            <param name="objectname"></param>
            <param name="forcerefresh">if false, only new tables are scanned</param>
        </member>
        <member name="M:metadatalibrary.IDataAccess.GenerateCustomObjects">
            <summary>
            Gets all custom objects and columntypes info from db
            </summary>
        </member>
        <member name="M:metadatalibrary.IDataAccess.RefreshStructure(System.String)">
            <summary>
            Forces ColumnTypes to be read again from DB for tablename
            </summary>
            <param name="tablename"></param>
        </member>
        <member name="M:metadatalibrary.IDataAccess.GetViewStructureExtProperties(System.Data.DataTable)">
            <summary>
            Reads extended informations for a table related to a view,
             in order to use it for posting. Reads data from viewcolumn.
             Sets table and columnfor posting and also 
             sets ViewExpression as tablename.columnname (for each field)
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.IDataAccess.CreateTableByName(System.String,System.String)">
            <summary>
             Creates a DataTable given it's db name
            </summary>
            <param name="tablename"></param>
            <param name="columnlist"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.CreateTableByName(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new table basing on columntypes info. Adds also primary key 
             information to the table, and allownull to each field.
             Columnlist must include primary table, or can be "*"
            </summary>
            <param name="tablename">name of table to create. Can be in the form DBO.tablename or department.tablename</param>
            <param name="columnlist"></param>
            <param name="addextprop">Add db information as extended propery of columns (column length, precision...)</param>
            <returns>a table with same types as DB table</returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.AddExtendedProperty(System.Data.DataTable)">
            <summary>
            Adds all extended information to table T reading it from columntypes.
            Every Row of columntypes is assigned to the corresponding extended 
             properties of a DataColumn of T. Each Column of the Row is assigned
             to an extended property with the same name of the Column
             Es. R["a"] is assigned to Col.ExtendedProperty["a"]
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.IDataAccess.AddWhereClauses(System.Data.SqlClient.SqlCommand@,System.String,System.String)">
            <summary>
            Adds where clauses to Cmd, using variables to store constants found in
             filter. DateTime values should be like {ts "yyyy:mm:dd hh:mm:ss:mmmm"}
            </summary>
            <param name="Cmd"></param>
            <param name="filter"></param>
            <param name="tablename"></param>
        </member>
        <member name="M:metadatalibrary.IDataAccess.ResetListType(System.String,System.String)">
            <summary>
            Empty table structure information about a listing type of a table
            </summary>
            <param name="tablename"></param>
            <param name="listtype"></param>
        </member>
        <member name="M:metadatalibrary.IDataAccess.ResetAllListType(System.String,System.String)">
            <summary>
            Empty table structure information about any listing type of a table
            </summary>
            <param name="tablename"></param>
            <param name="listtype"></param>
        </member>
        <member name="M:metadatalibrary.IDataAccess.GetListType(metadatalibrary.dbstructure@,System.String,System.String)">
            <summary>
            Gets a DBS to describe columns of a list. returns also target-list type, that
             can be different from input parameter listtype. Reads from customview,
              customviewcolumn, customorderby, customviewwhere and from customredirect
             Target-Table can be determined as DBS.customobject.rows[0]
            </summary>
            <param name="DBS"></param>
            <param name="tablename"></param>
            <param name="listtype"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.GetFormInfo(System.String,System.String)">
            <summary>
            Get information about an edit type. Reads from customedit 
            </summary>
            <param name="objectname"></param>
            <param name="edittype"></param>
            <returns>CustomEdit DataRow about an edit-type</returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.GetFieldSystemTypeName(metadatalibrary.dbstructure,System.String)">
            <summary>
            Gets the system type name of a field named fieldname
            </summary>
            <param name="DBS"></param>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.GetFieldSystemType(metadatalibrary.dbstructure,System.String)">
            <summary>
            Gets the corresponding system type of a db column named fieldname
            </summary>
            <param name="DBS"></param>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.MarkException(System.String,System.Exception)">
            <summary>
            Marks an Exception and set Last Error
            </summary>
            <param name="main">Main description</param>
            <param name="E"></param>
        </member>
        <member name="M:metadatalibrary.IDataAccess.readObject(System.String,System.String)">
            <summary>
              Read a set of fields from a table  and return a dictionary fieldName -&gt; value assuming that
               the table contains only one row
            </summary>
            <param name="table"></param>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.readObject(System.String,metadatalibrary.MetaExpression,System.String)">
            <summary>
             Read a set of fields from a table  and return a dictionary fieldName -&gt; value
            </summary>
            <param name="table"></param>
            <param name="filter"></param>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.readObject(System.String,System.String,System.String)">
            <summary>
            Read a set of fields from a table  and return a dictionary fieldName -&gt; value
            </summary>
            <param name="table"></param>
            <param name="condition"></param>
            <param name="expr">list of fields to read</param>
            <returns>An object dictionary</returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.readValue(System.String,metadatalibrary.MetaExpression,System.String,System.String)">
            <summary>
            Returns a single value executing a SELECT expr FROM table WHERE condition. If no row is found, NULL is returned 
            </summary>
            <param name="table"></param>
            <param name="filter"></param>
            <param name="expr"></param>
            <param name="orderby"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.DO_READ_VALUE(System.String,System.String,System.String,System.String)">
            <summary>
            Returns a single value executing a SELECT expr FROM table WHERE condition. If no row is found, NULL is returned 
            </summary>
            <param name="table"></param>
            <param name="condition"></param>
            <param name="expr"></param>
            <param name="orderby"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.DO_READ_VALUE(System.String,System.String,System.String)">
            <summary>
            Returns a value executing a SELECT expr FROM table WHERE condition. If no row is found, NULL is returned 
            </summary>
            <param name="table"></param>
            <param name="condition"></param>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.DO_SYS_CMD(System.String)">
            <summary>
            Returns a value executing a generic sql command 
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.DO_SYS_CMD(System.String,System.String@)">
            <summary>
            Returns a value executing a generic sql command 
            </summary>
            <param name="cmd"></param>
            <param name="ErrMsg">eventual error message</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.DO_SYS_CMD_LASTRESULT(System.String,System.String@)">
            <summary>
            Reads all value from a generic sql command and returns the last value read
            </summary>
            <param name="cmd"></param>
            <param name="ErrMsg"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.DO_SYS_CMD(System.String,System.Boolean)">
            <summary>
            Runs a sql command that returns a single value
            </summary>
            <param name="cmd">command to run</param>
            <param name="silent">when false a message box appears on errors</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.SQLRunner(System.String)">
            <summary>
            Runs a sql command that returns a DataTable
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.SQLRunner(System.String,System.Boolean)">
            <summary>
            Runs a sql command that returns a DataTable
            </summary>
            <param name="command"></param>
            <param name="silent">when false a message box appears on errors</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.readObjectArray(System.String,System.Int32,System.String@)">
            <summary>
            Get a list of "objects" from a table using  a specified query, every object is encapsulated in a dictionary
            </summary>
            <param name="query">sql command to run</param>
            <param name="timeout"></param>
            <param name="ErrMsg"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.SQLRunner(System.String,System.Int32,System.String@)">
            <summary>
            Runs a sql command that return a DataTable
            </summary>
            <param name="command"></param>
            <param name="timeout">Timeout in seconds, 0 means no timeout, -1 means default timeout</param>
            <param name="ErrMsg">Error message or null when no errors</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.SQLRunner(System.String,System.Boolean,System.Int32)">
            <summary>
            Executes a generic SQL command that returns a Table
            </summary>
            <param name="command"></param>
            <param name="silent">set true non visualizza messaggi di errore</param>
            <param name="timeout">Timeout in secondi</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.GetDeleteCommand(System.String,System.String)">
            <summary>
            Builds a sql DELETE command 
            </summary>
            <param name="table">table implied</param>
            <param name="condition">condition for the deletion</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.DO_DELETE(System.String,System.String)">
            <summary>
            Executes a delete command using current transaction
            </summary>
            <param name="table"></param>
            <param name="condition"></param>
            <returns>Error message or null if OK</returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.getInsertCommand(System.String,System.String[],System.String[],System.Int32)">
            <summary>
            Builds a sql INSERT command
            </summary>
            <param name="table"></param>
            <param name="columns">column names</param>
            <param name="values">values to insert</param>
            <param name="len">number of columns</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.DO_INSERT(System.String,System.String[],System.String[],System.Int32)">
            <summary>
            Executes an INSERT command using current tranactin
            </summary>
            <param name="table"></param>
            <param name="columns">column names</param>
            <param name="values">values to insert</param>
            <param name="len">number of columns</param>
            <returns>Error message or null if OK</returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.getUpdateCommand(System.String,System.String,System.String[],System.String[],System.Int32)">
            <summary>
            Builds an UPDATE sql command
            </summary>
            <param name="table"></param>
            <param name="condition"></param>
            <param name="columns">column names</param>
            <param name="values">values to be set</param>
            <param name="ncol">number of columns to update</param>
            <returns>Error msg or null if OK</returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.DO_UPDATE(System.String,System.String,System.String[],System.String[],System.Int32)">
            <summary>
            Executes an UPDATE command
            </summary>
            <param name="table"></param>
            <param name="condition">where condition to apply</param>
            <param name="columns">Name of columns to update</param>
            <param name="values">Values to set</param>
            <param name="ncol">N. of columns</param>
            <returns>Error msg or null if OK</returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.doUpdate(System.String,metadatalibrary.MetaExpression,System.String[],System.Object[])">
            <summary>
            Executes an UPDATE command
            </summary>
            <param name="table"></param>
            <param name="condition">where condition to apply</param>
            <param name="columns">Name of columns to update</param>
            <param name="values">Values to set</param>
            <returns>Error msg or null if OK</returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.doUpdate(System.String,metadatalibrary.MetaExpression,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes an UPDATE command
            </summary>
            <param name="table"></param>
            <param name="condition">where condition to apply</param>
            <param name="columns">Name of columns to update</param>
            <param name="values">Values to set</param>
            <returns>Error msg or null if OK</returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.doUpdate(System.Data.DataRow,metadatalibrary.MetaExpression,System.String[])">
            <summary>
            Executes an UPDATE command
            </summary>
            <param name="table"></param>
            <param name="condition">where condition to apply</param>
            <param name="r">sample data to pick</param>
            <param name="fields">Values to set</param>
            <returns>Error msg or null if OK</returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.CallSP(System.String,System.Object[])">
            <summary>
            Calls a stored procedure with specified parameters
            </summary>
            <param name="procname">stored proc. name</param>
            <param name="list">Parameter list</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.CallSP(System.String,System.Object[],System.Boolean)">
            <summary>
            Calls a stored procedure with specified parameters
            </summary>
            <param name="procname">stored proc. name</param>
            <param name="list">Parameter list</param>
            <param name="silent">when false a message box appears on errors</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.sqlRunnerDataSet(System.String,System.Int32,System.String@)">
            <summary>
            Execute a sql cmd that returns a dataset (eventually with more than one table in it)
            </summary>
            <param name="sql">sql command to run</param>
            <param name="timeout">Timeout in seconds, 0 means no timeout, -1 means default timeout</param>
            <param name="ErrMess">null if ok, Error message otherwise</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.CallSP(System.String,System.Object[],System.Int32,System.String@)">
            <summary>
            Calls a stored procedure with specified parameters
            </summary>
            <param name="procname">stored proc. name</param>
            <param name="list">Parameter list</param>
            <param name="timeout">Timeout in seconds, 0 means no timeout, -1 means default timeout</param>
            <param name="ErrMess">null if ok, Error message otherwise</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.CallSP(System.String,System.Object[],System.Boolean,System.Int32)">
            <summary>
            Calls a stored procedure and reads output in a DataSet. First table can be retrieved in result.Tables[0]
            </summary>
            <param name="procname">name of stored procedure to call</param>
            <param name="list">parameters to give to the stored procedure</param>
            <param name="silent">when false a message box appears on errors</param>
            <param name="timeout">Timeout in seconds, 0 means no timeout, -1 means default timeout</param>
            <returns>null on errors, in which case also LastError is set</returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.CallSPParameter(System.String,System.String[],System.Data.SqlDbType[],System.Int32[],System.Data.ParameterDirection[],System.Object[]@,System.Int32,System.String@)">
            <summary>
            Calls a stored procedure, return true if ok
            </summary>
            <param name="sp_name">name of stored procedure to call</param>
            <param name="ParamName">parameter names to give to the stored procedure</param>
            <param name="ParamType">parameter types to give to the stored procedure</param>
            <param name="ParamTypeLength">Length of parameters</param>
            <param name="ParamDirection">Type of parameters</param>
            <param name="ParamValues">Value for parameters</param>
            <param name="timeout">Timeout in seconds, 0 means no timeout, -1 means default timeout</param>
            <param name="ErrMsg">null if ok, Error message otherwise</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.CallSPParameterDataSet(System.String,System.String[],System.Data.SqlDbType[],System.Int32[],System.Data.ParameterDirection[],System.Object[]@,System.Int32,System.String@)">
            <summary>
            Calls a stored procedure and returns a DataSet. First table can be retrieved in result.Tables[0]
            </summary>
            <param name="sp_name">name of stored procedure to call</param>
            <param name="ParamName">parameter names to give to the stored procedure</param>
            <param name="ParamType">parameter types to give to the stored procedure</param>
            <param name="ParamTypeLength">Length of parameters</param>
            <param name="ParamDirection">Type of parameters</param>
            <param name="ParamValues">Value for parameters</param>
            <param name="timeout">Timeout in seconds, 0 means no timeout, -1 means default timeout</param>
            <param name="ErrMsg">null if ok, Error message otherwise</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.CallSPParameter(System.String,System.String[],System.Data.SqlDbType[],System.Int32[],System.Data.ParameterDirection[],System.Object[]@,System.Boolean,System.Int32)">
            <summary>
            Calls a stored procedure and returns a DataSet.  return true if ok
            </summary>
            <param name="sp_name">name of stored procedure to call</param>
            <param name="ParamName">parameter names to give to the stored procedure</param>
            <param name="ParamType">parameter types to give to the stored procedure</param>
            <param name="ParamTypeLength">Length of parameters</param>
            <param name="ParamDirection">Type of parameters</param>
            <param name="ParamValues">Value for parameters</param>
            <param name="silent">when false a message box appears on errors</param>
            <param name="timeout">Timeout in seconds, 0 means no timeout, -1 means default timeout</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.RUN_SELECT_INTO_TABLE(System.Data.DataTable,metadatalibrary.MetaExpression,System.String,System.String)">
            <summary>
            Reads data into a given table, skipping temporary columns
            </summary>
            <param name="T"></param>
            <param name="filter"></param>
            <param name="sort_by"></param>
            <param name="TOP"></param>
        </member>
        <member name="M:metadatalibrary.IDataAccess.RUN_SELECT_INTO_TABLE(System.Data.DataTable,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Reads data into a given table, skipping temporary columns
            </summary>
            <param name="T"></param>
            <param name="sort_by">sorting for db reading</param>
            <param name="filter">condition to apply</param>
            <param name="TOP"></param>
            <param name="prepare"></param>
        </member>
        <member name="M:metadatalibrary.IDataAccess.sqlRunnerintoDataSet(System.Data.DataSet,System.String,System.Int32)">
            <summary>
            Executes sql into a dataset
            </summary>
            <param name="d"></param>
            <param name="sql"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.RUN_SELECT(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Reads data into a table. The table is created at run-time using information
             stored in columntypes
            </summary>
            <param name="tablename"></param>
            <param name="columnlist">list of field names separated by commas</param>
            <param name="order_by">list of field names separated by commas</param>
            <param name="filter">condition to apply</param>
            <param name="TOP">how many rows to get</param>
            <param name="prepare">if true the command is prepared before being runned</param>
            <returns>DataTable read</returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.MAIN_RUN_SELECT(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Reads data from db and return a dataset serialized to a byte array
            </summary>
            <param name="tablename"></param>
            <param name="columnlist"></param>
            <param name="order_by"></param>
            <param name="filter"></param>
            <param name="TOP"></param>
            <param name="group_by"></param>
            <param name="prepare"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.readTable(System.String,metadatalibrary.MetaExpression,System.String,System.String,System.String)">
            <summary>
            Reads data into a table. The table is created at run-time using information
             stored in columntypes
            </summary>
            <param name="tablename"></param>
            <param name="filter"></param>
            <param name="columnlist"></param>
            <param name="order_by"></param>
            <param name="TOP"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.RUN_SELECT(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Reads data into a table. The table is created at run-time using information
             stored in columntypes
            </summary>
            <param name="tablename"></param>
            <param name="columnlist">list of field names separated by commas</param>
            <param name="order_by">list of field names separated by commas</param>
            <param name="filter">condition to apply</param>
            <param name="TOP">how many rows to get</param>
            <param name="group_by">list of field names separated by commas</param>
            <param name="prepare">if true the command is prepared before being runned</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.RUN_SELECT_2ndVer(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Reads data into a table. The table is created at run-time using information
             stored in columntypes
            </summary>
            <param name="tablename"></param>
            <param name="columnlist">list of field names separated by commas</param>
            <param name="order_by">list of field names separated by commas</param>
            <param name="filter">condition to apply</param>
            <param name="TOP">how many rows to get</param>
            <param name="group_by">list of field names separated by commas</param>
            <param name="prepare">if true the command is prepared before being runned</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.readSimpleDictionary``2(System.String,metadatalibrary.MetaExpression,System.String,System.String)">
            <summary>
            Creates a dictionary from a query on a table
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="S"></typeparam>
            <param name="tablename"></param>
            <param name="keyField"></param>
            <param name="valueField"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.readSimpleDictionary``2(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a dictionary from a query on a table
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="S"></typeparam>
            <param name="tablename"></param>
            <param name="keyField">key field of dictionary</param>
            <param name="valueField">value field of dictionary</param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.readRowObjectDictionary``1(System.String,metadatalibrary.MetaExpression,System.String,System.String)">
            <summary>
            Creates a dictionary key => rowObject from a query on a table
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tablename"></param>
            <param name="keyField"></param>
            <param name="fieldList"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.readRowObjectDictionary``1(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a dictionary key => rowObject from a query on a table
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tablename"></param>
            <param name="keyField">key field of dictionary</param>
            <param name="fieldList">list value to read (must not include keyField)</param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.multiRowObject_Select(System.String,System.String[])">
            <summary>
            Selects a set of rowobjects from db
            </summary>
            <param name="cmd"></param>
            <param name="tables">logical table names</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.RowObjectSelect(System.String,System.String,metadatalibrary.MetaExpression,System.String,System.String)">
            <summary>
            Selects a set of rowobjects from db
            </summary>
            <param name="tablename"></param>
            <param name="columnlist"></param>
            <param name="filter"></param>
            <param name="order_by"></param>
            <param name="TOP"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.RowObject_Select(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Selects a set of rowobjects from db
            </summary>
            <param name="tablename"></param>
            <param name="columnlist"></param>
            <param name="filter"></param>
            <param name="order_by"></param>
            <param name="TOP"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.MULTI_RUN_SELECT(System.Collections.Generic.List{metadatalibrary.SelectBuilder})">
            <summary>
            Executes a List of Select, returning data in the tables specified by each select. 
            </summary>
            <param name="SelList"></param>
        </member>
        <member name="M:metadatalibrary.IDataAccess.RUN_SELECT_INTO_TABLE_direct(System.Data.DataTable,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Experimental function, unused
            </summary>
            <param name="t"></param>
            <param name="order_by"></param>
            <param name="filter"></param>
            <param name="TOP"></param>
            <param name="group_by"></param>
            <param name="prepare"></param>
        </member>
        <member name="M:metadatalibrary.IDataAccess.readFromTable(System.String,metadatalibrary.MetaExpression,System.String,System.String,System.String)">
            <summary>
            Reads a table without reading the schema. Result table has no primary key set.
            This is quicker than a normal select but slower than a RowObject_select
            </summary>
            <param name="tablename"></param>
            <param name="columnlist"></param>
            <param name="filter"></param>
            <param name="order_by"></param>
            <param name="TOP"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.readFromTable(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Reads a table without reading the schema. Result table has no primary key set.
            This is quicker than a normal select but slower than a RowObject_select
            </summary>
            <param name="tablename"></param>
            <param name="columnlist"></param>
            <param name="filter"></param>
            <param name="order_by"></param>
            <param name="TOP"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.count(System.String,metadatalibrary.MetaExpression)">
            <summary>
            Executes a SELECT COUNT on a table.
            </summary>
            <param name="tablename"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.RUN_SELECT_COUNT(System.String,System.String,System.Boolean)">
            <summary>
            Executes a SELECT COUNT on a table.
            </summary>
            <param name="tablename"></param>
            <param name="filter">condition to apply</param>
            <param name="prepare">when true, command has to be prepared</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IDataAccess.LogError(System.String,System.Exception)">
            <summary>
            Logs an error to the remote logger
            </summary>
            <param name="errmsg"></param>
            <param name="E"></param>
        </member>
        <member name="M:metadatalibrary.IDataAccess.GetQueryHelper">
            <summary>
            Returns the queryhelper attached to this kind of DataAccess
            </summary>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.IFormController.lastSelectedRow">
            <summary>
            Used for monitoring datatables in Forms
            </summary>        
        </member>
        <member name="P:metadatalibrary.IFormController.isList">
            <summary>
            True when this metadata is used to display a list collection
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.MainRefreshEnabled">
            <summary>
            true if MainRefresh is enabled
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.MainSelectionEnabled">
            <summary>
            True if "mainselect" is enabled
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.DontWarnOnInsertCancel">
            <summary>
            When true, does not warn if canceling an insert operation.
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.SearchEnabled">
            <summary>
            must be set to false if SetSearch/DoSearch must be disabled on form.
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.CanInsert">
            <summary>
            When false main insert button is disabled
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.CanInsertCopy">
            <summary>
            When false main insert copy button is disabled
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.CanCancel">
            <summary>
            When false main Cancel button is disabled
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.CanSave">
            <summary>
            when false, "mainsave" button is disabled
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.ds">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.IFormController.FreshForm(System.Boolean,System.Boolean)">
            <summary>
            Refills the form. If RefreshPeripherals is set to true, secondary tables
             are read again from DB (i.e. all tables in the view that are not
             cached, primary or child of primary.
            </summary>
            <param name="RefreshPeripherals">when true, not -entity-or-cached- tables are cleared and read again from DB</param>
            <param name="DoPrefill">When true, also prefill is done, this is more expensive and should be done only once in a form</param>
        </member>
        <member name="P:metadatalibrary.IFormController.linkedForm">
            <summary>
            Managed form
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.locked">
            <summary>
            Ignores any incoming command to this form
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.firstFillForThisRow">
            <summary>
            True  the  first time an AfterFill is invoked on a certain row  
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.GointToInsertMode">
            <summary>
            True if an insert is coming after the clear
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.GoingToEditMode">
            <summary>
            True if an edit is coming after the clear
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.IsRealClear">
            <summary>
            True if  no insert or edit are coming after the clear
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.InsertMode">
            <summary>
            True when form is in insert mode (NOT EDIT!!)
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.EditMode">
            <summary>
            True when form is in "edit mode" (not INSERT!)
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.formState">
            <summary>
            Current form state
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.DrawState">
            <summary>
            Current Draw state of the form
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.DrawStateIsDone">
            <summary>
            True if the form is under user control
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.IsEmpty">
            <summary>
            true if the MetaData object has not been filled
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.curroperation">
            <summary>
            Current operation runned
            </summary>
        </member>
        <member name="P:metadatalibrary.IFormController.entityChanged">
            <summary>
            true when changes to this entity or to sub-entity of this have been made
            </summary>
        </member>
        <member name="M:metadatalibrary.IFormController.warnUnsaved">
            <summary>
            Dsiplays a message and stop form closing if ther are unsaved changes
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IFormController.GetSourceChanges">
            <summary>
            Takes values for the Source Row from linked Form Data. The goal is to propagate to
             the parent form the changes made (in LinkedForm) in this form
            </summary>
            <remarks>
             Necessary condition is that FormDataSet does contain only one row of the same
             table as SourceRow. This function can be redefined to implement additional operations
             to do in SourceRow.Table when changes to SourceRow are accepted. 
             </remarks>
             <returns>true when operation successfull</returns>
        </member>
        <member name="M:metadatalibrary.IFormController.GetFormData(System.Boolean)">
            <summary>
            Gets data from linked Form control, returning false if some errors occured
            </summary>
            <param name="Quick">true if no validity checks have to be made</param>
            <returns>true on success</returns>
        </member>
        <member name="M:metadatalibrary.IFormController.SaveFormData">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.IHelpForm.addExtraEntity(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.getExtraEntities">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.IHelpForm.LastSelectedRow">
            <summary>
            Ultima riga selezionata in un eventuale datagrid associato alla tabella da monitorare
            </summary>
        </member>
        <member name="M:metadatalibrary.IHelpForm.Destroy">
            <summary>
            Dispose all resources
            </summary>
        </member>
        <member name="M:metadatalibrary.IHelpForm.GetControls(System.Windows.Forms.Form)">
            <summary>
            Gets data from all textbox, checkboxes, radiobuttons and comboboxes of the form linked
             to the primary table.
            </summary>
            <param name="F">Form to Get</param>
            <remarks>The primary assumption for this function to work is that for every control
               in the form, a tag is set that logically links it to a field of the Primary Table.
               The exact format of the tag depends on the Control Type:
               TextBox:  fieldname
               ComboBox: master[:parenttable.parentfield]
               RadioButton: fieldname:value (to assign when checked)
               CheckBox: fieldname:valueYes:valueNo
              </remarks>
        </member>
        <member name="M:metadatalibrary.IHelpForm.IterateGetControls(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Recursively Iterate GetControl over a Control Collection
            </summary>
            <param name="Cs"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.GetText(System.Windows.Forms.TextBox,System.String,System.Data.DataRow)">
            <summary>
            Takes value from a TextBox and put it in a row field
            </summary>
            <param name="T"></param>
            <param name="fieldname"></param>
            <param name="R"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.GetValueSignedGroup(System.Windows.Forms.GroupBox,System.String,System.Data.DataRow)">
            <summary>
            Gets a value in a ValueSigned groupbox
            </summary>
            <param name="G"></param>
            <param name="fieldname"></param>
            <param name="R"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.FillParentControls(System.Windows.Forms.Form,System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Sets controls of forms so that primary table controls describes a child of ParentRow
             Affected controls are only TextBox, prefilled combobox, prefilled
               TreeView, RadioButtons and CheckBoxes. Assumes form in "setsearch" mode
            </summary>
            <param name="F">Calling Form</param>
            <param name="ParentTable">Table considered as Parent </param>
            <param name="ParentRow">Row that should belong to getd.DS and should be
             in a parent table of primary table</param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.FillParentControls(System.Windows.Forms.Control.ControlCollection,System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Fills a collection of controls related to a specified parent Table
            </summary>
            <param name="CS"></param>
            <param name="ParentTable"></param>
            <param name="ParentRow"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.FillParentControls(System.Windows.Forms.Form,System.Data.DataRow,System.Data.DataRelation)">
            <summary>
            Fills all form controls related to a specified parent Table by a specified condition
            </summary>
            <param name="F"></param>
            <param name="ParentRow"></param>
            <param name="Rel"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.FillParentControls(System.Windows.Forms.Control.ControlCollection,System.Data.DataRow,System.Data.DataRelation)">
            <summary>
            Fills controls of forms to display a Parent Row so that primary table 
            	controls becomes a child of ParentRow
            </summary>
            <param name="CS"></param>
            <param name="ParentRow"></param>
            <param name="Rel"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.FillParentControls(System.Windows.Forms.Form,System.Data.DataRow,System.String)">
            <summary>
            Fill  parent's related controls so that current primary row controls
             describe a child of that row
            </summary>
            <param name="F"></param>
            <param name="ParentRow"></param>
            <param name="relname"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.FillTableControls(System.Windows.Forms.Form,System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Fills form's controls linked to a Table. If a Row is given,
             it is used for getting values. Otherwise, values are cleared
            </summary>
            <param name="F"></param>
            <param name="Table"></param>
            <param name="Row"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.FillTableControls(System.Windows.Forms.Form,System.Data.DataTable,System.Data.DataRow,System.Data.DataColumn[])">
            <summary>
            Fill form's control related to some fields of a row
            </summary>
            <param name="F">Form to fill</param>
            <param name="Table">Table whose controls have to be filled</param>
            <param name="Row">Row from which values have to be taken</param>
            <param name="Cs">Collection of columns to be displayed</param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.FillSpecificRowControls(System.Windows.Forms.Control.ControlCollection,System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Fill form's control related to all fields of a row
            </summary>
            <param name="Cs"></param>
            <param name="Table"></param>
            <param name="R">Row from which values have to be taken</param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.AdjustTablesForDisplay(System.Windows.Forms.Form,metadatalibrary.HelpForm.AdjustTable)">
            <summary>
            Adjust all tables in order to be displayed on grids or tree
            </summary>
            <param name="F"></param>
            <param name="Adjust"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.SetGridCurrentRow(System.Windows.Forms.DataGrid,System.Data.DataRow)">
            <summary>
            Sets the current selected row of a grid
            </summary>
            <param name="G"></param>
            <param name="R">Row that must become the current row of the grid.</param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.IterateControls(System.Windows.Forms.Control.ControlCollection,metadatalibrary.HelpForm.ApplyOnControl)">
            <summary>
            Apply a method on each control of the form
            </summary>
            <param name="Cs"></param>
            <param name="Apply"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.SetMainManagers(System.Windows.Forms.Form,metadatalibrary.HelpForm.SetMainManagerDelegate)">
            <summary>
            Call MainManager Delegate for an entire form. MainManager function is called
             for every TreeNavigator control, and for every control linked to PrimaryTable
            </summary>
            <param name="F"></param>
            <param name="MainManager"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.AddEvents(System.Windows.Forms.Control)">
            <summary>
            Add standard events to a control
            </summary>
            <param name="C"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.AddEvents(System.Windows.Forms.Form)">
            <summary>
            Add Helpform events to form controls (Buttons click, grid click,
             combobox slection changed and so on)
            </summary>
            <param name="F"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.CompileFormFilter(System.Windows.Forms.Form,System.String)">
            <summary>
            Sostituisce ogni  (LT)% Form[ControlName] %> con 
            QueryCreator.quotedstrvalue(valore,true) ove valore è
             il valore del controllo di nome ControlName. Per i ComboBox  è considerato
             il SelectedValue.
            </summary>
            <param name="F"></param>
            <param name="S"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IHelpForm.NavigatorDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Event fired when a navigator is double clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.NavigatorChanged(System.Object,System.EventArgs)">
            <summary>
            Event fired where the selection of a Navigator changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.NavigatorChanged2(System.Object,System.EventArgs)">
            <summary>
            Internal event called by NavigatorChanged
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.SetTableToMonitor(System.String)">
            <summary>
            Sets the table that will be used for returning the selected row
            </summary>
            <param name="tablename"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.ControlChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when any DataRow selection control is changed (grid, combo, listview..)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.extendedControlChanged(System.Object,System.EventArgs,System.Data.DataRow)">
            <summary>
            Called whenever the selection of a combobox, datagrid or treeview changes.
            Sets LastSelectedRow of the Table. Further, if table is not primary, every 
             table's control in the same box as sender is refilled.
             If changed row belongs to primary table, a DO_GET(false, RowChanged) is
              performed and form refilled.
             Also calls AfterRowSelect of the linked form
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <param name="defaultRow">Row taken when it's not possible to evaluate a row from sender</param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.DisplayTree(System.Windows.Forms.TreeView,System.String)">
            <summary>
            Data of the tree has already been retrieved.
            In this case, the tree refers to primary DataTable, and should be
             displayed in a LIST-type form.
            </summary>
            <param name="C"></param>
            <param name="TableName"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.StartTreeView(System.Windows.Forms.TreeView,System.String,System.Boolean)">
            <summary>
            Fill a treeview. If SetFilterTree has been called, the nodes are taken
             from Extended property (not from DB)
            </summary>
            <param name="treeView"></param>
            <param name="rootfilterSql"></param>
            <param name="clear"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IHelpForm.SetTreeByStart(System.Windows.Forms.TreeView,System.String,System.String,System.String)">
            <summary>
            Fills a tree given a start condition. Also Accepts FilterTree
            </summary>
            <param name="c"></param>
            <param name="startCondition"></param>
            <param name="startValueWanted"></param>
            <param name="startFieldWanted"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IHelpForm.FillControls(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Fills a set of controls (with childs)
            </summary>
            <param name="Cs"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.FillControls(System.Windows.Forms.Form)">
            <summary>
            Fills all textbox, checkboxes, radiobuttons and comboboxes of the form linked
             to the primary table.
            </summary>
            <param name="F">Form to Fill</param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.SetText(System.Windows.Forms.TextBox,System.Data.DataTable,System.String,System.Object)">
            <summary>
            Sets the content and the status of a textbox basing on his tag
            </summary>
            <param name="T"></param>
            <param name="Table"></param>
            <param name="fieldname"></param>
            <param name="val"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.FillControl(System.Windows.Forms.Control)">
            <summary>
            Fills a control basing on it's tag
            </summary>
            <param name="C"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.FilteredPreFillTree(System.Windows.Forms.TreeView,System.String,System.Boolean)">
            <summary>
            Reads some row related to a tree in order to display it at beginning
            </summary>
            <param name="C">treeView to fill</param>
            <param name="filter">filter to apply when getting root nodes</param>
            <param name="skipPrimary">if true, no action is done if tree-table is 
            	primary table</param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.PreFillControls(System.Windows.Forms.Control,System.Collections.Generic.List{metadatalibrary.SelectBuilder})">
            <summary>
            Prefill a control, with an optional select list to compile
            </summary>
            <param name="Co"></param>
            <param name="selList"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.PreFillControlsTable(System.Windows.Forms.Control,System.String)">
            <summary>
            Prefill controls for a specified table
            </summary>
            <param name="Co"></param>
            <param name="tablewanted"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.setToolTip(System.Windows.Forms.Control)">
            <summary>
            Set the standard tooltip for a control 
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.PreFillControlsTable(System.Windows.Forms.Control,System.String,System.Collections.Generic.List{metadatalibrary.SelectBuilder})">
            <summary>
            prefill controls of tablewanted (or all if tablewanted is null)
            </summary>
            <param name="Co"></param>
            <param name="tablewanted"></param>
            <param name="selList"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.PreFillControls(System.Windows.Forms.Form)">
            <summary>
            Fills all tables related as parent to primary table who have
             some linked combobox in the form and do not have parent themself.
            </summary>
            <param name="F">Form to scan for comboboxes</param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.PreFillControls(System.Windows.Forms.Form,System.String)">
            <summary>
            Prefills every control on a form belonging to a table
            </summary>
            <param name="F"></param>
            <param name="tablename"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.LeaveDateTimeTextBox(System.Object,System.EventArgs)">
            <summary>
            Formats a DateTime TextBox when leaving it
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.GeneralLeaveDateTextBox(System.Object,System.EventArgs)">
            <summary>
            Formats a textbox when leaving it
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.GeneralLeaveTextBox(System.Object,System.EventArgs)">
            <summary>
            Formats a textbox when leaving it
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.GetCurrentRow(System.Windows.Forms.Control,System.Data.DataTable@,System.Data.DataRow@)">
            <summary>
            Gets current row from ComboBox, Grids and tree-views, return false on errors
            </summary>
            <param name="C">Control to analyze</param>
            <param name="T">Table containing rows</param>
            <param name="R">Current selected row (null if none)</param>
            <returns>false on errors</returns>
        </member>
        <member name="M:metadatalibrary.IHelpForm.ClearForm(System.Windows.Forms.Form)">
            <summary>
            Clears form controls, unbinding datagrids and setting comboboxes to "no selection" state.
            Note that combobox lists are cleared only if combobox has no parent tables
            </summary>
            <param name="F"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.ClearControls(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Clear control specified in a collection, recursively
            </summary>
            <param name="Cs"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.GetSearchCondition(System.Windows.Forms.Form)">
            <summary>
            Gets the mainsearch condition scanning all control of a Form
            </summary>
            <param name="F"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IHelpForm.GetSpecificCondition(System.Windows.Forms.Control.ControlCollection,System.String)">
            <summary>
            Gets the mainsearch condition scanning a specified set of controls (and childs)
            </summary>
            <param name="Cs"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IHelpForm.IterateFillRelatedControls(System.Windows.Forms.Control.ControlCollection,System.Windows.Forms.Control,System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Fills a collection of controls (and childs) to reflect a new row selected
             in a Control
            </summary>
            <param name="Cs">Controls to fill</param>
            <param name="Changed">Control that generated the row change event</param>
            <param name="T">Table containing the changed row</param>
            <param name="RowChanged">New selected row</param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.FilteredPreFillCombo(System.Windows.Forms.ComboBox,System.String,System.Boolean,metadatalibrary.HelpForm.drawmode)">
            <summary>
            
            </summary>
            <param name="C"></param>
            <param name="filter"></param>
            <param name="freshvalue"></param>
            <param name="dmode"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.SetDataRowRelated(System.Windows.Forms.Form,System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Fills a control in order to display a specified row. 
            Only controls linked to the right table are affected. All other are left
             unchanged.
            </summary>
            <param name="F"></param>
            <param name="T"></param>
            <param name="ChangedRow"></param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.IterateSetDataRowRelated(System.Windows.Forms.Control.ControlCollection,System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Fills a collection of controls in order to display a specified row. 
            Only controls linked to the right table are affected. All other are left
             unchanged.
            </summary>
            <param name="Cs"></param>
            <param name="T"></param>
            <param name="ChangedRow">Row to display</param>
        </member>
        <member name="M:metadatalibrary.IHelpForm.GetLinkedGrid(System.Windows.Forms.Control)">
            <summary>
            Get a grid contained in the same container of C
            </summary>
            <param name="C"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IHelpForm.Dispose">
            <summary>
            This code added to correctly implement the disposable pattern. 
            </summary>
        </member>
        <member name="P:metadatalibrary.IHelpForm.toolTipOnControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IHelpForm.mainTableSelector">
            <summary>
            
            </summary>
        </member>
        <member name="T:metadatalibrary.LanguageManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.LanguageManager.noRowFoundInTable(System.String)">
            <summary>
            Nella tabella {table} non è stata trovata alcuna riga.
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.LanguageManager.noObjectFound">
            <summary>
            Nessun oggetto è stato trovato
            </summary>
        </member>
        <member name="P:metadatalibrary.LanguageManager.attachmentTooBig">
            <summary>
            Allegati troppo grande
            </summary>
        </member>
        <member name="P:metadatalibrary.LanguageManager.noConditionUsed">
            <summary>
            Nessuna condizione è stata usata.
            </summary>
        </member>
        <member name="P:metadatalibrary.LanguageManager.Delete">
            <summary>
            Elimina
            </summary>
        </member>
        <member name="M:metadatalibrary.LanguageManager.conditionSetWas(System.String)">
            <summary>
            La condizione di ricerca impostata era: {filter}.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.LanguageManager.listNameIs(System.String)">
            <summary>
            Nome Elenco: \'{listingType}\'.
            </summary>
            <param name="listType"></param>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.LanguageManager.cancel">
            <summary>
            Annulla
            </summary>
        </member>
        <member name="P:metadatalibrary.LanguageManager.couldNotSelectRow">
            <summary>
            La voce selezionata non poteva essere scelta.
            </summary>
        </member>
        <member name="P:metadatalibrary.LanguageManager.ErrorTitle">
            <summary>
            Errore
            </summary>
        </member>
        <member name="M:metadatalibrary.LanguageManager.errorLoadingMeta(System.String)">
            <summary>
            Errore nel caricamento del metadato {unaliased} è necessario riavviare il programma.
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.LanguageManager.invalidDataOnTable(System.String)">
            <summary>
            La tabella {tableName} contiene dati non validi. Contattare il servizio di assistenza.
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.LanguageManager.deleteSelectedRowFromTable(System.String,System.String)">
            <summary>
            Cancello la riga selezionata dalla tabella {name}({tableName})
            </summary>
            <param name="name"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.LanguageManager.cmdInvalidatedTransaction(System.String)">
            <summary>
            Cancello la riga selezionata dalla tabella {name}({tableName})
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.LanguageManager.errorOpeningConnection">
            <summary>
            Errore aprendo la connessione
            </summary>
        </member>
        <member name="P:metadatalibrary.LanguageManager.confirmTitle">
            <summary>
            Conferma
            </summary>
        </member>
        <member name="P:metadatalibrary.LanguageManager.noValidTransaction">
            <summary>
            La transazione corrente non è più valida
            </summary>
        </member>
        <member name="M:metadatalibrary.LanguageManager.insertCancelOnTable(System.String,System.String)">
            <summary>
            Annullo l\'inserimento dell\'oggetto {name} nella tabella {tableName}
            </summary>
            <param name="name"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.LanguageManager.rowNotFound">
            <summary>
            Impossibile eliminare l'oggetto.
            </summary>
        </member>
        <member name="M:metadatalibrary.LanguageManager.deleteFromTable(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.LanguageManager.cantDeleteObject">
            <summary>
            Impossibile eliminare l'oggetto.
            </summary>
        </member>
        <member name="M:metadatalibrary.LanguageManager.errorRunningCommand(System.String)">
            <summary>
            Errore nell\'esecuzione del comando {command}
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.LanguageManager.couldNotLinkTable(System.String,System.String)">
            <summary>
            Non sono riuscito a collegare la riga alla tabella {tableName} nel metadato {name}
            </summary>
            <param name="name"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.LanguageManager.dbConnectionInterrupted">
            <summary>
            La connessione al db è stata interrotta. E' necessario disconnettersi, ripristinare la rete e riconnettersi al db.
            </summary>
        </member>
        <member name="M:metadatalibrary.LanguageManager.errorRunningCommandCloseWindow(System.String)">
            <summary>
            Errore eseguendo il comando {cmd}\r\nE\' necessario chiudere la maschera.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.LanguageManager.emptyWithinPar">
            <summary>
            (vuoto)
            </summary>
        </member>
        <member name="M:metadatalibrary.LanguageManager.modifiedBy(System.String)">
            <summary>
            Modificato da {user}
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.LanguageManager.createdBy(System.String)">
            <summary>
            Creato da {user}
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.LanguageManager.modifiedAt(System.DateTime)">
            <summary>
            Modificato il {data}
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.LanguageManager.createdAt(System.DateTime)">
            <summary>
            Creato il  {data}
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.LanguageManager.infoAboutObject">
            <summary>
            Informazioni sull'oggetto
            </summary>
        </member>
        <member name="P:metadatalibrary.LanguageManager.insertCopyConfirm">
            <summary>
            E' stato premuto il tasto inserisci copia. Si desidera davvero creare una copia dei dati già salvati?
            </summary>
        </member>
        <member name="P:metadatalibrary.LanguageManager.editLable">
            <summary>
            Correggi
            </summary>
        </member>
        <member name="P:metadatalibrary.LanguageManager.deleteLable">
            <summary>
            Cancella
            </summary>
        </member>
        <member name="P:metadatalibrary.LanguageManager.addLabel">
            <summary>
            Aggiungi
            </summary>
        </member>
        <member name="P:metadatalibrary.LanguageManager.searchWithinPar">
            <summary>
            (Ricerca)
            </summary>
        </member>
        <member name="P:metadatalibrary.LanguageManager.errorEmptyKey">
            <summary>
            Un campo chiave non può essere vuoto o duplicato.
            </summary>
        </member>
        <member name="P:metadatalibrary.LanguageManager.errorEmptyField">
            <summary>
            Un determinato campo non può essere vuoto.
            </summary>
        </member>
        <member name="P:metadatalibrary.LanguageManager.stringTooLong">
            <summary>
            Campo troppo lungo
            </summary>
        </member>
        <member name="P:metadatalibrary.LanguageManager.invalidDate">
            <summary>
            Data non valida
            </summary>
        </member>
        <member name="M:metadatalibrary.LanguageManager.listOfName(System.String)">
            <summary>
            Elenco {name}
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.LanguageManager.noElementFound">
            <summary>
            Nessun elemento trovato.
            </summary>
        </member>
        <member name="P:metadatalibrary.LanguageManager.OpenRelatedDocument">
            <summary>
            Apri documento collegato
            </summary>
        </member>
        <member name="M:metadatalibrary.LanguageManager.tableFilterApplied(System.String,System.String)">
            <summary>
            Tabella:{searchTable}\n\rFiltro applicato:{checkfilter}
            </summary>
            <param name="table"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.LanguageManager.warningLabel">
            <summary>
            Attenzione
            </summary>
        </member>
        <member name="T:metadatalibrary.IMetaData">
            <summary>
            Manages logic layer of data 
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.formController">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.eventsManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.getData">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.helpForm">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.TableName">
            <summary>
            Name of the table that stores the entity. If SourceRow is present, it is
             the same as SourceRow.TableName
            </summary>
        </member>
        <member name="M:metadatalibrary.IMetaData.Get_GetData">
            <summary>
            Returns a GetData class to use with this MetaData
            </summary>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.IMetaData.getDataIsPrivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.IMetaData.Get_PostData">
            <summary>
            Returns a PostData class to use with this MetaData
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.GetPublicForm(System.String)">
            <summary>
            Gets the form linked to an edittype
            </summary>
            <param name="edittype"></param>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.IMetaData.linkedForm">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.IMetaData.GetSorting(System.String)">
            <summary>
            Returns the default sorting for a list type
            </summary>
            <param name="listingType"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.GetStaticFilter(System.String)">
            <summary>
            Gets the static filter associated to the form
            </summary>
            <param name="listingType"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.primaryKey">
            <summary>
            Gets the primary key fields of the main table
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.GetNoRowFoundMessage(System.String)">
            <summary>
            Get the message to display when a list returns no rows
            </summary>
            <param name="listingtype"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.CheckSelectRow(System.Data.DataRow)">
            <summary>
            Return R if R is selectable, null otheriwse
            </summary>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.CanSelect(System.Data.DataRow)">
            <summary>
            Must return false if the given row can be selected with "mainselect" in the
             form named edit_type. Should also display to user the reason for which 
             row can't be selected.
            </summary>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.Enabled(System.Data.DataRow)">
            <summary>
            Must return true if a row can appear in comboboxes, or can be selected while creating an external
             reference to R from another table.
            </summary>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.DescribeColumns(System.Data.DataTable,System.String)">
            <summary>
            Should set the caption of DataTable Columns according to a selected Listing Type
             if a Column Caption is "" or starts with a dot, it is not displayed in grids.
            </summary>
            <param name="T"></param>
            <param name="ListingType"></param>
        </member>
        <member name="M:metadatalibrary.IMetaData.DescribeColumns(System.Data.DataTable)">
            <summary>
            Sets DenyNull and Format property of Columns
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.IMetaData.DescribeTree(System.Windows.Forms.TreeView,System.Data.DataTable,System.String)">
            <summary>
            Is called when a tree_view is linked to a MetaData in a form
            </summary>
            <param name="tree"></param>
            <param name="T"></param>
            <param name="listingType"></param>
        </member>
        <member name="M:metadatalibrary.IMetaData.WebDescribeTree(HelpWeb.hwTreeView,System.Data.DataTable,System.String)">
            <summary>
            Is called when a tree_view is linked to a MetaData in a web form
            </summary>
            <param name="tree"></param>
            <param name="T"></param>
            <param name="listingType"></param>
        </member>
        <member name="M:metadatalibrary.IMetaData.CalculateFields(System.Data.DataRow,System.String)">
            <summary>
            If ComputeRowsAs() has been called, this is called whenever a DataRow is 
             read or modified.
            </summary>
            <param name="r">DataRow to which do custom field calculation</param>
            <param name="listType">listing type used for calculation</param>
        </member>
        <member name="M:metadatalibrary.IMetaData.FilterRow(System.Data.DataRow,System.String)">
            <summary>
            Tells if a given DataRow must be displayed in a given list
            </summary>
            <param name="r">DataRow To Check for a filter condition</param>
            <param name="listType">kind of list</param>
            <returns>true when Row must be displayed</returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.ComputeRowsAs(System.Data.DataTable,System.String)">
            <summary>
            Tells MetaData Engine to call CalculateFields(R,ListingType) whenever:
             - a row is loaded from DataBase
             - a row is changed in a sub-entity form and modification accepted with mainsave
            </summary>
            <param name="primary">DataTable to which calculate fields</param>
            <param name="listingType">kind of list used for calculation</param>
        </member>
        <member name="M:metadatalibrary.IMetaData.FilterRows(System.Data.DataTable)">
            <summary>
            Mark a table to be field-calculated
            </summary>
            <param name="primary"></param>
        </member>
        <member name="M:metadatalibrary.IMetaData.GetFilterForInsert(System.Data.DataTable)">
            <summary>
            Used to filter combobox when main table is in insert mode
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.GetFilterForSearch(System.Data.DataTable)">
            <summary>
            Used to filter combobox when main table is in search mode
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.SetDefaults(System.Data.DataTable)">
            <summary>
            Sets default values for fields. This is necessary when those do not allow 
             null values. Default value are filled into row field whenever a new row is 
             created.
            </summary>
            <param name="primaryTable">Table for which default values have to be set</param>
        </member>
        <member name="M:metadatalibrary.IMetaData.IsValid(System.Data.DataRow,System.String@,System.String@)">
            <summary>
            It's called before accepting changes to an entity, and must state whether the entity is valid.
            </summary>
            <param name="r">DataRow to test</param>
            <param name="errmess">error message to display, null if no problem</param>
            <param name="errfield">wrong field or null if no problem</param>
            <returns>true when entity is valid</returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.HasNotes">
            <summary>
            Returns true if a "notes" field is available for the
             current row
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.NotesAvailable">
            <summary>
            True if there are Notes or OleNotes availabe for current row
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.GetNotes">
            <summary>
            Gets the "notes" field related to current row
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.SetNotes(System.String)">
            <summary>
            Set the "notes" field of current row
            </summary>
            <param name="notes"></param>
        </member>
        <member name="M:metadatalibrary.IMetaData.HasOleNotes">
            <summary>
            Returns true if a "notes" field is available for the
             current row
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.GetOleNotes">
            <summary>
            Gets the "notes" field related to current row
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.SetOleNotes(System.Byte[])">
            <summary>
            Set the "notes" field of current row
            </summary>
            <param name="OleNotes"></param>
        </member>
        <member name="M:metadatalibrary.IMetaData.Get_New_Row(System.Data.DataRow,System.Data.DataTable)">
            <summary>
            Gets a new entity row, adding it to a table T, having ParentRow as Parent
            </summary>
            <param name="parentRow">Parent Row of the new Row to create, or null if no parent is present</param>
            <param name="T">Table in which row has to be added</param>
            <returns>new row, child of ParentRow when that is given</returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.getName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.IMetaData.errorLogger">
            <summary>
            Class for logging errors
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.security">
            <summary>
            Security object linked
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.DllDispatcher">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.startFilter">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.startValueWanted">
            <summary>
            String wanted in first list selected row 
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.startFieldWanted">
            <summary>
            Fields to which StartWantedValue refers to
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.contextFilter">
            <summary>
            Filter calculated by the context menu manager that has opened this form
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.listTop">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.closeDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.doingCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.showClientMsg">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.ds">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.isClosing">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.formInited">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.currOperation">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.lastSelectedRow">
            <summary>
            Used for monitoring datatables in Forms
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.isList">
            <summary>
            True when this metadata is used to display a list collection
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.isSubentity">
            <summary>
            true if this is a sub-entity of an entity displayed in a parent form, i.e. 
             SourceRow is not null
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.entityChanged">
            <summary>
            true when changes to this entity or to sub-entity of this have been made
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.mainRefreshEnabled">
            <summary>
            true if MainRefresh is enabled
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.mainSelectionEnabled">
            <summary>
            True if "mainselect" is enabled
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.dontWarnOnInsertCancel">
            <summary>
            When true, does not warn if canceling an insert operation.
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.searchEnabled">
            <summary>
            must be set to false if SetSearch/DoSearch must be disabled on form.
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.canInsert">
            <summary>
            When false main insert button is disabled
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.canInsertCopy">
            <summary>
            When false main insert copy button is disabled
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.canCancel">
            <summary>
            When false main Cancel button is disabled
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.canSave">
            <summary>
            when false, "mainsave" button is disabled
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.extraParameter">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.FormType">
            <summary>
            true if LinkedForm is a Detail-form, i.e. no searches available, etc.
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.defaultListType">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.startEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.firstSearchFilter">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.IsSubEntity">
            <summary>
            true if this is a sub-entity of an entity displayed in a parent form, i.e. 
             SourceRow is not null
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.isTree">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.IMetaData.Choose(System.String)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.Choose(System.String,System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.IMetaData.formType">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.sourceRow">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.newSourceRow">
            <summary>
            
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.PrimaryDataTable">
            <summary>
            Primary DataTable of the MetaData
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaData.editType">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.IMetaData.EditType(System.Object,System.Int32)">
            <summary>
            Get Edit type from a Tag 
            </summary>
            <param name="Tag"></param>
            <param name="index">position of the edittype in the tag</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.LogError(System.String,System.Exception)">
            <summary>
            Sends an error message to the log service
            </summary>
            <param name="errmsg"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.IMetaData.LogError(System.String)">
            <summary>
            Sends an error message to the log service
            </summary>
            <param name="mess"></param>
        </member>
        <member name="M:metadatalibrary.IMetaData.Edit(System.Windows.Forms.Form,System.String,System.Boolean)">
            <summary>
            Edits the current entity using a specified form
            If a source row exists, it is automatically updated.
            </summary>
            <param name="ParentForm">Form parent</param>
            <param name="EditType">Name of Form to open</param>
            <param name="Modal">true if Modal Form wanted</param>
            <returns>True if a modal form has returned DialogResult.Ok</returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.SelectOne(System.String,System.String,System.String,System.Data.DataTable)">
            <summary>
            Selects a row from a Table using linked MetaData specified grid-listing
            </summary>
            <param name="ListingType"></param>
            <param name="filter">SQL filter to apply in data retrieving</param>
            <param name="searchtable">Table from which data has to be retrieved</param>
            <param name="ToMerge">in-memory Table which has some changes to apply to searchtable</param>
            <returns>The selected row or null if no row selected </returns>
            <remarks> If the entity is selected, a row is loaded in the primary table
             and all other data is cleared. </remarks>
        </member>
        <member name="M:metadatalibrary.IMetaData.GetListForm(metadatalibrary.MetaData,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Return a custom list form
            </summary>
            <param name="linked">MetaData linked to searchtable</param>
            <param name="columnlist">comma separated list of column names to show (or "*")</param>
            <param name="mergedfilter">filter to use for getting data</param>
            <param name="searchtable">Table in which rows have been searched</param>
            <param name="ListingType">Name of listing to be used</param>
            <param name="sorting"></param>
            <param name="top"></param>
            <returns>Custom List Form</returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.SelectByCondition(System.String,System.String)">
            <summary>
            Returns a row searched by a filter condition if there is only one row that satisfy 
            	the filter, and it is a selectable row. Otherwise returns null
            </summary>
            <param name="filter"></param>
            <param name="searchtable"></param>
            <returns>A row belonging to a table equal to PrimaryTable</returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.GetSourceChanges">
            <summary>
            Takes values for the Source Row from linked Form Data. The goal is to propagate to
             the parent form the changes made (in LinkedForm) in this form
            </summary>
            <remarks>
             Necessary condition is that FormDataSet does contain only one row of the same
             table as SourceRow. This function can be redefined to implement additional operations
             to do in SourceRow.Table when changes to SourceRow are accepted. 
             </remarks>
             <returns>true when operation successfull</returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.SetSource(System.Data.DataRow)">
            <summary>
            Gets the main row from a detail in Parent form 
            This row has to be updated in the parent form when the editing of this 
             entity has been completed, i.e. this entity is a sub-entity of another entity 
             currently being edited in a parent form.
            </summary>
            <param name="row">Row to import in the primary table</param>
        </member>
        <member name="M:metadatalibrary.IMetaData.FreshForm(System.Boolean)">
            <summary>
            Refills the form. If RefreshPeripherals is set to true, secondary tables
             are read again from DB (i.e. all tables in the view that are not
             cached, primary or child of primary.
            </summary>
            <param name="refreshPeripherals">when true, not -entity-or-cached- tables are cleared and read again from DB</param>
        </member>
        <member name="M:metadatalibrary.IMetaData.FreshForm(System.Boolean,System.Boolean)">
            <summary>
            Refills the form. If RefreshPeripherals is set to true, secondary tables
             are read again from DB (i.e. all tables in the view that are not
             cached, primary or child of primary.
            </summary>
            <param name="refreshPeripherals">when true, not -entity-or-cached- tables are cleared and read again from DB</param>
            <param name="doPrefill">When true, also prefill is done, this is more expensive and should be done only once in a form</param>
        </member>
        <member name="M:metadatalibrary.IMetaData.FreshForm(System.Windows.Forms.Control.ControlCollection,System.Boolean,System.String)">
            <summary>
            Prefills a Table and Refills a set of controls
            </summary>
            <param name="cs">Collection of controls to fill (whith childs)</param>
            <param name="freshperipherals">when true, not -entity-or-cached- tables are cleared and read again from DB</param>
            <param name="tablename">Table to Prefill</param>
        </member>
        <member name="M:metadatalibrary.IMetaData.FreshForm">
            <summary>
            Fills form with data and reads again not entity or cached tables.
            Equivalent to FreshForm(true)
            </summary>
        </member>
        <member name="M:metadatalibrary.IMetaData.EditDataRow(System.Data.DataRow,System.String,System.Data.DataRow@)">
            <summary>
            Edits a datarow using a specified listig type. Also Extra parameter
             of R.Table is considered.
            </summary>
            <param name="r"></param>
            <param name="editType"></param>
            <param name="outputRow"></param>
            <returns>true if row has been modified</returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.Insert_Grid_Row(System.Windows.Forms.DataGrid,System.String)">
            <summary>
            Function to link with an grid-add button
            </summary>
            <param name="g">Grid into which add the row</param>
            <param name="editType">Edit Type to use</param>
            <returns>new row or null if action canceled</returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.Delete_Grid_Row(System.Windows.Forms.DataGrid)">
            <summary>
            Event to link with a delete grid button
            </summary>
            <param name="g">grid containing row to delete</param>
            <returns>deleted row or null if action canceled</returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.Unlink_Grid_Row(System.Windows.Forms.DataGrid)">
            <summary>
            Unlinks a row contained in a grid
            </summary>
            <param name="g">Grid containing row to unlink</param>
            <returns>unliked row or null if action canceled</returns>
        </member>
        <member name="P:metadatalibrary.IMetaData.currentListForm">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.IMetaData.unlink(System.Data.DataRow)">
            <summary>
            Unlinks a specified row and set/unset the table as entitychild consequently. 
            Invoked during a Unlink_Grid_Row grid command
            </summary>
            <param name="r">Row to unlink</param>
            <returns>Unliked row or null if action canceled</returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.MultipleLinkUnlinkRows(System.String,System.String,System.String,System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            Opens the multiple link/unlink form template
            </summary>
            <param name="formTitle">Caption of the form to create</param>
            <param name="labelAdded">Caption for the already linked grid</param>
            <param name="labelToAdd">Caption for the rows to add grid</param>
            <param name="notEntityChildTable">Table containing the rows to link/unlink</param>
            <param name="filter">Filter used to retrieve the "to add" rows (in memory)</param>
            <param name="filterSql">Filter used to retrieve the "to add" rows (in database)</param>
            <param name="listingtype">listing type to use for the two grids</param>
        </member>
        <member name="M:metadatalibrary.IMetaData.MainSelect">
            <summary>
            Do a "mainselect" command, i.e. the current primary table row is "choosen"
             and returned to the caller Form
            </summary>
        </member>
        <member name="M:metadatalibrary.IMetaData.CommandEnabled(System.String)">
            <summary>
            Verifies if a certain command can be runned, i.e. if the corrisponding button
             should be "enabled".
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.doHelpDesk">
            <summary>
            Open HelpDesk form
            </summary>
        </member>
        <member name="M:metadatalibrary.IMetaData.DoMainCommand(System.String)">
            <summary>
            Executes a command described by the tag
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:metadatalibrary.IMetaData.SetEntityDetail(System.Data.DataRow)">
            <summary>
            Called when a sub-entity metadata is created, should set the main table
             depending on parent row.
            </summary>
            <param name="sourceRow"></param>
        </member>
        <member name="M:metadatalibrary.IMetaData.CopyField(System.Data.DataRow,System.String,System.Data.DataRow,System.String)">
            <summary>
            Copyes a field from a row to another without throwing exceptions if
             source or dest column does not exist. Temporary column are not copied.
            </summary>
            <param name="inputRow"></param>
            <param name="inputcol"></param>
            <param name="outputRow"></param>
            <param name="outputcol"></param>
        </member>
        <member name="M:metadatalibrary.IMetaData.GetRowFromList(System.Data.DataRow,System.String,System.Data.DataRow)">
            <summary>
            Gets a row (Output) knowing that it has been read via a certain list type.
            Output row is assumed to belong to primary table. Input row can belong
             to anything
            </summary>
            <param name="Input"></param>
            <param name="list"></param>
            <param name="Output"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.GetFormData(System.Boolean)">
            <summary>
            Gets data from linked Form control, returning false if some errors occured
            </summary>
            <param name="quick">true if no validity checks have to be made</param>
            <returns>true on success</returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.SaveFormData">
            <summary>
            Save all changes made to DataSet to DB. This is invoked when user clicks 
             "save" button or "Ok" button. Infact, both those buttons have a
              "mainsave" tag.
            </summary>
        </member>
        <member name="M:metadatalibrary.IMetaData.WarnUnsaved">
            <summary>
            Displays a message and stop form closing if ther are unsaved changes
            </summary>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.IMetaData.suspendListManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.IMetaData.EditNew">
            <summary>
            Create a new entity (eventually clearing current one) and updates form.
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.EditNewCopy">
            <summary>
            Create a new entity as a copy of current row
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.ExtCopyColumn(System.Data.DataColumn,System.Data.DataRow,System.Data.DataRow)">
            <summary>
            invokes InsertCopyColumn 
            </summary>
            <param name="C"></param>
            <param name="Source"></param>
            <param name="Dest"></param>
        </member>
        <member name="M:metadatalibrary.IMetaData.SetAutoMode(System.Windows.Forms.GroupBox)">
            <summary>
            G has tag: AutoChoose.TextBoxName.ListType.StartFilter or
                       AutoManage.TextBoxName.EditType.StartFilter
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:metadatalibrary.IMetaData.SetAutoField(System.Object,System.Windows.Forms.TextBox)">
            <summary>
            Set the value linked to  a textBox located in a AutoManage or AutoChoose groupbox. Eventually calls AfterRowSelect
            </summary>
            <param name="idValue"></param>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.IMetaData.GetAutoField(System.Windows.Forms.TextBox)">
            <summary>
            Gets the value in the HiddenTextBox linked to an AutoManage or AutoChoose TextBox
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.GetSys(System.String)">
            <summary>
            Get system environment variable
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.SetSys(System.String,System.Object)">
            <summary>
            Set system environment variable
            </summary>
            <param name="name"></param>
            <param name="o"></param>
        </member>
        <member name="M:metadatalibrary.IMetaData.GetUsr(System.String)">
            <summary>
            Get user environment variable
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaData.SetUsr(System.String,System.Object)">
            <summary>
            Set user environment variable
            </summary>
            <param name="name"></param>
            <param name="o"></param>
        </member>
        <member name="M:metadatalibrary.IMetaData.Destroy">
            <summary>
            Destroy and unlink this MetaData from anything
            </summary>
        </member>
        <member name="M:metadatalibrary.IMetaData.Dispose">
            <summary>
            This code added to correctly implement the disposable pattern.
            </summary>
        </member>
        <member name="M:metadatalibrary.IMetaData.Manage(System.String,System.String,System.String,System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="startfield"></param>
            <param name="startvalue"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.IMainToolBarManager">
            <summary>
            Manager of Main ToolBar
            </summary>
        </member>
        <member name="M:metadatalibrary.IMainToolBarManager.FreshButtons">
            <summary>
            Enables / Disables buttons of the bar
            </summary>
        </member>
        <member name="M:metadatalibrary.IMainToolBarManager.GetSizeBarHeight">
            <summary>
            Gets height  for the menu Bar, used to position forms in the desktop area
            </summary>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.MainToolBarManager">
            <inheritdoc />
            <summary>
            Manager of Main ToolBar
            </summary>
        </member>
        <member name="M:metadatalibrary.MainToolBarManager.GetSizeBarHeight">
            <summary>
            Gets height  for the menu Bar, used to position forms in the desktop area
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MainToolBarManager.GetToolBarManager(System.Windows.Forms.ToolBar)">
            <summary>
            returns the manager of a toolbar, creating a new one if it does not yet exists
            </summary>
            <param name="bar"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MainToolBarManager.#ctor(System.Windows.Forms.ToolBar)">
            <summary>
            Builds a manager giving it a toolbar
            </summary>
            <param name="bar"></param>
        </member>
        <member name="M:metadatalibrary.MainToolBarManager.FreshButtons">
            <summary>
            Update button status
            </summary>
        </member>
        <member name="M:metadatalibrary.MainToolBarManager.linkTo(metadatalibrary.IMetaData,metadatalibrary.IFormController)">
            <summary>
            Links the toolbar to a formPresentation
            </summary>
            <param name="m"></param>
            <param name="formController"></param>
        </member>
        <member name="M:metadatalibrary.MainToolBarManager.LinkTo(metadatalibrary.MetaData)">
            <summary>
            Link toolbar to a new metadata
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:metadatalibrary.MainToolBarManager.Unlink">
            <summary>
            Unlink the toolbar from any MetaData
            </summary>
        </member>
        <member name="M:metadatalibrary.MainToolBarManager.unlink(metadatalibrary.IMetaData)">
            <summary>
            Unlink the bar from a metadata
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:metadatalibrary.MainToolBarManager.Unlink(metadatalibrary.MetaData)">
            <summary>
            Unlink the toolbar from a specific MetaData
            </summary>
        </member>
        <member name="M:metadatalibrary.MainToolBarManager.GetToolBar(System.Windows.Forms.Form)">
            <summary>
            Gets the main toolbar of the form
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.IMessageShower">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.IMessageShower.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Shows a message and eventually gets a result
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
            <param name="caption"></param>
            <param name="btns"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMessageShower.setAutoResponder(metadatalibrary.IResponder)">
            <summary>
            Attach an autoresponder to the message shower
            </summary>
            <param name="responder"></param>
        </member>
        <member name="M:metadatalibrary.DefaultResponder.getResponse(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.DialogResult@)">
            <summary>
            
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
            <param name="caption"></param>
            <param name="result"></param>
            <returns>true when response was provided</returns>
        </member>
        <member name="M:metadatalibrary.DefaultResponder.getResponse(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.DialogResult@)">
            <summary>
            
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
            <param name="caption"></param>
            <param name="btns"></param>
            <param name="result"></param>
            <returns>true when response was provided</returns>
        </member>
        <member name="T:metadatalibrary.DefaultMessageShower">
            <summary>
            Default IMessageShower
            </summary>
        </member>
        <member name="M:metadatalibrary.DefaultMessageShower.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
            <param name="caption"></param>
            <param name="btns"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultMessageShower.Show(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
            <param name="caption"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.ShowClientMsgDelegate">
            <summary>
            Show a message to client, used to use a common interface in windows and web applications
            </summary>
            <param name="message"></param>
            <param name="title"></param>
            <param name="btns"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.MetaData">
            <summary>
            MetaObject represents an entity of the system. An entity has a representation in
             the database, and generally there are some main functions that can be done on it:
            - Editing
            - Creating 
            - Deleting
            More, an entity can be listed in some ways with other similar entities. 
            When displayed in a list or in a form, it happens that some field has to be displayed
             with a value taken from another table. These are "calculated fields", i.e., fields
             that are coded with a number in the entity, and needs a lookup table to be displayed.
             
             Underline of a MetaObject there is a "View" on the DataBase, that we 
              represent with a DataSet. The MetaObject will be associated to a 
              "Primary" DataTable, and a set of Secondary DataTable that has a key that
              includes the key of "Primary" DataTable. Those can be related directly or
              undirectly to the primary. 
              [Note: In this version of MetaObject Class we will assume
               that secondary table can only be directly related to primary. If needed, in the future
               we'll remove this constraint. ]
              More, there will be other tables in the View, that are needed to display
               some fields of Primary and Secondary Tables in a user comfortable way.
              In the view the only rows data are loaded are those necessary for displaying
               primary and secondary tables. In order to edit secondary tables or (some time,
               as in the case of tree-view related fields) primary table fields, it's 
               necessary to load other datarows from tables, so it's better to start another form
               with a new DataSet composed only by the necessary subview. After the user has modified
               a secondary datarow in an external form, the change to the row have to
               be applied to the implied secondary table in the Primary View.
               More, the View has to be refreshed due to the fact that some field of
                the changed secondary table may be impossible to display with the
                modified value.
             
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.ds">
            <summary>
            DataSet attached to the form
            </summary>
        </member>
        <member name="T:metadatalibrary.MetaData.form_states">
            <summary>
            Possible states for a form
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.form_states.insert">
            <summary>
            Current row is an added row
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.form_states.edit">
            <summary>
            Current Row is unchanged or modified
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.form_states.setsearch">
            <summary>
            There is no current row. The form is empty
            </summary>
        </member>
        <member name="T:metadatalibrary.MetaData.form_drawstates">
            <summary>
            Current Draw-State. It describe in some detail what is happening to 
            	the linked form
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.form_drawstates.clearing">
            <summary>
            The form is been cleared
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.form_drawstates.filling">
            <summary>
            The form is being filled
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.form_drawstates.prefilling">
            <summary>
            The form is being prefilled
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.form_drawstates.building">
            <summary>
            Form is being built up
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.form_drawstates.done">
            <summary>
            The form is under user control
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.SelectRow(System.Data.DataRow,System.String)">
            <summary>
            Called when a row is selected form a list, should fill the mainform 
             subsequently. In case of a list-form, entity table should not be cleared
            R is the row from which start the filling of the form  - does not belong to DS
            </summary>
            <param name="r"></param>
            <param name="listType"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.getLastLoadTime">
            <summary>
            Gets last load time of the selected row
            </summary>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.MetaData.errorLogger">
            <summary>
            Class for logging errors
            </summary>
        </member>
        <member name="T:metadatalibrary.MetaData.LastLoadTimeChangedDelegate">
            <summary>
            Type of delegate called when a row is selected with the load time length
            </summary>
            <param name="ms"></param>
        </member>
        <member name="F:metadatalibrary.MetaData.ComingFromRow">
            <summary>
            Riga origine della relazione, disponibile solo in afterlink
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.MiddleRow">
            <summary>
            MiddleRow found in indirect navigations
            </summary>
        </member>
        <member name="E:metadatalibrary.MetaData.LastLoadTimeChanged">
            <summary>
            called when a row is selected with the load time length
            </summary>
            
        </member>
        <member name="F:metadatalibrary.MetaData.Conn">
            <summary>
            Connection to database
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.security">
            <summary>
            Security object linked
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData._dbConn">
            <summary>
            Connection to the DB
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.dbConn">
            <summary>                                           
            Data access linked to the meta
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.ErroreIrrecuperabile">
            <summary>
            There has been an unrecoverable error
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.CurrentListForm">
            <summary>
            Current list form opened
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.QHS">
            <summary>
            Helper class for db query
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.QHC">
            <summary>
            Helper class for dataset Query
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.ManagedByDB">
            <summary>
            When true listing types and autoincrement values are taken from db and not from metadata code
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.Dispatcher">
            <summary>
            Entity Dispatcher (used for creating MetaData objects)
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.DllDispatcher">
            <summary>
            
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.LinkedForm">
            <summary>
            Current linked form (if any is linked)
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.DS">
            <summary>
            Primary DataSet of linked form
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.myGetData">
            <summary>
            GetData class used by this MetaData
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.ErrorLogUrl">
            <summary>
            Url used to log client errors
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.additional_search_condition">
            <summary>
            Additionally filter applied on maindosearch  
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.myHelpForm">
            <summary>
            Helpform class used by this MetaData
            </summary>                                                                                          
        </member>
        <member name="F:metadatalibrary.MetaData.FormInited">
            <summary>
            Set to true after calling AfterActivation. A form is not allowed to close when FormInited is still false
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.formInited">
            <summary>
            Set to true when form initialization is terminated
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.IsClearBeforeInsert">
            <summary>
            When a insert operation is invoked, a call to AfterClear is implied. This tells the form that an insert is coming
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.IsClearBeforeEdit">
            <summary>
            When user selects a row from a list, a call to AfterClear is implied. This tells the form that another row select is coming
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.FirstFillForThisRow">
            <summary>
            True  the  first time an AfterFill is invoked on a certain row  
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.IsFirstFillForThisRow">
            <summary>
            True the  first time an AfterFill is invoked on a certain row
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.GointToInsertMode">
            <summary>
            True if an insert is coming after the clear
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.GoingToEditMode">
            <summary>
            True if an edit is coming after the clear
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.IsRealClear">
            <summary>
            True if  no insert or edit are coming after the clear
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.InsertMode">
            <summary>
            True when form is in insert mode (NOT EDIT!!)
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.EditMode">
            <summary>
            True when form is in "edit mode" (not INSERT!)
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.FormState">
            <summary>
            Current form state
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.DrawStateIsDone">
            <summary>
            True if the form is under user control
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.Empty(System.Windows.Forms.Form)">
            <summary>
            Check the empty state of the MetaData linked to the form
            </summary>
            <param name="F"></param>
            <returns>true when Metadata is empty (it is in SetSearch Mode)</returns>
        </member>
        <member name="F:metadatalibrary.MetaData.Name">
            <summary>
            Used for Form Title
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.IsList">
            <summary>
            True when this metadata is used to display a list collection
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.isList">
            <summary>
            True when this metadata is used to display a list collection
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.StartEmpty">
            <summary>
            If true, the list form is not filled when it is filled at start
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.edit_type">
            <summary>
            Edit type of current form
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.editType">
            <summary>
            Edit type of current form
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.DefaultListType">
            <summary>
            List Type used for maindosearch button in taskbar
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.ContextFilter">
            <summary>
            Filter calculated by the context menu manager that has opened this form
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.contextFilter">
            <inheritdoc />
        </member>
        <member name="P:metadatalibrary.MetaData.isTree">
            <inheritdoc />
        </member>
        <member name="P:metadatalibrary.MetaData.IsTree">
            <summary>
            True when this metadata is used to display a tree collection
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.CheckEntityChildRowAdditions(System.Data.DataRow,System.String)">
            <summary>
             If possible, makes R child of current PrimaryEntity 
            </summary>
            <param name="R"></param>
            <param name="relname"></param>
        </member>
        <member name="F:metadatalibrary.MetaData.FilterLocked">
            <summary>
            True if SelectOne should not allow to modify input filter
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.StartFilter">
            <summary>
            StartFilter is used to filter data collected in lists and trees. 
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.StartValueWanted">
            <summary>
            String wanted in first list selected row 
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.StartFieldWanted">
            <summary>
            Fields to which StartWantedValue refers to
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.startValueWanted">
            <summary>
            String wanted in first list selected row 
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.startFieldWanted">
            <summary>
            Fields to which StartWantedValue refers to
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.EntityChanged">
            <summary>
            true when changes to this entity or to sub-entity of this have been made
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.entityChanged">
            <summary>
            true when changes to this entity or to sub-entity of this have been made
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.SourceRow">
            <summary>
            Source Row is the DataRow that stores this entity in the PARENT form (if any)
            This happens when this is a SUB-ENTITY
            </summary>    
        </member>
        <member name="F:metadatalibrary.MetaData.ExtraParameter">
            <summary>
            Extra parameter eventually given by caller (with field parameter of
             Edit() function)
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.ListingTypes">
            <summary>
            List of available ListingTypes
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.EditTypes">
            <summary>
            List of available EditForms
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.LastSelectedRow">
            <summary>
            Used for monitoring datatables in Forms
            </summary>
        </member>
        <member name="T:metadatalibrary.MetaData.form_types">
            <summary>
            Possbile Kind of a Form
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.form_types.main">
            <summary>
            Form with a standard "save". When user clicks "Save", chanegs are
             written to DB immediately
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.form_types.detail">
            <summary>
            Form showing a single datarow belonging to another form (of "main" kind). 
             When user clicks "Save", changes are not written, but only trasnferred to
             parent Form.
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.form_types.unknown">
            <summary>                                                                                      
            Unused
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.FirstSearchFilter">
            <summary>
            When set, as the form is activated executes  maindosearch on this filter and then clear this filter
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.form_type">
            <summary>
            Current kind of form (main/detail/unknown)
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.formType">
            <summary>
            Current kind of form (main/detail/unknown)
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.FormType">
            <summary>
            true if LinkedForm is a Detail-form, i.e. no searches available, etc.
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.subentity">
            <summary>
            True if this is a sub-entity of an entity displayed in a parent form  (SourceRow is not null) 
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.IsSubEntity">
            <summary>
            true if this is a sub-entity of an entity displayed in a parent form, i.e. 
             SourceRow is not null
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.MainRefreshEnabled">
            <summary>
            true if MainRefresh is enabled
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.MainSelectionEnabled">
            <summary>
            True if "mainselect" is enabled
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.DontWarnOnInsertCancel">
            <summary>
            When true, does not warn if canceling an insert operation.
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.SearchEnabled">
            <summary>
            must be set to false if SetSearch/DoSearch must be disabled on form.
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.CanInsert">
            <summary>
            When false main insert button is disabled
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.CanInsertCopy">
            <summary>
            When false main insert copy button is disabled
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.CanCancel">
            <summary>
            When false main Cancel button is disabled
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.CanSave">
            <summary>
            when false, "mainsave" button is disabled
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.Get_GetData">
            <summary>
            Returns a GetData class to use with this MetaData
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.Get_PostData">
            <summary>
            Returns a PostData class to use with this MetaData
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.SubEntity(System.Windows.Forms.Form)">
            <summary>
            Check the existence of a parent form for the form given
            </summary>
            <param name="f"></param>
            <returns>true if Form is a subentity child form</returns>
        </member>
        <member name="P:metadatalibrary.MetaData.TableName">
            <summary>
            Name of the table that stores the entity. If SourceRow is present, it is
             the same as SourceRow.TableName
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.PrimaryDataTable">
            <summary>
            Primary DataTable of the MetaData
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.TableToMonitor">
            <summary>
            Obsolete, TableToMonitor is the table being monitored for grid selection in order to select rows that and send them to caller form
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.ActAsList">
            <summary>
            Tells the MetaData that linked form is a List of primary table rows.
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.ListingType(System.Object,System.Int32)">
            <summary>
            Get List type from a Tag 
            </summary>
            <param name="Tag"></param>
            <param name="index">position of the listtype in the tag</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.EditType(System.Object,System.Int32)">
            <summary>
            Get Edit type from a Tag 
            </summary>
            <param name="Tag"></param>
            <param name="index">position of the edittype in the tag</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.#ctor(metadatalibrary.DataAccess,metadatalibrary.MetaDataDispatcher,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="conn">Connection to the DataBase</param>
            <param name="dispatcher">Entity dispatcher</param>
            <param name="primaryTable">name of related primary table</param>
        </member>
        <member name="M:metadatalibrary.MetaData.#ctor(metadatalibrary.IDataAccess,metadatalibrary.IMetaDataDispatcher,metadatalibrary.ISecurity,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="conn">Connection to the DataBase</param>
            <param name="dispatcher">Entity dispatcher</param>
            <param name="security"></param>
            <param name="primaryTable">name of related primary table</param>       
        </member>
        <member name="M:metadatalibrary.MetaData.init(System.Windows.Forms.Form)">
            <summary>
            E' in alternativa al costruttore con IDataAccess, IMetaDataDispatcher e ISecurity
            </summary>
            <param name="parentForm"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.GetMetaData(System.Windows.Forms.Form,System.String)">
            <summary>
             Contructor callable from MetaData-Linked forms to create new MetaData's 
              through the dispatcher of their linked MetaData
            </summary>
            <param name="f">Calling form</param>
            <param name="metaDataName">Name of entity to create</param>
        </member>
        <member name="M:metadatalibrary.MetaData.Init">
            <summary>
            Sets some variables initial values
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.GetFormByDllName(System.String)">
            <summary>
            Gets a Form class given its name
            </summary>
            <param name="dllName"></param>
            <returns></returns>
        </member>
        <member name="F:metadatalibrary.MetaData.errorLogBaseAddress">
            <summary>
            Address where access to db are logged
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.errorLogUrl">
            <summary>
            Address where client errors are logged
            </summary>
        </member>
        <member name="T:metadatalibrary.MetaData.SendMessage">
            <summary>
            Sends an error message to the error log service
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.SendMessage.Result">
            <summary>
            Result returned from the service
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.SendMessage.message">
            <summary>
            Text of the message sent
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.SendMessage.type">
            <summary>
            kind of message to be sent
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.SendMessage.#ctor(System.String,System.String)">
            <summary>
            Create an error message 
            </summary>
            <param name="message"></param>
            <param name="type"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.SendMessage.Send">
            <summary>
            Sends the message to the error log service
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.getOV">
            <summary>
            Gets the output of Errors Debug Listeners , only last 4000 chars
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.errorLog(metadatalibrary.MetaData,metadatalibrary.IDataAccess,metadatalibrary.ISecurity,System.String,System.Exception)">
            <summary>
            Remotely log an exception
            </summary>
            <param name="meta"></param>
            <param name="conn"></param>
            <param name="security"></param>
            <param name="errmsg"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.mainLogError(metadatalibrary.MetaData,metadatalibrary.DataAccess,System.String,System.Exception)">
            <summary>
            Creates and send an error message to the log error service
            </summary>
            <param name="Meta"></param>
            <param name="Conn"></param>
            <param name="errmsg"></param>
            <param name="E"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.LogError(System.String,System.Exception)">
            <summary>
            Sends an error message to the log service
            </summary>
            <param name="errmsg"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.LogError(System.String)">
            <summary>
            Sends an error message to the log service
            </summary>
            <param name="mess"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.GetPublicForm(System.String)">
            <summary>
            Gets the form linked to an edittype
            </summary>
            <param name="edittype"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.GetForm(System.String)">
            <summary>
            Gets the form named FormName to edit this entity
            </summary>
            <param name="EditType">Logical name of the form wanted</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.Edit(System.Windows.Forms.Form,System.String,System.Boolean)">
            <summary>
            Edits the current entity using a specified form.
            If a source row exists, it is automatically updated.
            </summary>
            <param name="parentForm">Form parent</param>
            <param name="editType">Name of Form to open</param>
            <param name="modal">true if Modal Form wanted</param>
            <returns>True if a modal form has returned DialogResult.Ok</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.GetSorting(System.String)">
            <summary>
            Returns the default sorting for a list type
            </summary>
            <param name="ListingType"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.GetStaticFilter(System.String)">
            <summary>
            Gets the static filter associated to the form
            </summary>
            <param name="listingType"></param>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.MetaData.listTop">
            <summary>
            Default limit to row lists
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.SelectOne(System.String,System.String,System.String,System.Data.DataTable)">
            <summary>
            Selects a row from a Table using linked MetaData specified grid-listing
            </summary>
            <param name="listingType"></param>
            <param name="filter">SQL filter to apply in data retrieving</param>
            <param name="searchtable">Table from which data has to be retrieved</param>
            <param name="toMerge">in-memory Table which has some changes to apply to searchtable</param>
            <returns>The selected row or null if no row selected </returns>
            <remarks> If the entity is selected, a row is loaded in the primary table
             and all other data is cleared. </remarks>
        </member>
        <member name="M:metadatalibrary.MetaData.primaryKey">
            <summary>
            Gets the primary key fields of the main table
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.GetNoRowFoundMessage(System.String)">
            <summary>
            Get the message to display when a list returns no rows
            </summary>
            <param name="listingtype"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.GetListForm(metadatalibrary.MetaData,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Return a custom list form
            </summary>
            <param name="linked">MetaData linked to searchtable</param>
            <param name="columnlist">comma separated list of column names to show (or "*")</param>
            <param name="mergedfilter">filter to use for getting data</param>
            <param name="searchtable">Table in which rows have been searched</param>
            <param name="listingType">Name of listing to be used</param>
            <param name="sorting"></param>
            <param name="top"></param>
            <returns>Custom List Form</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.getMergeListForm(metadatalibrary.MetaData,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Data.DataTable)">
            <summary>
            Return a custom list form in which the filtercan be locked.
            </summary>
            <param name="linked">MetaData linked to searchtable</param>
            <param name="columnlist">comma separated list of column names to show (or "*")</param>
            <param name="mergedfilter">filter to use for getting data</param>
            <param name="searchtable">Table in which rows have been searched</param>
            <param name="listingType">Name of listing to be used</param>
            <param name="sorting"></param>
            <param name="filterlocked">if true, the filter is locked and user cannot change listingtype</param>
            <param name="toMerge">Rows to "merge" with those found in DB</param>
            <returns>List Form</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.CheckSelectRow(System.Data.DataRow)">
            <summary>
            Return R if R is selectable, null otheriwse
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.SelectByCondition(System.String,System.String)">
            <summary>
            Returns a row searched by a filter condition if there is only one row that satisfy 
            	the filter, and it is a selectable row. Otherwise returns null
            </summary>
            <param name="filter"></param>
            <param name="searchtable"></param>
            <returns>A row belonging to a table equal to PrimaryTable</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.CanSelect(System.Data.DataRow)">
            <summary>
            Must return false if the given row can be selected with "mainselect" in the
             form named edit_type. Should also display to user the reason for which 
             row can't be selected.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.Enabled(System.Data.DataRow)">
            <summary>
            Must return true if a row can appear in comboboxes, or can be selected while creating an external
             reference to R from another table.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.AddColumn(System.Data.DataTable,System.String,System.Type,System.String,System.String)">
            <summary>
            Adds a column to a DataTable, assigning also Caption &amp; Expression
            </summary>
            <param name="T">Table where column must be added</param>
            <param name="colName">name of column to add</param>
            <param name="type">System Type of COlumn to add. Ex. typeof(int)</param>
            <param name="expr">Expression to use for the column. Ex. bilancio.codicebilancio</param>
            <param name="Caption">Caption for use in Grid Headings</param>
        </member>
        <member name="M:metadatalibrary.MetaData.DescribeAColumn(System.Data.DataTable,System.String,System.String)">
            <summary>
            Assign the caption (used in grids and lists) for a DataColumn
            </summary>
            <param name="T">Table to which Column belongs</param>
            <param name="colName">Column Name</param>
            <param name="caption">Caption wanted for the Column, empty string if it has to be hidden</param>
        </member>
        <member name="M:metadatalibrary.MetaData.DescribeAColumn(System.Data.DataTable,System.String,System.String,System.Int32)">
            <summary>
             Assign the caption (used in grids and lists) for a DataColumn
            </summary>
            <param name="T"></param>
            <param name="colName">Column Name</param>
            <param name="caption">Caption wanted for the Column, if empty or starts with ! is hidden</param>
            <param name="listcolpos">Position of the column in the list, -1 if it has to be hidden</param>
        </member>
        <member name="M:metadatalibrary.MetaData.DescribeAColumn(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            Assign the caption (used in grids and lists) and the 
             expression (tablename.fieldname) for a DataColumn. The column becomes
             a "temporary" column, so it's never read/written to db
            </summary>
            <param name="T">Table to which Column belongs</param>
            <param name="colName">Column Name (the column must already exist in the table)</param>
            <param name="caption">Caption wanted for the Column, if empty or starts with ! is hidden</param>
            <param name="expression">Expression that will be used to calculate field</param>
        </member>
        <member name="M:metadatalibrary.MetaData.DescribeAColumn(System.Data.DataTable,System.String,System.String,System.String,System.Int32)">
            <summary>
             Assign the caption (used in grids and lists) for a DataColumn
            </summary>
            <param name="T"></param>
            <param name="colName">Column Name</param>
            <param name="caption">Caption wanted for the Column, if empty or starts with ! is hidden</param>
            <param name="expression">Expression assigned to the column</param>
            <param name="listcolpos">Position of the column in the list, -1 if it has to be hidden</param>
        </member>
        <member name="F:metadatalibrary.MetaData.NewSourceRow">
            <summary>
            Row of CURRENT DataSet mapped to the SourceRow (which belongs to the PARENT DataSet)
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.newSourceRow">
            <summary>
             Row of CURRENT DataSet mapped to the SourceRow (which belongs to the PARENT DataSet)
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.GetSourceChanges">
            <summary>
            Takes values for the Source Row from linked Form Data. The goal is to propagate to
             the parent form the changes made (in LinkedForm) in this form
            </summary>
            <remarks>
             Necessary condition is that FormDataSet does contain only one row of the same
             table as SourceRow. This function can be redefined to implement additional operations
             to do in SourceRow.Table when changes to SourceRow are accepted. 
             </remarks>
             <returns>true when operation successfull</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.SetSource(System.Data.DataRow)">
            <summary>
            Gets the main row from a detail in Parent form 
            This row has to be updated in the parent form when the editing of this 
             entity has been completed, i.e. this entity is a sub-entity of another entity 
             currently being edited in a parent form.
            </summary>
            <param name="row">Row to import in the primary table</param>
        </member>
        <member name="P:metadatalibrary.MetaData.mainRefreshEnabled">
            <summary>
            true if MainRefresh is enabled
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.mainSelectionEnabled">
            <summary>
            True if "mainselect" is enabled
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.dontWarnOnInsertCancel">
            <summary>
            When true, does not warn if canceling an insert operation.
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.searchEnabled">
            <summary>
            must be set to false if SetSearch/DoSearch must be disabled on form.
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.canInsert">
            <summary>
            When false main insert button is disabled
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.canInsertCopy">
            <summary>
            When false main insert copy button is disabled
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.canCancel">
            <summary>
            When false main Cancel button is disabled
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaData.canSave">
            <summary>
            when false, "mainsave" button is disabled
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.getName">
            <summary>
            Returns the name for the related form
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.filterList(System.String,System.String)">
            <summary>
            Called when maindosearch is called on a list form
            </summary>
            <param name="listType"></param>
            <param name="baseFilter">Initial filter to apply when filling form</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.searchRow(System.Windows.Forms.Form,System.String,System.String)">
            <summary>
            It's the main operation executed when maindosearch is invoked
            </summary>
            <param name="f"></param>
            <param name="listType">Listing type to use for searching</param>
            <param name="filterstart">additional filter to append to the
             form-retrived condition</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.searchRow(System.Windows.Forms.Form,System.String,System.String,System.Boolean)">
            <summary>
            It's the main operation executed when maindosearch is invoked
            </summary>
            <param name="f"></param>
            <param name="listType"></param>
            <param name="filterstart"></param>
            <param name="emptylist"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.FreshForm(System.Boolean)">
            <summary>
            Refills the form. If RefreshPeripherals is set to true, secondary tables
             are read again from DB (i.e. all tables in the view that are not
             cached, primary or child of primary.
            </summary>
            <param name="refreshPeripherals">when true, not -entity-or-cached- tables are cleared and read again from DB</param>
        </member>
        <member name="M:metadatalibrary.MetaData.FreshForm(System.Boolean,System.Boolean)">
            <summary>
            Refills the form. If RefreshPeripherals is set to true, secondary tables
             are read again from DB (i.e. all tables in the view that are not
             cached, primary or child of primary.
            </summary>
            <param name="refreshPeripherals">when true, not -entity-or-cached- tables are cleared and read again from DB</param>
            <param name="doPrefill">When true, also prefill is done, this is more expensive and should be done only once in a form</param>
        </member>
        <member name="P:metadatalibrary.MetaData.formController">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.FreshForm(System.Windows.Forms.Control.ControlCollection,System.Boolean,System.String)">
            <summary>
            Prefills a Table and Refills a set of controls
            </summary>
            <param name="cs">Collection of controls to fill (whith childs)</param>
            <param name="freshperipherals">when true, not -entity-or-cached- tables are cleared and read again from DB</param>
            <param name="tablename">Table to Prefill</param>
        </member>
        <member name="M:metadatalibrary.MetaData.FreshForm">
            <summary>
            Fills form with data and reads again not entity or cached tables.
            Equivalent to FreshForm(true)
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.FreshForm(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            (Re)fill the entire form. 
            </summary>
            <param name="f"></param>
            <param name="refresh">if true, secondary tables are read again</param>
        </member>
        <member name="M:metadatalibrary.MetaData.EditDataRow(System.Data.DataRow,System.String,System.Data.DataRow@)">
            <summary>
            Edits a datarow using a specified listig type. Also Extra parameter
             of R.Table is considered.
            </summary>
            <param name="r"></param>
            <param name="_editType"></param>
            <param name="outputRow"></param>
            <returns>true if row has been modified</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.Edit_Grid(System.Windows.Forms.DataGrid,System.String)">
            <summary>
            Function callable statically from a form to implement a grid-edit event
            </summary>
            <param name="g">Grid containing row to edit</param>
            <param name="editType">edit type to use</param>
            <returns>Edited Row</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.Insert_Grid(System.Windows.Forms.DataGrid,System.String)">
            <summary>
            Statically callable function to implement a grid-add event
            </summary>
            <param name="g">Grid containing table where row has to be added</param>
            <param name="editType">edit type to use for editing</param>
            <returns>new row or null if canceled</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.Insert_Grid_Row(System.Windows.Forms.DataGrid,System.String)">
            <summary>
            Function to link with an grid-add button
            </summary>
            <param name="g">Grid into which add the row</param>
            <param name="_editType">Edit Type to use</param>
            <returns>new row or null if action canceled</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.Delete_Grid(System.Windows.Forms.DataGrid)">
            <summary>
            statically callable function to implement a delete - grid event
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.Unlink_Grid(System.Windows.Forms.DataGrid)">
            <summary>
            Function to link with an "unlink" button
            </summary>
            <param name="g">Grid containing row to unlink</param>
            <returns>unliked row or null if action canceled</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.Delete_Grid_Row(System.Windows.Forms.DataGrid)">
            <summary>
            Event to link with a delete grid button
            </summary>
            <param name="g">grid containing row to delete</param>
            <returns>deleted row or null if action canceled</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.Unlink_Grid_Row(System.Windows.Forms.DataGrid)">
            <summary>
            Unlinks a row contained in a grid
            </summary>
            <param name="g">Grid containing row to unlink</param>
            <returns>unliked row or null if action canceled</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.unlink(System.Data.DataRow)">
            <summary>
            Unlinks a specified row and set/unset the table as entitychild consequently. 
            Invoked during a Unlink_Grid_Row grid command
            </summary>
            <param name="r">Row to unlink</param>
            <returns>Unliked row or null if action canceled</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.CanRecache(System.Data.DataTable)">
            <summary>
            A table is recachable if it is clearable and is not entity or subentity
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.MainRefresh">
            <summary>
            Redraws the form getting cached and peripheral tables
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.Manage(System.Windows.Forms.Form,System.String,System.String,System.String)">
            <summary>
            Opens an external (not sub-entity) new form.
            From new form a datatable is monitored to refresh current form basing on
             last row selected in the new form. This is generally the primary table of
             the metadata linked to the new form.
            </summary>
            <param name="f">Parent form</param>
            <param name="command">tag with syntax "manage.tablename.edittype.filter"</param>
            <param name="startf">Start Field wanted</param>
            <param name="startv">Start value wanted</param>
        </member>
        <member name="M:metadatalibrary.MetaData.Manage(System.Windows.Forms.Form,System.String)">
            <summary>
            Return true if something has been selected, false if selection was canceled
            </summary>
            <param name="f"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.CopyPrimaryKey(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Set the primary key of Dest conformingly to table Source 
            </summary>
            <param name="dest"></param>
            <param name="source"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.Choose(System.String,System.Windows.Forms.Control)">
            <summary>
            choose.table.listtype.filter or choose.table.listtype.clear
            </summary>
            <param name="command"></param>
            <param name="origin">Controls that originated the command</param>
            <returns>true if something was selected</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.Choose(System.Windows.Forms.Form,System.String)">
            <summary>
            Do a "Choose" command
            </summary>
            <param name="f"></param>
            <param name="command"></param>
            <returns>true if a row has been choosed</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.MultipleLinkUnlinkRows(System.String,System.String,System.String,System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            Opens the multiple link/unlink form template
            </summary>
            <param name="formTitle">Caption of the form to create</param>
            <param name="labelAdded">Caption for the already linked grid</param>
            <param name="labelToAdd">Caption for the rows to add grid</param>
            <param name="notEntityChildTable">Table containing the rows to link/unlink</param>
            <param name="filter">Filter used to retrieve the "to add" rows (in memory)</param>
            <param name="filterSql">Filter used to retrieve the "to add" rows (in database)</param>
            <param name="listingtype">listing type to use for the two grids</param>
        </member>
        <member name="M:metadatalibrary.MetaData.ManageSelectedRow(System.Data.DataRow,System.Data.DataTable,System.Boolean,System.Windows.Forms.Control.ControlCollection)">
            <summary>
            
            </summary>
            <param name="selected">A row that May (in case of choose) or may NOT belong to Monitored</param>
            <param name="monitored">current DataSet Table</param>
            <param name="canprefill"></param>
            <param name="cs">Control collection to eventually update</param>
        </member>
        <member name="M:metadatalibrary.MetaData.MainSelect">
            <summary>
            Do a "mainselect" command, i.e. the current primary table row is "choosen"
             and returned to the caller Form
            </summary>
            <remarks>Needs PrimaryTable, TableToMonitor, DllDispatcher,linkedForm,helpForm.mainTableSelector,LastSelectedRow </remarks>
        </member>
        <member name="M:metadatalibrary.MetaData.MainSelect(System.Windows.Forms.Form)">
            <summary>
            Do a MainSelect command
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.DoMainCommand(System.Windows.Forms.Form,System.String)">
            <summary>
            Do a generic command
            </summary>
            <param name="f"></param>
            <param name="command"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.CommandEnabled(System.String)">
            <summary>
            Verifies if a certain command can be runned, i.e. if the corrisponding button
             should be "enabled".
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="F:metadatalibrary.MetaData.helpdeskEnabled">
            <summary>
            Enable HelpDesk form 
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.doHelpDesk">
            <summary>
            Open HelpDesk form
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.doEdit(System.Windows.Forms.Form,System.Windows.Forms.Form,System.Boolean)">
            <summary>
            Edits the entity
            </summary>
            <param name="parent">Parent Form, who is calling this function </param>
            <param name="f">Form to edit the entity</param>
            <param name="modal">true when Form has to be opened as Modal</param>
            <returns>true when a modal form has returned DialogResult.Ok</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.linkToForm(System.Windows.Forms.Form)">
            <summary>
            Attach main instances to form, and invokes form controller link
            </summary>
            <param name="f"></param>
        </member>
        <member name="F:metadatalibrary.MetaData.dontClose">
            <summary>
            When true, form is blocked from being closed from the user
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.DoingCommand">
            <summary>
            True when some main command is running
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.DoMainCommand(System.String)">
            <summary>
            Executes a command described by the tag
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.InternalDoMainCommand(System.String)">
            <summary>
            Do a generic command
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.DescribeColumns(System.Data.DataTable,System.String)">
            <summary>
            Should set the caption of DataTable Columns according to a selected Listing Type
             if a Column Caption is "" or starts with a dot, it is not displayed in grids.
            </summary>
            <param name="T"></param>
            <param name="listingType"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.DescribeColumns(System.Data.DataTable)">
            <summary>
            Sets DenyNull and Format property of Columns
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.describeListType(metadatalibrary.IDataAccess,System.Data.DataTable,System.String)">
            <summary>
            
            </summary>
            <param name="Conn"></param>
            <param name="T"></param>
            <param name="listtype"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.DescribeListType(metadatalibrary.DataAccess,System.Data.DataTable,System.String)">
            <summary>
            Sets caption, format, expression, basing on dbstructure
            </summary>
            <param name="Conn"></param>
            <param name="T"></param>
            <param name="listtype"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.DescribeTree(System.Windows.Forms.TreeView,System.Data.DataTable,System.String)">
            <summary>
            Is called when a tree_view is linked to a MetaData in a form
            </summary>
            <param name="tree"></param>
            <param name="T"></param>
            <param name="ListingType"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.WebDescribeTree(HelpWeb.hwTreeView,System.Data.DataTable,System.String)">
            <summary>
            Is called when a tree_view is linked to a MetaData in a web form
            </summary>
            <param name="tree"></param>
            <param name="T"></param>
            <param name="ListingType"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.CalculateFields(System.Data.DataRow,System.String)">
            <summary>
            If ComputeRowsAs() has been called, this is called whenever a DataRow is 
             read or modified.
            </summary>
            <param name="R">DataRow to which do custom field calculation</param>
            <param name="list_type">listing type used for calculation</param>
        </member>
        <member name="M:metadatalibrary.MetaData.FilterRow(System.Data.DataRow,System.String)">
            <summary>
            Tells if a given DataRow must be displayed in a given list
            </summary>
            <param name="R">DataRow To Check for a filter condition</param>
            <param name="listType">kind of list</param>
            <returns>true when Row must be displayed</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.ComputeRowsAs(System.Data.DataTable,System.String)">
            <summary>
            Tells MetaData Engine to call CalculateFields(R,ListingType) whenever:
             - a row is loaded from DataBase
             - a row is changed in a sub-entity form and modification accepted with mainsave
            </summary>
            <param name="primary">DataTable to which calculate fields</param>
            <param name="listingType">kind of list used for calculation</param>
        </member>
        <member name="M:metadatalibrary.MetaData.FilterRows(System.Data.DataTable)">
            <summary>
            Mark a table to be field-calculated
            </summary>
            <param name="primary"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.GetFilterForInsert(System.Data.DataTable)">
            <summary>
            Used to filter combobox when main table is in insert mode
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.GetFilterForSearch(System.Data.DataTable)">
            <summary>
            Used to filter combobox when main table is in search mode
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.MetaData.startFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.SetDefaults(System.Data.DataTable)">
            <summary>
            Sets default values for fields. This is necessary when those do not allow 
             null values. Default value are filled into row field whenever a new row is 
             created.
            </summary>
            <param name="primaryTable">Table for which default values have to be set</param>
        </member>
        <member name="M:metadatalibrary.MetaData.Get_New_Row(System.Data.DataRow,System.Data.DataTable)">
            <summary>
            Gets a new entity row, adding it to a table T, having ParentRow as Parent
            </summary>
            <param name="parentRow">Parent Row of the new Row to create, or null if no parent is present</param>
            <param name="T">Table in which row has to be added</param>
            <returns>new row, child of ParentRow when that is given</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.addEditEventToGrid(System.Windows.Forms.DataGrid)">
            <summary>
            Adds the event to a navigator grid
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.SetColor(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Set custom colors for a control, eventually recursively
            </summary>
            <param name="c"></param>
            <param name="recursive"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.SetColor(System.Windows.Forms.Control)">
            <summary>
            Set custom color for a specific Control
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.Tb_DrawItem(System.Object,System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Change the appearance of TabControls
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.SetEntityDetail(System.Data.DataRow)">
            <summary>
            Called when a sub-entity metadata is created, should set the main table
             depending on parent row.
            </summary>
            <param name="sourceRow"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.CopyField(System.Data.DataRow,System.String,System.Data.DataRow,System.String)">
            <summary>
            Copyes a field from a row to another without throwing exceptions if
             source or dest column does not exist. Temporary column are not copied.
            </summary>
            <param name="inputRow"></param>
            <param name="inputcol"></param>
            <param name="outputRow"></param>
            <param name="outputcol"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.GetRowFromList(System.Data.DataRow,System.String,System.Data.DataRow)">
            <summary>
            Gets a row (Output) knowing that it has been read via a certain list type.
            Output row is assumed to belong to primary table. Input row can belong
             to anything
            </summary>
            <param name="input"></param>
            <param name="list"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.SetDefault(System.Data.DataTable,System.String,System.Object)">
            <summary>
            Sets the default value (used when a NEW row is created for teh table)
            </summary>
            <param name="primaryTable">Table to which field belongs</param>
            <param name="field">field name</param>
            <param name="o">default value wanted</param>
        </member>
        <member name="M:metadatalibrary.MetaData.GetMetaData(System.Windows.Forms.Form)">
            <summary>
            Gets the MetaData linked to a form. Generally called on MetaData_AfterLink 
            	method.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.GetConnection(System.Windows.Forms.Form)">
            <summary>
            Gets current connection to DataBase when available
            </summary>
            <param name="f"></param>
            <returns>Connection to DataBase</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.getConnection(System.Windows.Forms.Form)">
            <summary>
            Gets current connection to DataBase when available
            </summary>
            <param name="f"></param>
            <returns>Connection to DataBase</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.ClearForm(System.Windows.Forms.Form)">
            <summary>
            Clears form controls, unbinding grids 
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.GetFormData(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            Gets data from Form's control, returning false if some errors occured
            </summary>
            <param name="f"></param>
            <param name="quick">true if no validity checks have to be made</param>
            <returns>true on success</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.GetFormData(System.Boolean)">
            <summary>
            Gets data from linked Form control, returning false if some errors occured
            </summary>
            <param name="quick">true if no validity checks have to be made</param>
            <returns>true on success</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.SaveFormData(System.Windows.Forms.Form)">
            <summary>
            Gets data in controls, propagates changes to parent form (if any)
             and save data. It should be called when user accepts changes made with the form.
            </summary>
            <param name="f"></param>
        </member>
        <member name="T:metadatalibrary.MetaData.mainoperations">
            <summary>
            Current operation
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.mainoperations.setsearch">
            <summary>
            editing a search mask
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.mainoperations.search">
            <summary>
            doing a mainsearch
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.mainoperations.delete">
            <summary>
            Doing a main delete
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.mainoperations.insert">
            <summary>
            Doing a main insert
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.mainoperations.save">
            <summary>
            Doing a mainsave
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.mainoperations.none">
            <summary>
            Doing nothing
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.SaveFormData">
            <summary>
            Save all changes made on the DataSet to DB. This is invoked when user clicks 
             "save" button or "Ok" button. Infact, both those buttons have a
              "mainsave" tag.
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.GetDispatcher(System.Windows.Forms.Form)">
            <summary>
            Gets the entity dispatcher 
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.getDispatcher(System.Windows.Forms.Form)">
            <summary>
            Gets the entity dispatcher 
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.MetaData.showClientMsg">
            <summary>
            
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.ShowClientMsg">
            <summary>
            Delegate for showing messages to generic client
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.WindowsShowClientMsg(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Message shower for windows client
            </summary>
            <param name="message"></param>
            <param name="title"></param>
            <param name="btns"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.MetaData.BroadCastHandler">
            <summary>
            Broadcast delegate kind
            </summary>
            <param name="sender">Sender of the broadcast</param>
            <param name="message">Message sent</param>
        </member>
        <member name="E:metadatalibrary.MetaData.messageBroadcaster">
            <summary>
            handler used to register to broadcasts messages
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.sendBroadcast(System.Object,System.Object)">
            <summary>
            Sends a broadcast message from a sender. This can be intercepted  by another form registered to messageBroadcaster 
            </summary>
            <param name="sender"></param>
            <param name="message"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.IsValid(System.Data.DataRow,System.String@,System.String@)">
            <summary>
            It's called before accepting changes to an entity, and must state whether the entity is valid.
            </summary>
            <param name="r">DataRow to test</param>
            <param name="errmess">error message to display, null if no problem</param>
            <param name="errfield">wrong field or null if no problem</param>
            <returns>true when entity is valid</returns>
        </member>
        <member name="P:metadatalibrary.MetaData.sourceRow">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.xCompChilds(System.Data.DataSet,System.Data.DataSet,System.Data.DataRow)">
            <summary>
            Returns true if RSource has a corresponding row in DataSet Destination (with all child rows)
            </summary>
            <param name="dest"></param>
            <param name="rif"></param>
            <param name="rSource"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.compDataRow(System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Returns true Dest table has a DataRow equal to Sample
            </summary>
            <param name="destTable"></param>
            <param name="sample"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.HasUnsavedChanges(System.Windows.Forms.Form)">
            <summary>
            True when data in the form has been modified and not saved
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.WarnUnsaved">
            <summary>
            Dsiplays a message and stop form closing if ther are unsaved changes
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.WarnUnsaved(System.Windows.Forms.Form)">
            <summary>
            Checks if a Form can be closed
            </summary>
            <param name="f"></param>
            <returns>true true if there are no changes, or there are changes user choose to ignore them </returns>
        </member>
        <member name="M:metadatalibrary.MetaData.EditNew">
            <summary>
            Create a new entity (eventually clearing current one) and updates form.
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.MainAdd(System.Windows.Forms.Form)">
            <summary>
            Function to statically link to "Main Insert" button
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.EditNewCopy">
            <summary>
            Create a new entity as a copy of current row
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.InsertCopyColumn(System.Data.DataColumn,System.Data.DataRow,System.Data.DataRow)">
            <summary>
            Should Copy a column from Source to Dest, can be inherited to skip or modify the copy 
            </summary>
            <param name="c"></param>
            <param name="source"></param>
            <param name="dest"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.ExtCopyColumn(System.Data.DataColumn,System.Data.DataRow,System.Data.DataRow)">
            <summary>
            invokes InsertCopyColumn 
            </summary>
            <param name="c"></param>
            <param name="source"></param>
            <param name="dest"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.MaxFromColumn(System.Data.DataTable,System.String)">
            <summary>
            Gets the maximum value from a column
            </summary>
            <param name="T"></param>
            <param name="column"></param>
            <returns>0 if table was empty</returns>
        </member>
        <member name="M:metadatalibrary.MetaData.SumColumn(System.Data.DataTable,System.String)">
            <summary>
            Get the sum of a column
            </summary>
            <param name="T"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.MetaData.AutoInfo">
            <summary>
            Informations about a groupbox used witg an autochoose/automanage 
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.AutoInfo.G">
            <summary>
            Groupbox where the autochoose/automanage is located
            G has tag: AutoChoose.TextBoxName.ListType.StartFilter or
                       AutoManage.TextBoxName.EditType.StartFilter
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.AutoInfo.type">
            <summary>
            Edittype for automanage, ListingType for autochoose
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.AutoInfo.startfilter">
            <summary>
            Startfilter specified for the search 
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.AutoInfo.startfield">
            <summary>
            Field linked to the activating textbox
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.AutoInfo.table">
            <summary>
            Table to search into
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.AutoInfo.kind">
            <summary>
            Can be AutoManage or AutoChoose
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.AutoInfo.busy">
            <summary>
            True if currently operating
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.AutoInfo.ParentTable">
            <summary>
            Table linked to hidden textbox, usually is table
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.AutoInfo.ChildTable">
            <summary>
            Table for search the main table, usually a view on the main table
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.AutoInfo.childfield">
            <summary>
            Field for searching the main table
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.AutoInfo.parentfield">
            <summary>
            Field linked to parentTable
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.AutoInfo.InvisibleTextBox">
            <summary>
            Hidden TextBox linked to the GroupBox. Hiddent textbox has tag ParentTable.parentfield?ChildTable.childfield
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.AutoInfo.GetInvisibleText">
            <summary>
            Gets text from the hidden TextBox
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.AutoInfo.#ctor(System.Windows.Forms.GroupBox,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an autoinfo structure
            </summary>
            <param name="G">Linked GroupBox</param>
            <param name="type">EditType or ListingType</param>
            <param name="startfilter">always applied filter</param>
            <param name="startfield">field to search</param>
            <param name="table">parent table to search</param>
            <param name="kind">AutoManage or AutoChoose</param>
        </member>
        <member name="M:metadatalibrary.MetaData.GetAutoInfo(System.String)">
            <summary>
            Get the Autoinfo relate to a TextBox given the TextBon name
            </summary>
            <param name="textBoxName"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.SetAutoField(System.Object,System.Windows.Forms.TextBox)">
            <summary>
            Set the value linked to  a textBox located in a AutoManage or AutoChoose groupbox. Eventually calls AfterRowSelect
            </summary>
            <param name="idValue"></param>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.GetAutoField(System.Windows.Forms.TextBox)">
            <summary>
            Gets the value in the HiddenTextBox linked to an AutoManage or AutoChoose TextBox
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="F:metadatalibrary.MetaData.NotesFieldName">
            <summary>
            Name of Notes field
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.OleNotesFieldName">
            <summary>
            Name of OleNotes field
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.HasNotes">
            <summary>
            Returns true if a "notes" field is available for the
             current row
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.NotesAvailable">
            <summary>
            True if there are Notes or OleNotes availabe for current row
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.GetNotes">
            <summary>
            Gets the "notes" field related to current row
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.SetNotes(System.String)">
            <summary>
            Set the "notes" field of current row
            </summary>
            <param name="notes"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.HasOleNotes">
            <summary>
            Returns true if a "notes" field is available for the
             current row
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.GetOleNotes">
            <summary>
            Gets the "notes" field related to current row
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.SetOleNotes(System.Byte[])">
            <summary>
            Set the "notes" field of current row
            </summary>
            <param name="oleNotes"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.GetSys(System.String)">
            <summary>
            Get system environment variable
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.SetSys(System.String,System.Object)">
            <summary>
            Set system environment variable
            </summary>
            <param name="name"></param>
            <param name="o"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.GetUsr(System.String)">
            <summary>
            Get user environment variable
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaData.SetUsr(System.String,System.Object)">
            <summary>
            Set user environment variable
            </summary>
            <param name="name"></param>
            <param name="O"></param>
        </member>
        <member name="F:metadatalibrary.MetaData.destroyed">
            <summary>
            When true, this MetaData has been disposed, should not be used anymore
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.Destroy">
            <summary>
            Destroy and unlink this MetaData from anything
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaData.privateGetData">
            <summary>
            When true, this MetaData owns his GetData class an can dispose it. 
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaData.Dispose(System.Boolean)">
            <summary>
            Do dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:metadatalibrary.MetaData.Dispose">
            <summary>
            This code added to correctly implement the disposable pattern.
            </summary>
        </member>
        <member name="T:metadatalibrary.DataSetHelperClass">
            <summary>
            Helper class for DataTables
            </summary>
        </member>
        <member name="M:metadatalibrary.DataSetHelperClass.First(System.Data.DataTable,System.String,System.String,System.Data.DataViewRowState)">
            <summary>
            Gets the first row of a DataTable if any is present
            </summary>
            <param name="t"></param>
            <param name="filter"></param>
            <param name="sort"></param>
            <param name="rv"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.IMetaDataDispatcher">
            <summary>
            Manages metadata loading
            </summary>
        </member>
        <member name="P:metadatalibrary.IMetaDataDispatcher.ErroreGrave">
            <summary>
            True if an unrecoverable error has occurred
            </summary>
        </member>
        <member name="M:metadatalibrary.IMetaDataDispatcher.DefaultMetaData(metadatalibrary.DataAccess,System.String)">
            <summary>
            Returns a standard MetaData, with all "base" functionality
            </summary>
            <param name="Conn"></param>
            <param name="objectname"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaDataDispatcher.defaultMetaData(System.String)">
            <summary>
             Returns a standard MetaData, with all "base" functionality
            </summary>     
            <param name="metaDataName"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaDataDispatcher.Get(System.String)">
            <summary>
            Returns a custom MetaData, given its name
            </summary>
            <param name="metaDataName"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaDataDispatcher.Edit(System.Windows.Forms.Form,System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Edit an entity (tablename) with a specified edit-type
            </summary>
            <param name="parent">Parent Form</param>
            <param name="metaDataName">name of primary table to edit</param>
            <param name="editName">logical name of form (edit-type)</param>
            <param name="modal">true if Form has to be opened in modal mode</param>
            <param name="param">Extra parameter to assign to MetaData before crating the form</param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.MetaDataDispatcher">
            <summary>
            Class that knows how to create MetaData Objects, and editing
             them using Forms identified by logical names
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaDataDispatcher.Conn">
            <summary>
            Interface to the physical DB
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaDataDispatcher.dbConn">
            <summary>
            Data access linked to the dispatcher
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaDataDispatcher.security">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaDataDispatcher.#ctor(metadatalibrary.DataAccess)">
            <summary>
            Build the dispatcher and gives it a DB connection
            </summary>
            <param name="conn"></param>
        </member>
        <member name="P:metadatalibrary.MetaDataDispatcher.errorLogger">
            <summary>
            Class for logging errors
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaDataDispatcher.#ctor(metadatalibrary.IDataAccess)">
            <summary>
            Builds a dispatcher connecting it to a database
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:metadatalibrary.MetaDataDispatcher.logException(System.String,System.Exception)">
            <summary>
            Send an Exception to remote logger
            </summary>
            <param name="msg"></param>
            <param name="e"></param>
        </member>
        <member name="F:metadatalibrary.MetaDataDispatcher.erroreGrave">
            <summary>
            True if an unrecoverable error has occurred
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaDataDispatcher.GetSys(System.String)">
            <summary>
            Get a system environment variable
            </summary>
            <param name="name">variable name</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaDataDispatcher.SetSys(System.String,System.Object)">
            <summary>
            Set a system environment variable
            </summary>
            <param name="name">variable name</param>
            <param name="O">value to set</param>
        </member>
        <member name="M:metadatalibrary.MetaDataDispatcher.GetUsr(System.String)">
            <summary>
            Get a user environment variable
            </summary>
            <param name="name">variable name</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaDataDispatcher.SetUsr(System.String,System.Object)">
            <summary>
            Set a user environment variable
            </summary>
            <param name="name">variable name</param>
            <param name="O">value to set</param>
        </member>
        <member name="M:metadatalibrary.MetaDataDispatcher.DefaultMetaData(metadatalibrary.DataAccess,System.String)">
            <summary>
            Returns a standard MetaData, with all "base" functionality
            </summary>
            <param name="conn"></param>
            <param name="objectname"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaDataDispatcher.defaultMetaData(System.String)">
            <summary>
            Returns a standard MetaData, with all "base" functionality
            </summary>
            <param name="objectname"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaDataDispatcher.Get(System.String)">
            <summary>
            Returns a custom MetaData, given its name
            </summary>
            <param name="metaDataName"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaDataDispatcher.Edit(System.Windows.Forms.Form,System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Edit an entity (tablename) with a specified edit-type
            </summary>
            <param name="parent">Parent Form</param>
            <param name="metaDataName">name of primary table to edit</param>
            <param name="editName">logical name of form (edit-type)</param>
            <param name="modal">true if Form has to be opened in modal mode</param>
            <param name="param">Extra parameter to assign to MetaData before crating the form</param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.DataRowFunction">
            <summary>
            Function applied to a list of DataRowExpr that returns another DataRowExpr
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.MetaExpressionGenerator">
            <summary>
            Creates a MetaExpression given a DataRow
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.ExpressionInfo">
            <summary>
            Informations about a MetaExpression
            </summary>
        </member>
        <member name="F:metadatalibrary.ExpressionInfo.IsTrue">
            <summary>
            The expression is the True constant
            </summary>
        </member>
        <member name="F:metadatalibrary.ExpressionInfo.IsFalse">
            <summary>
            The expression is the False constant
            </summary>
        </member>
        <member name="F:metadatalibrary.ExpressionInfo.IsConstant">
            <summary>
            The expression is a constant
            </summary>
        </member>
        <member name="F:metadatalibrary.ExpressionInfo.IsNull">
            <summary>
            The expression is the DBNull constant
            </summary>
        </member>
        <member name="F:metadatalibrary.ExpressionInfo.IsUndefined">
            <summary>
            The expression is null
            </summary>
        </member>
        <member name="F:metadatalibrary.ExpressionInfo.IsGrouping">
            <summary>
             The expression is a grouping function
            </summary>
        </member>
        <member name="T:metadatalibrary.MetaExpressionHelper">
            <summary>
            Helper class for MetaExpressions
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaExpressionHelper.keyFields(System.Data.DataRow)">
            <summary>
            returns all key fields of this row (they depends on the table, not on the rows)
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpressionHelper.keyValues(System.Data.DataRow)">
            <summary>
            returns all key values for a row
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpressionHelper.toSql(metadatalibrary.MetaExpression[],metadatalibrary.QueryHelper,System.Object)">
            <summary>
            Converts an array of metaExpressions to an array of sql strings
            </summary>
            <param name="fn"></param>
            <param name="q"></param>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpressionHelper.toString(metadatalibrary.MetaExpression[])">
            <summary>
            Converts an array of metaExpressions to an array of descriptivr strings
            </summary>
            <param name="fn">array of metaExpression</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpressionHelper.toCommaSeparated(metadatalibrary.MetaExpression[])">
            <summary>
            converts an array of metaExpression into a string that is the comma separation of their friendly caption
            </summary>
            <param name="fn"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpressionHelper.toCommaSeparated(metadatalibrary.MetaExpression[],metadatalibrary.QueryHelper,System.Object)">
            <summary>
            converts an array of metaExpression in a string that is the comma separation of their sql translation
            </summary>
            <param name="fn">array of metaExpression</param>
            <param name="q">QueryHelper to use</param>
            <param name="env">environment for the evaluation</param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.SqlLikeStringExtensions">
            <summary>
            true when s like pattern (in  a sql-like behaviour)
            </summary>
        </member>
        <member name="M:metadatalibrary.SqlLikeStringExtensions.SqlLike(System.String,System.String)">
            <summary>
            true when s like pattern (in  a sql-like behaviour)
            </summary>
            <param name="s"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.SqlLikeStringUtilities">
            <summary>
            Helper class  
            </summary>
        </member>
        <member name="M:metadatalibrary.SqlLikeStringUtilities.SqlLike(System.String,System.String)">
            <summary>
            true when s like pattern (in  a sql-like behaviour)
            </summary>
        </member>
        <member name="T:metadatalibrary.MetaExpression">
            <summary>
            Base class for all MetaExpressions. It represent a function that can be applied to an object in a given context. 
             MetaExpression can be combined together like any expression, and can be converted to sql query or to string when needed.
             It is also implicitely convertable into a Predicate
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaExpression.joinContext">
            <summary>
            Mapping tra nomi delle tabelle e campi dell'oggetto in input ove sia un oggetto composito
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaExpression.compiled">
            <summary>
            Compiled version of the expression (only present if compile have been invoked)
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaExpression.getCCode(metadatalibrary.Compiler,System.String,System.Type)">
            <summary>
            Gets c# code to compile this expression
            </summary>
            <param name="c">compiler to use</param>
            <param name="varName">variable name for object to access</param>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.evaluateNullOrUndefined(metadatalibrary.MetaExpression[])">
            <summary>
            Check if any operands is null  or undefined. If a null is found, undefined is not checked.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:metadatalibrary.MetaExpression.optimize(System.Data.DataTable,System.String)">
            <summary>
            Optimize access to DataTable when implied objects are DataRows
            </summary>
            <param name="t"></param>
            <param name="alias"></param>
        </member>
        <member name="M:metadatalibrary.MetaExpression.Compile``1">
            <summary>
            Compile this expression
            </summary>
            <typeparam name="T">object in input to the apply function</typeparam>
        </member>
        <member name="M:metadatalibrary.MetaExpression.with(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Associates this Expression to a join context
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.with(System.String,System.String)">
            <summary>
            Merge a table alias association to current join context
            </summary>
            <param name="table">Name in the database or in data structure</param>
            <param name="_as">Name used in the expression as a reference</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.getBooleanResult(System.Object,System.Object)">
            <summary>
            Evaluates a MetaExpression on a object and returns a boolean value. Any non boolean result is considered as false
            </summary>
            <param name="o"></param>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.op_BitwiseAnd(metadatalibrary.MetaExpression,metadatalibrary.MetaExpression)">
            <summary>
            Combines two MetaExpression with a logical AND
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.op_BitwiseOr(metadatalibrary.MetaExpression,metadatalibrary.MetaExpression)">
            <summary>
            Combines two MetaExpression with a logical OR
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.op_GreaterThan(metadatalibrary.MetaExpression,metadatalibrary.MetaExpression)">
            <summary>
            Combines two MetaExpression with a logical OR
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.op_LessThan(metadatalibrary.MetaExpression,metadatalibrary.MetaExpression)">
            <summary>
            Combines two MetaExpression with a logical OR
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.op_LogicalNot(metadatalibrary.MetaExpression)">
            <summary>
            Return the boolean complement of a MetaExpression
            </summary>
            <param name="m1"></param>
        </member>
        <member name="M:metadatalibrary.MetaExpression.op_Implicit(metadatalibrary.MetaExpression)~System.Predicate{System.Object}">
            <summary>
            Gives the Predicate implicitely associated to a MetaExpression
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:metadatalibrary.MetaExpression.calc(System.Object,System.Object,System.Object)">
            <summary>
            Evaluates an expression on an object in a given environment
            </summary>
            <param name="expr"></param>
            <param name="o"></param>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.fromString(System.String)">
            <summary>
            Creates a MetaExpression from a string
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.fromObject(System.Object,System.Boolean)">
            <summary>
            Gets a MetaExpression from an object  in a parameter list (which can be a generic object or a MetaExpression)
            </summary>
            <param name="par"></param>
            <param name="autofield">when true, string are considered field names</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.getParams(System.Object[],System.Boolean)">
            <summary>
            Get an array of MetaExpression  from parameter list
            </summary>
            <param name="par"></param>
            <param name="autofield">if true, first element of the list is autofielded</param>
            <returns></returns>
        </member>
        <member name="F:metadatalibrary.MetaExpression.Parameters">
            <summary>
            Parameters given with the constructor
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaExpression.Info">
            <summary>
            Information about the MetaExpression
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaExpression.FieldName">
            <summary>
            Field Name from which this expression was eventually taken
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaExpression.TableName">
            <summary>
            Table to which this expression belongs if it is part of a Join
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaExpression.Alias">
            <summary>
            Field Name to which this expression means to be assigned if queryed  
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaExpression._as(System.String)">
            <summary>
            Sets the Alias for this Expression
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.cascadeSetTable(System.String,System.String)">
            <summary>
            Changes or set the tablename for creating the query
            </summary>
            <param name="newTable"></param>
            <param name="oldTable"></param>
        </member>
        <member name="M:metadatalibrary.MetaExpression.mcmpGen(System.String[])">
            <summary>
            Get an expression that will compare all specified fields of  rFrom with those of destination
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.parent(System.Data.DataRelation)">
            <summary>
            Get Expression that searches the parents of a DataRow through a relation
            </summary>
            <param name="rel"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.child(System.Data.DataRelation)">
            <summary>
            Get Expression that searches the childrens of a DataRow through a relation
            </summary>
            <param name="rel"></param>
            <returns></returns>
        </member>
        <member name="F:metadatalibrary.MetaExpression.Name">
            <summary>
            Simbolic name of the MetaExpression
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaExpression.NullMetaExpression">
            <summary>
            Constant representing a null Expression
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaExpression.UndefinedMetaExpression">
            <summary>
            Constant representing an undefined expression
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaExpression.isNull">
            <summary>
            Return true if the expression is the constant Null 
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.isUndefined">
            <summary>
            Returns true if the expression is undefined
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.isNullOrUndefined">
            <summary>
            Returns true if the expression is null or undefined
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.isTrue">
            <summary>
            Returns true if the expression is the constant true
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.isFalse">
            <summary>
            Returns true if the expression is the constant false
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.isConstant">
            <summary>
            Returns true if the expression is a constant
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.tryEval(metadatalibrary.MetaExpression)">
            <summary>
            Tries to evaluate the expression with an undefined object as parameter
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.apply(System.Object,System.Object)">
            <summary>
            Evaluates the expression on an object in a given context
            </summary>
            <param name="o"></param>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.toSql(metadatalibrary.QueryHelper,System.Object)">
            <summary>
            Get the sql representation for the expression
            </summary>
            <param name="q"></param>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.toString">
            <summary>
            Friendly string representation of the expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.getField(System.String,System.String,System.Object)">
            <summary>
            Get a field from  a composite object. It is equivalent to getField(getField(tableName,o),fieldName)
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.setField(System.Object,System.String,System.Object)">
            <summary>
            Gets a field of an object. It is similar to o[fieldName] where o  is almost anything
            </summary>
            <param name="o"></param>
            <param name="fieldName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.getField(System.String,System.Object)">
            <summary>
            Gets a field of an object. It is similar to o[fieldName] where o  is almost anything
            </summary>
            <param name="fieldName"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.sys(System.String)">
            <summary>
            Value of sys environment variable
            </summary>
            <param name="envVariableName"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.usr(System.String)">
            <summary>
            Value of User environment variable
            </summary>
            <param name="envVariableName"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.context(System.String)">
            <summary>
            Generic environment variable name
            </summary>
            <param name="envVariableName"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.constant(System.Object)">
            <summary>
            Constant MetaExpression
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.field(System.String,System.String)">
            <summary>
            Expression representing the Value of a field of an object
            </summary>
            <param name="fieldName"></param>
            <param name="tableName">optional indication of the source table name</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.add(System.Object[])">
            <summary>
            Addition of two or more metaexpressions
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.modulus(System.Object,System.Object)">
            <summary>
            Subtraction of two metaexpressions
            </summary>
            <param name="par1"></param>
            <param name="par2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.sub(System.Object,System.Object)">
            <summary>
            Subtraction of two metaexpressions
            </summary>
            <param name="par1"></param>
            <param name="par2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.div(System.Object,System.Object)">
            <summary>
            Division operation between two metaexpressions
            </summary>
            <param name="par1"></param>
            <param name="par2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.mul(System.Object[])">
            <summary>
            Multiplication of two or more metaexpressions
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.sum``1(System.Object)">
            <summary>
            Sum of an expression. It is a grouping function.
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.or(System.Object[])">
            <summary>
            Logical OR between N metaexpressions
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.and(System.Object[])">
            <summary>
            Logical AND between N metaexpressions
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.bitAnd(System.Object[])">
            <summary>
            Bitwise AND between N metaexpressions
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.bitOr(System.Object[])">
            <summary>
            Bitwise OR between N metaexpressions
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.bitXor(System.Object[])">
            <summary>
            Bitwise XOR between N metaexpressions
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.bitNot(System.Object)">
            <summary>
            Bitwise XOR between N metaexpressions
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.not(System.Object)">
            <summary>
            Logical negation of a metaexpression
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.minus(System.Object)">
            <summary>
            Return the argument with inverted sign
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.year(System.Object)">
            <summary>
            Return the argument with inverted sign
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.eq(System.Object,System.Object)">
            <summary>
            Returns the expression (par1 equal par2)
            </summary>
            <param name="par1"></param>
            <param name="par2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.eqf(System.Object,System.String)">
            <summary>
            Returns the expression (par1 equal field(par2))
            </summary>
            <param name="par1"></param>
            <param name="par2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.eeq(System.String)">
            <summary>
            Returns the expression (fieldName equal field(fieldName))
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.eqObj(System.String,System.Object)">
            <summary>
            Returns the expression (fieldName equal sample[fieldName])
            </summary>
            <param name="fieldName"></param>
            <param name="sample"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.neObj(System.String,System.Object)">
            <summary>
            Returns the expression (fieldName not equal sample[fieldName])
            </summary>
            <param name="fieldName"></param>
            <param name="sample"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.ne(System.Object,System.Object)">
            <summary>
            Returns the expression (par1 not equal par2)
            </summary>
            <param name="par1"></param>
            <param name="par2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.le(System.Object,System.Object)">
            <summary>
            Returns the expression (par1 less than or equal par2)
            </summary>
            <param name="par1"></param>
            <param name="par2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.ge(System.Object,System.Object)">
            <summary>
            Returns the expression (par1 greater than or equal par2)
            </summary>
            <param name="par1"></param>
            <param name="par2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.lt(System.Object,System.Object)">
            <summary>
            Returns the expression (par1 less than par2)
            </summary>
            <param name="par1"></param>
            <param name="par2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.gt(System.Object,System.Object)">
            <summary>
            Returns the expression (par1 greater than par2)
            </summary>
            <param name="par1"></param>
            <param name="par2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.nullOrEq(System.Object,System.Object)">
            <summary>
            Return the expression (par1 is null or par1=par2)
            </summary>
            <param name="par1"></param>
            <param name="par2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.nullOrNe(System.Object,System.Object)">
            <summary>
            Returns the expression (par1 null or not equal par2)
            </summary>
            <param name="par1"></param>
            <param name="par2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.nullOrLe(System.Object,System.Object)">
            <summary>
            Returns the expression (par1 null or less equal than par2)
            </summary>
            <param name="par1"></param>
            <param name="par2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.nullOrGe(System.Object,System.Object)">
            <summary>
            Returns the expression (par1 null or greater or equal par2)
            </summary>
            <param name="par1"></param>
            <param name="par2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.nullOrLt(System.Object,System.Object)">
            <summary>
            Returns the expression (par1 null or less than par2)
            </summary>
            <param name="par1"></param>
            <param name="par2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.nullOrGt(System.Object,System.Object)">
            <summary>
            Returns the expression (par1 null or greater than par2)
            </summary>
            <param name="par1"></param>
            <param name="par2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.bitSet(System.Object,System.Int32)">
            <summary>
            Check if the nbit (th) of par1 is set  
            </summary>
            <param name="par1"></param>
            <param name="nbit"></param>
            <returns>(par1 &amp; 2^nbit) &lt;&gt;0 </returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.bitClear(System.Object,System.Int32)">
            <summary>
            Check if the nbit (th) of par1 is NOT set 
            </summary>
            <param name="par1"></param>
            <param name="nbit"></param>
            <returns>(par1 &amp; 2^nbit)=0 </returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.mCmp(System.Object,System.String[])">
            <summary>
            mCmp(obj,fields) is a shortcut for (r[field1]=sample[field1) and (r[field2]=sample[field2]) and...
            /// </summary>
        </member>
        <member name="M:metadatalibrary.MetaExpression.mCmp(System.Object,System.Data.DataColumn[])">
            <summary>
            mCmp(obj,fields) is a shortcut for (r[field1]=sample[field1) and (r[field2]=sample[field2]) and...
            /// </summary>
        </member>
        <member name="M:metadatalibrary.MetaExpression.keyCmp(System.Data.DataRow)">
            <summary>
            keyCmp(obj,fields) is a shortcut for (r[field1]=sample[field1) and (r[field2]=sample[field2]) and... for 
              each primary key column
            /// </summary>
        </member>
        <member name="M:metadatalibrary.MetaExpression.cmpAs(System.Object,System.String,System.String)">
            <summary>
            Shortcut for (r[destColumn]= sample[sourceColumn]
            </summary>
            <param name="sample"></param>
            <param name="sourceColumn"></param>
            <param name="destColumn"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.undefinedExpression">
            <summary>
            Returns a constant undefined MetaExpression
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.nullExpression">
            <summary>
            Returns a constant null MetaExpression
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.isNull(System.Object)">
            <summary>
            Returns the expression (par is null)
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.isNotNull(System.Object)">
            <summary>
             Returns the expression (par is not null)
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.isNullFn(System.Object,System.Object)">
            <summary>
            Returns par if par is not null, otherwise def. It's the sql isnull function.
            </summary>
            <param name="par"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.cmpMask(System.String,System.UInt64,System.UInt64)">
            <summary>
            Shortcut for (r[field] &amp; mask)=val
            </summary>
            <param name="field"></param>
            <param name="mask"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.fieldIn(System.String,System.Object[])">
            <summary>
            Shortcut for (field in (o1, o2,...))
            </summary>
            <param name="field"></param>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:metadatalibrary.MetaExpression.fieldIn(System.String,metadatalibrary.MetaExpressionList)" -->
        <member name="M:metadatalibrary.MetaExpression.fieldIn(System.Object,System.Object[],System.String)">
            <summary>
            Shortcut for (field in (o1[sourcefield], o2[sourcefield],...))
            </summary>
            <param name="field"></param>
            <param name="arr"></param>
            <param name="sourceField"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.fieldNotIn(System.String,System.Object[])">
            <summary>
            Shortcut for NOT(field in (o1, o2,...))
            </summary>
            <param name="field"></param>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:metadatalibrary.MetaExpression.fieldNotIn(System.String,metadatalibrary.MetaExpressionList)" -->
        <member name="M:metadatalibrary.MetaExpression.fieldNotIn(System.Object,System.Object[],System.String)">
            <summary>
            Shortcut for NOT(field in (o1[sourcefield], o2[sourcefield],...))
            </summary>
            <param name="field"></param>
            <param name="arr"></param>
            <param name="sourceField"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.doPar(metadatalibrary.MetaExpression)">
            <summary>
            Return the expression in parenthesis
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.between(System.String,System.Object,System.Object)">
            <summary>
            Returns the expression (field between min and max)
            </summary>
            <param name="field"></param>
            <param name="min">Lower limit, ignored if  null</param>
            <param name="max">Upper limit, ignored if null</param>
            <returns>(min is null or min less equal field) and (max is null or max greater equal field) </returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.like(System.Object,System.Object)">
            <summary>
            Returns the expression (o1 like o2)
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.anyIsUndefined(metadatalibrary.MetaExpression[])">
            <summary>
            Check if any of the given MetaExpressions is undefined
            </summary>
            <param name="fn"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.anyIsNull(metadatalibrary.MetaExpression[])">
            <summary>
            Check if any of the given MetaExpressions is null
            </summary>
            <param name="fn"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpression.anyIsNullOrUndefined(metadatalibrary.MetaExpression[])">
            <summary>
            Check if any of the given MetaExpressions is null or undefined
            </summary>
            <param name="fn"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpressionSum`1.apply(System.Object,System.Object)">
            <summary>
            O should be an array of objects
            </summary>
            <param name="o"></param>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaExpressionCount.apply(System.Object,System.Object)">
            <summary>
            O should be an array of objects
            </summary>
            <param name="o"></param>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.MetaExpressionMCmp">
            <summary>
            mcmp(obj,fields) is a shortcut for (r[field1]=sample[field1) and (r[field2]=sample[field2]) and...
            /// </summary>
        </member>
        <member name="T:metadatalibrary.BuildingExpression">
            <summary>
            Helper class to build MetaExpressions
            </summary>
        </member>
        <member name="M:metadatalibrary.BuildingExpression.build">
            <summary>
            Converts this to a MetaExpression
            </summary>
            <returns></returns>
        </member>
        <member name="F:metadatalibrary.BuildingExpression.operands">
            <summary>
            List of expression to which the operator has to be applied
            </summary>
        </member>
        <member name="M:metadatalibrary.BuildingExpression.#ctor(metadatalibrary.BuildingExpression)">
            <summary>
            Creates an empty expression
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:metadatalibrary.BuildingExpression.evaluationOrder">
            <summary>
            Gets the evaluation order, lower values means it has to be executed first
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.BuildingExpression.createChildExpression">
            <summary>
            creates a new expression as a child of this one, so that the new expression is an operand of the current one.
            Useful if operator is we have  a+b+c+d   and then comes *, or we have a &lt; b   and then comes +
             i.e. if evaluation order of new operator is less than the current one
            The new expression has last operand as first operand, so the result is (a+b+c+(d*... 
            Returns the new created child expression, in this example d*
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.BuildingExpression.createParentExpression">
            <summary>
            Creates a new expression as a parent of this one. The new expression takes the place of the old expression in the parent expression
            Returns the new created parent expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.BuildingExpression.nextParentList">
            <summary>
            Gets the root expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.BuildingExpression.outerExpression">
            <summary>
            Gets the root expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.BuildingExpression.findSuitableParentForOperator(System.Int32)">
            <summary>
            Searches the first parent having an evaluationOrder lower than the given operator
            </summary>
            <param name="opEvaluationOrder"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.BuildingExpression.addOperator(metadatalibrary.OperatorDescriptor)">
            <summary>
            Adds an operator to current expression, setting it to opToAdd
            </summary>
            <param name="opToAdd"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.BuildingExpression.addToken(metadatalibrary.Token)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.BuildingExpression.addOperand(metadatalibrary.BuildingExpression)">
            <summary>
            Adds an operand to current expression
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:metadatalibrary.BuildingExpression.isComplete">
            <summary>
            Check if this expression can be evaluated
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.BuildingExpression.canMergeOperator(metadatalibrary.OperatorDescriptor)">
            <summary>
            Stabilisce se si può accodare un operando o operatore all'espressione corrente (senza crearne una nuova)
            </summary>
            <param name="_operator"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.BuildingExpression.canAppendOperator(metadatalibrary.OperatorDescriptor)">
            <summary>
            Stabilisce se si può creare una nuova espressione aggiungendo un operatore alla precedente
            </summary>
            <param name="_operator"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.BuildingExpression.canAddOperand">
            <summary>
            Verifica se si può aggiungere un operando
            </summary>
            <returns></returns>
        </member>
        <member name="F:metadatalibrary.Token.AlfaOperators">
            <summary>
            lower evaluationOrder indicates that operation must be executed BEFORE
            </summary>
        </member>
        <member name="M:metadatalibrary.Token.normalize(System.String)">
            <summary>
            Rimuove tutti i spazi consecutivi tranne che nelle stringhe
            </summary>
            <param name="sqlcmd"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.Token.skipSpaces(System.String,System.Int32@)">
            <summary>
            Salta tutti gli spazi a partire dalla posizione corrente
            </summary>
            <param name="s"></param>
            <param name="currPos"></param>
        </member>
        <member name="M:metadatalibrary.Token.getDescriptor">
            <summary>
            Restituisce le proprietà dell'operatore corrente
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.Token.getAlfaToken(System.String,System.Int32@)">
            <summary>
            Gets an alfa operator or a field name. Note that an alfa operator may contain spaces, while an identifier does not.
            </summary>
            <param name="s"></param>
            <param name="currPos"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.MetaExpressionParser">
            <summary>
            Helper class to get a MetaExpression from a string
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaExpressionParser.From(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.MetaFactory">
            <summary>
            Factory used to create objects everywhere
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaFactory.factory">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaFactory.create``1">
            <summary>
            Creates an instance of a type using registered constructors
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaFactory.getSingleton``1">
            <summary>
            Creates an instance of a type using registered constructors
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaFactory.createInstance``1">
            <summary>
            
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:metadatalibrary.MetaFactory.registerType(System.Type,System.Type)">
            <summary>
            Register the concrete type associated with an abstract type
            </summary>
            <param name="concreteType"></param>
            <param name="abstractType"></param>
        </member>
        <member name="T:metadatalibrary.HelperMetaFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:metadatalibrary.HelperMetaFactory.createInstance``1(System.Windows.Forms.Form)">
            <summary>
            Creates an instance of T and attaches it to a Form
            </summary>
            <param name="f"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelperMetaFactory.getInstance``1(System.Windows.Forms.Form)">
            <summary>
            Get Interface of a given type in Form dictionary . Throw exception if not found.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelperMetaFactory.safeGetInstance``1(System.Windows.Forms.Form)">
            <summary>
            Get Interface of a given type in Form dictionary. Returns null if instance is not found.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.HelperMetaFactory.attachInstance(System.Windows.Forms.Form,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="instance"></param>
            <param name="abstractType"></param>
        </member>
        <member name="M:metadatalibrary.IMetaModel.setSkipSecurity(System.Data.DataTable,System.Boolean)">
            <summary>
            Mark a table for skipping security controls
            </summary>
            <param name="T"></param>
            <param name="value"></param>
        </member>
        <member name="M:metadatalibrary.IMetaModel.isSkipSecurity(System.Data.DataTable)">
            <summary>
            Check if a table ha been marked as SkipSecurity
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaModel.UnlinkDataRow(System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Unlink R from parent-child relation with primary table. I.E., R becomes a not-child of main row. 
            If R becomes unchanged, it is removed from DataSet
            </summary>
            <param name="primaryTable"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaModel.getNotEntityChildFilter(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaModel.setNotEntityChildFilter(System.Data.DataTable,System.String)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="filter"></param>
        </member>
        <member name="M:metadatalibrary.IMetaModel.MarkTableAsNotEntityChild(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="primary"></param>
            <param name="child"></param>
        </member>
        <member name="M:metadatalibrary.IMetaModel.MarkTableAsNotEntityChild(System.Data.DataTable,System.Data.DataTable,System.String)">
            <summary>
            
            </summary>
            <param name="primaryTable"></param>
            <param name="child"></param>
            <param name="relName"></param>
        </member>
        <member name="M:metadatalibrary.IMetaModel.addNotEntityChild(System.Data.DataTable,System.String)">
            <summary>
            Set the table as NotEntitychild. So the table isn't cleared during freshform and refills
            </summary>
            <param name="T"></param>
            <param name="ParentRelName"></param>
        </member>
        <member name="M:metadatalibrary.IMetaModel.addNotEntityChildFilter(System.Data.DataTable,System.String)">
            <summary>
            
            </summary>
            <param name="child"></param>
            <param name="RelName"></param>
        </member>
        <member name="M:metadatalibrary.IMetaModel.addNotEntityChild(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="primaryTable"></param>
            <param name="child"></param>
        </member>
        <member name="M:metadatalibrary.IMetaModel.addNotEntityChildFilter(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="primaryTable"></param>
            <param name="child"></param>
        </member>
        <member name="M:metadatalibrary.IMetaModel.setExtraParams(System.Data.DataTable,System.Object)">
            <summary>
             Set the extra parameter for a table
            </summary>
            <param name="t"></param>
            <param name="o"></param>
        </member>
        <member name="M:metadatalibrary.IMetaModel.getExtraParams(System.Data.DataTable)">
            <summary>
            Get the extra parameter from a table
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaModel.UnMarkTableAsNotEntityChild(System.Data.DataTable)">
            <summary>
            Remove a table from being a  NotEntitychild
            </summary>
            <param name="T"></param>        
        </member>
        <member name="M:metadatalibrary.IMetaModel.AllowAllClear(System.Data.DataSet)">
            <summary>
            
            </summary>
            <param name="ds"></param>
        </member>
        <member name="M:metadatalibrary.IMetaModel.hasChanges(System.Data.DataSet,System.Data.DataTable,System.Data.DataRow,System.Boolean)">
            <summary>
            Check if an entity has changes
            </summary>
            <param name="ds"></param>
            <param name="primary"></param>
            <param name="sourceRow"></param>
            <param name="isSubentity"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaModel.XVerifyRowChange(System.Data.DataSet,System.Data.DataTable,System.Data.DataSet,System.Data.DataRow)">
            <summary>
            
            </summary>
            <param name="Dest"></param>
            <param name="TDest"></param>
            <param name="Source"></param>
            <param name="RSource"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaModel.XVerifyChangeChilds(System.Data.DataSet,System.Data.DataTable,System.Data.DataSet,System.Data.DataRow)">
            <summary>
            
            </summary>
            <param name="dest"></param>
            <param name="TDest"></param>
            <param name="rif"></param>
            <param name="rSource"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.IMetaModel.isNotEntityChild(System.Data.DataTable)">
            <summary>
            Check if a table is not an entity child
            </summary>
            <param name="childTable"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaModel.canRead(System.Data.DataTable)">
            <summary>
            Tells if a table should be cleared and read again during a refresh.
            Cached tables are not read again during refresh if they have been already been read
            </summary>
            <param name="T"></param>
            <returns>true if table should be read</returns>
        </member>
        <member name="M:metadatalibrary.MetaModel.setSkipSecurity(System.Data.DataTable,System.Boolean)">
            <summary>
            Mark a table for skipping security controls
            </summary>
            <param name="T"></param>
            <param name="value"></param>
        </member>
        <member name="M:metadatalibrary.MetaModel.isSkipSecurity(System.Data.DataTable)">
            <summary>
            Check if a table ha been marked as SkipSecurity
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaModel.markToAddBlankRow(System.Data.DataTable)">
            <summary>
            Must be called for combobox-related tables
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.MetaModel.markedToAddBlankRow(System.Data.DataTable)">
            <summary>
            Check if a table was marjed to add a blank row 
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaModel.setStaticFilter(System.Data.DataTable,System.Object)">
            <summary>
            Apply a filter on a table during any further read
            </summary>
            <param name="T"></param>
            <param name="filter"></param>
        </member>
        <member name="M:metadatalibrary.MetaModel.cacheTable(System.Data.DataTable,System.Object,System.String,System.Boolean)">
            <summary>
            Set Table T to be read once for all when ReadCached will be called next time
            </summary>
            <param name="T"></param>
            <param name="filter"></param>
            <param name="sort"></param>
            <param name="addBlankRow">when true, a blank row is added as first row of T</param>
        </member>
        <member name="M:metadatalibrary.MetaModel.denyClear(System.Data.DataTable)">
            <summary>
            Deny table clear when DO_GET() is called. If this is not called, a
              table that is not cached, entity or subentity will be cleared during DO_GET
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.MetaModel.allowClear(System.Data.DataTable)">
            <summary>
            Re-Allow table clear when DO_GET() is called. Undoes the effect of a DenyClear
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.MetaModel.canClear(System.Data.DataTable)">
            <summary>
            Tells if Table will be cleared during next DO_GET()
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaModel.cacheTable(System.Data.DataTable)">
            <summary>
            Tells GetData to read T once for all
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.MetaModel.lockRead(System.Data.DataTable)">
            <summary>
            Table T will never be read. It is marked like a cached table that has already been read.
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.MetaModel.tableHasBeenRead(System.Data.DataTable)">
            <summary>
            Set a table as "read". Has no effect if table isn't a chaed table
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.MetaModel.isCached(System.Data.DataTable)">
            <summary>
            Returns true if table is cached (the table may or may not 
             have been read) 
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaModel.setExtraParams(System.Data.DataTable,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:metadatalibrary.MetaModel.getExtraParams(System.Data.DataTable)">
            <inheritdoc />
        </member>
        <member name="M:metadatalibrary.MetaModel.hasChanges(System.Data.DataSet,System.Data.DataTable,System.Data.DataRow,System.Boolean)">
            <summary>
            Returns true if there are unsaved changes
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaModel.XVerifyChangeChilds(System.Data.DataSet,System.Data.DataTable,System.Data.DataSet,System.Data.DataRow)">
            <summary>
            
            </summary>
            <param name="Dest"></param>
            <param name="TDest"></param>
            <param name="Rif"></param>
            <param name="RSource"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaModel.XVerifyRowChange(System.Data.DataSet,System.Data.DataTable,System.Data.DataSet,System.Data.DataRow)">
            <summary>
            Restituisce true se ci sono differenze nella riga considerata
            </summary>
            <param name="Dest"></param>
            <param name="TDest"></param>
            <param name="Source"></param>
            <param name="RSource"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaModel.UnlinkDataRow(System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Unlink R from parent-child relation with primary table. I.E., R becomes a not-child of main row. 
            If R becomes unchanged, it is removed from DataSet
            </summary>
            <param name="primaryTable"></param>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaModel.addNotEntityChild(System.Data.DataTable,System.String)">
            <summary>
            Set the table as NotEntitychild. So the table isn't cleared during freshform and refills
            </summary>
            <param name="T"></param>
            <param name="parentRelName"></param>
        </member>
        <member name="M:metadatalibrary.MetaModel.addNotEntityChild(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Set the table as NotEntitychild. So the table isn't cleared during freshform and refills
            </summary>
            <param name="T"></param>
            <param name="child"></param>
        </member>
        <member name="M:metadatalibrary.MetaModel.AllowAllClear(System.Data.DataSet)">
            <summary>
            Sets all "NotSubEntityChild" tables as "CanClear". Called when form is cleared or data
             is posted
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaModel.MarkTableAsNotEntityChild(System.Data.DataTable,System.Data.DataTable,System.String)">
            <summary>
            
            </summary>
            <param name="primaryTable"></param>
            <param name="child"></param>
            <param name="relName"></param>
        </member>
        <member name="M:metadatalibrary.MetaModel.MarkTableAsNotEntityChild(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="primaryTable"></param>
            <param name="child"></param>
        </member>
        <member name="M:metadatalibrary.MetaModel.UnMarkTableAsNotEntityChild(System.Data.DataTable)">
            <summary>
            Remove a table from being a  NotEntitychild
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.MetaModel.ClearNotEntityChild(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="childTable"></param>
        </member>
        <member name="M:metadatalibrary.MetaModel.isNotEntityChild(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="childTable"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaModel.getNotEntityChildFilter(System.Data.DataTable)">
            <summary>
            Get the filter for a NotEntityChild filter
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaModel.setNotEntityChildFilter(System.Data.DataTable,System.String)">
            <summary>
            Set the filter for a NotEntityChild filter
            </summary>
            <param name="t"></param>
            <param name="filter"></param>
        </member>
        <member name="M:metadatalibrary.MetaModel.addNotEntityChildFilter(System.Data.DataTable,System.String)">
            <summary>
            
            </summary>
            <param name="child"></param>
            <param name="relName"></param>
        </member>
        <member name="M:metadatalibrary.MetaModel.addNotEntityChildFilter(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="primaryTable"></param>
            <param name="child"></param>
        </member>
        <member name="T:metadatalibrary.crono">
            <summary>
            Timer for making measurations
            </summary>
        </member>
        <member name="F:metadatalibrary.crono.name">
            <summary>
            Timer name
            </summary>
        </member>
        <member name="M:metadatalibrary.crono.#ctor(metadatalibrary.crono,System.String,System.Int32)">
            <summary>
            Creates a timer  with a specified level
            </summary>
            <param name="parent"></param>
            <param name="name"></param>
            <param name="level"></param>
        </member>
        <member name="M:metadatalibrary.crono.#ctor(System.String)">
            <summary>
            Creates a timer
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:metadatalibrary.crono.GetDuration">
            <summary>
            Stops a timer and gives duration
            </summary>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.metaprofiler">
            <summary>
            Summary description for metaprofiler.
            </summary>
        </member>
        <member name="F:metadatalibrary.metaprofiler.level">
            <summary>
            Current nesting level of profiling timer
            </summary>
        </member>
        <member name="F:metadatalibrary.metaprofiler.Enabled">
            <summary>
            Enable all timing operations
            </summary>
        </member>
        <member name="F:metadatalibrary.metaprofiler.timers">
            <summary>
            Stack of timers
            </summary>
        </member>
        <member name="F:metadatalibrary.metaprofiler.totals">
            <summary>
            Total time grouped by operation name
            </summary>
        </member>
        <member name="M:metadatalibrary.metaprofiler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:metadatalibrary.metaprofiler.StartTimer(System.String)">
            <summary>
            Starts a timer with a given name
            </summary>
            <param name="name"></param>
            <returns>handler for the timer</returns>
        </member>
        <member name="M:metadatalibrary.metaprofiler.StopTimer(System.Int32)">
            <summary>
            Stop a specified timer
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:metadatalibrary.metaprofiler.Reset">
            <summary>
            Reset all timers
            </summary>
        </member>
        <member name="M:metadatalibrary.metaprofiler.ShowAll">
            <summary>
            Returns a summary of all timers
            </summary>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.DynamicEntity">
            <summary>
            Dynamic class available for field addition
            </summary>
        </member>
        <member name="M:metadatalibrary.DynamicEntity.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a dynamic entity prefilled with a set of values
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:metadatalibrary.DynamicEntity.#ctor(System.Object,System.String[])">
            <summary>
            Creates a dynamic entity prefilled with a set of values from a sample
            </summary>
            <param name="sample"></param>
            <param name="fields"></param>
        </member>
        <member name="M:metadatalibrary.DynamicEntity.CompareTo(System.Object)">
            <summary>
            Necessary to implement  IComparable interface
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DynamicEntity.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Necessary to implement DynamicObject interface
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DynamicEntity.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Necessary to implement DynamicObject interface
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.RowObject">
            <summary>
            Dynamic class available for field addition
            </summary>
        </member>
        <member name="F:metadatalibrary.RowObject.ordinal">
            <summary>
            Lookup from field name to field position in the values array
            </summary>
        </member>
        <member name="F:metadatalibrary.RowObject.values">
            <summary>
            Field values
            </summary>
        </member>
        <member name="P:metadatalibrary.RowObject.Item(System.String)">
            <summary>
            Get/Set field with a specified name
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.RowObject.#ctor(System.Collections.Generic.IDictionary{System.String,System.Int32},System.Object[])">
            <summary>
            Creates a dynamic entity prefilled with a set of values
            </summary>
            <param name="lookup">lookup between field names and array position</param>
            <param name="values"></param>
        </member>
        <member name="M:metadatalibrary.RowObject.#ctor(System.Object,System.String[])">
            <summary>
            Creates a dynamic entity prefilled with a set of values from a sample
            </summary>
            <param name="sample"></param>
            <param name="fields"></param>
        </member>
        <member name="M:metadatalibrary.RowObject.CompareTo(System.Object)">
            <summary>
            Necessary to implement  IComparable interface
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.RowObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Necessary to implement DynamicObject interface
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.RowObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Necessary to implement DynamicObject interface
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.CompareHelper">
            <summary>
            Helper function to compare nullable Icomparable objects
            </summary>
        </member>
        <member name="M:metadatalibrary.CompareHelper.cmpObjEq``1(System.Object,System.Object)">
            <summary>
            Compare for equality
            </summary>
            <typeparam name="t"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CompareHelper.cmpObjNe``1(System.Object,System.Object)">
            <summary>
            Compare for not equality
            </summary>
            <typeparam name="t"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CompareHelper.cmpObjGt``1(System.Object,System.Object)">
            <summary>
            Compare for greater than
            </summary>
            <typeparam name="t"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CompareHelper.cmpObjLt``1(System.Object,System.Object)">
            <summary>
            Compare for less than
            </summary>
            <typeparam name="t"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CompareHelper.cmpObjGe``1(System.Object,System.Object)">
            <summary>
            Compare for great o  equal
            </summary>
            <typeparam name="t"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CompareHelper.cmpObjLe``1(System.Object,System.Object)">
            <summary>
            Compare for less or equal
            </summary>
            <typeparam name="t"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.DataSetHelper">
            <summary>
            Helper class to add extensions to dataset
            </summary>
        </member>
        <member name="T:metadatalibrary.DataSetHelper.ConstructorDelegate">
            <summary>
            delegate to create constructors invokations dynamically
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.getObj(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a dynamic entity from a dictionary
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.getObj(System.Collections.Generic.Dictionary{System.String,System.Object}[])">
            <summary>
            Creates an array of dynamic entities from an array of dictionaries
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._Filter(System.Data.DataTable,metadatalibrary.MetaExpression,System.Object,System.String,System.Boolean)">
            <summary>
            Search all rows that satisfies a criteria
            </summary>
            <param name="T">Table to operate with</param>
            <param name="filter">criteria to be met</param>
            <param name="env">Environment (a DataAccess is a good parameter)</param>
            <param name="sort">sorting</param>
            <param name="all">if all=true also deleted rows are retrived</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._First(System.Data.DataTable,System.String,System.String,System.Data.DataViewRowState)">
            <summary>
            Gets the first row of a search, or null if no row is found
            </summary>
            <param name="T">Table to operate with</param>
            <param name="filter">condition for the search</param>
            <param name="sort">row sorting</param>
            <param name="rv">DataViewRowState to be met</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._getDetachedRowsFromDb(System.Data.DataTable,metadatalibrary.IDataAccess,System.String,System.Int32)">
            <summary>
            Get rows from DB without adding them to the table
            </summary>
            <param name="T">Table to operate with</param>
            <param name="conn"></param>
            <param name="filter">criteria to be met</param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._getDetachedRowsFromDb(System.Data.DataTable,metadatalibrary.IDataAccess,metadatalibrary.MetaExpression,System.Int32)">
            <summary>
             Get rows from DB without adding them to the table
            </summary>
            <param name="T">Table to operate with</param>
            <param name="conn"></param>
            <param name="filter"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._getFromDb(System.Data.DataTable,metadatalibrary.IDataAccess,metadatalibrary.MetaExpression,System.Int32)">
            <summary>
            Get rows from DB and add them to the table
            </summary>
            <param name="T">Table to operate with</param>
            <param name="conn"></param>
            <param name="filter"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._getFromDb(System.Data.DataTable,metadatalibrary.IDataAccess,System.String,System.Int32)">
            <summary>
             Get rows from DB and add them to the table
            </summary>
            <param name="T">Table to operate with</param>
            <param name="conn"></param>
            <param name="filter"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._get(System.Data.DataTable,metadatalibrary.IDataAccess,metadatalibrary.MetaExpression,System.Int32)">
            <summary>
            Get existing rows or read from DB when no rows is found
            </summary>
            <param name="T"></param>
            <param name="conn"></param>
            <param name="filter"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._mergeFromDb(System.Data.DataTable,metadatalibrary.IDataAccess,metadatalibrary.MetaExpression,System.Int32)">
            <summary>
            Reads rows from db and merges them into a table. Returns all read rows 
            </summary>
            <param name="T"></param>
            <param name="conn"></param>
            <param name="filter"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._safeMergeFromDb(System.Data.DataTable,metadatalibrary.IDataAccess,metadatalibrary.MetaExpression,System.Int32)">
            <summary>
            Reads rows from db and merges them into a table, skipping existent rows. Only new merged rows are returned.
            </summary>
            <param name="T"></param>
            <param name="conn"></param>
            <param name="filter"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._sqlSafeMergeFromDb(System.Data.DataTable,metadatalibrary.IDataAccess,System.String,System.Int32)">
            <summary>
             Reads rows from db and merges them into a table, skipping existent rows. Only new merged rows are returned.
            </summary>
            <param name="T"></param>
            <param name="conn"></param>
            <param name="sql"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.mergeRows(System.Data.DataTable,System.Data.DataRow[],System.Boolean)">
            <summary>
            Adds an array of DataRows to the table
            </summary>
            <param name="T">Table to operate with</param>
            <param name="rows"></param>
            <param name="withCheck">if true rows already present are removed </param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.NewRowAs(System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Creates a new Row copying all fields from sample (for each field in common)
            </summary>
            <param name="T">Table to operate with</param>
            <param name="sample"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._Sort(System.Data.DataTable,System.String,System.Data.DataViewRowState)">
            <summary>
            get a sorted array of rows 
            </summary>
            <param name="T">Table to operate with</param>
            <param name="sort">string sort order</param>
            <param name="rv">RowState to consider</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._First(System.Data.DataTable,metadatalibrary.MetaExpression,System.Object,System.String)">
            <summary>
             Gets the first row of a search, or null if no row is found
            </summary>
            <param name="T">Table to operate with</param>
            <param name="filter">condition for the search</param>
            <param name="env">environment (use a DataAccess for this)</param>
            <param name="sort">row sorting</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.CreateConstructor(System.Type,System.Type[])">
            <summary>
            Use  as  var myConstructor = CreateConstructor(typeof(MyClass), typeof(int), typeof(string));
            var myObject = myConstructor(10, "test message");
            </summary>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.defineRelation(System.Data.DataSet,System.String,System.String,System.String,System.String[])">
            <summary>
            Adds a relation to the DataSet
            </summary>
            <param name="D"></param>
            <param name="relationName"></param>
            <param name="parentTable"></param>
            <param name="childTable"></param>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.HasChanges(System.Data.DataTable)">
            <summary>
            Check if the table has changes
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.allCurrent``1(System.Data.TypedTableBase{``0})">
            <summary>
            Get all current rows of the table
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.RemoveFalseUpdates(System.Data.DataTable)">
            <summary>
            Removes false updates, i.e. not real updates or changes on temporary fields
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.setStaticFilter(System.Data.DataTable,System.String)">
            <summary>
            Apply a filter on a table during any further read
            </summary>
            <param name="T"></param>
            <param name="filter"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.SetDenyNull(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Sets the DenyNull property of a DataColumn
            </summary>
            <param name="T"></param>
            <param name="fieldName"></param>
            <param name="deny"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.SetDenyZero(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Sets a DataColumn to deny zero values
            </summary>
            <param name="T"></param>
            <param name="fieldName"></param>
            <param name="deny"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.setTableForReading(System.Data.DataTable,System.String)">
            <summary>
            Set the table from which T will be read. I.e. T is a virtual ALIAS for tablename.
            </summary>
            <param name="T">Table to set as Alias</param>
            <param name="tablename">Real table name</param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.tableForReading(System.Data.DataTable)">
            <summary>
            Get the table from which T will be read. I.e. T is a virtual ALIAS for tablename.
            </summary>
            <param name="T">Table to set as Alias</param>
            <param name="tablename">Real table name</param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.setTableForPosting(System.Data.DataTable,System.String)">
            <summary>
            Set the table to which T will be written. 
            </summary>
            <param name="T">Table to set as Alias</param>
            <param name="TableForPosting">Real table name</param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.tableForPosting(System.Data.DataTable)">
            <summary>
            Set the table from which T will be read. I.e. T is a virtual ALIAS for tablename.
            </summary>
            <param name="T">Table to set as Alias</param>
            <param name="tablename">Real table name</param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.setSkipInsertCopy(System.Data.DataTable,System.Boolean)">
            <summary>
            Establish an order in posting to database, this is generally unnecessary
            </summary>
            <param name="t"></param>
            <param name="skip"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.setSkipSecurity(System.Data.DataTable)">
            <summary>
            Mark this table to not be verified by Security conditions
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.CacheTable(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            Mark a table as cached
            </summary>
            <param name="T"></param>
            <param name="filter"></param>
            <param name="sort"></param>
            <param name="addBlankRow"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.setLockRead(System.Data.DataTable)">
            <summary>
            Set the table to never be read. It is marked like a cached table that has already been read.
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.setDenyClear(System.Data.DataTable)">
            <summary>
            Deny table clearing when a FrehForm is invoked (clear would happen inside DO_GET)
            </summary>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.setAllowClear(System.Data.DataTable)">
            <summary>
            Re-Allow table clear when FrehForm is called. Undoes the effect of a DenyClear
            </summary>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.setSorting(System.Data.DataTable,System.String)">
            <summary>
            Set sorting for a table
            </summary>
            <param name="T"></param>
            <param name="sort"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.getSorting(System.Data.DataTable)">
            <summary>
            Set sorting for a table
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.setNotEntityChildOf(System.Data.DataTable,System.Data.DataTable,System.String)">
            <summary>
            Sets this table as NotEntityChild fo mainTable. So this table will not be cleared during refills.
            </summary>
            <param name="child"></param>
            <param name="mainTable"></param>
            <param name="relationName"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.clearEntityChild(System.Data.DataTable)">
            <summary>
            Stop this table from being a NotEntityChild
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.setDefault(System.Data.DataTable,System.String,System.Object)">
            <summary>
            Sets the default value for a column (used when a NEW row is created for the table)
            </summary>
            <param name="T"></param>
            <param name="field">field name</param>
            <param name="o">default value wanted</param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.GetMax``1(System.Data.DataTable,System.String)">
            <summary>
            Get maximum value of a field in a table
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.GetMax``1(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String)">
            <summary>
            Get maximum value of a field in a Row collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rows"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.GetMaxPlusOne``1(System.Data.DataTable,System.String)">
            <summary>
            Get Max+1 of a field in a table, 1 if no row was present
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.GetMaxPlusOne``1(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String)">
            <summary>
            Get Max+1 of a field in an enumeration, 1 if no row was present
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rows"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.GetMin``1(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String)">
            <summary>
            Get minimum value of a field in a row collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rows"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.GetMin``1(System.Data.DataTable,System.String)">
            <summary>
            Get minimum value of a field in a table
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.GetSum``1(System.Data.DataTable,System.String)">
            <summary>
            Get Sum of a field in a table
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.GetSum``1(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String)">
            <summary>
            Get Sum of a field in a row collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rows"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.setSelector(System.Data.DataTable,System.String,System.UInt64)">
            <summary>
            Add a selector-column to the table. AutoIncrement columns are calculated between
             equal selectors-column rows
            </summary>
            <param name="T"></param>
            <param name="columnName"></param>
            <param name="mask"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.clearSelector(System.Data.DataTable,System.String)">
            <summary>
            Remove a main selector in a table
            </summary>
            <param name="T"></param>
            <param name="columnName"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.setMySelector(System.Data.DataTable,System.String,System.String,System.UInt64)">
            <summary>
            Set a selector for a column
            </summary>
            <param name="T"></param>
            <param name="sourceColumn">autoincrement column</param>
            <param name="columnName">selector column</param>
            <param name="mask"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.clearMySelector(System.Data.DataTable,System.String)">
            <summary>
            Remove a selector from a column 
            </summary>
            <param name="T"></param>
            <param name="columnName"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.setAutoincrement(System.Data.DataTable,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Mark a column as an autoincrement, specifying how the calculated ID must be
             composed.
            </summary>
            <param name="T">Table implied</param>
            <param name="field">Column to set</param>
            <param name="prefix">field of rows to be put in front of ID</param>
            <param name="middle">middle constant part of ID</param>
            <param name="length">length of the variable part of the ID</param>
            <param name="linear">if true, Selector Fields, Middle Const and Prefix </param>
            <remarks>
            The field will be calculated like:
            [Row[PrefixField]] [MiddleConst] [LeftPad(newID, IDLength)]
            so that, called the first part [Row[PrefixField]] [MiddleConst] as PREFIX,
            if does not exists another row with the same PREFIX for the ID, the newID=1
            else newID = max(ID of same PREFIX-ed rows) + 1
            </remarks>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.clearAutoIncrement(System.Data.DataTable,System.String)">
            <summary>
            Removes autoincrement property from a DataColumn
            </summary>
            <param name="T"></param>
            <param name="field"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.setCustomAutoincrement(System.Data.DataTable,System.String,metadatalibrary.RowChange.CustomCalcAutoId)">
            <summary>
            Set a custom autoincrement function
            </summary>
            <param name="T"></param>
            <param name="field"></param>
            <param name="customFunction"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.clearCustomAutoIncrement(System.Data.DataTable,System.String)">
            <summary>
            Removes Custom-autoincrement property from a DataColumn
            </summary>
            <param name="T"></param>
            <param name="field"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.setOptimized(System.Data.DataTable,System.Boolean)">
            <summary>
            Tells postData not to evaluate every autoincrement column with a read from db.
            </summary>
            <param name="T"></param>
            <param name="isOptimized"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.setMinimumTempValue(System.Data.DataTable,System.String,System.Int32)">
            <summary>
            Set a minimum for temporary values when an autoincrement field is evalued
            </summary>
            <param name="T"></param>
            <param name="field"></param>
            <param name="min"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.getMinimumTempValue(System.Data.DataTable,System.String)">
            <summary>
            Set a minimum for temporary values when an autoincrement field is evalued
            </summary>
            <param name="T"></param>
            <param name="field"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.setPostingOrder(System.Data.DataTable,System.String)">
            <summary>
            Sets the row sorting for posting to the db
            </summary>
            <param name="T"></param>
            <param name="order"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.setTemporaryTable(System.Data.DataTable,System.Boolean)">
            <summary>
            Tells MDE that a table is temporary and should 
             not be used for calling stored procedure, messages, logs, or updates.
            Temporary tables are never read or written to db by the library
            </summary>
            <param name="T">Table to mark</param>
            <param name="createblankrow">true if a row has to be added to table</param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.setRealTable(System.Data.DataTable)">
            <summary>
            Undo "setTemporaryTable"
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.calcTemporaryID(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Evaluates all temporary columns of the row
            </summary>
            <param name="r">Row to be evaluated</param>
            <param name="C">optional column to evaluate, otherwise all temporary column are evaluated</param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.f_EqObj``1(System.Data.TypedTableBase{``0},System.String,System.Object)">
            <summary>
             Query table for  this.field = sample[field]
            </summary>
            <typeparam name="R"></typeparam>
            <param name="tab"></param>
            <param name="field"></param>
            <param name="sample"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.f_EqObj(System.Data.DataTable,System.String,System.Object)">
            <summary>
            Query table for  this.field = sample[field]
            </summary>
            <param name="tab"></param>
            <param name="field"></param>
            <param name="sample"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.f_EqObj``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object)">
            <summary>
            Query a row collection for  this.field = sample[field]
            </summary>
            <typeparam name="R"></typeparam>
            <param name="rows"></param>
            <param name="field">Field to compare</param>
            <param name="sample">value to compare</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.parent``1(System.Data.DataRow,metadatalibrary.MetaTableBase{``0},System.String)">
            <summary>
            Get parent a row in a parent table. Equivalent to GetParentRow()
            </summary>
            <typeparam name="S"></typeparam>
            <param name="row"></param>
            <param name="table">parent table</param>
            <param name="relationName"></param>
            <returns></returns>
            <example>
            DataRow r;
            r.parent(DS.ParentTable)      gives all rows related to r in DS.ParentTable
            </example>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.childs``1(System.Data.DataRow,metadatalibrary.MetaTableBase{``0},System.String)">
            <summary>
            Get child rows in a given child table. Equivalent to GetChildRows()
            </summary>
            <typeparam name="S"></typeparam>
            <param name="row"></param>
            <param name="table"></param>
            <param name="relationName"></param>
            <returns></returns>
            <example>
            DataRow r;
            r.childs(DS.ChildTable)      gives all child rows of r in DS.ChildTable
            </example>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.related``1(System.Data.DataRow,metadatalibrary.MetaTableBase{``0},System.String)">
            <summary>
            Get rows related in a given table
            </summary>
            <typeparam name="S"></typeparam>
            <param name="row"></param>
            <param name="table"></param>
            <param name="relationName"></param>
            <returns></returns>
            <example>
            DataRow r;
            r.related(DS.ParentTable)      gives all rows related to r in DS.ParentTable
            </example>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.related``2(System.Collections.Generic.IEnumerable{``0},metadatalibrary.MetaTableBase{``1},System.String)">
            <summary>
            Get rows related in a given table 
            </summary>
            <typeparam name="R"></typeparam>
            <typeparam name="S"></typeparam>
            <param name="rows"></param>
            <param name="table"></param>
            <param name="relationName"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.f_Eq``1(System.Data.TypedTableBase{``0},System.String,System.Object)">
            <summary>
            Query table for field  =  object
            </summary>
            <typeparam name="R"></typeparam>
            <param name="tab"></param>
            <param name="field"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.f_Eq(System.Data.DataTable,System.String,System.Object)">
            <summary>
            Query table for field  =  object
            </summary>
            <param name="tab"></param>
            <param name="field"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.f_Eq``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object)">
            <summary>
            Query a row collection for field  =  object
            </summary>
            <typeparam name="R"></typeparam>
            <param name="rows"></param>
            <param name="field"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.f_Ne``1(System.Data.TypedTableBase{``0},System.String,System.Object)">
            <summary>
            Query table for this.field  !=  object
            </summary>
            <typeparam name="R"></typeparam>
            <param name="tab"></param>
            <param name="field"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.f_Ne(System.Data.DataTable,System.String,System.Object)">
            <summary>
            Query table for this.field  !=  object
            </summary>
            <param name="tab"></param>
            <param name="field"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.f_Ne``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object)">
            <summary>
            Query a row collection for field  !=  object
            </summary>
            <typeparam name="R"></typeparam>
            <param name="rows"></param>
            <param name="field"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.f_NeObj``1(System.Data.TypedTableBase{``0},System.String,System.Object)">
            <summary>
            Query table for field  !=  sample[field]
            </summary>
            <typeparam name="R"></typeparam>
            <param name="tab"></param>
            <param name="field"></param>
            <param name="sample"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.f_NeObj(System.Data.DataTable,System.String,System.Object)">
            <summary>
            Query table for field  !=  sample[field]
            </summary>
            <param name="tab"></param>
            <param name="field"></param>
            <param name="sample"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.f_NeObj``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object)">
            <summary>
            Query row collection for field  !=  sample[field]
            </summary>
            <typeparam name="R"></typeparam>
            <param name="rows"></param>
            <param name="field"></param>
            <param name="sample"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.f_isNull``1(System.Data.TypedTableBase{``0},System.String)">
            <summary>
            Query table for field  is null
            </summary>
            <typeparam name="R"></typeparam>
            <param name="Tab"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.f_isNull(System.Data.DataTable,System.String)">
            <summary>
            Query table for field  is null
            </summary>
            <param name="Tab"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.f_isNull``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Query row collection for field  is null
            </summary>
            <typeparam name="R"></typeparam>
            <param name="Rows"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.f_isNotNull``1(System.Data.TypedTableBase{``0},System.String)">
            <summary>
            Query table for field  is not null
            </summary>
            <typeparam name="R"></typeparam>
            <param name="Tab"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.f_isNotNull(System.Data.DataTable,System.String)">
            <summary>
            Query table for field  is not null
            </summary>
            <param name="Tab"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.f_isNotNull``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Query row collection for field  is null
            </summary>
            <typeparam name="R"></typeparam>
            <param name="Rows"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.DataSetHelper.joinCondition2`2">
            <summary>
            Condition over 2 object for 3-table join
            </summary>
            <typeparam name="r1"></typeparam>
            <typeparam name="r2"></typeparam>
            <param name="R1"></param>
            <param name="R2"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.DataSetHelper.joinCondition3`3">
            <summary>
            Condition over 3 objects for 3-table join
            </summary>
            <typeparam name="r1"></typeparam>
            <typeparam name="r2"></typeparam>
            <typeparam name="r3"></typeparam>
            <param name="R1"></param>
            <param name="R2"></param>
            <param name="R3"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.DataSetHelper.joinCondition4`4">
            <summary>
            Condition over 4 object for 4-table join
            </summary>
            <typeparam name="r1"></typeparam>
            <typeparam name="r2"></typeparam>
            <typeparam name="r3"></typeparam>
            <typeparam name="r4"></typeparam>
            <param name="R1"></param>
            <param name="R2"></param>
            <param name="R3"></param>
            <param name="R4"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.Join``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},metadatalibrary.DataSetHelper.joinCondition2{``0,``1})">
            <summary>
            Evaluates an inner join between two ienumerables
            </summary>
            <typeparam name="r1"></typeparam>
            <typeparam name="r2"></typeparam>
            <param name="t1">first list to join</param>
            <param name="t2">secondi list to join</param>
            <param name="joinFun">condition to apply for the join</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.LeftJoin``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},metadatalibrary.DataSetHelper.joinCondition2{``0,``1})">
            <summary>
            Evaluates an outer join between two ienumerables
            </summary>
            <typeparam name="r1"></typeparam>
            <typeparam name="r2"></typeparam>
            <param name="t1">first list to join</param>
            <param name="t2">secondi list to join</param>
            <param name="joinFun">condition to apply for the join</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.Join``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Collections.Generic.IEnumerable{``2},metadatalibrary.DataSetHelper.joinCondition3{``0,``1,``2})">
            <summary>
             Evaluates an inner join between a join and another ienumerable
            </summary>
            <typeparam name="r1"></typeparam>
            <typeparam name="r2"></typeparam>
            <typeparam name="r3"></typeparam>
            <param name="list">left part of join</param>
            <param name="t3">list to join</param>
            <param name="joinFun"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.LeftJoin``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Collections.Generic.IEnumerable{``2},metadatalibrary.DataSetHelper.joinCondition3{``0,``1,``2})">
            <summary>
             Evaluates an outer join between a join and another ienumerable
            </summary>
            <typeparam name="r1"></typeparam>
            <typeparam name="r2"></typeparam>
            <typeparam name="r3"></typeparam>
            <param name="list">left part of join</param>
            <param name="t3">list to join</param>
            <param name="joinFun"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.Join``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Collections.Generic.IEnumerable{``3},metadatalibrary.DataSetHelper.joinCondition4{``0,``1,``2,``3})">
            <summary>
            Inner Join with a 4th table
            </summary>
            <typeparam name="r1"></typeparam>
            <typeparam name="r2"></typeparam>
            <typeparam name="r3"></typeparam>
            <typeparam name="r4"></typeparam>
            <param name="list"></param>
            <param name="t4"></param>
            <param name="joinFun"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.LeftJoin``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Collections.Generic.IEnumerable{``3},metadatalibrary.DataSetHelper.joinCondition4{``0,``1,``2,``3})">
            <summary>
            Outer Join with a 4th table
            </summary>
            <typeparam name="r1"></typeparam>
            <typeparam name="r2"></typeparam>
            <typeparam name="r3"></typeparam>
            <typeparam name="r4"></typeparam>
            <param name="list"></param>
            <param name="t4"></param>
            <param name="joinFun"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._hasRows(System.Data.DataTable)">
            <summary>
            Return true if table has any row 
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._isEmpty(System.Data.DataTable)">
            <summary>
            Return true if table has no row 
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._HasRows``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if collection is not empty
            </summary>
            <typeparam name="r"></typeparam>
            <param name="collection"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if collection is empty
            </summary>
            <typeparam name="r"></typeparam>
            <param name="collection"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._forEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Do something for each object in a collection
            </summary>
            <typeparam name="r"></typeparam>
            <param name="collection"></param>
            <param name="operation"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._names(System.Data.DataColumnCollection)">
            <summary>
            Do something for each DataColumn
            </summary>
            <param name="collection"></param>
            <param name="operation"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._forEach(System.Data.DataColumnCollection,System.Action{System.Data.DataColumn})">
            <summary>
            Do something for each DataColumn
            </summary>
            <param name="collection"></param>
            <param name="operation"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._any(System.Data.DataColumnCollection,System.Func{System.Data.DataColumn,System.Boolean})">
            <summary>
            Do something for each DataColumn
            </summary>
            <param name="collection"></param>
            <param name="condition"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.__do``1(``0,System.Action{``0})">
            <summary>
            Do something on an object
            </summary>
            <typeparam name="TR"></typeparam>
            <param name="item"></param>
            <param name="operation"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper.__setValue``1(``0,System.String,System.Object)">
            <summary>
            Assign a property of the item to value
            </summary>
            <typeparam name="TR"></typeparam>
            <param name="item"></param>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._Map``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Maps an enumeration through a mapping function returning an array
            </summary>
            <typeparam name="R">type of the input enumeration</typeparam>
            <typeparam name="S">type of the output array</typeparam>
            <param name="collection"></param>
            <param name="mapFunc">mapping function</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._KeyBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Create a dictionary over the collection where the key is given by the result of the keyFunc 
            </summary>
            <typeparam name="TR">type of the input enumeration</typeparam>
            <typeparam name="TS">type of the output array</typeparam>
            <param name="collection"></param>
            <param name="keyFunc">mapping function</param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.DataSetHelper.operateOnRowIndex`1">
            <summary>
            Action that also have index in input
            </summary>
            <typeparam name="r"></typeparam>
            <param name="R">element of the collection</param>
            <param name="i">index of element</param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._forEach``1(System.Collections.Generic.IEnumerable{``0},metadatalibrary.DataSetHelper.operateOnRowIndex{``0})">
            <summary>
            Do something for each object in a collection, also including an index
            </summary>
            <typeparam name="TR"></typeparam>
            <param name="collection"></param>
            <param name="operation"></param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._Pick``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Takes a specific field from a collection of object obtaining a list of objects
            </summary>
            <param name="collection"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._Filter``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Filters a collection basing on a given predicate
            </summary>
            <typeparam name="TR"></typeparam>
            <param name="collection"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._Reject``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Exclude rows from a collection basing on a predicate. It is the opposite of _Filter
            </summary>
            <typeparam name="TR"></typeparam>
            <param name="collection"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._Find``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Find the first object of a collection that satisfies a predicate
            </summary>
            <typeparam name="TR"></typeparam>
            <param name="collection"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._Tail``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns all but first element of a collection
            </summary>
            <typeparam name="TR"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._Initial``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns all but last element of a collection
            </summary>
            <typeparam name="TR"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._First``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return first row of a collection
            </summary>
            <typeparam name="TR"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._Every``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returs true if a predicate is true for every element of a collection (short circuits)
            </summary>
            <typeparam name="TR"></typeparam>
            <param name="collection"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._Some``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returs true if a predicate is true for any element of a collection (short circuits)
            </summary>
            <typeparam name="TR"></typeparam>
            <param name="collection"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.DataSetHelper.accumulate`2">
            <summary>
            Aggregation function
            </summary>
            <typeparam name="TR">type of the aggregation result</typeparam>
            <typeparam name="TS">type of the element in the collection</typeparam>
            <param name="result">result of previos iteration</param>
            <param name="value">item of current iteration</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._Reduce``2(System.Collections.Generic.IEnumerable{``1},metadatalibrary.DataSetHelper.accumulate{``0,``1},``0)">
            <summary>
            Evaluates an aggregation function overall a collection
            </summary>
            <typeparam name="TR"></typeparam>
            <typeparam name="TS"></typeparam>
            <param name="collection"></param>
            <param name="accumulator">function to evaluates, first parameter is previous value of the aggregation, second is current element </param>
            <param name="startValue">Start value for the aggregation function</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._Reduce``1(System.Collections.Generic.IEnumerable{``0},metadatalibrary.DataSetHelper.accumulate{``0,``0})">
            <summary>
            Evaluates an aggregation function overall a collection. Starting value is the first element of the collection
            </summary>
            <typeparam name="TR"></typeparam>
            <param name="collection"></param>
            <param name="accumulator">function to evaluates, first parameter is previous value of the aggregation, second is current element </param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._FindIndex``1(``0[],System.Predicate{``0})">
            <summary>
            Searches the index of the first element that satisfies a predicate
            </summary>
            <typeparam name="TR"></typeparam>
            <param name="collection"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._FindLastIndex``1(``0[],System.Predicate{``0})">
            <summary>
            Searches the index of the last element that satisfies a predicate
            </summary>
            <typeparam name="r"></typeparam>
            <param name="collection"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._IfExists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Action{``0},System.Action)">
            <summary>
            If a collection has any element that satisfies a predicate, the _then function is executed, otherwise the _else when it is given.
            </summary>
            <typeparam name="r"></typeparam>
            <param name="collection"></param>
            <param name="condition">Predicate for searching rows in the collection</param>
            <param name="_then">action to be taken when any row is found, it takes the first found row as a parameter</param>
            <param name="_else">action to be taken  when no row is found</param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._IfNotExists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Action)">
            <summary>
            If a collection has no element that satisfies a predicate, the _then function is executed
            </summary>
            <typeparam name="r"></typeparam>
            <param name="collection"></param>
            <param name="condition">Predicate for searching rows in the collection</param>
            <param name="_then">action to be taken when no row is found</param>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._whereParent``2(System.Collections.Generic.IEnumerable{``0},metadatalibrary.MetaTableBase{``1},System.Predicate{``1})">
            <summary>
            Filters a collection of Rows basing on condition on a parent row
            </summary>
            <typeparam name="TR"></typeparam>
            <typeparam name="TS"></typeparam>
            <param name="rows"></param>
            <param name="parentTable"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._Select(System.Object[],System.Object[])">
            <summary>
            Select a list of expression from a source collection
            </summary>
            <param name="source"></param>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DataSetHelper._SelectGroupBy(System.Object[],metadatalibrary.MetaExpression[],metadatalibrary.MetaExpression[])">
            <summary>
            Evaluates a list of expression from a source collection
            </summary>
            <param name="source"></param>
            <param name="expressions">List of expressions</param>
            <param name="groupBy">List of fields to be grouped</param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.MetaTableRef`1">
            <summary>
            Table reference, used for joining table. 
            </summary>
            <typeparam name="R"></typeparam>
        </member>
        <member name="F:metadatalibrary.MetaTableRef`1.T">
            <summary>
            Referenced table
            </summary>
        </member>
        <member name="F:metadatalibrary.MetaTableRef`1.alias">
            <summary>
            Alias for the table in the join operation
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaTableRef`1.#ctor(metadatalibrary.MetaTableBase{`0},System.String)">
            <summary>
            Creates a table reference
            </summary>
            <param name="T"></param>
            <param name="alias"></param>
        </member>
        <member name="T:metadatalibrary.JoinedEnumerable`1">
            <summary>
            List of rows join-able to other tables
            </summary>
            <typeparam name="R"></typeparam>
        </member>
        <member name="F:metadatalibrary.JoinedEnumerable`1.Source">
            <summary>
            Table to join
            </summary>
        </member>
        <member name="F:metadatalibrary.JoinedEnumerable`1.aliasName">
            <summary>
            Alias used in expression for relate to this collection
            </summary>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`1.#ctor(metadatalibrary.MetaTableRef{`0})">
            <summary>
            Constructor
            </summary>
            <param name="source">Reference to the table to join</param>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.String)">
            <summary>
            Constructor
            </summary>
            <param name="source">Reference to the table to join</param>
            <param name="_as">Alias for the source</param>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`1._as(System.String)">
            <summary>
            Create an alias for this collection
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`1.join``1(System.Collections.Generic.IEnumerable{``0},System.String,metadatalibrary.MetaExpression)">
            <summary>
            Inner Join this collection to another enumeration, with a specified join condition
            </summary>
            <typeparam name="S"></typeparam>
            <param name="source2"></param>
            <param name="_as"></param>
            <param name="on"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`1.leftJoin``1(System.Collections.Generic.IEnumerable{``0},System.String,metadatalibrary.MetaExpression)">
            <summary>
            Inner Join this collection to another enumeration, with a specified join condition
            </summary>
            <typeparam name="S"></typeparam>
            <param name="source2"></param>
            <param name="_as"></param>
            <param name="on"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`1.join``1(metadatalibrary.MetaTableRef{``0},metadatalibrary.MetaExpression)">
            <summary>
            Inner Join this collection to another table, with a specified join condition
            </summary>
            <typeparam name="S"></typeparam>
            <param name="source2"></param>
            <param name="on"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`1.leftJoin``1(metadatalibrary.MetaTableRef{``0},metadatalibrary.MetaExpression)">
            <summary>
            Left Join this collection to another table, with a specified join condition
            </summary>
            <typeparam name="S"></typeparam>
            <param name="source2"></param>
            <param name="on"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`1.GetEnumerator">
            <summary>
            Necessary method to implement Ienumerable>
            </summary>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.JoinContext">
            <summary>
            List of pairs alias- fieldName used in a join operation
            </summary>
        </member>
        <member name="F:metadatalibrary.JoinContext.context">
            <summary>
            Actual list of pairs
            </summary>
        </member>
        <member name="M:metadatalibrary.JoinContext.add(System.String,System.String)">
            <summary>
            Add an alias-fieldName association
            </summary>
            <param name="fieldName"></param>
            <param name="aliasName"></param>
        </member>
        <member name="M:metadatalibrary.JoinContext.getFieldName(System.String)">
            <summary>
            Gets the field name related to an alias
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.JoinContext.mergeContext(metadatalibrary.JoinContext)">
            <summary>
            Merge an external context to this
            </summary>
            <param name="c"></param>
        </member>
        <member name="T:metadatalibrary.JoinedEnumerable`2">
            <summary>
            List of rows join-able to other tables
            </summary>
            <typeparam name="R1"></typeparam>
            <typeparam name="R2"></typeparam>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`2.#ctor(metadatalibrary.JoinedEnumerable{`0},metadatalibrary.MetaTableRef{`1},metadatalibrary.MetaExpression,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="source1"></param>
            <param name="source2"></param>
            <param name="_on"></param>
            <param name="innerJoin">when true, an inner join is made, else an outer join</param>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`2.#ctor(metadatalibrary.JoinedEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.String,metadatalibrary.MetaExpression,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="source1"></param>
            <param name="source2"></param>
            <param name="_as">Alias for source2</param>
            <param name="_on"></param>
            <param name="innerJoin">when true, an inner join is made, else an outer join</param>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`2.join``1(System.Collections.Generic.IEnumerable{``0},System.String,metadatalibrary.MetaExpression)">
            <summary>
            Inner Join this collection to another list of rows
            </summary>
            <typeparam name="R3"></typeparam>
            <param name="source"></param>
            <param name="_as">alias for source</param>
            <param name="on"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`2.leftJoin``1(System.Collections.Generic.IEnumerable{``0},System.String,metadatalibrary.MetaExpression)">
            <summary>
            Inner Join this collection to another list of rows
            </summary>
            <typeparam name="R3"></typeparam>
            <param name="source"></param>
            <param name="_as">alias for source</param>
            <param name="on"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`2.join``1(metadatalibrary.MetaTableRef{``0},metadatalibrary.MetaExpression)">
            <summary>
            Inner Join this collection to another list of rows
            </summary>
            <typeparam name="R3"></typeparam>
            <param name="source"></param>
            <param name="on"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`2.leftJoin``1(metadatalibrary.MetaTableRef{``0},metadatalibrary.MetaExpression)">
            <summary>
            Outer Join this collection to another list of rows
            </summary>
            <typeparam name="R3"></typeparam>
            <param name="source"></param>
            <param name="on"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`2.GetEnumerator">
            <summary>
            Necessary method to implement base interfaces
            </summary>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.JoinedEnumerable`3">
            <summary>
            List of rows join-able to other tables
            </summary>
            <typeparam name="R1"></typeparam>
            <typeparam name="R2"></typeparam>
            <typeparam name="R3"></typeparam>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`3.join``1(System.Collections.Generic.IEnumerable{``0},System.String,metadatalibrary.MetaExpression)">
            <summary>
            Inner Join this collection to another table, with a specified join condition
            </summary>
            <typeparam name="R4"></typeparam>
            <param name="source"></param>
            <param name="_as">Alias for source</param>
            <param name="on"></param>
            <returns></returns>      
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`3.leftJoin``1(System.Collections.Generic.IEnumerable{``0},System.String,metadatalibrary.MetaExpression)">
            <summary>
            Outer Join this collection to another table, with a specified join condition
            </summary>
            <typeparam name="R4"></typeparam>
            <param name="source"></param>
            <param name="_as">Alias for source</param>
            <param name="on"></param>
            <returns></returns>      
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`3.join``1(metadatalibrary.MetaTableRef{``0},metadatalibrary.MetaExpression)">
            <summary>
            Inner Join this collection to another table, with a specified join condition
            </summary>
            <typeparam name="R4"></typeparam>
            <param name="source4"></param>
            <param name="on"></param>
            <returns></returns>      
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`3.leftJoin``1(metadatalibrary.MetaTableRef{``0},metadatalibrary.MetaExpression)">
            <summary>
            Outer Join this collection to another table, with a specified join condition
            </summary>
            <typeparam name="R4"></typeparam>
            <param name="source4"></param>
            <param name="on"></param>
            <returns></returns>      
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`3.#ctor(metadatalibrary.JoinedEnumerable{`0,`1},metadatalibrary.MetaTableRef{`2},metadatalibrary.MetaExpression,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="source1"></param>
            <param name="source2"></param>
            <param name="on"></param>
            <param name="innerJoin"></param>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`3.#ctor(metadatalibrary.JoinedEnumerable{`0,`1},System.Collections.Generic.IEnumerable{`2},System.String,metadatalibrary.MetaExpression,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="source1"></param>
            <param name="source2"></param>
            <param name="_as">Alias for source2</param>
            <param name="on"></param>
            <param name="innerJoin"></param>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`3.GetEnumerator">
            <summary>
            Necessary method to implement the interface
            </summary>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.JoinedEnumerable`4">
            <summary>
            List of rows join-able to other tables
            </summary>
            <typeparam name="R1"></typeparam>
            <typeparam name="R2"></typeparam>
            <typeparam name="R3"></typeparam>
            <typeparam name="R4"></typeparam>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`4.#ctor(metadatalibrary.JoinedEnumerable{`0,`1,`2},System.Collections.Generic.IEnumerable{`3},System.String,metadatalibrary.MetaExpression,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="source1">Left table</param>
            <param name="source2">Right table</param>
            <param name="_as">alias for right table</param>
            <param name="on">join condition</param>
            <param name="innerJoin"></param>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`4.#ctor(metadatalibrary.JoinedEnumerable{`0,`1,`2},metadatalibrary.MetaTableRef{`3},metadatalibrary.MetaExpression,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="source1">Left table</param>
            <param name="source2">Right table</param>
            <param name="on">join condition</param>
            <param name="innerJoin">when true, an inner join is made, else an outer join</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.JoinedEnumerable`4.GetEnumerator">
            <summary>
            Implements IEnumerator interface
            </summary>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.MetaTableBase`1">
            <summary>
            Base type for generic DataTable containing MetaRows
            </summary>
            <typeparam name="R"></typeparam>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements serializable
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1._joinAs(System.String)">
            <summary>
            Creates a base for a join operations
            </summary>
            <param name="_as"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1._as(System.String)">
            <summary>
            Creates a reference to this table
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.MetaTableBase`1.Count">
            <summary>
            Row count (including deleted rows)
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.#ctor(System.String)">
            <summary>
            Creates a metatable with a given name
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="P:metadatalibrary.MetaTableBase`1.Item(System.Int32)">
            <summary>
            Get DataRow from collection
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.all">
            <summary>
            Get all rows of the table (including Deleted ones)
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.allCurrent">
            <summary>
            Get all current rows of the table
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.NewRowFromBuilder(System.Data.DataRowBuilder)">
            <summary>
            Required method to implement  TypedTableBase
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.GetRowType">
            <summary>
            Required method to implement  TypedTableBase, gives the specific  DataRow type of this table
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.addBaseColumns(System.String[])">
            <summary>
            Define all table DataColumns
            </summary>
            <param name="cols"></param>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.addBaseKey">
            <summary>
            Add key to table, this has to be redefined in every derived table. This should
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.createColumn(System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Creates a DataColumn with specified informations
            </summary>
            <param name="ColumnName"></param>
            <param name="ColumnType"></param>
            <param name="allowDBNull"></param>
            <param name="ReadOnly"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.defineColumn(System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Defines a column. This should be called in derived MetaTable for each column required in a specific DataSet
            </summary>
            <param name="ColumnName"></param>
            <param name="ColumnType"></param>
            <param name="allowDBNull"></param>
            <param name="ReadOnly"></param>
            <returns></returns>
        </member>
        <member name="F:metadatalibrary.MetaTableBase`1.baseColumns">
            <summary>
            Dictionary containing all table columns. Usually defined in the metadata dataset
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.defineKey(System.String[])">
            <summary>
            Defines the primary key of the table , used during the construction of DataSet for generic tables
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.First(System.String,System.String,System.Data.DataViewRowState)">
            <summary>
            Gets the first row of a search, or null if no row is found
            </summary>
            <param name="filter">condition for the search</param>
            <param name="sort">row sorting</param>
            <param name="rv">DataViewRowState to be met</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.First(metadatalibrary.MetaExpression,System.Object,System.String)">
            <summary>
             Gets the first row of a search, or null if no row is found
            </summary>
            <param name="filter">condition for the search</param>
            <param name="env">environment (use a DataAccess for this)</param>
            <param name="sort">row sorting</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.ColumnNameList">
            <summary>
            List of table column names, comma separated
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.Sort(System.String,System.Data.DataViewRowState)">
            <summary>
            get a sorted array of rows 
            </summary>
            <param name="sort">string sort order</param>
            <param name="rv">RowState to consider</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.Filter(metadatalibrary.MetaExpression,System.Object,System.String,System.Boolean)">
            <summary>
            Search all rows that satisfies a criteria
            </summary>
            <param name="filter">criteria to be met</param>
            <param name="env">Environment (a DataAccess is a good parameter)</param>
            <param name="sort">sorting</param>
            <param name="all">if all=true also deleted rows are retrived</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.Filter(System.String,System.String,System.Data.DataViewRowState)">
            <summary>
            Search all rows that satisfies a criteria
            </summary>
            <param name="filter">criteria to be met</param>
            <param name="sort">sorting</param>
            <param name="rv">DataViewRowState to be met</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.getDetachedRowsFromDb(metadatalibrary.IDataAccess,System.String,System.Int32)">
            <summary>
            Get rows from DB without adding them to the table
            </summary>
            <param name="Conn"></param>
            <param name="filter">criteria to be met</param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.getDetachedRowsFromDb(metadatalibrary.IDataAccess,metadatalibrary.MetaExpression,System.Int32)">
            <summary>
             Get rows from DB without adding them to the table
            </summary>
            <param name="Conn"></param>
            <param name="filter"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.get(metadatalibrary.IDataAccess,metadatalibrary.MetaExpression,System.Int32)">
            <summary>
            Get existing rows or read from DB when no rows is found
            </summary>
            <param name="Conn"></param>
            <param name="filter"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.getFromDb(metadatalibrary.IDataAccess,metadatalibrary.MetaExpression,System.Int32)">
            <summary>
            Get rows from DB and add them to the table
            </summary>
            <param name="conn"></param>
            <param name="filter"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.getFromDb(metadatalibrary.IDataAccess,System.String,System.Int32)">
            <summary>
             Get rows from DB and add them to the table
            </summary>
            <param name="conn"></param>
            <param name="filter"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.mergeFromDb(metadatalibrary.IDataAccess,metadatalibrary.MetaExpression,System.Int32)">
            <summary>
            Reads rows from db and merges them into the table, overwriting existing. Returns all read rows 
            </summary>
            <param name="T"></param>
            <param name="conn"></param>
            <param name="filter"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.readTableJoined(metadatalibrary.IDataAccess,System.String,metadatalibrary.MetaExpression,metadatalibrary.MetaExpression,System.String[])">
            <summary>
            Reads rows from db and merges them into the table, overwriting existing. Returns all read rows 
            </summary>
            <param name="conn"></param>
            <param name="table2"></param>
            <param name="filterTable1"></param>
            <param name="filterTable2"></param>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.safeReadTableJoined(metadatalibrary.IDataAccess,System.String,metadatalibrary.MetaExpression,metadatalibrary.MetaExpression,System.String[])">
            <summary>
            Reads rows from db and merges them into the table, overwriting existing. Returns all read rows 
            </summary>
            <param name="conn"></param>
            <param name="table2"></param>
            <param name="filterTable1"></param>
            <param name="filterTable2"></param>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.readDetachedJoin(metadatalibrary.IDataAccess,System.String,metadatalibrary.MetaExpression,metadatalibrary.MetaExpression,System.String[])">
            <summary>
            
            </summary>
            <param name="conn"></param>
            <param name="table2"></param>
            <param name="filterTable1"></param>
            <param name="filterTable2"></param>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.sqlMergeFromDb(metadatalibrary.IDataAccess,System.String,System.Int32)">
            <summary>
            Reads rows from db and merges them into the table, overwriting existing. Returns all read rows 
            </summary>
            <param name="conn"></param>
            <param name="sql"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.mergeRows(`0[],System.Boolean,System.Boolean)">
            <summary>
            Merges detached rows to the table
            </summary>
            <param name="rows"></param>
            <param name="withCheck"></param>
            <param name="overwrite"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.sqlSafeMergeFromDb(metadatalibrary.IDataAccess,System.String,System.Int32)">
            <summary>
            Reads rows from db and merges them into the table, skipping existing. Returns all new read rows 
            </summary>
            <param name="conn"></param>
            <param name="sql"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.safeMergeFromDb(metadatalibrary.IDataAccess,metadatalibrary.MetaExpression,System.Int32)">
            <summary>
            Reads rows from db and merges them into the table, skipping existing. Returns all new read rows 
            </summary>
            <param name="T"></param>
            <param name="conn"></param>
            <param name="filter"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.NewRowAs(System.Data.DataRow)">
            <summary>
            Creates a new Row copying all fields from sample (for each field in common)
            </summary>
            <param name="sample"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="ctxt"></param>
        </member>
        <member name="P:metadatalibrary.MetaTableBase`1.StaticFilter">
            <summary>
            Static filter, always applied during read form db 
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaTableBase`1.TableForReading">
            <summary>
            Tabella del db da cui effettuare la lettura dei dati 
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaTableBase`1.TableForPosting">
            <summary>
            Tabella del db su cui effettuare la scrittura dei dati
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaTableBase`1.skipInsertCopy">
            <summary>
            If true Skips this table in a deep copy
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.IsSubEntityOf(System.Data.DataTable)">
            <summary>
            Tells whether this Table is a Sub-Entity of Parent Table.
            This is true if:
            Exists some relation R that links primary key of Parent to a subset of the 
             primary key of Child
            </summary>
            <param name="Parent"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTableBase`1.hasKey(System.String)">
            <summary>
            Check if field is part of primary key
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.MetaTableBase`1.Sorting">
            <summary>
            Ordinamento da applicare in fase di lettura da db e in visualizzazione
            </summary>
        </member>
        <member name="T:metadatalibrary.MetaTable">
            <summary>
            Generic implementation for a MetaTable of MetaRows, this is a base type for all specific MetaData tables
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaTable.Rows">
            <summary>
            Row collection, necessary to make it visible
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaTable.#ctor(System.String)">
            <summary>
            Creates a MetaTable with a given name
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:metadatalibrary.MetaTable.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Needed to implement ISerializable
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:metadatalibrary.MetaTable.NewRowFromBuilder(System.Data.DataRowBuilder)">
            <summary>
            Necessary method to implement the interface TypedTableBase
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTable.GetRowType">
            <summary>
             Necessary method to implement the interface TypedTableBase, simply return typeof(MetaRow) here
            </summary>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.MetaTable.SkipSecurity">
            <summary>
            Se true, alla tabella non è applicata la sicurezza
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaTable.FilterForInsert">
            <summary>
            Filtro da applicare su questa tabella quando è chiave esterna in una riga in fase di inserimento
            </summary>
        </member>
        <member name="P:metadatalibrary.MetaTable.FilterForSearch">
            <summary>
            Filtro  da applicare su questa tabella quando è chiave esterna in una riga in fase di ricerca
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaTable.getValueOrNullStruct``1(System.Object)">
            <summary>
            Converts DBNull to null, other values are left unchanged
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTable.getValueOrNullClass``1(System.Object)">
            <summary>
            Converts DBNull to null, other values are left unchanged
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.MetaTable.getObject``1(``0)">
            <summary>
            Converts null to DBNull, other values are left unchanged
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.MetaRow">
            <summary>
            Base type for specific DataTables
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaRow.#ctor(System.Data.DataRowBuilder)">
            <summary>
            Necessary constructor to make the serialization process work
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:metadatalibrary.MetaRow.HasChanges">
            <summary>
            Check if this row has been modified. False if it is unchanged 
            </summary>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.RowChange">
            <summary>
            Represents the change of a single row that has to be performed on a 
             Database Table
            </summary>
        </member>
        <member name="F:metadatalibrary.RowChange.DR">
            <summary>
            DataRow linked to the RowChange
            </summary>
        </member>
        <member name="F:metadatalibrary.RowChange.AutoIncrement">
            <summary>
            Extended Property of DataColumn that states that the column has to be
             calculated during Post Process when it is added to DataBase.
            </summary>
            <remarks>
            The field is calculated like:
            [Row[PrefixField]] [MiddleConst] [LeftPad(newID, IDLength)]
            so that, called the first part [Row[PrefixField]] [MiddleConst] as PREFIX,
            if does not exists another row with the same PREFIX for the ID, the newID=1
            else newID = max(ID of same PREFIX-ed rows) + 1
            </remarks>
        </member>
        <member name="M:metadatalibrary.RowChange.#ctor(System.Data.DataRow)">
            <summary>
            Constructor for the class
            </summary>
            <param name="dr"></param>
        </member>
        <member name="M:metadatalibrary.RowChange.SetCollection(metadatalibrary.RowChangeCollection)">
            <summary>
            Assigns this RowChange to a Collection
            </summary>
            <param name="rc"></param>
        </member>
        <member name="M:metadatalibrary.RowChange.#ctor(System.Data.DataRow,metadatalibrary.RowChangeCollection)">
            <summary>
            Creates a new RowChange linked to a given DataRow
            </summary>
            <param name="dr"></param>
            <param name="parentCollection"></param>
        </member>
        <member name="F:metadatalibrary.RowChange.HasBeenScanned">
            <summary>
            List of tables incrementally scanned in the analysis
            </summary>
        </member>
        <member name="M:metadatalibrary.RowChange.ToString">
            <summary>
            String representaion of the change
            </summary>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.RowChange.Table">
            <summary>
            gets the DataTable that owns the chenged row
            </summary>
        </member>
        <member name="P:metadatalibrary.RowChange.TableName">
            <summary>
            Gets the name of the table to which the changed row belongs
            </summary>
        </member>
        <member name="P:metadatalibrary.RowChange.PostingTable">
            <summary>
            Gets the real table that will be used to write the row to the DB
            </summary>
        </member>
        <member name="F:metadatalibrary.RowChange.short_update_descr">
            <summary>
            Short description for update, used for composing business rule 
             stored procedure names
            </summary>
        </member>
        <member name="F:metadatalibrary.RowChange.short_insert_descr">
            <summary>
            Short description for insert, used for composing business rule 
             stored procedure names
            </summary>
        </member>
        <member name="F:metadatalibrary.RowChange.short_delete_descr">
            <summary>
            Short description for delete, used for composing business rule 
             stored procedure names
            </summary>
        </member>
        <member name="F:metadatalibrary.RowChange.KeyDelimiter">
            <summary>
            Used in the composition of the key, during logging
            </summary>
        </member>
        <member name="M:metadatalibrary.RowChange.ShortStatus">
            <summary>
            Gets a i/u/d description of the row status
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.RowChange.PreProcNameToCall">
            <summary>
            Get the name of Stored procedure to call in pre-check phase
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.RowChange.PostProcNameToCall">
            <summary>
            get the name of Stored procedure to call in post-check phase
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.RowChange.FilterTableOp">
            <summary>Gets a filter of TableName AND dboperation (I/U/D)</summary>
            <returns>filter String</returns>
        </member>
        <member name="M:metadatalibrary.RowChange.FilterPostTableOp">
            <summary>
            Gets a filter on Posting Table and DB operation 
            </summary>
            <returns></returns>
        </member>
        <member name="F:metadatalibrary.RowChange.EnforcementMessages">
            <summary>
            Error messages about related stored procedures
            </summary>
        </member>
        <member name="F:metadatalibrary.RowChange.Related">
            <summary>
            Related rows on other tables
            </summary>
        </member>
        <member name="M:metadatalibrary.RowChange.GetNewRowChange(System.Data.DataRow)">
            <summary>
            Get a new rowchange class linked to a given DataRow
            </summary>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.RowChange.PrimaryKey">
            <summary>
            Gets the list of primary key column name separated by KeyDelimiter
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.RowChange.copyproperty(System.Data.DataTable,System.Data.DataTable,System.String,System.String)">
            <summary>
            Copy an extended property of a datacolumn into another one.
            Checks for column existence in both tables.
            </summary>
            <param name="In"></param>
            <param name="Out"></param>
            <param name="colname"></param>
            <param name="property"></param>
        </member>
        <member name="P:metadatalibrary.RowChange.errorLogger">
            <summary>
            Class for logging errors
            </summary>
        </member>
        <member name="M:metadatalibrary.RowChange.GetRelated(System.String)">
            <summary>
            Get a DataRow related to the RowChange, in a give tablename
            </summary>
            <param name="tablename"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.RowChange.SEARCH_RELATED(System.String)">
            <summary> Search for rows related to the "Change" variation (referred to ONE row R of ONE table T)
             For each table in DS, are examined the relation to T
             For each table havig exactly ONE row related to R, this row is added to Related.
             Rows are added to a list that is indexed by the name of the row DataTable 
            </summary>
            <param name="tablename"></param>   
            <remarks>
              This Function assumes master/child relations to be NOT circular.
              This function does not consider the possibility of raising different rows 
                in the same table using more than one path. It assumes that there is
                only one path connecting one table to another.
            </remarks>
        </member>
        <member name="M:metadatalibrary.RowChange.SetMySelector(System.Data.DataColumn,System.String,System.UInt64)">
            <summary>
            Sets selector for a specified DataColumn
            </summary>
            <param name="C"></param>
            <param name="ColumnName"></param>
            <param name="mask"></param>
        </member>
        <member name="M:metadatalibrary.RowChange.SetSelector(System.Data.DataTable,System.String)">
            <summary>
            Add a selector-column to the table. AutoIncrement columns are calculated between
             equal selectors-column rows
            </summary>
            <param name="T"></param>
            <param name="ColumnName"></param>
        </member>
        <member name="M:metadatalibrary.RowChange.SetSelector(System.Data.DataTable,System.String,System.UInt64)">
            <summary>
            Mark a column  as a general selector for a table
            </summary>
            <param name="T"></param>
            <param name="ColumnName"></param>
            <param name="mask"></param>
        </member>
        <member name="M:metadatalibrary.RowChange.ClearSelector(System.Data.DataTable,System.String)">
            <summary>
            Remove a column from general selectors of a table
            </summary>
            <param name="T"></param>
            <param name="ColumnName"></param>
        </member>
        <member name="M:metadatalibrary.RowChange.ClearMySelector(System.Data.DataTable,System.String)">
            <summary>
            Remove all columns as specific selector ofa a column
            </summary>
            <param name="T"></param>
            <param name="ColumnName"></param>
        </member>
        <member name="M:metadatalibrary.RowChange.GetSelector(System.Data.DataRow,System.Data.DataColumn,metadatalibrary.QueryHelper)">
            <summary>
            Gets the selector combination for a DataRow
            </summary>
            <param name="DR"></param>
            <param name="C"></param>
            <param name="QH"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.RowChange.GetSelectors(System.Data.DataColumn)">
            <summary>
            Gets all field selector for a datacolumn
            </summary>
            <param name="Col"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.RowChange.GetSelector(System.Data.DataTable,System.Data.DataRow,System.Data.DataColumn,metadatalibrary.QueryHelper)">
            <summary>
            Gets a condition of all selector fields of a row
            </summary>
            <param name="T"></param>
            <param name="DR"></param>
            <param name="CC"></param>
            <param name="QH"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.RowChange.GetAllSelectors(System.Data.DataTable,System.Data.DataRow,metadatalibrary.QueryHelper)">
            <summary>
            Gets a condition of all selector fields of a row
            </summary>
            <param name="T">Table row</param>
            <param name="DR"></param>
            <param name="QH"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.RowChange.CopyAutoIncrementProperties(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Copy all autoincrement properties of a table into another one.
            </summary>
            <param name="In"></param>
            <param name="Out"></param>
        </member>
        <member name="M:metadatalibrary.RowChange.MarkAsAutoincrement(System.Data.DataColumn,System.String,System.String,System.Int32)">
            <summary>
            Mark a column as an autoincrement, specifying how the calculated ID must be
             composed.
            </summary>
            <param name="C">Column to set</param>
            <param name="prefix">field of rows to be put in front of ID</param>
            <param name="middle">middle constant part of ID</param>
            <param name="length">length of the variable part of the ID</param>
            <remarks>
            The field will be calculated like:
            [Row[PrefixField]] [MiddleConst] [LeftPad(newID, IDLength)]
            so that, called the first part [Row[PrefixField]] [MiddleConst] as PREFIX,
            if does not exists another row with the same PREFIX for the ID, the newID=1
            else newID = max(ID of same PREFIX-ed rows) + 1
            </remarks>
        </member>
        <member name="M:metadatalibrary.RowChange.MarkAsAutoincrement(System.Data.DataColumn,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Set a DataColumn as "AutoIncrement", specifying how the calculated ID must be
             composed.
            </summary>
            <param name="C">Column to set</param>
            <param name="prefix">field of rows to be put in front of ID</param>
            <param name="middle">middle constant part of ID</param>
            <param name="length">length of the variable part of the ID</param>
            <param name="linear">if true, Selector Fields, Middle Const and Prefix 
            	fields are not taken into account while calculating the field</param>
            <remarks>
            The field will be calculated like:
            [Row[PrefixField]] [MiddleConst] [LeftPad(newID, IDLength)]
            so that, called the first part [Row[PrefixField]] [MiddleConst] as PREFIX,
            if does not exists another row with the same PREFIX for the ID, the newID=1
            else newID = max(ID of same PREFIX-ed rows) + 1
            </remarks>
        </member>
        <member name="M:metadatalibrary.RowChange.ClearAutoIncrement(System.Data.DataColumn)">
            <summary>
            Removes autoincrement property from a DataColumn
            </summary>
            <param name="C"></param>
        </member>
        <member name="M:metadatalibrary.RowChange.IsAutoIncrement(System.Data.DataColumn)">
            <summary>
            Tells whether a Column is a AutoIncrement 
            </summary>
            <param name="C"></param>
            <returns>true if Column is Auto Increment</returns>
        </member>
        <member name="M:metadatalibrary.RowChange.MarkAsCustomAutoincrement(System.Data.DataColumn,metadatalibrary.RowChange.CustomCalcAutoID)">
            <summary>
            Tells PostData to evaluate a specified column through the specified customFunction
            </summary>
            <param name="C">Column to evaluate</param>
            <param name="CustomFunction">delegate to call for evaluating autoincrement column</param>
        </member>
        <member name="M:metadatalibrary.RowChange.markAsCustomAutoincrement(System.Data.DataColumn,metadatalibrary.RowChange.CustomCalcAutoId)">
            <summary>
             Tells PostData to evaluate a specified column through the specified customFunction
            </summary>
            <param name="C"></param>
            <param name="CustomFunction"></param>
        </member>
        <member name="M:metadatalibrary.RowChange.IsCustomAutoIncrement(System.Data.DataColumn)">
            <summary>
            Tells whether a Column is a Custom AutoIncrement one
            </summary>
            <param name="C"></param>
            <returns>true if Column is Custom Auto Increment</returns>
        </member>
        <member name="M:metadatalibrary.RowChange.ClearCustomAutoIncrement(System.Data.DataColumn)">
            <summary>
            Removes Custom-autoincrement property from a DataColumn
            </summary>
            <param name="C"></param>
        </member>
        <member name="F:metadatalibrary.RowChange.HasCustomAutoFields">
            <summary>
            Set to true if any custom autoincrement found. In that case, the transaction is runned row by row and not with batches
            </summary>
        </member>
        <member name="T:metadatalibrary.RowChange.CustomCalcAutoID">
            <summary>
            Function called to evaluate a custom autoincrement column
            </summary>
            <param name="dr">DataRow evaluated</param>
            <param name="c">Column to evaluate</param>
            <param name="conn">Connection to database</param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.RowChange.CustomCalcAutoId">
            <summary>
            Function called to evaluate a custom autoincrement column
            </summary>
            <param name="dr">DataRow evaluated</param>
            <param name="c">Column to evaluate</param>
            <param name="conn">Connection to database</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.RowChange.CalcAutoID(System.Data.DataRow,metadatalibrary.IDataAccess)">
            <summary>
            Evaluates a value for all autoincremented key field of a row
            </summary>
            <param name="DR">DataRow to insert</param>
            <param name="Conn"></param>
        </member>
        <member name="M:metadatalibrary.RowChange.SetOptimized(System.Data.DataTable,System.Boolean)">
            <summary>
            Tells PostData that the given table is optimized, i.e. autoincrement values have to be cached
            </summary>
            <param name="T"></param>
            <param name="isOptimized"></param>
        </member>
        <member name="M:metadatalibrary.RowChange.ClearMaxCache(System.Data.DataTable)">
            <summary>
            Clear all max expression cached on a table
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.RowChange.IsOptimized(System.Data.DataTable)">
            <summary>
            Returns true if special optimization are applied in the autoincrement properties evaluation
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.RowChange.SetMaxExpr(System.Data.DataTable,System.String,System.String,System.Int32)">
            <summary>
            Sets the new maximum for a specified combination of table, expression and filter
            </summary>
            <param name="T"></param>
            <param name="expr">expression for the max</param>
            <param name="filter">filter applied</param>
            <param name="num">new maximum to set</param>
        </member>
        <member name="M:metadatalibrary.RowChange.GetMaxExpr(System.Data.DataTable,System.String,System.String,System.Int32)">
            <summary>
            Gets the optimized max() value for and expression in a table, with a specified filter and minimum value
            </summary>
            <param name="T">Evaluated table</param>
            <param name="expr">expression to evaluate</param>
            <param name="filter">filter to apply</param>
            <param name="minimum">minimum value wanted</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.RowChange.setMinimumTempValue(System.Data.DataColumn,System.Int32)">
            <summary>
            Sets mininimum value for evaluating temporary autoincrement columns
            </summary>
            <param name="C"></param>
            <param name="min"></param>
        </member>
        <member name="M:metadatalibrary.RowChange.CalcTemporaryID(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Evaluate a temporary column of a DataRow
            </summary>
            <param name="R"></param>
            <param name="C"></param>
        </member>
        <member name="M:metadatalibrary.RowChange.CalcTemporaryID(System.Data.DataTable,System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Evaluates a temporary value for a field of a row, basing on AutoIncrement 
             properties of the column, without reading from DB.
            </summary>
            <param name="T"></param>
            <param name="R"></param>
            <param name="C"></param>
        </member>
        <member name="M:metadatalibrary.RowChange.CalcTemporaryID(System.Data.DataRow)">
            <summary>
            Evaluates all temporary columns of a row
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:metadatalibrary.RowChange.CalcTemporaryID(System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Evaluates temporary values for autoincrement columns  (reading from memory)
            </summary>
            <param name="T"></param>
            <param name="r"></param>
            <remarks>This function should be called when a row is added to a table, 
              between DataTable.NewRow() and DataTable.Rows.Add()
             </remarks>
        </member>
        <member name="M:metadatalibrary.RowChange.CalcAutoID(System.Data.DataRow,System.Data.DataColumn,metadatalibrary.IDataAccess)">
            <summary>
            Evaluates a value for a specified key field of a row (reading from db)
            </summary>
            <param name="conn"></param>
            <param name="dr">DataRow to insert</param>
            <param name="c">Column to evaluate ID</param>
            <remarks>The function takes some parameter from DataColumn ExtendedProperties:
            PrefixField = Row Field to consider as a prefix for the ID value
            MiddleConst = Constant to append to PrefixField 
            IDLength    = Length of automatic calculated ID
            </remarks>
        </member>
        <member name="M:metadatalibrary.RowChange.Cascade_Change_Field(System.Data.DataRow,System.Data.DataColumn,System.Object)">
            <summary>
            Changes R's child rows to reflect variation of R[ColumnToChange]= newvalue
            </summary>
            <param name="R"></param>
            <param name="ColumnToChange"></param>
            <param name="newvalue"></param>
        </member>
        <member name="M:metadatalibrary.RowChange.ApplyCascadeDelete(System.Data.DataRow,System.Collections.Stack)">
            <summary>
            Deletes DataRow R and all it's sub-entities
            </summary>
            <param name="R"></param>
            <param name="RollBack">Stack of deletion made</param>
        </member>
        <member name="M:metadatalibrary.RowChange.RollBackDeletes(System.Collections.Stack)">
            <summary>
            Undo a stack of deletions
            </summary>
            <param name="RollBack"></param>
        </member>
        <member name="M:metadatalibrary.RowChange.MakeChild(System.Data.DataRow,System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Change the Child Row fields in order to make it child of Parent. All parent-child relations between the two tables are taken into account.
            </summary>
            <param name="parent">Parent row</param>
            <param name="parentTable"></param>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.RowChange.MakeChild(System.Data.DataRow,System.Data.DataTable,System.Data.DataRow,System.String)">
            <summary>
            Makes a "Child" DataRow related as child with a Parent Row. 
                This function should be called after calling DataTable.NewRow and
            before calling CalcTemporaryID and DataTable.Add()
            </summary>
            <param name="parent">Parent Row (Can be null)</param>
            <param name="parentTable">Parent Table (to which Parent Row belongs)</param>
            <param name="child">Row that must become child of Parent (can't be null)</param>
            <param name="relname">eventually name of relation to use</param>
            <remarks>This function should be called after calling DataTable.NewRow and
                    before calling CalcTemporaryID and DataTable.Add()
            </remarks>
        </member>
        <member name="M:metadatalibrary.RowChange.ChildRelation(System.Data.DataTable,System.Data.DataTable,System.String)">
            <summary>
            Search a Relation in Child's Parent Relations that connect Child to Parent, 
            	named relname. If it is not found, it is also searched in Parent's
            	child relations.
            </summary>
            <param name="parent">Parent table</param>
            <param name="child">Child table</param>
            <param name="relname">Relation Name, null if it does not matter</param>
            <returns>a Relation from Child Parent Relations, or null if not found</returns>
        </member>
        <member name="M:metadatalibrary.RowChange.FindChildRelation(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Get list of relations where table Parent is the ParentTable and Child is the ChildTable
            </summary>
            <param name="parent"></param>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.RowChange.PrepareForPosting(System.String,metadatalibrary.DataAccess,System.Boolean)">
            <summary>
            Evaluates autoincrement values, completes the row to be changed with createuser,createtimestamp,
            lastmoduser, lastmodtimestamp fields, depending on the operation type
             and calls CalculateFields for each DataRow involved.
             This must be done INSIDE the transaction.
            </summary>
            <param name="user">User who is posting</param>
            <param name="acc"></param>
            <param name="doCalcAutoId"></param>
        </member>
        <member name="M:metadatalibrary.RowChange.prepareForPosting(System.String,metadatalibrary.IDataAccess,System.Boolean)">
            <summary>
            Evaluates autoincrement values, completes the row to be changed with createuser,createtimestamp,
            lastmoduser, lastmodtimestamp fields, depending on the operation type
             and calls CalculateFields for each DataRow involved.
             This must be done INSIDE the transaction.
            </summary>
            <param name="user">User who is posting</param>
            <param name="acc"></param>
            <param name="doCalcAutoId"></param>
        </member>
        <member name="T:metadatalibrary.RowChangeCollection">
            <summary>
            Collection of RowChange
            </summary>
        </member>
        <member name="F:metadatalibrary.RowChangeCollection.connectionToUse">
            <summary>
            Connection to use, used in derived classes
            </summary>
        </member>
        <member name="M:metadatalibrary.RowChangeCollection.EmptyCache">
            <summary>
            Azzera  i massimi presenti nella cache di transazione
            </summary>
        </member>
        <member name="M:metadatalibrary.RowChangeCollection.getMax(System.Data.DataRow,System.Data.DataColumn,metadatalibrary.IDataAccess,System.String,System.String,System.String)">
            <summary>
            Evaluates the maximum value for an expression referring to a Column of a DataRow, 
            </summary>
            <param name="R">DataRow being calculated</param>
            <param name="C">DataColumn to evaluate</param>
            <param name="conn">Connection</param>
            <param name="table">table implied</param>
            <param name="filter">Filter for evaluating the expression</param>
            <param name="expr">expression to evaluate</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.RowChangeCollection.SetMax(System.String,System.String,System.String,System.String)">
            <summary>
            Sets the max value for a specific combination
            </summary>
            <param name="table">table to set the max value</param>
            <param name="filter">filter connected (usually a bunch of selector and static filters)</param>
            <param name="expr">expression that the max value refers to</param>
            <param name="value">value to set as new maximum</param>
        </member>
        <member name="M:metadatalibrary.RowChangeCollection.GetByName(System.String)">
            <summary>
            Gets the RowChange in the specified Table
            </summary>
            <param name="TableName">Name of the DataTable where the related row is to be found</param>
            <returns>The table-related row in the collection</returns>
        </member>
        <member name="T:metadatalibrary.DataJournaling">
            <summary>
            Class that manages log
            </summary>
        </member>
        <member name="M:metadatalibrary.DataJournaling.DO_Journaling(metadatalibrary.RowChangeCollection)">
            <summary>
            Should return the log rows to add to db 
            for a given set of changes that have been made to DB
            </summary>
            <param name="Changes"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.MsgParser">
            <summary>
            Configurable String Parser: 
            It is able to find occurencies of strings with predefined delimiters,
             giving the string found and the string type (referring to the delimiters)
            </summary>
        </member>
        <member name="M:metadatalibrary.MsgParser.#ctor(System.String,System.String[],System.String[])">
            <summary>
            Create a Parser able to recognize more than one Start/Stop Tag
            </summary>
            <param name="message">Message to Parse</param>
            <param name="start">array of Start tags</param>
            <param name="stop">array of (corresponding) Stop Tags</param>
        </member>
        <member name="M:metadatalibrary.MsgParser.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a Parser able to recognize one Start/Stop Tag
            </summary>
            <param name="Message">Message to Parse</param>
            <param name="Start">Start tag</param>
            <param name="Stop">Stop Tag</param>
        </member>
        <member name="M:metadatalibrary.MsgParser.Reset">
            <summary>
            Reset the parser to the beginning of the string
            </summary>
        </member>
        <member name="M:metadatalibrary.MsgParser.GetNext(System.String@,System.String@,System.Int32@)">
            <summary>
              Find the next occurrence delimited by the defined tags
              This function DOES NOT allow nested tags.
            </summary>
            <param name="Found" type="output">String found between delimiters</param>
            <param name="Skipped" type="output">String found before the first delimiter</param>
            <param name="Kind">Index of the delimiters</param>
            <returns>true when an occurrence is found</returns>
        </member>
        <member name="M:metadatalibrary.MsgParser.GetNext(System.String@,System.String@)">
            <summary>
              Find the next occurrence delimited by the defined tags
              This function DOES NOT allow nested tags.
            </summary>
            <param name="Found">String found between delimiters</param>
            <param name="Skipped">String found before the first delimiter</param>
            <returns>true when an occurrence is found</returns>
        </member>
        <member name="T:metadatalibrary.MetaDataRules">
            <summary>
            Fills the field EnforcementRule (ProcedureMessageCollection) of any RowChange in Cs
            </summary>
        </member>
        <member name="M:metadatalibrary.MetaDataRules.DO_CALC_MESSAGES(metadatalibrary.RowChange,System.Boolean[])">
            <summary>
            Query the business logic to get a binary representation of a list
             of error messages to be shown to the user. 
            </summary>
            <param name="R">Change to scan for messages</param>
            <param name="result">Array in which every row represents the need
             to display a corresponding message</param>
        </member>
        <member name="T:metadatalibrary.ProcedureMessage">
            <summary>
            Business Rule Error Message 
            </summary>
        </member>
        <member name="F:metadatalibrary.ProcedureMessage.CanIgnore">
            <summary>
            CanIgnore is true if user is allowed to ignore the message. False if error is Severe
            </summary>
        </member>
        <member name="F:metadatalibrary.ProcedureMessage.PostMsgs">
            <summary>
            True if it's a post-check, false if it is a pre-check
            </summary>
        </member>
        <member name="F:metadatalibrary.ProcedureMessage.LongMess">
            <summary>
            Business Rule Error Message Text
            </summary>
        </member>
        <member name="M:metadatalibrary.ProcedureMessage.GetKey">
            <summary>
            Gets a Key that makes the message unique in the RowChange.EnforceMessages List 
            </summary>
            <returns>RuleID@@@EnforcementID</returns>
        </member>
        <member name="T:metadatalibrary.ProcedureMessageCollection">
            <summary>
            Collection of messages to be displayed to the user
            </summary>
        </member>
        <member name="F:metadatalibrary.ProcedureMessageCollection.CanIgnore">
            <summary>
            CanIgnore is True if Messages are Warning and can be ignored by the user
            	(there are no Severe Errors)
            </summary>
        </member>
        <member name="F:metadatalibrary.ProcedureMessageCollection.PostMsgs">
            <summary>
            PostMsgs is true is Messages are "Post-Messages", i.e. generated after posting all changes to DB
            </summary>
        </member>
        <member name="M:metadatalibrary.ProcedureMessageCollection.ShowMessages">
            <summary>
            Show messages to user and return true if he decided to ignore them
            </summary>
            <returns>true if no messages or messages ignored</returns>
        </member>
        <member name="M:metadatalibrary.ProcedureMessageCollection.AddDBSystemError(System.String)">
            <summary>
            Append a db unrecoverable error  in the list of messages
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:metadatalibrary.ProcedureMessageCollection.AddWarning(System.String)">
            <summary>
            Append a db recoverable error  in the list of messages
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:metadatalibrary.ProcedureMessageCollection.GetMessage(System.Int32)">
            <summary>
            Gets the Message at a specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ProcedureMessageCollection.Add(metadatalibrary.ProcedureMessage)">
            <summary>
            Adds a message to the list, updating CanIgnore status
            </summary>
            <param name="Msg"></param>
        </member>
        <member name="M:metadatalibrary.ProcedureMessageCollection.Add(metadatalibrary.ProcedureMessageCollection)">
            <summary>
             Appends a list of messages to this
            </summary>
            <param name="otherList"></param>
        </member>
        <member name="M:metadatalibrary.ProcedureMessageCollection.SkipMessages(System.Collections.Hashtable)">
            <summary>
            Remove from this list every message in MsgToIgnore
            </summary>
            <param name="MsgToIgnore"></param>
        </member>
        <member name="M:metadatalibrary.ProcedureMessageCollection.AddMessagesToIgnore(System.Collections.Hashtable)">
            <summary>
            Sets an Hashtables with Messages to ignore with all messages contained in this collection
            </summary>
            <param name="MsgToIgnore">Hashtable containg all messages to ignore</param>
        </member>
        <member name="M:metadatalibrary.InnerPosting.hashMessagesToIgnore">
            <summary>
            inner PostData class
            </summary>
        </member>
        <member name="M:metadatalibrary.InnerPosting.initClass(System.Data.DataSet,metadatalibrary.IDataAccess)">
            <summary>
            Called to initialize the class, inside the transaction
            </summary>
            <param name="ds"></param>
            <param name="conn"></param>
        </member>
        <member name="M:metadatalibrary.InnerPosting.mergeMessages(metadatalibrary.ProcedureMessageCollection)">
            <summary>
            Unisce i messaggi dati a quelli finali
            </summary>
            <param name="messages"></param>
        </member>
        <member name="M:metadatalibrary.InnerPosting.afterPost(System.Boolean)">
            <summary>
            Called after data has been committed or rolled back
            </summary>
            <param name="committed"></param>
        </member>
        <member name="T:metadatalibrary.PostData">
            <summary> 
            PostData manages updates to DB Tables
            Necessary pre-conditions are that:
            - DataBase Tables name are the same as DataSet DataTable names
            - Temporary (not belonging to DataBase) table are "marked" with the ExtendedProperty[IsTempTable]!=null
            </summary>	
            <remarks>
            If rows are added to datatable contains ID that have to be evaluated as max+1 from
             the database, additional information have to be put in the ID datacolumn:
             IsAutoIncrement = "s"    -   REQUIRED 
             PrefixField              -   optional 
             MiddleConst              -   optional 
             IDLength                 -   optional
             see RowChange for additional info
            </remarks>
        </member>
        <member name="M:metadatalibrary.PostData.innerDoPostService(System.Collections.Hashtable)">
            <summary>
            Called to  invoke posting data. The assumption is that if it returns empty collection, data should be committed
            </summary>
            <param name="IgnoredMessages"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.PostData.GetEmptyMessageCollection">
            <summary>
            Returns an empty list of error messages
            </summary>
            <returns></returns>
        </member>
        <member name="F:metadatalibrary.PostData.Conn">
            <summary>
            Connection of the main posting process
            </summary>
        </member>
        <member name="F:metadatalibrary.PostData.NullParameter">
            <summary>
            String Constant used to pass null parameter to stored procedures
            </summary>
        </member>
        <member name="F:metadatalibrary.PostData.refresh_dataset">
            <summary>
            refresh dataset rows when update fails
            </summary>
            
        </member>
        <member name="F:metadatalibrary.PostData.autoIgnore">
            <summary>
            Automatically discards non-blocking errors while saving
            </summary>
        </member>
        <member name="P:metadatalibrary.PostData.GetErrorMsg">
            <summary>
            Get last Error message and automatically clears it
            </summary>
        </member>
        <member name="T:metadatalibrary.PostData.singleDatasetPost">
            <summary>
            Manage the posting of a singleDataSet
            </summary>
        </member>
        <member name="F:metadatalibrary.PostData.singleDatasetPost.DS">
            <summary>
            Dataset posted from this class
            </summary>
        </member>
        <member name="F:metadatalibrary.PostData.singleDatasetPost.RowChanges">
            <summary>
            List of rows changed in DS
            </summary>
        </member>
        <member name="F:metadatalibrary.PostData.singleDatasetPost.lasterror">
            <summary>
            Last error occurred in this posting class
            </summary>
        </member>
        <member name="M:metadatalibrary.PostData.singleDatasetPost.ChangeList(System.Data.DataSet)">
            <summary>
             Evaluates the list of the changes to apply to the DataBase, in the order they
             should be "reasonably" done:
             All operation on None
             Deletes on  Child 
             Deletes on Both
             Deletes on Parent
             Insert, Update on Parent
             Insert, Update on Both (in the evaluated list - reversed order )
             Insert, Update on Child
             Excluding all temporary table!
            </summary>
            <param name="Original">DataBase to be scanned for changes</param>
            <returns>List of changes to be done, in a reasonably good order</returns>
        </member>
        <member name="M:metadatalibrary.PostData.singleDatasetPost.do_Classify(System.Data.DataSet,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Classifies DataTables as: 
             None,Child,Parent,Both ("Both" = Child and Parent)
              If a DataTable is in "Both", it should possibly appear before it's parent 
              DataTable, if it is also in "Both".
            </summary>
            <param name="D">DataSet to classify</param>
            <param name="None" type="output">Unrelated DataTables</param>
            <param name="Child" type="output">DataTables linked as Child in some Relation</param>
            <param name="Parent" type="output">DataTables linked as Parent in some Relation</param>
            <param name="Both" type="output">DataTables linked as Child in some Relation, and
            as Parent in some (other) Relation</param>
        </member>
        <member name="M:metadatalibrary.PostData.singleDatasetPost.AddTablesOps(metadatalibrary.RowChangeCollection,System.Collections.ArrayList,System.Data.DataRowState,System.Boolean)">
            <summary> 
             Adds all Rows (of every Tables referred by "Tables")with a specified State  
             to Result list.
            </summary>
            <param name="Result" type="output">Updated list of all specified rows</param>
            <param name="Tables">Name list of the DataTables to scan</param>
            <param name="State">Row state to consider</param>
            <param name="reverse">true if Tables is to be scanned in reverse order</param>
        </member>
        <member name="F:metadatalibrary.PostData.singleDatasetPost.Rules">
            <summary>
            Rules that must be applied for the current set of changes
            </summary>
        </member>
        <member name="M:metadatalibrary.PostData.singleDatasetPost.#ctor(System.Data.DataSet,metadatalibrary.IDataAccess,metadatalibrary.PostData)">
            <summary>
            Posting class that saves a single DataSet with a specified DataAccess
            </summary>
            <param name="DS"></param>
            <param name="Conn"></param>
            <param name="p">main Posting class</param>
        </member>
        <member name="M:metadatalibrary.PostData.singleDatasetPost.startPosting(metadatalibrary.IDataAccess)">
            <summary>
            Send a message of startPosting to a privateConn if different from postConn
            </summary>
            <param name="postConn"></param>
        </member>
        <member name="M:metadatalibrary.PostData.singleDatasetPost.stopPosting(metadatalibrary.IDataAccess)">
            <summary>
            Send a message of stopPosting to a privateConn if different from postConn
            </summary>
            <param name="postConn"></param>
        </member>
        <member name="M:metadatalibrary.PostData.singleDatasetPost.prepareForPosting">
            <summary>
            Evalueates autoincrement values, completes the row to be changed with createuser,createtimestamp,
            lastmoduser, lastmodtimestamp fields, depending on the operation type
             and eventually calls CalculateFields for each DataRow involved.
             This must be done OUTSIDE the transaction.
            </summary>
        </member>
        <member name="F:metadatalibrary.PostData.singleDatasetPost.precheck_msg">
            <summary>
            Collection of PRE- checks
            </summary>
        </member>
        <member name="M:metadatalibrary.PostData.singleDatasetPost.DO_PRE_CHECK(System.Collections.Hashtable)">
            <summary>
            Call pre- checks and fill precheck_msg
            </summary>
            <returns>true if the changes on the DataSet are possible</returns>              
            <remarks>Related Row must have been already filled</remarks>
        </member>
        <member name="M:metadatalibrary.PostData.singleDatasetPost.getJournal">
            <summary>
            Gets the Journaling class connected for the posting operation
            </summary>
        </member>
        <member name="M:metadatalibrary.PostData.singleDatasetPost.DoJournal">
            <summary>
            Save all change log (journal) to database
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.PostData.singleDatasetPost.SILENT_DO_PRE_CHECK(System.Collections.Hashtable)">
            <summary>
            As above, but returns the error collection. Also sets precheck_msg
            </summary>
        </member>
        <member name="M:metadatalibrary.PostData.singleDatasetPost.DO_POST_CHECK(System.Collections.Hashtable)">
            <summary>
            Query the Business logic to establish whether the operation 
             violates any non ignorable Post-Checks. If it happens, returns false
            </summary>
            <returns>true if the changes on the DataSet are possible</returns>              
            <remarks>Related rows must have been already filled</remarks>
        </member>
        <member name="M:metadatalibrary.PostData.singleDatasetPost.DO_PHYSICAL_POST_BATCH">
            <summary>
            Write all changed rows to db, returns true if succeeds
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.PostData.singleDatasetPost.RESELECT(System.Data.DataRow,System.Data.DataRowVersion)">
            <summary>
            Re-fetch a row from DB by primary key
            </summary>
            <param name="R"></param>
            <param name="ver"></param>
        </member>
        <member name="M:metadatalibrary.PostData.singleDatasetPost.ReselectAllViews">
            <summary>
            Reads from DB all views that contains data from other tables than 
             primary table of the view 
            </summary>
        </member>
        <member name="F:metadatalibrary.PostData.DS">
            <summary>
            DataSet beng posted
            </summary>
        </member>
        <member name="M:metadatalibrary.PostData.GetNewRowChange(System.Data.DataRow)">
            <summary>
            Return a new RowChange linked to a Row
            </summary>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.PostData.SetPostingOrder(System.Data.DataTable,System.String)">
            <summary>
            Set the row order for posting a table to db
            </summary>
            <param name="T"></param>
            <param name="order"></param>
        </member>
        <member name="M:metadatalibrary.PostData.GetPostingOrder(System.Data.DataTable)">
            <summary>
            Gets the order for posting rows in the db
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.PostData.GetOptimisticClause(System.Data.DataRow)">
            <summary>
            Gives a string for using as a condition to test for assuring that no
             changes have been made to the row to update/delete since it was read. 
             Uses Posting Table/Columns names
            </summary>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.PostData.silentDoAllPrecheck(metadatalibrary.ProcedureMessageCollection,System.Collections.Hashtable)">
            <summary>
            Se le regole in input non sono ignorabili restituisce il set in input. Altrimenti calcola un nuovo set di regole PRE.
            </summary>
            <param name="resultList"></param>
            <param name="ignoredMessages">Messages to ignore</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.PostData.Can_Post(System.Data.DataRow)">
            <summary>
            Should return true if it is allowed to Post a DataRow to DB
            As Default returns Conn.CanPost(R)
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.PostData.#ctor">
            <summary>
            Constructor. After building a PostData, it's necessary to call
             InitClass.
            </summary>
        </member>
        <member name="M:metadatalibrary.PostData.GetRules(metadatalibrary.RowChangeCollection)">
            <summary>
            Gets the set of business rule for a given set of changes
            </summary>
            <param name="Cs"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.PostData.MarkAsTemporaryTable(System.Data.DataTable,System.Boolean)">
            <summary>
            Tells MDE that a table is temporary and should 
             not be used for calling stored procedure, messages, logs, or updates.
            Temporary tables are never read or written to db by the library
            </summary>
            <param name="T">Table to mark</param>
            <param name="createblankrow">true if a row has to be added to table</param>
        </member>
        <member name="M:metadatalibrary.PostData.IsTemporaryTable(System.Data.DataTable)">
            <summary>
            Returns true if a DataTable has been marked as Temporary
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.PostData.MarkAsRealTable(System.Data.DataTable)">
            <summary>
            Undo "MarkAsTemporaryTable"
            </summary>
            <param name="T"></param>
        </member>
        <member name="P:metadatalibrary.PostData.dbConn">
            <summary>
            Connection to database
            </summary>
        </member>
        <member name="F:metadatalibrary.PostData.allPost">
            <summary>
            List of PostData classes that concurr in the transaction
            </summary>
        </member>
        <member name="M:metadatalibrary.PostData.InitClass(System.Data.DataSet,metadatalibrary.DataAccess)">
            <summary>
            Initialize PostData. Must be called before DO_POST
            </summary>
            <param name="ds">DataSet to handle</param>
            <param name="conn">Connection to the DataBase</param>
            <remarks>This function must be called AFTER the changes have
             been applied to DS.</remarks>
            <returns>error string if errors, null otherwise</returns>        
        </member>
        <member name="M:metadatalibrary.PostData.initClass(System.Data.DataSet,metadatalibrary.IDataAccess)">
            <summary>
            Initialize PostData. Must be called before DO_POST
            </summary>
            <param name="ds">DataSet to handle</param>
            <param name="conn">Connection to the DataBase</param>
            <remarks>This function must be called AFTER the changes have
             been applied to DS.</remarks>
            <returns>error string if errors, null otherwise</returns>   
        </member>
        <member name="M:metadatalibrary.PostData.DO_CALL_CHECKS(System.Boolean,metadatalibrary.RowChangeCollection)">
            <summary>
            Calls business logic and return error messages
            </summary>
            <param name="post">if true, it is a "AFTER-POST" check</param>
            <param name="RC">Collection of changes posted to the DB</param>
            <returns>Collection of Error/warings</returns>
        </member>
        <member name="M:metadatalibrary.PostData.CheckForFalseUpdate(System.Data.DataRow)">
            <summary>
            returns true if row (modified) is an improperly set modified row
            </summary>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.PostData.RemoveFalseUpdates(System.Data.DataSet)">
            <summary>
            Remove false update from a DataSet, i.e. calls AcceptChanges
             for any DataRow set erroneously as modified
            </summary>
            <param name="DS"></param>
        </member>
        <member name="M:metadatalibrary.PostData.hasChanges(System.Data.DataTable)">
            <summary>
            Check if table contains any row not in Unchanged state
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.PostData.CheckRowForUpdates(System.Data.DataRow)">
            <summary>
            return true if row has really been modified
            </summary>
            <param name="R"></param>
        </member>
        <member name="M:metadatalibrary.PostData.GetJournal(metadatalibrary.DataAccess,metadatalibrary.RowChangeCollection)">
            <summary>
            Gets a new DataJournaling object 
            </summary>
            <param name="Conn"></param>
            <param name="Cs"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.PostData.getJournal(metadatalibrary.IDataAccess,metadatalibrary.RowChangeCollection)">
            <summary>
            Gets a new DataJournaling object 
            </summary>
            <param name="Conn"></param>
            <param name="Cs"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.PostData.someChange">
            <summary>
            Checks if there is any rowchange in all dataset
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.PostData.prepareForPosting">
            <summary>
            Completes the row to be changed with createuser,createtimestamp,
            lastmoduser, lastmodtimestamp fields, depending on the operation type
             and calls CalculateFields for each DataRow involved.
             This CAN be done OUTSIDE the transaction.
            </summary>
        </member>
        <member name="M:metadatalibrary.PostData.reselectAllViewsAndAcceptChanges">
            <summary>
            Reads all data about views (also in inner posting classes)
            </summary>
        </member>
        <member name="M:metadatalibrary.PostData.IgnoreMessages(metadatalibrary.ProcedureMessageCollection)">
            <summary>
            Fills the list of ignored messages with the collection specified
            </summary>
            <param name="msgs"></param>
        </member>
        <member name="M:metadatalibrary.PostData.recursiveCallAfterPost(System.Boolean)">
            <summary>
            Call afterPost on all inner posting classes
            </summary>
            <param name="committed"></param>
        </member>
        <member name="M:metadatalibrary.PostData.DO_POST">
            <summary>
            Do ALL the necessary operation about posting data to DataBase. 
            If fails, rolles back all (eventually) changes made.
            Management of the transaction commit / rollback is done HERE!
            </summary>
            <returns>true if success</returns>
            <remarks>If it succeeds, DataSet.AcceptChanges should be called</remarks>
        </member>
        <member name="M:metadatalibrary.PostData.internalDoPostService">
            <summary>
            
            </summary>
            <param name="inner">True if executed inside an outer transaction</param>
            <returns></returns>
        </member>
        <member name="F:metadatalibrary.PostData.innerPosting">
            <summary>
            True if this posting is placed insider another posting
            </summary>
        </member>
        <member name="M:metadatalibrary.PostData.DO_POST_SERVICE">
            <summary>
            Do ALL the necessary operation about posting data to DataBase. 
            If fails, rolles back all (eventually) changes made.
            Management of the transaction commit / rollback is done HERE!
            </summary>
            <returns>An empty Message Collection if success, Null if severe errors</returns>
            <remarks>If it succeeds, DataSet.AcceptChanges should be called</remarks>
        </member>
        <member name="T:metadatalibrary.PostData.DoExternalUpdateDelegate">
            <summary>
            Updates a remote service with data involved in this transaction
            </summary>
            <param name="D"></param>
            <param name="ErrMsg">Error msg or null if all ok</param>
            <returns>true if operation has been correctly performed</returns>
        </member>
        <member name="F:metadatalibrary.PostData.DoExternalUpdate">
            <summary>
            Delegate to be runned when DataSet has been posted on db, before committing the transaction.
            If it throws an exception the transaction is rolledback and the Exception message showed to the user
            </summary>
        </member>
        <member name="M:metadatalibrary.Base_InnerPoster.hashMessagesToIgnore">
            <summary>
            inner PostData class
            </summary>
        </member>
        <member name="M:metadatalibrary.Base_InnerPoster.initClass(System.Data.DataSet,metadatalibrary.IDataAccess)">
            <summary>
            Called to initialize the class, inside the transaction
            </summary>
            <param name="ds"></param>
            <param name="conn"></param>
        </member>
        <member name="M:metadatalibrary.Base_InnerPoster.mergeMessages(metadatalibrary.ProcedureMessageCollection)">
            <summary>
            Unisce i messaggi dati a quelli finali
            </summary>
            <param name="messages"></param>
        </member>
        <member name="M:metadatalibrary.Base_InnerPoster.afterPost(System.Boolean)">
            <summary>
            Called after data has been committed or rolled back
            </summary>
            <param name="committed"></param>
        </member>
        <member name="M:metadatalibrary.Base_InnerPoster.getInnerPosting">
            <summary>
            Get inner posting class
            </summary>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.AddLabel">
            <summary>
              Looks up a localized string similar to Aggiungi.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.AdviceLabel">
            <summary>
              Looks up a localized string similar to Avviso.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.amount">
            <summary>
              Looks up a localized string similar to Importo.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.askSaveChanges">
            <summary>
              Looks up a localized string similar to Salvare le modifiche?.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.attachmentTooBig">
            <summary>
              Looks up a localized string similar to Gli allegati sono troppo grandi, non saranno modificati. Esco comunque?.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.badExport">
            <summary>
              Looks up a localized string similar to Esportazione errata.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.bold">
            <summary>
              Looks up a localized string similar to Grassetto.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.bugOfficeXp">
            <summary>
              Looks up a localized string similar to A causa di un bug di Office, documentato qui: http://support.microsoft.com/kb/320369 è necessario installare Microsoft Office XP Multilingual User Interface Pack..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.cancel">
            <summary>
              Looks up a localized string similar to Annulla.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.cantCloseWait">
            <summary>
              Looks up a localized string similar to La chiusura del form è temporaneamente inibita, attendere..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.cantDeleteObject">
            <summary>
              Looks up a localized string similar to Impossibile eliminare l&apos;oggetto..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.childFormStillOpened">
            <summary>
              Looks up a localized string similar to Per chiudere una maschera è necessario prima chiudere le maschere da essa dipendenti..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.cmdInvalidatedTransaction">
            <summary>
              Looks up a localized string similar to Il comando {cmd} ha invalidato la transazione.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.colRequired">
            <summary>
              Looks up a localized string similar to E&apos; necessario selezionare una colonna.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.columnName">
            <summary>
              Looks up a localized string similar to Nome colonna.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.conditionSetWas">
            <summary>
              Looks up a localized string similar to La condizione di ricerca impostata era: &apos;{filter}&apos;..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.confirmDeleteListType">
            <summary>
              Looks up a localized string similar to Sei sicuro di voler eliminare l&apos;elenco {listType}.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.confirmDeleting">
            <summary>
              Looks up a localized string similar to Sei sicuro di voler cancellare?.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.confirmTitle">
            <summary>
              Looks up a localized string similar to Conferma.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.couldNotLinkTable">
            <summary>
              Looks up a localized string similar to Non sono riuscito a collegare la riga alla tabella {tableName} nel metadato {name}.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.couldNotSelectRow">
            <summary>
              Looks up a localized string similar to La voce selezionata non poteva essere scelta..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.createdAt">
            <summary>
              Looks up a localized string similar to Creato il {data}.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.createdBy">
            <summary>
              Looks up a localized string similar to Creato da {user}.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.CreateLastMod">
            <summary>
              Looks up a localized string similar to Creazione/Ultima Modifica.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.CreateTicketLabel">
            <summary>
              Looks up a localized string similar to Crea ticket.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.DataDictionary">
            <summary>
              Looks up a localized string similar to Dizionario dati.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.dataFolder">
            <summary>
              Looks up a localized string similar to Foglio Dati.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.dbConnectionInterrupted">
            <summary>
              Looks up a localized string similar to La connessione al db è stata interrotta. E&apos; necessario disconnettersi, ripristinare la rete e riconnettersi al db..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.dbFieldName">
            <summary>
              Looks up a localized string similar to Nome campo su DB.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.dbTableName">
            <summary>
              Looks up a localized string similar to Tabella sul db.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.Delete">
            <summary>
              Looks up a localized string similar to Elimina.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.DeleteCancelLabel">
            <summary>
              Looks up a localized string similar to Elimina/Annulla.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.deleteFromTable">
            <summary>
              Looks up a localized string similar to Cancello l&apos;oggetto {name} dalla tabella {tableName}.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.DeleteLable">
            <summary>
              Looks up a localized string similar to Cancella.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.deleteSelectedRowFromTable">
            <summary>
              Looks up a localized string similar to Cancello la riga selezionata dalla tabella {name}({tableName}).
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.description">
            <summary>
              Looks up a localized string similar to descrizione.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.DoSearchLabel">
            <summary>
              Looks up a localized string similar to Effettua Ricerca.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.doSysCmdError">
            <summary>
              Looks up a localized string similar to DO_SYSCMD: Error running {cmd} Result got: {res}.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.EditLable">
            <summary>
              Looks up a localized string similar to Correggi.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.emptyExport">
            <summary>
              Looks up a localized string similar to Esportazione vuota.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.EmptyWithinPar">
            <summary>
              Looks up a localized string similar to (vuoto).
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.errOpeningDuringSave">
            <summary>
              Looks up a localized string similar to Errore aprendo la connessione nel salvataggio.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.errorDeletingListType">
            <summary>
              Looks up a localized string similar to Impossibile eliminare l&apos;elenco  {listType}.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.ErrorEmptyField">
            <summary>
              Looks up a localized string similar to Un determinato campo non può essere vuoto..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.ErrorEmptyKey">
            <summary>
              Looks up a localized string similar to Un campo chiave non può essere vuoto o duplicato..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.errorExportingExcel">
            <summary>
              Looks up a localized string similar to Errore durante l&apos;esportazione in Excel. Riprovare e se l&apos;errore persiste contattare l&apos;assistenza..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.errorLoadingMeta">
            <summary>
              Looks up a localized string similar to Errore nel caricamento del metadato {unaliased}. E&apos; necessario riavviare il programma..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.errorOpeningConnection">
            <summary>
              Looks up a localized string similar to Errore aprendo la connessione.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.errorRunningCommand">
            <summary>
              Looks up a localized string similar to Errore nell&apos;esecuzione del comando {command}.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.errorRunningCommandCloseWindow">
             <summary>
               Looks up a localized string similar to Errore eseguendo il comando {cmd}
            E&apos; necessario chiudere la maschera..
             </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.errorSelectingRow">
            <summary>
              Looks up a localized string similar to Errore nella selezione della riga.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.errorShowingForm">
            <summary>
              Looks up a localized string similar to Errore nella visualizzazione del form.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.ErrorTitle">
            <summary>
              Looks up a localized string similar to Errore.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.fontName">
            <summary>
              Looks up a localized string similar to Tipo carattere.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.fontSize">
            <summary>
              Looks up a localized string similar to Dimensione carattere.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.impossibleToDeleteConditions">
            <summary>
              Looks up a localized string similar to Impossibile eliminare le condizioni.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.impossibleToSaveCondition">
            <summary>
              Looks up a localized string similar to Impossibile salvare la condizione.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.InfoAboutObject">
            <summary>
              Looks up a localized string similar to Informazioni sull&apos;oggetto.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.insertCancelOnTable">
            <summary>
              Looks up a localized string similar to Annullo l&apos;inserimento dell&apos;oggetto {name} nella tabella {tableName}.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.InsertCopyConfirm">
            <summary>
              Looks up a localized string similar to E&apos; stato premuto il tasto inserisci copia. Si desidera davvero creare una copia dei dati già salvati?.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.InsertCopyLabel">
            <summary>
              Looks up a localized string similar to Inserisci copia.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.InsertLabel">
            <summary>
              Looks up a localized string similar to Inserisci.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.invalidDataOnTable">
            <summary>
              Looks up a localized string similar to La tabella {tableName} contiene dati non validi. Contattare il servizio di assistenza..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.invalidDate">
            <summary>
              Looks up a localized string similar to Data non valida.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.italic">
            <summary>
              Looks up a localized string similar to Corsivo.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.list">
            <summary>
              Looks up a localized string similar to Elenco.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.listColPos">
            <summary>
              Looks up a localized string similar to Posizione colonna.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.listNameIs">
            <summary>
              Looks up a localized string similar to Nome Elenco: &apos;{listingType}&apos;..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.ListOfName">
            <summary>
              Looks up a localized string similar to Elenco {name}.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.modifiedAt">
            <summary>
              Looks up a localized string similar to Modificato il {data}.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.modifiedBy">
            <summary>
              Looks up a localized string similar to Modificato da {user}.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.moreThanOneRowInTable">
            <summary>
              Looks up a localized string similar to Errore: C&apos;è più di una riga nella tabella {table}.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.noConditionUsed">
            <summary>
              Looks up a localized string similar to Nessuna condizione è stata usata..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.NoElementFound">
            <summary>
              Looks up a localized string similar to Nessun elemento trovato..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.noObjectFound">
            <summary>
              Looks up a localized string similar to Nessun oggetto trovato.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.NoRowFound">
            <summary>
              Looks up a localized string similar to Nessuna riga trovata..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.noRowFoundInTable">
            <summary>
              Looks up a localized string similar to Nella tabella &apos;{table}&apos; non è stata trovata alcuna riga..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.NotesLabel">
            <summary>
              Looks up a localized string similar to Appunti.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.noValidTransaction">
            <summary>
              Looks up a localized string similar to La transazione corrente non è più valida.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.OpenRelatedDocument">
            <summary>
              Looks up a localized string similar to Apri documento collegato.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.operatorRequired">
            <summary>
              Looks up a localized string similar to E&apos; necessario selezionare un operatore.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.overallTotal">
            <summary>
              Looks up a localized string similar to Totale Complessivo.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.primaryKeyConflict">
            <summary>
              Looks up a localized string similar to E&apos; stata inserita una riga con la stessa chiave primaria di un altra esistente.  E&apos; necessario modificare i dati immessi per salvarli..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.readObjArrayError">
            <summary>
              Looks up a localized string similar to readObjectArray: Error running {query}.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.RefreshLabel">
            <summary>
              Looks up a localized string similar to Aggiorna.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.result">
            <summary>
              Looks up a localized string similar to risultato.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.rowNotFound">
            <summary>
              Looks up a localized string similar to Riga richiesta non trovata.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.SaveLabel">
            <summary>
              Looks up a localized string similar to Salva.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.saving">
            <summary>
              Looks up a localized string similar to Salvataggio.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.SearchWithinPar">
            <summary>
              Looks up a localized string similar to (Ricerca).
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.selectedRowNotPresent">
            <summary>
              Looks up a localized string similar to La riga selezionata non è più presente nel db..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.selectFile">
            <summary>
              Looks up a localized string similar to Seleziona il file da creare.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.SelectLabel">
            <summary>
              Looks up a localized string similar to Seleziona.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.SetSearchLabel">
            <summary>
              Looks up a localized string similar to Imposta Ricerca.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.stillNotOpenedForm">
            <summary>
              Looks up a localized string similar to Attendere l&apos;apertura del form per chiuderlo!.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.StringTooLong">
            <summary>
              Looks up a localized string similar to Campo troppo lungo.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.TableFilterApplied">
             <summary>
               Looks up a localized string similar to Tabella:{searchTable}
            Filtro applicato:{checkfilter}.
             </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.TableMiddleInMemory">
            <summary>
              Looks up a localized string similar to Tabella:{middle} presente in memoria..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.title">
            <summary>
              Looks up a localized string similar to Titolo.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.total">
            <summary>
              Looks up a localized string similar to Totale.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.underline">
            <summary>
              Looks up a localized string similar to Sottolineato.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.unsavedDataWarn">
            <summary>
              Looks up a localized string similar to Ci sono modifiche ai dati non salvate. Si desidera perdere le modifiche?.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.valueRequired">
            <summary>
              Looks up a localized string similar to E&apos; necessario inserire un valore.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.visible">
            <summary>
              Looks up a localized string similar to Visibile.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.waitForCommandCompletion">
            <summary>
              Looks up a localized string similar to Attendere la fine dell&apos;esecuzione del comando.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.waitForOperationEnd">
            <summary>
              Looks up a localized string similar to Attendere il completamento dell&apos;operazione per chiudere il form..
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.WarningLabel">
            <summary>
              Looks up a localized string similar to Attenzione.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.width">
            <summary>
              Looks up a localized string similar to Larghezza.
            </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.windowMustBeClosed">
             <summary>
               Looks up a localized string similar to Per poter procedere è necessario CHIUDERE la finestra con cui si stava lavorando e ripetere l&apos;operazione.
            E&apos; consigliabile ad ogni modo chiamare il servizio assistenza lasciando aperta questa schermata..
             </summary>
        </member>
        <member name="P:metadatalibrary.Properties.Resources.wrongData">
            <summary>
              Looks up a localized string similar to Dati errati.
            </summary>
        </member>
        <member name="T:metadatalibrary.QueryCreator">
            <summary>
            Help class to build SQL statements
            </summary>
        </member>
        <member name="F:metadatalibrary.QueryCreator.IsTempColumn">
            <summary>
            Extended property that means that the column does not really belong to 
              a real table. For example, expression-like column
            </summary>
        </member>
        <member name="M:metadatalibrary.QueryCreator.GetErrorString(System.Exception)">
            <summary>
            Get a string representation of an Exception (includes InnerException)
            </summary>
            <param name="E"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.ShowException(System.Windows.Forms.Form,System.String,System.Exception,System.String)">
            <summary>
            Show an exception  and an error message and eventually log to server
            </summary>
            <param name="f">calling form</param>
            <param name="msg">error message to show</param>
            <param name="e">Exception to show</param>
            <param name="logUrl">log server url</param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.ShowException(System.Windows.Forms.Form,System.String,System.Exception)">
            <summary>
            Shows an exception and an error message 
            </summary>
            <param name="F"></param>
            <param name="msg"></param>
            <param name="E"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.ShowException(System.String,System.Exception)">
            <summary>
            Shows an exception with an error message
            </summary>
            <param name="msg"></param>
            <param name="E"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.ShowException(System.String,System.Exception,System.String)">
            <summary>
            Shows an exception with an error message, logging to server
            </summary>
            <param name="msg"></param>
            <param name="E"></param>
            <param name="logurl"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.ShowException(System.Exception)">
            <summary>
            Shows an exception
            </summary>
            <param name="E"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.ShowException(System.Exception,metadatalibrary.MetaData)">
            <summary>
            Shows an exception logs metadata context
            </summary>
            <param name="E"></param>
            <param name="m"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.showException(System.Exception,metadatalibrary.IMetaData)">
            <summary>
            Shows an exception logs metadata context
            </summary>
            <param name="E"></param>
            <param name="m"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.ShowException(System.Exception,System.String)">
            <summary>
            Shows an exception an log it to server
            </summary>
            <param name="E"></param>
            <param name="logurl"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.ShowError(System.Windows.Forms.Form,System.String,System.String)">
            <summary>
            Shows a message error with an optional explanation
            </summary>
            <param name="F"></param>
            <param name="MainMessage"></param>
            <param name="LongMessage"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.ShowError(System.Windows.Forms.Form,System.String,System.String,System.String)">
            <summary>
            Shows a message error with an optional explanation and logs to server
            </summary>
            <param name="F"></param>
            <param name="MainMessage"></param>
            <param name="LongMessage"></param>
            <param name="logUrl"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.EmptyDate">
            <summary>
            Internal representation of an "Empty Date". It is used to store 
             "blank" dates where DateTime field does not allow null
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.CheckKey(System.Data.DataTable,System.Data.DataTable@)">
            <summary>
            Checks that primary key of Temp is the same of Source
            </summary>
            <param name="Source"></param>
            <param name="Temp"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.MergeDataTable(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Merge ToMerge rows into OutTable. Tables should have a primary key
             set in order to use this function.
            </summary>
            <param name="outTable"></param>
            <param name="toMerge"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.MarkEvent(System.String)">
            <summary>
            Write a string to the debugger output
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.WarnEvent(System.String)">
            <summary>
            Write a string to the debugger output
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.GetPrintable(System.String)">
            <summary>
            Returns a printable version of a message fixing newlines to  CR LF
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.clearValue(System.Data.DataColumn)">
            <summary>
            Sets a field to DBNull (or -1(int)  or 0-like values when DBNull is not allowed)
            </summary>
            <param name="R"></param>
            <param name="C"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.ClearField(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Sets a field to DBNull (or -1(int)  or 0-like values when DBNull is not allowed)
            </summary>
            <param name="R"></param>
            <param name="C"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.CopyViewFieldFromParentTable(System.Data.DataRow,System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Copy parent table fields to a view when possible
            </summary>
            <param name="ViewRow"></param>
            <param name="Parent"></param>
            <param name="ParentRow"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.ClearRow(System.Data.DataRow)">
            <summary>
            Sets to "zero" or "" all columns of a row that does not allow nulls
            </summary>
            <param name="R"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.Quote(System.String)">
            <summary>
            Returns a string quoted, in order to be included in a sql command
            </summary>
            <param name="S"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.quotedstrvalue(System.Object,System.Type,System.Boolean)">
            <summary>
            Gets a quoted representation of O, or "null" (unquoted) if O==null/DBNull
            </summary>
            <param name="O"></param>
            <param name="T"></param>
            <param name="SQL"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.SetTableForPosting(System.Data.DataTable,System.String)">
            <summary>
            Sets the table that must be used for write values of a DataTable into DB
            </summary>
            <param name="T"></param>
            <param name="TableForPosting"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.PostingTableName(System.Data.DataTable)">
            <summary>
            Gets the table that must be used for write values of a given DataTable into DB.
            If a posting table has not been defined, the "Real" table (unaliased) is used.
            If an alias has not been defined, T.TableName is returned.
            </summary>
            <param name="T"></param>
            <returns>Name of Table that must be used for reading into T</returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.GetLinkedGrid(System.Data.DataTable)">
            <summary>
            Get the DataTable linked to a grid
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.SetLinkedGrid(System.Data.DataTable,System.Windows.Forms.DataGrid)">
            <summary>
            Links a DataTable to a grid
            </summary>
            <param name="T"></param>
            <param name="G"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.SetColumnNameForPosting(System.Data.DataColumn,System.String)">
            <summary>
            To avoid posting of a field, it's posting col name must be "" (not null)
            </summary>
            <param name="C"></param>
            <param name="ColumnForPosting"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.GetInsertFilter(System.Data.DataTable)">
            <summary>
            Gets the filter to be used in insert operation for a table
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.SetInsertFilter(System.Data.DataTable,System.String)">
            <summary>
            Sets the filter to be used in insert operation for a table
            </summary>
            <param name="T"></param>
            <param name="S"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.GetSearchFilter(System.Data.DataTable)">
            <summary>
            Gets the filter to be used in search operation for a table
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.SetSearchFilter(System.Data.DataTable,System.String)">
            <summary>
            Sets the filter to be used in search operation for a table
            </summary>
            <param name="T"></param>
            <param name="S"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.setSkipInsertCopy(System.Data.DataTable,System.Boolean)">
            <summary>
            skip this table when insertcopy command is invoked
            </summary>
            <param name="t"></param>
            <param name="skip"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.SkipInsertCopy(System.Data.DataTable)">
            <summary>
            check if  this table is to skip when insertcopy command is invoked
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.MyClear(System.Data.DataTable)">
            <summary>
            Clears a DataTable setting the rowindex of the linked grid to 0
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.PostingColumnName(System.Data.DataColumn)">
            <summary>
            Gets the Column name to use for posting a given field into DB
            </summary>
            <param name="C"></param>
            <returns>null if column is not for posting</returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.GetMiddleTable(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Gets the common child of two tables
            </summary>
            <param name="Parent1"></param>
            <param name="Parent2"></param>
            <returns>Common child Table</returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.SetViewExpression(System.Data.DataColumn,System.String)">
            <summary>
            Sets the view Expression for a DataColumn. Ex. bilancio.codicebilancio
            </summary>
            <param name="C"></param>
            <param name="expr"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.ViewExpression(System.Data.DataColumn)">
            <summary>
            Gets the view expression assigned to a DataColumn
            </summary>
            <param name="C"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.GetRelationActivationFilter(System.Data.DataRelation)">
            <summary>
            get the general condition in order to activate a datarelation during getdata phase
            </summary>
            <param name="Rel"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.SetRelationActivationFilter(System.Data.DataRelation,System.String)">
            <summary>
            set the general condition in order to activate a datarelation during getdata phase
            </summary>
            <param name="Rel"></param>
            <param name="filter"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.GetParentRelationActivationFilter(System.Data.DataRelation)">
            <summary>
            get the condition on parent in order to activate a datarelation during getdata phase
            </summary>
            <param name="Rel"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.SetParentRelationActivationFilter(System.Data.DataRelation,System.String)">
            <summary>
             set the condition on parent in order to activate a datarelation during getdata phase
            </summary>
            <param name="Rel"></param>
            <param name="filter"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.SetFilterForInsert(System.Data.DataTable,System.String)">
            <summary>
            Set filter to fill the table when attaced to a combobox and main row is in insert mode
            </summary>
            <param name="T"></param>
            <param name="filter"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.GetFilterForInsert(System.Data.DataTable)">
            <summary>
            Get filter to fill the table when attaced to a combobox and main row is in insert mode
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.SetFilterForSearch(System.Data.DataTable,System.String)">
            <summary>
            Set filter to fill the table when attaced to a combobox and main row is in search mode
            </summary>
            <param name="T"></param>
            <param name="filter"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.GetFilterForSearch(System.Data.DataTable)">
            <summary>
             Get filter to fill the table when attaced to a combobox and main row is in search mode
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.unquotedstrvalue(System.Object,System.Type,System.Boolean)">
            <summary>
            Build a string that represents the Object O of type T.
            </summary>
            <param name="O">Object to display in the output string</param>
            <param name="T">Base Type of O</param>
            <param name="SQL">if true, result can be used for building SQL commands</param>
            <returns>String representation of O</returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.ByteArrayToString(System.Byte[])">
            <summary>
            Converts a byte array into a string (something like base64)
            </summary>
            <param name="buf"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.StringToByteArray(System.String)">
            <summary>
            Converts a string back to a byte array
            </summary>
            <param name="S"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.CrystalValue(System.Object,System.Type)">
            <summary>
            Build a string that represents the Object O of type T. This string
             is built so that it can be used in a SQL instruction for assigning in
             VALUES lists.
            </summary>
            <param name="O">Object to display in the output string</param>
            <param name="T">Base Type of O</param>
            <returns>String representation of O</returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.quotedstrvalue(System.Object,System.Boolean)">
            <summary>
            Gets the quoted representation of an object
            </summary>
            <param name="O"></param>
            <param name="SQL">if true, SQL compatible strings are used</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.unquotedstrvalue(System.Object,System.Boolean)">
            <summary>
            Gets the string (unquoted) representing an object
            </summary>
            <param name="O"></param>
            <param name="SQL">if true, SQL compatible representation are used</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.comparefields(System.String,System.Object,System.Type,System.Boolean)">
            <summary>
            Returns a SQL condition that tests a field name to be EQUAL to an 
             object O of type T. 
            </summary>
            <param name="fieldname">Name of the field that appears in the result</param>
            <param name="O">Value to compare with the field</param>
            <param name="T">Base type of O</param>
            <param name="SQL">if true, SQL compatible strings are used</param>
            <returns>"(fieldname='...')" or "(fieldname IS NULL)"</returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.comparelikefields(System.String,System.Object,System.Type,System.Boolean)">
            <summary>
             Returns a SQL condition that tests a field name to be LIKE an 
             object O of type T, if the string representation of O contains
             a % character, or EQUAL if it does not happen.
            </summary>
            <param name="fieldname">Name of the field that appears in the result</param>
            <param name="O">Value to compare with the field</param>
            <param name="T">Base type of O</param>
            <param name="SQL">if true, a SQL string is returned</param>
            <returns>"(fieldname='...')" or "(fieldname LIKE '...')"</returns>
            <remarks>Does not manages NULL values of O</remarks>
        </member>
        <member name="M:metadatalibrary.QueryCreator.WHERE_CLAUSE(System.Data.DataRow,System.Data.DataRowVersion,System.Boolean,System.Boolean)">
            <summary>
            Creates a string like: (field1='..') and (field2='..') ...
              for all real (not expression or temporary) fields of a datarow
              if forposting=true uses posting-columnnames for columnsnames
            </summary>
            <param name="R">Row to consider for the values to compare</param>
            <param name="ver">Version of Data in the row to consider</param>
            <param name="forposting">if posting table/columns must be used</param>
            <param name="SQL">if true, SQL representation for values are used</param>
            <returns>condition string on all values</returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.WHERE_COLNAME_CLAUSE(System.Data.DataRow,System.String[],System.Data.DataRowVersion,System.Boolean)">
            <summary>
            Gets a filter string that compares given fields. For examle: (name='nino')
            </summary>
            <param name="R">DataRow to use for getting values for comparisons</param>
            <param name="Colnames">array of field names of column to compare</param>
            <param name="ver">row version to use for getting values from R</param>
            <param name="sql">if true, SQL compatible constants are used</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.WHERE_KEY_CLAUSE(System.Data.DataRow,System.Data.DataRowVersion,System.Boolean)">
            <summary>
            Creates a string of type (field1='..') and (field2='..') ... for all
              the keyfields of the Primary Key of a datarow
            </summary>
            <param name="r">Row to use for getting values to compare</param>
            <param name="ver">Version of the DataRow to use</param>
            <param name="sql">if true, SQL compatible string values are used</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.WHERE_REL_CLAUSE(System.Data.DataRow,System.Data.DataColumn[],System.Data.DataColumn[],System.Data.DataRowVersion,System.Boolean)">
            <summary>
            Creates a string of type (field1='..') and (field2='..') ... for all
              the fields specified by a DataColumn Collection
            </summary>
            <param name="ValueRow">Row to use for getting values to compare</param>
            <param name="ValueCol">RowColumns of ParentRow from which values to be
                compare have to be taken</param>
            <param name="FilterCol">RowColumn of ChildRows for which the Column NAMES have
              to be taken</param>
            <param name="ver">Version of ParentRow to consider</param>
            <param name="SQL">if true, SQL representation of values are used</param>
            <returns>SQL comparison string on all fields</returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.GET_MULTICOMPARE(System.Data.DataRow,System.Data.DataColumn[],System.Data.DataColumn[],System.Data.DataRowVersion,System.Boolean)">
            <summary>
            Gets a multicompare that connects a parentrow to his child   with a specified set of parent/child columns
            </summary>
            <param name="ParentRow"></param>
            <param name="ParentCol"></param>
            <param name="ChildCol"></param>
            <param name="ver"></param>
            <param name="SQL"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.GetExpression(System.Data.DataColumn)">
            <summary>
            Gets the expression that has been assigned to a DataColumn
            </summary>
            <param name="C"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.GetMetaExpression(System.Data.DataColumn)">
            <summary>
            Gets the expression that has been assigned to a DataColumn
            </summary>
            <param name="C"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.SetExpression(System.Data.DataColumn,System.String)">
            <summary>
            Assign an expression to a given DataColumn. After this operation,
             the DataColumn is no longer considered "real"
            </summary>
            <param name="C"></param>
            <param name="S"></param>
        </member>
        <member name="M:metadatalibrary.QueryCreator.IsTemporary(System.Data.DataColumn)">
            <summary>
            Tells if a column is temporary, i.e. is not real.
            </summary>
            <param name="C"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.IsReal(System.Data.DataColumn)">
            <summary>
             Determines wheter a DataColumn is real or not. For example,
             columns that have been assigned expressions are not real.
             Also, columns whose name starts with "!" are considered not real.
             If a column is not real, it is never read/written to DB
            </summary>
            <param name="C"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.IsRealColumn(System.Data.DataColumn)">
            <summary>
            Checks a column to be "real", i.e. not Temporary, and with a null or
             empty expression.
            </summary>
            <param name="C">Column to check</param>
            <returns>true if column is real</returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.WHERE_LIKE_CLAUSE(System.Data.DataRow,System.Data.DataRowVersion,System.Boolean)">
            <summary>
            Creates a string of type (field1 LIKE '..') and (field2 LIKE'..') ... for all
              the keyfields of a datarow
            </summary>
            <param name="R">Row from where values to compare have to be taken</param>
            <param name="ver">RowVersion to consider for R</param>
            <param name="SQL">if true, SQL compatible string constants are used</param>
            <returns>SQL "LIKE" comparison  string on all fields</returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.ContainsNulls(System.Data.DataRow,System.Data.DataColumn[],System.Data.DataRowVersion)">
            <summary>
            Checks if any of specified columns of a specified version of R
             contains null or DBNull values or empty strings
            </summary>
            <param name="R"></param>
            <param name="Cols"></param>
            <param name="ver"></param>
            <returns>true if some value is null</returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.ColumnNameList(System.Data.DataRow)">
            <summary>
            Get the list of real (not temporary or expression) columns of a Row R
             formatting it like "field1, field2,...."
            </summary>
            <param name="R"></param>
            <returns>row real column list</returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.ColumnNameList(System.Data.DataTable)">
            <summary>
            Get the list of real (not temporary or expression) columns NAMES of a table T
             formatting it like "fieldname1, fieldname2,...."
            </summary>
            <param name="T">Table to scan for columns</param>
            <returns>table real column list</returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.SortedColumnNameList(System.Data.DataTable)">
            <summary>
            Get the list of real (not temporary or expression) columns NAMES of a table T
             formatting it like "fieldname1, fieldname2,...."
            </summary>
            <param name="T">Table to scan for columns</param>
            <returns>table real column list</returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.ColumnValues(System.Data.DataRow[],System.String,System.Boolean)">
            <summary>
            Gets the quoted values of a field in a set of rows
            </summary>
            <param name="ROWS"></param>
            <param name="column"></param>
            <param name="SQL"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.ColumnValues(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            Gets the quoted values of a field in the current rows of a specified table
            </summary>
            <param name="T"></param>
            <param name="filter"></param>
            <param name="column"></param>
            <param name="SQL"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.ValueListVersion(System.Data.DataRow,System.Data.DataRowVersion)">
            <summary>
            Get the list of real (not temporary or expression) columns VALUES of a table T
             formatting it like "fieldvalue1, fieldvalue2,...."
            </summary>
            <param name="R">Row from which take values</param>
            <param name="ver">version of the row to consider</param>
            <returns>row real value list</returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.IsPrimaryKey(System.Data.DataTable,System.String)">
            <summary>
            Tells wheter a field belongs to primary key
            </summary>
            <param name="T"></param>
            <param name="field"></param>
            <returns>true if field belongs to primary key of T</returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.CheckKeyParent(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Checks if Parent table is related with KEY fields of Child table
            </summary>
            <param name="Parent"></param>
            <param name="Child"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.GetParentChildRel(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Gets the relation that links a Parent Table with a Child Table
            </summary>
            <param name="Parent"></param>
            <param name="Child"></param>
            <returns>DataRelation or null if the relation does not exists</returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.IsSubEntity(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Tells whether a Child Table is a Sub-Entity of Parent Table.
            This is true if:
            Exists some relation R that links primary key of Parent to a subset of the 
             primary key of Child
            </summary>
            <param name="Child"></param>
            <param name="Parent"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryCreator.IsSubEntity(System.Data.DataRelation,System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Checks that a child table (that represents a sub-entity) is a sub-entity
             of primary table entity.
             This is true if:
             R relates primary key of Parent with a subset of the primary key of Child
            </summary>
            <param name="R"></param>
            <param name="Child">Table to check as sub-entity</param>
            <param name="Parent">Table considered the "entity"</param>
            <returns>true when child is sub-entity of Parent</returns>
        </member>
        <member name="T:metadatalibrary.SqlServerQueryHelper">
            <summary>
            Implementation of QueryHelper for Sql Server database
            </summary>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.quote(System.Object)">
            <summary>
            Returns the string represantation of a constant object
            </summary>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.DoPar(System.String)">
            <summary>
            Put S between parentesis
            </summary>
            <param name="S"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.AppAnd(System.String,System.String)">
            <summary>
            Gets the logical AND of two string expressions
            </summary>
            <param name="q1"></param>
            <param name="q2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.IsNullFn(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="O"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.SafeMinDate">
            <summary>
            Safe miminum value for dates
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.AppAnd(System.String[])">
            <summary>
            Gets the logical AND of a list of string expressions
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.BitwiseAnd(System.String[])">
            <summary>
            Gets the logical AND of a list of string expressions
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.BitwiseOr(System.String[])">
            <summary>
            Gets the logical AND of a list of string expressions
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.BitwiseXor(System.String[])">
            <summary>
            Gets the logical AND of a list of string expressions
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.CmpMulti(System.Data.DataRow,System.String[])">
            <summary>
            Creates  a compare of  a specified fields of row, using the right version for the row 
            </summary>
            <param name="R"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.MCmp(System.Data.DataRow,System.String[])">
            <summary>
            Alias for CmpMulti
            </summary>
            <param name="R"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.AppOr(System.String[])">
            <summary>
            Gets the logical OR of a list of string expressions
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.AppOr(System.String,System.String)">
            <summary>
            Gets the logical OR of a list of string expressions
            </summary>
            <param name="q1"></param>
            <param name="q2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.CmpEq(System.String,System.Object)">
            <summary>
            Compare a field with the specified object, or creating an IS NULL if the specified object is null
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.UnquotedCmpEq(System.String,System.String)">
            <summary>
            Get the compare of field with the unquoted given string
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.CmpNe(System.String,System.Object)">
            <summary>
            Check if a field is different from the specified object, or creating an IS NOT NULL if the specified object is null
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.UnquotedCmpNe(System.String,System.String)">
            <summary>
            Get the compare not equal of field with the unquoted given string
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.CmpGt(System.String,System.Object)">
            <summary>
            Get the compare Greater of field with the given object
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.UnquotedCmpGt(System.String,System.String)">
            <summary>
            Get the compare Greater of field with the unquoted given string
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.CmpGe(System.String,System.Object)">
            <summary>
            Get the compare Greater Equal of field with the given object
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.UnquotedCmpGe(System.String,System.String)">
            <summary>
            Get the compare Greater Equal of field with the given unquoted string
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.CmpLt(System.String,System.Object)">
            <summary>
            Get the compare Less than of field with the given object
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.UnquotedCmpLt(System.String,System.String)">
            <summary>
            Get the compare Less than of field with the given unquoted string
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.CmpLe(System.String,System.Object)">
            <summary>
            Get the compare Less Equal than of field with the given object
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.UnquotedCmpLe(System.String,System.String)">
            <summary>
            Get the compare Less Equal than of field with the unquoted string
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.IsNull(System.String)">
            <summary>
            get the is null condition on a field name
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.NullOrEq(System.String,System.Object)">
            <summary>
             get the (field is null or field = O)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.NullOrGt(System.String,System.Object)">
            <summary>
             get the (field is null or field &gt; O)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.NullOrGe(System.String,System.Object)">
            <summary>
             get the (field is null or field &gt;= O)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.NullOrLt(System.String,System.Object)">
            <summary>
             get the (field is null or field &lt; O)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.NullOrLe(System.String,System.Object)">
            <summary>
             get the (field is null or field &lt;= O)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.NullOrNe(System.String,System.Object)">
            <summary>
             get the (field is null or field &lt;&gt; O)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.UnquotedNullOrEq(System.String,System.String)">
            <summary>
             get the (field is null or field &lt;= O) where O is used as is 
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.UnquotedNullOrGt(System.String,System.String)">
            <summary>
             get the (field is null or field &gt; O)  where O is used as is 
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.UnquotedNullOrGe(System.String,System.String)">
            <summary>
             get the (field is null or field &gt;= O)  where O is used as is 
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.UnquotedNullOrLt(System.String,System.String)">
            <summary>
             get the (field is null or field &lt; O)  where O is used as is 
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.UnquotedNullOrLe(System.String,System.String)">
            <summary>
             get the (field is null or field &lt;= O)  where O is used as is 
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.UnquotedNullOrNe(System.String,System.String)">
            <summary>
             get the (field is null or field &lt;&gt; O)  where O is used as is 
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.BitSet(System.String,System.Int32)">
            <summary>
            Get an expression that checks if a specified bit is set on a field
            </summary>
            <param name="field"></param>
            <param name="nbit"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.BitClear(System.String,System.Int32)">
            <summary>
            Get an expression that checks if a specified bit is NOT set on a field
            </summary>
            <param name="field"></param>
            <param name="nbit"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.DistinctVal(System.Object[])">
            <summary>
            evaluates a list of distinct values converted into string with quotes and separated by a comma
            </summary>
            <param name="OO"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.UnquotedDistinctVal(System.String[])">
            <summary>
            evaluates a list of distinct values converted into string with quotes and separated by a comma
            </summary>
            <param name="OO"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.DistinctVal(System.Data.DataRow[],System.String)">
            <summary>
            evaluates a list of distinct values converted into string with quotes and separated by a comma
             values are taken from a field of a row collection
            </summary>
            <param name="ROWS"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.FieldIn(System.String,System.Data.DataRow[])">
            <summary>
            creates a string: (field in (list of ROWS[field]))
            </summary>
            <param name="field"></param>
            <param name="ROWS"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.FieldIn(System.String,System.Object[])">
            <summary>
            creates a string: (field in (list of objects))
            </summary>
            <param name="field"></param>
            <param name="O">collection of object to compare with</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.UnquotedFieldIn(System.String,System.String[])">
            <summary>
            creates a string: (field in (list of objects))
            </summary>
            <param name="field"></param>
            <param name="O">collection of object to compare with</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.FieldInList(System.String,System.String)">
            <summary>
            Creates a string (field in LIST) if list is not null else (field is null and field is not null)
            </summary>
            <param name="field"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.FieldIn(System.String,System.Data.DataRow[],System.String)">
            <summary>
            creates a string (field in (distinct values from ROWS[column]))
            </summary>
            <param name="field"></param>
            <param name="ROWS"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.FieldNotIn(System.String,System.Object[])">
            <summary>
             creates a string: (field not in (list of objects))
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.UnquotedFieldNotIn(System.String,System.String[])">
            <summary>
             creates a string: (field not in (list of objects))
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.FieldNotIn(System.String,System.Data.DataRow[])">
            <summary>
            creates a string (field not in (objects from ROWS[field]))
            </summary>
            <param name="field"></param>
            <param name="ROWS"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.FieldNotInList(System.String,System.String)">
            <summary>
             creates a string (field not in (list))
            </summary>
            <param name="field"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.FieldNotIn(System.String,System.Data.DataRow[],System.String)">
            <summary>
             creates a string (field not in (objects from ROWS[column]))
            </summary>
            <param name="field"></param>
            <param name="ROWS"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.Not(System.String)">
            <summary>
            creates a string: not ( expression )
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.BitwiseNot(System.String)">
            <summary>
            creates a string: not ( expression )
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.IsNotNull(System.String)">
            <summary>
            creates a string: (field is not null)
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.CmpKey(System.Data.DataRow)">
            <summary>
            Compare current values of key fields of a row
            </summary>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.CmpPrevKey(System.Data.DataRow)">
            <summary>
            Compare original values of key fields of a row
            </summary>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.CmpMask(System.String,System.UInt64,System.UInt64)">
            <summary>
            gives ( (field &amp; mask) == val )
            </summary>
            <param name="field"></param>
            <param name="mask"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.Between(System.String,System.Object,System.Object)">
            <summary>
            Gives (field between min and max)
            </summary>
            <param name="field"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.Like(System.String,System.String)">
            <summary>
            gives (field like 'val')
            </summary>
            <param name="field"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.UnquotedLike(System.String,System.String)">
            <summary>
            gives (field like 'val')
            </summary>
            <param name="field"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.Field(System.String)">
            <summary>
            Gives  a codified version of the string field so that it will be used as a string name
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.SqlServerQueryHelper.List(System.Object[])">
            <summary>
            Gives quoted values of array object, comma separated
            </summary>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.CQueryHelper">
            <summary>
            Helper class to create DataTable queries
            </summary>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.quote(System.Object)">
            <summary>
            Quotes an object in order to use it in a query expression string
            </summary>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.IsNullFn(System.Object,System.Object)">
            <summary>
            return isnull(O,def)
            </summary>
            <param name="O"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.SafeMinDate">
            <summary>
            Returns 1/1/1
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.DoPar(System.String)">
             <summary>
            return expression bwtween parenthesis
             </summary>
             <param name="expression"></param>
             <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.AppAnd(System.String,System.String)">
            <summary>
            returns q1 &amp; q2
            </summary>
            <param name="q1"></param>
            <param name="q2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.AppAnd(System.String[])">
            <summary>
            returns logical and of an expression list
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.BitwiseAnd(System.String[])">
            <summary>
            returns logical and of an expression list
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.BitwiseOr(System.String[])">
            <summary>
            returns logical and of an expression list
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.BitwiseXor(System.String[])">
            <summary>
            returns logical and of an expression list
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.BitwiseNot(System.String)">
            <summary>
            creates a string: not ( expression )
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.MCmp(System.Data.DataRow,System.String[])">
            <summary>
            Compares n fields of a row  (field[0]= R[field[0] &amp; field[0]= R[field[0] &amp;.. )
            </summary>
            <param name="R"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.CmpMulti(System.Data.DataRow,System.String[])">
            <summary>
            Compares n fields of a row  (field[0]= R[field[0] &amp; field[0]= R[field[0] &amp;.. )
            </summary>
            <param name="R"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.AppOr(System.String,System.String)">
            <summary>
            returns logical OR of two expressions
            </summary>
            <param name="q1"></param>
            <param name="q2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.AppOr(System.String[])">
            <summary>
             returns logical OR of a list of expressions
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.UnquotedCmpEq(System.String,System.String)">
            <summary>
            Compares field with unquoted expression O
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.CmpEq(System.String,System.Object)">
            <summary>
            Compare field with O
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.UnquotedCmpNe(System.String,System.String)">
            <summary>
            returns (field &lt;&gt; value) if value is not null, else (field is not null)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.CmpNe(System.String,System.Object)">
            <summary>
            Returns  (field is not null) if O is null, else (field &lt;&gt; quote(O))
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.UnquotedCmpGt(System.String,System.String)">
            <summary>
            Returns (field &gt; O)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.CmpGt(System.String,System.Object)">
            <summary>
            Returns (field &gt; quote(O))
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.UnquotedCmpGe(System.String,System.String)">
            <summary>
            Returns (field &gt;= O)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.CmpGe(System.String,System.Object)">
            <summary>
            Returns (field &gt;= quote(O))
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.UnquotedCmpLt(System.String,System.String)">
            <summary>
            Returns (field &lt; O)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.CmpLt(System.String,System.Object)">
            <summary>
            Returns (field &lt; quote(O))
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.UnquotedCmpLe(System.String,System.String)">
            <summary>
            Returns (field &lt;= O)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.CmpLe(System.String,System.Object)">
            <summary>
            Returns (field &lt;= quote(O))
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.IsNull(System.String)">
            <summary>
            returns (field is null)
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.IsNotNull(System.String)">
            <summary>
            returns (feld is not null)
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.NullOrEq(System.String,System.Object)">
            <summary>
            Returns (field is null or field= quoted(value))
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.NullOrGt(System.String,System.Object)">
            <summary>
            Returns (field is null or field &gt; quoted(value))
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.NullOrGe(System.String,System.Object)">
            <summary>
            Returns (field is null or field &gt;= quoted(value))
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.NullOrLt(System.String,System.Object)">
            <summary>
            Returns (field is null or field &lt; quoted(value))
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.NullOrLe(System.String,System.Object)">
            <summary>
            Returns (field is null or field &lt;= quoted(value))
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.NullOrNe(System.String,System.Object)">
            <summary>
            Returns (field is null or field &lt;&gt; quoted(value))
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.UnquotedNullOrEq(System.String,System.String)">
            <summary>
            Returns (field is null or field= value)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.UnquotedNullOrGt(System.String,System.String)">
            <summary>
            Returns (field is null or field &gt; value)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.UnquotedNullOrGe(System.String,System.String)">
            <summary>
            Returns (field is null or field &gt;= value)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.UnquotedNullOrLt(System.String,System.String)">
            <summary>
            Returns (field is null or field &lt; value)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.UnquotedNullOrLe(System.String,System.String)">
            <summary>
            Returns (field is null or field &lt;= value)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.UnquotedNullOrNe(System.String,System.String)">
            <summary>
            Returns (field is null or field &lt;&gt; value)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.BitSet(System.String,System.Int32)">
            <summary>
            Check if Nth bit of field is set
            </summary>
            <param name="field"></param>
            <param name="nbit">note: first bit is numbered 0</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.BitClear(System.String,System.Int32)">
            <summary>
            Check if Nth bit of field is not set
            </summary>
            <param name="field"></param>
            <param name="nbit">note: first bit is numbered 0</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.DistinctVal(System.Data.DataRow[],System.String)">
            <summary>
            returns a list of distinct quoted values of ROWS[column], comma separated
            </summary>
            <param name="ROWS"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.DistinctVal(System.Object[])">
            <summary>
            returns a list of distinct quoted values of input array, comma separated
            </summary>
            <param name="OO"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.UnquotedDistinctVal(System.String[])">
            <summary>
            returns a list of distinct quoted values of input array, comma separated
            </summary>
            <param name="OO"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.FieldIn(System.String,System.Object[])">
            <summary>
            returns (field in (distinct values of O)) if O is not empty  else (false) 
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.UnquotedFieldIn(System.String,System.String[])">
            <summary>
            returns (field in (distinct values of O)) if O is not empty  else (false) 
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.FieldIn(System.String,System.Data.DataRow[])">
            <summary>
            returns (field in (distinct values of ROWS[field])) if ROWS is not empty  else (false) 
            </summary>
            <param name="field"></param>
            <param name="ROWS"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.FieldInList(System.String,System.String)">
            <summary>
            returns (field in (list))
            </summary>
            <param name="field"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.FieldIn(System.String,System.Data.DataRow[],System.String)">
            <summary>
            returns (field in (distinct values of ROWS[column])) if ROWS is not empty  else (false) 
            </summary>
            <param name="field"></param>
            <param name="ROWS"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.FieldNotIn(System.String,System.Object[])">
            <summary>
            returns (field NOT in (distinct values of O)) if O is not empty  else empty string 
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.UnquotedFieldNotIn(System.String,System.String[])">
            <summary>
            returns (field NOT in (distinct values of O)) if O is not empty  else empty string 
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.FieldNotIn(System.String,System.Data.DataRow[])">
            <summary>
            returns (field NOT in (distinct values of ROWS[field])) if ROWS is not empty  else empty string
            </summary>
            <param name="field"></param>
            <param name="ROWS"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.FieldNotInList(System.String,System.String)">
            <summary>
            returns (field NOT in (list))
            </summary>
            <param name="field"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.FieldNotIn(System.String,System.Data.DataRow[],System.String)">
            <summary>
            returns (field NOT in (distinct values of ROWS[column])) if ROWS is not empty  else empty string
            </summary>
            <param name="field"></param>
            <param name="ROWS"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.Not(System.String)">
            <summary>
            returns NOT(expression)
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.CmpKey(System.Data.DataRow)">
            <summary>
            Compares key fields of R
            </summary>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.CmpPrevKey(System.Data.DataRow)">
            <summary>
            Compare original values of R key fields
            </summary>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.CmpMask(System.String,System.UInt64,System.UInt64)">
            <summary>
            Compares field with a mask (field &amp;mask == val)
            </summary>
            <param name="field"></param>
            <param name="mask"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.Between(System.String,System.Object,System.Object)">
            <summary>
            returns (field between min and max)
            </summary>
            <param name="field"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.Like(System.String,System.String)">
            <summary>
            Returns (field like quote(val))
            </summary>
            <param name="field"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.UnquotedLike(System.String,System.String)">
            <summary>
            Compares field with unquoted expression O
            </summary>
            <param name="field"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.Field(System.String)">
            <summary>
            Returns a codified string that will become the original string when quoted
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.CQueryHelper.List(System.Object[])">
            <summary>
            Returns a comma separated list of quoted objects
            </summary>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.QueryHelper">
            <summary>
            Abstract class for query making
            </summary>
        </member>
        <member name="M:metadatalibrary.QueryHelper.quote(System.Object)">
            <summary>
            Quotes an object in order to use it in a query expression string
            </summary>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.DoPar(System.String)">
            <summary>
            return expression bwtween parenthesis
            </summary>
            <param name="S"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.AppAnd(System.String,System.String)">
            <summary>
             returns q1 &amp; q2
            </summary>
            <param name="q1"></param>
            <param name="q2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.BitwiseAnd(System.String[])">
            <summary>
             returns q1 &amp; q2
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.BitwiseOr(System.String[])">
            <summary>
             returns q1 &#124; q2
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.BitwiseXor(System.String[])">
            <summary>
             returns q1 &#94; q2
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.BitwiseNot(System.String)">
            <summary>
             returns (bit) not q
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.AppAnd(System.String[])">
            <summary>
            returns logical AND of an expression list
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.AppOr(System.String,System.String)">
            <summary>
            returns logical OR of two expressions
            </summary>
            <param name="q1"></param>
            <param name="q2"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.AppOr(System.String[])">
            <summary>
            returns logical OR of an expression list
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.CmpNe(System.String,System.Object)">
            <summary>
            returns (field &lt;&gt; quote(value)) if value is not null, else (field is not null)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.CmpEq(System.String,System.Object)">
            <summary>
            returns (field = quote(value)) if value is not null, else (field is not null)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.CmpLt(System.String,System.Object)">
            <summary>
            returns (field &lt; quote(value)) 
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.CmpLe(System.String,System.Object)">
            <summary>
            returns (field &lt;= quote(value)) 
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.CmpGt(System.String,System.Object)">
            <summary>
             returns (field &gt; quote(value)) 
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.CmpGe(System.String,System.Object)">
            <summary>
            returns (field &gt;= quote(value)) 
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.UnquotedCmpNe(System.String,System.String)">
            <summary>
            returns (field &lt;&gt; value) if value is not null, else (field is not null)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.UnquotedCmpEq(System.String,System.String)">
            <summary>
            returns (field = value) if value is not null, else (field is null)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.UnquotedCmpLt(System.String,System.String)">
            <summary>
            Returns (field &lt; O)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.UnquotedCmpLe(System.String,System.String)">
            <summary>
             Returns (field &lt;= O)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.UnquotedCmpGt(System.String,System.String)">
            <summary>
            Returns (field &gt; O)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.UnquotedCmpGe(System.String,System.String)">
            <summary>
            Returns (field &gt;= O)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.Not(System.String)">
            <summary>
            returns not (expression)
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.IsNull(System.String)">
            <summary>
            returns (field is null)
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.NullOrEq(System.String,System.Object)">
            <summary>
            Returns (field is null or field &gt; quoted(value))
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.NullOrGt(System.String,System.Object)">
            <summary>
             Returns (field is null or field &gt; quoted(value))
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.NullOrGe(System.String,System.Object)">
            <summary>
             Returns (field is null or field &gt;= quoted(value))
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.NullOrLt(System.String,System.Object)">
            <summary>
            Returns (field is null or field &lt; quoted(value))
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.NullOrLe(System.String,System.Object)">
            <summary>
            Returns (field is null or field &lt;= quoted(value))
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.NullOrNe(System.String,System.Object)">
            <summary>
            Returns (field is null or field &lt;&gt; quoted(value))
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.UnquotedNullOrEq(System.String,System.String)">
            <summary>
            Returns (field is null or field= value)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.UnquotedNullOrGt(System.String,System.String)">
            <summary>
             Returns (field is null or field &gt; value)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.UnquotedNullOrGe(System.String,System.String)">
            <summary>
             Returns (field is null or field &gt;= value)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.UnquotedNullOrLt(System.String,System.String)">
            <summary>
            Returns (field is null or field &lt; value)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.UnquotedNullOrLe(System.String,System.String)">
            <summary>
            Returns (field is null or field &lt;= value)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.UnquotedNullOrNe(System.String,System.String)">
            <summary>
             Returns (field is null or field &lt;&gt; value)
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.BitSet(System.String,System.Int32)">
            <summary>
             Check if Nth bit of field is set
            </summary>
            <param name="field"></param>
            <param name="nbit"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.BitClear(System.String,System.Int32)">
            <summary>
             Check if Nth bit of field is NOT set
            </summary>
            <param name="field"></param>
            <param name="nbit"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.DistinctVal(System.Data.DataRow[],System.String)">
            <summary>
            returns a list of distinct quoted values of ROWS[column], comma separated
            </summary>
            <param name="ROWS"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.DistinctVal(System.Object[])">
            <summary>
            returns a list of distinct quoted values of input array, comma separated
            </summary>
            <param name="OO"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.UnquotedDistinctVal(System.String[])">
            <summary>
            returns a list of distinct values of input array, comma separated
            </summary>
            <param name="OO"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.FieldInList(System.String,System.String)">
            <summary>
             returns (field in (list))
            </summary>
            <param name="field"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.FieldIn(System.String,System.Object[])">
            <summary>
            returns (field in (distinct values of O)) if O is not empty  else (false) 
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.UnquotedFieldIn(System.String,System.String[])">
            <summary>
            returns (field in (distinct values of O)) if O is not empty  else (false) 
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.FieldIn(System.String,System.Data.DataRow[],System.String)">
            <summary>
            returns (field in (distinct values of ROWS[column])) if ROWS is not empty  else (false) 
            </summary>
            <param name="field"></param>
            <param name="ROWS"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.FieldIn(System.String,System.Data.DataRow[])">
            <summary>
            returns (field in (distinct values of ROWS[field])) if ROWS is not empty  else (false) 
            </summary>
            <param name="field"></param>
            <param name="ROWS"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.FieldNotInList(System.String,System.String)">
            <summary>
            returns (field NOT in (list)) 
            </summary>
            <param name="field"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.FieldNotIn(System.String,System.Object[])">
            <summary>
            returns (field NOT in (distinct values of O)) if O is not empty  else empty string 
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.UnquotedFieldNotIn(System.String,System.String[])">
            <summary>
            returns (field NOT in (distinct values of O)) if O is not empty  else empty string 
            </summary>
            <param name="field"></param>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.FieldNotIn(System.String,System.Data.DataRow[],System.String)">
            <summary>
            returns (field NOT in (distinct values of ROWS[column])) if ROWS is not empty  else empty string
            </summary>
            <param name="field"></param>
            <param name="ROWS"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.FieldNotIn(System.String,System.Data.DataRow[])">
            <summary>
            returns (field NOT in (distinct values of ROWS[field])) if ROWS is not empty  else empty string
            </summary>
            <param name="field"></param>
            <param name="ROWS"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.CmpKey(System.Data.DataRow)">
            <summary>
            Compares key fields of R
            </summary>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.CmpPrevKey(System.Data.DataRow)">
            <summary>
            Compare original values of R key fields
            </summary>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.IsNotNull(System.String)">
            <summary>
            returns (feld is not null)
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.CmpMask(System.String,System.UInt64,System.UInt64)">
            <summary>
            Compares field with a mask (field &amp;mask == val)
            </summary>
            <param name="field"></param>
            <param name="mask"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.CmpMulti(System.Data.DataRow,System.String[])">
            <summary>
             Compares n fields of a row  (field[0]= R[field[0] &amp; field[0]= R[field[0] &amp;.. )
            </summary>
            <param name="R"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.MCmp(System.Data.DataRow,System.String[])">
            <summary>
            Compares n fields of a row  (field[0]= R[field[0] &amp; field[0]= R[field[0] &amp;.. )
            </summary>
            <param name="R"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.Between(System.String,System.Object,System.Object)">
            <summary>
            returns (field between min and max)
            </summary>
            <param name="field"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.Like(System.String,System.String)">
            <summary>
            Returns (field like quote(val))
            </summary>
            <param name="field"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.UnquotedLike(System.String,System.String)">
            <summary>
            Returns (field like val)
            </summary>
            <param name="field"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.Field(System.String)">
            <summary>
            Returns a codified string that will become the original string when quoted
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.List(System.Object[])">
            <summary>
             Returns a comma separated list of quoted objects
            </summary>
            <param name="O"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.IsNullFn(System.Object,System.Object)">
            <summary>
            return isnull(O,def)
            </summary>
            <param name="O"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.QueryHelper.SafeMinDate">
            <summary>
            Returns a very early date, generally 1/1/1
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.RichTextBoxPlus.#ctor">
            <summary>
            Create the RichTextBoxPlus object.
            </summary>
        </member>
        <member name="M:metadatalibrary.RichTextBoxPlus.GetRichEditOleInterface">
            <summary>
            Get the IRichEditOle interface from the RichTextBox.
            </summary>
            <returns>The <see cref="T:metadatalibrary.IRichEditOle"/> interface.</returns>
        </member>
        <member name="M:metadatalibrary.RichTextBoxPlus.ReleaseRichEditOleInterface">
            <summary>
            Releases the IRichEditOle interface if it hasn't been already.
            </summary>
            <remarks>This is automatically called in Dispose if needed.</remarks>
        </member>
        <member name="M:metadatalibrary.RichTextBoxPlus.Dispose">
            <summary>
            Destroy data
            </summary>
        </member>
        <member name="T:metadatalibrary.ISecurity">
            <summary>
            Manages security conditions and environment variables
            </summary>
        </member>
        <member name="M:metadatalibrary.ISecurity.CanPostSingleRowInTable(System.Data.DataTable)">
            <summary>
            Check if the first row of T is allowed to be written to db
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISecurity.CanPost(System.Data.DataRow)">
            <summary>
            Check if R is allowed to be written to db
            </summary>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISecurity.DeleteAllUnselectable(System.Data.DataTable)">
            <summary>
            Delete all rows from T that are not allowed to be selected
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.ISecurity.CanSelect(System.Data.DataTable,System.Int32)">
            <summary>
            Check if a specified row of a table can be selected
            </summary>
            <param name="T"></param>
            <param name="RowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISecurity.CanSelectSingleRowInTable(System.Data.DataTable)">
            <summary>
            Check if the first row of T can be selected
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISecurity.CanSelect(System.Data.DataRow)">
            <summary>
            Check if a row can be selected
            </summary>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISecurity.SelectCondition(System.String,System.Boolean)">
            <summary>
            Gets the security condition for selecting rows in a table
            </summary>
            <param name="tablename"></param>
            <param name="SQL"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISecurity.CanPrintSingleRowInTable(System.Data.DataTable)">
            <summary>
            Check if a the first row of T can be printed
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISecurity.CanPrint(System.Data.DataRow)">
            <summary>
            Check if R can be "printed". 
            </summary>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISecurity.CantUnconditionallyPost(System.Data.DataTable,System.String)">
            <summary>
            Check if there is a total deny of writing/deleting/inserting on a table
            </summary>
            <param name="T"></param>
            <param name="OpKind"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISecurity.Compile(System.String,System.Boolean)">
            <summary>
            Substitute every &lt;%sys[varname]%&gt; and &lt;%usr[varname]%&gt; with actual values
             taken from environment variables
            </summary>
            <param name="S"></param>
            <param name="SQL">When true, SQL representations are used to display values</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISecurity.quotedCompile(System.String)">
            <summary>
            Substitute every &lt;%sys[varname]%&gt; and &lt;%usr[varname]%&gt; with actual values
             taken from environment variables
            </summary>
            <param name="S"></param>       
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISecurity.CompileWeb(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Subtitutes  every sequence:  openbr sys_name closebr with the unquoted value of sys[sys_name] 
            </summary>
            <param name="S"></param>
            <param name="SQL"></param>
            <param name="openbr"></param>
            <param name="closebr"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISecurity.GetUsr(System.String)">
            <summary>
            Get user environment variable 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISecurity.GetSys(System.String)">
            <summary>
            Get system environment variable
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISecurity.EnumSysKeys">
            <summary>
            Enumerates system variables
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISecurity.EnumUsrKeys">
            <summary>
            Enumerates user variables
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISecurity.SetUsr(System.String,System.Object)">
            <summary>
            NON USARE !
            </summary>
            <param name="key"></param>
            <param name="O"></param>
        </member>
        <member name="M:metadatalibrary.ISecurity.SetUsr(System.String,System.String)">
            <summary>
            Sets user environment variable
            </summary>
            <param name="key"></param>
            <param name="O"></param>
        </member>
        <member name="M:metadatalibrary.ISecurity.SetSys(System.String,System.Object)">
            <summary>
            Set system environment variable
            </summary>
            <param name="key"></param>
            <param name="o"></param>
        </member>
        <member name="M:metadatalibrary.ISecurity.SetSys(System.String,System.String)">
            <summary>
            NON USARE !
            </summary>
            <param name="key"></param>
            <param name="o"></param>
        </member>
        <member name="M:metadatalibrary.ISecurity.isSystemAdmin">
            <summary>
            Returns true if current user has sysadmin membership
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISecurity.SetDataContabile(System.DateTime)">
            <summary>
            Sets datacontabile system environment variable
            </summary>
            <param name="D"></param>
        </member>
        <member name="M:metadatalibrary.ISecurity.SetEsercizio(System.Int32)">
            <summary>
            Sets esercizio system environment variable
            </summary>
            <param name="Eserc"></param>
        </member>
        <member name="M:metadatalibrary.ISecurity.GetEsercizio">
            <summary>
            Get esercizio   system environment variable
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISecurity.GetDataContabile">
            <summary>
             Gets datacontabile system environment variable
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ISecurity.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="T:metadatalibrary.DefaultSecurity">
            <summary>
            Base security class
            </summary>
        </member>
        <member name="F:metadatalibrary.DefaultSecurity._usr">
            <summary>
            Session user variables
            </summary>
        </member>
        <member name="F:metadatalibrary.DefaultSecurity._sys">
            <summary>
            Session system variables
            </summary>
        </member>
        <member name="F:metadatalibrary.DefaultSecurity.Conn">
            <summary>
            Data access linked 
            </summary>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.#ctor(metadatalibrary.IDataAccess)">
            <summary>
            Basic security manager constructor 
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.isSystemAdmin">
            <summary>
            Returns true if current user has sysadmin membership
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.Clear">
            <summary>
            Empty variables
            </summary>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.cryptKey(System.String)">
            <summary>
            Crypts a string with 3-des
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.decryptKey(System.Byte[])">
            <summary>
            Descripts a byte array with 3-des
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.GetSys(System.String)">
            <summary>
            Get system environment variable
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.EnumSysKeys">
            <summary>
            Enumerates system variables
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.EnumUsrKeys">
            <summary>
            Enumerates user variables
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.SetUsr(System.String,System.Object)">
            <summary>
            NON USARE !
            </summary>
            <param name="key"></param>
            <param name="o"></param>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.SetUsr(System.String,System.String)">
            <summary>
            Sets user environment variable
            </summary>
            <param name="key"></param>
            <param name="o"></param>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.GetUsr(System.String)">
            <summary>
            Get user environment variable 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.SetSys(System.String,System.Object)">
            <summary>
            Set system environment variable
            </summary>
            <param name="key"></param>
            <param name="o"></param>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.SetSys(System.String,System.String)">
            <summary>
            NON USARE !
            </summary>
            <param name="key"></param>
            <param name="o"></param>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.postingCondition(System.Data.DataTable,System.String)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="opkind_IUDSP"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.CanPostSingleRowInTable(System.Data.DataTable)">
            <summary>
            Check if the first row of T is allowed to be written to db
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.CanPost(System.Data.DataRow)">
            <summary>
            Check if R is allowed to be written to db
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.DeleteAllUnselectable(System.Data.DataTable)">
            <summary>
            Delete all rows from T that are not allowed to be selected
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.CanSelect(System.Data.DataTable,System.Int32)">
            <summary>
            Check if a specified row of a table can be selected
            </summary>
            <param name="T"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.CanSelectSingleRowInTable(System.Data.DataTable)">
            <summary>
            Check if the first row of T can be selected
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.CanSelect(System.Data.DataRow)">
            <summary>
            Check if a row can be selected
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.SelectCondition(System.String,System.Boolean)">
            <summary>
            Gets the security condition for selecting rows in a table
            </summary>
            <param name="tablename"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.CanPrintSingleRowInTable(System.Data.DataTable)">
            <summary>
            Check if a the first row of T can be printed
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.CanPrint(System.Data.DataRow)">
            <summary>
            Check if R can be "printed". 
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.CantUnconditionallyPost(System.Data.DataTable,System.String)">
            <summary>
            Check if there is a total deny of writing/deleting/inserting on a table
            </summary>
            <param name="T"></param>
            <param name="opKind"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.SetDataContabile(System.DateTime)">
            <summary>
            Sets datacontabile system environment variable
            </summary>
            <param name="D"></param>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.SetEsercizio(System.Int32)">
            <summary>
            Sets esercizio system environment variable
            </summary>
            <param name="eserc"></param>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.GetEsercizio">
            <summary>
            Get esercizio   system environment variable
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.GetDataContabile">
            <summary>
             Gets datacontabile system environment variable
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.Compile(System.String,System.Boolean)">
            <summary>
            Substitute every &lt;%sys[varname]%&gt; and &lt;%usr[varname]%&gt; with actual values
             taken from environment variables
            </summary>
            <param name="S"></param>
            <param name="SQL">When true, SQL representations are used to display values</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.quotedCompile(System.String)">
            <summary>
            Compile a string substituting keys with quoted values
            </summary>
            <param name="S"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.DefaultSecurity.CompileWeb(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Subtitutes  every sequence:  openbr sys_name closebr with the unquoted value of sys[sys_name] 
            </summary>
            <param name="S"></param>
            <param name="SQL"></param>
            <param name="openbr"></param>
            <param name="closebr"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.StringParser.closeBlock(System.String,System.Int32,System.Char,System.Char)">
            <summary>
            Restituisce la posizione della fine di un blocco, saltando i blocchi annidati 
             o -1 se il blocco non si chiude
            </summary>
            <param name="S"></param>
            <param name="start"></param>
            <param name="BEGIN"></param>
            <param name="END"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.StringParser.nextNonComment(System.String,System.Int32)">
            <summary>
            Restituisce l'indice del prossimo non-commento e non-blank, o -1 se non ce ne sono. 
            </summary>
            <param name="S"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ITreeViewDataAccess.DO_GET_TABLE_ROOTS(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Gets some row from a datatable, with all child rows in the same table
            </summary>
            <param name="T">DataTable to Get from DataBase</param>
            <param name="filter">Filter to apply in order to retrieve roots</param>
            <param name="clear">true if table has to be cleared</param>
        </member>
        <member name="M:metadatalibrary.ITreeViewDataAccess.DO_GET_PARENTS(System.Data.DataRow,System.Boolean,System.Data.DataRelation)">
            <summary>
            Gets all necessary rows from table in order to rebuild R genealogy
            </summary>
            <param name="R"></param>
            <param name="AddChild">when true, all child of every parent found
             are retrieved
             </param>
        </member>
        <member name="M:metadatalibrary.ITreeViewDataAccess.GetSpecificChild(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            Gets a row from a table T taking the first row by the filter
             StartConndition AND (startfield like startval%)
            If more than oe row is found, the one with the smallest startfield is
             returned. Used for AutoManage functions.
            </summary>
            <param name="T"></param>
            <param name="StartCondition"></param>
            <param name="startval"></param>
            <param name="startfield"></param>
            <returns>null if no row was found</returns>
        </member>
        <member name="M:metadatalibrary.ITreeViewDataAccess.expandChilds(System.Data.DataRow[])">
            <summary>
            Gets child of a selected set of rows, and gets related tables
            </summary>
            <param name="ToExpand"></param>
        </member>
        <member name="M:metadatalibrary.ITreeViewDataAccess.GetByKey(System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Gets a primary table DataRow from db, given its primary key
            </summary>
            <param name="dest">Table into which putting the row read</param>
            <param name="Key">DataRow with the same key as wanted row</param>
            <returns>null if row was not found</returns>
        </member>
        <member name="M:metadatalibrary.TreeViewDataAccess.expandChilds(System.Data.DataRow[])">
            <summary>
            Gets child of a selected set of rows, and gets related tables
            </summary>
            <param name="toExpand"></param>
        </member>
        <member name="M:metadatalibrary.TreeViewDataAccess.DO_GET_TABLE_ROOTS(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Gets some row from a datatable, with all child rows in the same table
            </summary>
            <param name="T">DataTable to Get from DataBase</param>
            <param name="filter">Filter to apply in order to retrieve roots</param>
            <param name="clear">true if table has to be cleared</param>
        </member>
        <member name="M:metadatalibrary.TreeViewDataAccess.DO_GET_PARENTS(System.Data.DataRow,System.Boolean,System.Data.DataRelation)">
            <summary>
            Gets all necessary rows from table in order to rebuild R genealogy
            </summary>
            <param name="r"></param>
            <param name="addChild">when true, all child of every parent found are retrieved </param>
            <param name="autoParentRelation"></param>
        </member>
        <member name="M:metadatalibrary.TreeViewDataAccess.GetByKey(System.Data.DataTable,System.Data.DataRow)">
            <summary>
            Gets a primary table DataRow from db, given its primary key
            </summary>
            <param name="dest">Table into which putting the row read</param>
            <param name="key">DataRow with the same key as wanted row</param>
            <returns>null if row was not found</returns>
        </member>
        <member name="M:metadatalibrary.TreeViewDataAccess.GetSpecificChild(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            Gets a row from a table T taking the first row by the filter
             StartConndition AND (startfield like startval%)
            If more than oe row is found, the one with the smallest startfield is
             returned. Used for AutoManage functions.
            </summary>
            <param name="T"></param>
            <param name="StartCondition"></param>
            <param name="startval"></param>
            <param name="startfield"></param>
            <returns>null if no row was found</returns>
        </member>
        <member name="T:metadatalibrary.node_dispatcher">
            <summary>
            Base (empty) class able to create a tree_node, given Parent DataRow and
             a new Child DataRow
            </summary>
        </member>
        <member name="M:metadatalibrary.node_dispatcher.GetNode(System.Data.DataRow,System.Data.DataRow)">
            <summary>
            Creates a new tree node linking it to a Child Row
            </summary>
            <param name="Parent">Parent Row (or null if not present)</param>
            <param name="Child">new row to add to tree</param>
            <returns>new tree_node linked to Child Row</returns>
        </member>
        <member name="T:metadatalibrary.tree_node">
            <summary>
            Class used to manage nodes of a treeview. Every TreeNode of the tree
             has a tag storing the corresponding tree_node.
            </summary>
        </member>
        <member name="F:metadatalibrary.tree_node.Row">
            <summary>
            DataRow associated to the tree_node
            </summary>
        </member>
        <member name="M:metadatalibrary.tree_node.#ctor(System.Data.DataRow)">
            <summary>
            Creates the tree_node linking it to a DataRow
            </summary>
            <param name="R"></param>
        </member>
        <member name="M:metadatalibrary.tree_node.Text">
            <summary>
            Label that appears in treeview for each node
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.tree_node.ToolTip">
            <summary>
            String that should appear in tooltip
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.tree_node.CanSelect">
            <summary>
            Returns true if node can be selected
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.tree_node.UnselectableMessage">
            <summary>
            Returns true if node can be selected
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.tree_node.RowIndex">
            <summary>
            Get index in DataTable of tree_node linked row 
            </summary>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.hwTreeNode">
            <summary>
            TreeNode for web, with an object Tag
            </summary>
        </member>
        <member name="M:metadatalibrary.hwTreeNode.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="T"></param>
        </member>
        <member name="P:metadatalibrary.hwTreeNode.Tag">
            <summary>
            General pourpose tag
            </summary>
        </member>
        <member name="M:metadatalibrary.ITreeViewManager.autoParentRelation(System.Data.DataTable)">
            <summary>
            Gets a relation that connects a table with its self
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ITreeViewManager.autoChildRelation(System.Data.DataTable)">
            <summary>
            Gets a relation that connects a table with its self. Should be the same
             as AutoParent
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="P:metadatalibrary.ITreeViewManager.security">
            <summary>
            Security manager
            </summary>
        </member>
        <member name="M:metadatalibrary.ITreeViewManager.RootsCondition_C">
            <summary>
            Gives SQL condition to get roots rows from tree_table
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ITreeViewManager.RootsCondition_SQL">
            <summary>
            Sql condition to get roots from DB
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ITreeViewManager.FillNodes">
            <summary>
            Fills the treeview with the nodes taken from all tree_table rows
            Selects no node.
            </summary>
        </member>
        <member name="M:metadatalibrary.ITreeViewManager.GetNodeFromRow(System.Windows.Forms.TreeNode,System.Data.DataRow)">
            <summary>
            Creates a new tree_node linked to a given DataRow, assuming 
             a given TreeNode as parent
            </summary>
            <param name="Parent">Parent TreeNode</param>
            <param name="R">DataRow linked to Node to create</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ITreeViewManager.AddRow(System.Windows.Forms.TreeNode,System.Data.DataRow)">
            <summary>
            Gets the TreeNode linked to Child, assuming the parent node is
             TreeNode. If the node does not exists, it is created. 
            </summary>
            <param name="Parent">Parent node of searched one</param>
            <param name="Child">DataRow linked to searched TreeNode</param>
            <returns>TreeNode linked to Child</returns>
        </member>
        <member name="M:metadatalibrary.ITreeViewManager.treeview_BeforeSelect(System.Object,System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
            Reads child of a nodes to select. Used when a navigator is linked to tree.
            Ignored if FixedData
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.ITreeViewManager.treeview_AfterExpand(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Adds dummy nodes to childs of expanded node.
            Does nothing if FixedData
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.ITreeViewManager.treeview_AfterCollapse(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Do necessary operation to handle AfterCollapse event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.ITreeViewManager.DeleteCurrentNode">
            <summary>
            Deletes current node from tree (and all childs recursively)
            </summary>
        </member>
        <member name="M:metadatalibrary.ITreeViewManager.SelectNode(System.Data.DataRow)">
            <summary>
            Selects the TreeNode corresponding to a given DataRow
            </summary>
            <param name="R"></param>
        </member>
        <member name="M:metadatalibrary.ITreeViewManager.AddNode(System.Windows.Forms.TreeNodeCollection,System.Windows.Forms.TreeNode)">
            <summary>
            Returns added node, or previous if it was already present.
            </summary>
            <param name="Nodes"></param>
            <param name="NewNode"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ITreeViewManager.SelectedRow">
            <summary>
            Get the row linked to currently selected TreeNode
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.ITreeViewManager.SelectedRowIndex">
            <summary>
            Gets the index of Row linked to Currenty selected TreeNode
            </summary>
            <returns></returns>
        </member>
        <member name="T:metadatalibrary.TreeViewManager">
            <summary>
            TreeView Manager
            </summary>
        </member>
        <member name="F:metadatalibrary.TreeViewManager.TreeTable">
            <summary>
            DataTable Linked to the TreeView
            </summary>
        </member>
        <member name="F:metadatalibrary.TreeViewManager.tree">
            <summary>
            TreeView linked to this TreeViewManager
            </summary>
        </member>
        <member name="F:metadatalibrary.TreeViewManager.DoubleClickForSelect">
            <summary>
            When true, a double click on the tree closes the page. 
            </summary>
        </member>
        <member name="F:metadatalibrary.TreeViewManager._security">
            <summary>
            GetData used for accessing to DB
            </summary>
        </member>
        <member name="P:metadatalibrary.TreeViewManager.security">
            <summary>
            Security manager
            </summary>
        </member>
        <member name="F:metadatalibrary.TreeViewManager.AutoEventsEnabled">
            <summary>
            Enables/Disables automatic events for the treeview
            </summary>
        </member>
        <member name="F:metadatalibrary.TreeViewManager.Navigator">
            <summary>
            DataGrid used as Navigator for the treeview
            </summary>
        </member>
        <member name="F:metadatalibrary.TreeViewManager.FixedData">
            <summary>
            when true data are never deleted/re-read. They depends only on Tree-Table content
            Default is false
            </summary>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.calcTreeViewDataAccess(metadatalibrary.IGetData,metadatalibrary.QueryHelper)">
            <summary>
            Initializes the connection to db
            </summary>
            <param name="getData"></param>
            <param name="q"></param>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.#ctor(System.Data.DataTable,System.Windows.Forms.TreeView,metadatalibrary.node_dispatcher,System.String,System.String)">
            <summary>
            Creates a manager for a tree-view
            </summary>
            <param name="treeTable">DataTable containing the tree structure</param>
            <param name="tree">TreeView to manage</param>
            <param name="dispatcher">node dispatcher</param>
            <param name="rootConditionC">condition that identifies roots</param>
            <param name="rootConditionSql">condition that identifies roots (for db)</param>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.RootsCondition_C">
            <summary>
            Gives SQL condition to get roots rows from tree_table
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.RootsCondition_SQL">
            <summary>
            Sql condition to get roots from DB
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.RootsCondition_C(System.Data.DataTable)">
            <summary>
            Gets the root condition of the treeviewmanager linked to a DataTable
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.RootsCondition_SQL(System.Data.DataTable)">
            <summary>
            Get the sql root condition from the treemanager attached to a table
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.FillNodes(System.Data.DataTable)">
            <summary>
            Fills the treeview with the nodes taken from tree_table rows
            Selects no nodes.
            </summary>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.FillNodes">
            <summary>
            Fills the treeview with the nodes taken from all tree_table rows
            Selects no node.
            </summary>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.GetNodeFromRow(System.Windows.Forms.TreeNode,System.Data.DataRow)">
            <summary>
            Creates a new tree_node linked to a given DataRow, assuming 
             a given TreeNode as parent
            </summary>
            <param name="parent">Parent TreeNode</param>
            <param name="r">DataRow linked to Node to create</param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.AddRow(System.Windows.Forms.TreeNode,System.Data.DataRow)">
            <summary>
            Gets the TreeNode linked to Child, assuming the parent node is
             TreeNode. If the node does not exists, it is created. 
            </summary>
            <param name="parent">Parent node of searched one</param>
            <param name="child">DataRow linked to searched TreeNode</param>
            <returns>TreeNode linked to Child</returns>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.autoParentRelation(System.Data.DataTable)">
            <summary>
            Gets a relation that connects a table with its self
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.autoChildRelation(System.Data.DataTable)">
            <summary>
            Gets a relation that connects a table with its self. Should be the same
             as AutoParent
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.expand_node(System.Windows.Forms.TreeNode)">
            <summary>
            reads child and return true if something was read
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.treeview_BeforeSelect(System.Object,System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
            Reads child of a nodes to select. Used when a navigator is linked to tree.
            Ignored if FixedData
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.treeview_AfterExpand(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Adds dummy nodes to childs of expanded node.
            Does nothing if FixedData
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.setNavigator(System.Data.DataTable,System.Windows.Forms.DataGrid)">
            <summary>
            Set a datagrid as tree-navigator for a table T
            </summary>
            <param name="T"></param>
            <param name="G"></param>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.treeview_AfterCollapse(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Do necessary operation to handle AfterCollapse event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.DeleteCurrentNode">
            <summary>
            Deletes current node from tree (and all childs recursively)
            </summary>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.SelectNode(System.Data.DataRow)">
            <summary>
            Selects the TreeNode corresponding to a given DataRow
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.AddNode(System.Windows.Forms.TreeNodeCollection,System.Windows.Forms.TreeNode)">
            <summary>
            Returns added node, or previous if it was already present.
            </summary>
            <param name="nodes"></param>
            <param name="newNode"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.SelectedRow">
            <summary>
            Get the row linked to currently selected TreeNode
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.SelectedRowIndex">
            <summary>
            Gets the index of Row linked to Currenty selected TreeNode
            </summary>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.GetManager(System.Data.DataTable)">
            <summary>
            Gets the treeviewmanager linked to a DataTable
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.Dispose(System.Boolean)">
            <summary>
            Implents IDisposable interface
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.Start(System.String,System.Boolean)">
            <summary>
            Start ** CHECKED **
            </summary>
            <param name="rootfilterSql"></param>
            <param name="clear"></param>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.startWithField(System.String,System.String,System.String)">
            <summary>
            Fills a tree given a start condition. Also Accepts FilterTree **CHECKED**
            </summary>
            <param name="startCondition"></param>
            <param name="startValueWanted"></param>
            <param name="startFieldWanted"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.selectRow(System.Data.DataRow,System.String)">
            <summary>
            Legge tutte le righe parent di una riga data e la seleziona nel tree. ** CHECKED **
            </summary>
            <param name="r"></param>
            <param name="listType"></param>
            <returns></returns>
        </member>
        <member name="M:metadatalibrary.TreeViewManager.Dispose">
            <summary>
            This code added to correctly implement the disposable pattern.
            </summary>
        </member>
    </members>
</doc>
