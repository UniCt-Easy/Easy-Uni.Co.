
/*
Easy
Copyright (C) 2022 Università degli Studi di Catania (www.unict.it)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:2.0.50727.832
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace regionalrateforcityvalidity_default {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("vistaForm")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class vistaForm : System.Data.DataSet {
        
        private regionalrateforcityvalidityDataTable tableregionalrateforcityvalidity;
        
        private geo_cityviewDataTable tablegeo_cityview;
        
        private regionalrateforcityvalidityviewDataTable tableregionalrateforcityvalidityview;
        
        private taxDataTable tabletax;
        
        private regionalrateforcitybracketDataTable tableregionalrateforcitybracket;
        
        private System.Data.DataRelation relationgeo_cityviewregionalrateforcityvalidity;
        
        private System.Data.DataRelation relationtaxregionalrateforcityvalidity;
        
        private System.Data.DataRelation relationregionalrateforcityvalidityregionalrateforcitybracket;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public vistaForm() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected vistaForm(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["regionalrateforcityvalidity"] != null)) {
                    base.Tables.Add(new regionalrateforcityvalidityDataTable(ds.Tables["regionalrateforcityvalidity"]));
                }
                if ((ds.Tables["geo_cityview"] != null)) {
                    base.Tables.Add(new geo_cityviewDataTable(ds.Tables["geo_cityview"]));
                }
                if ((ds.Tables["regionalrateforcityvalidityview"] != null)) {
                    base.Tables.Add(new regionalrateforcityvalidityviewDataTable(ds.Tables["regionalrateforcityvalidityview"]));
                }
                if ((ds.Tables["tax"] != null)) {
                    base.Tables.Add(new taxDataTable(ds.Tables["tax"]));
                }
                if ((ds.Tables["regionalrateforcitybracket"] != null)) {
                    base.Tables.Add(new regionalrateforcitybracketDataTable(ds.Tables["regionalrateforcitybracket"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public regionalrateforcityvalidityDataTable regionalrateforcityvalidity {
            get {
                return this.tableregionalrateforcityvalidity;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public geo_cityviewDataTable geo_cityview {
            get {
                return this.tablegeo_cityview;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public regionalrateforcityvalidityviewDataTable regionalrateforcityvalidityview {
            get {
                return this.tableregionalrateforcityvalidityview;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public taxDataTable tax {
            get {
                return this.tabletax;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public regionalrateforcitybracketDataTable regionalrateforcitybracket {
            get {
                return this.tableregionalrateforcitybracket;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            vistaForm cln = ((vistaForm)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["regionalrateforcityvalidity"] != null)) {
                    base.Tables.Add(new regionalrateforcityvalidityDataTable(ds.Tables["regionalrateforcityvalidity"]));
                }
                if ((ds.Tables["geo_cityview"] != null)) {
                    base.Tables.Add(new geo_cityviewDataTable(ds.Tables["geo_cityview"]));
                }
                if ((ds.Tables["regionalrateforcityvalidityview"] != null)) {
                    base.Tables.Add(new regionalrateforcityvalidityviewDataTable(ds.Tables["regionalrateforcityvalidityview"]));
                }
                if ((ds.Tables["tax"] != null)) {
                    base.Tables.Add(new taxDataTable(ds.Tables["tax"]));
                }
                if ((ds.Tables["regionalrateforcitybracket"] != null)) {
                    base.Tables.Add(new regionalrateforcitybracketDataTable(ds.Tables["regionalrateforcitybracket"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableregionalrateforcityvalidity = ((regionalrateforcityvalidityDataTable)(base.Tables["regionalrateforcityvalidity"]));
            if ((initTable == true)) {
                if ((this.tableregionalrateforcityvalidity != null)) {
                    this.tableregionalrateforcityvalidity.InitVars();
                }
            }
            this.tablegeo_cityview = ((geo_cityviewDataTable)(base.Tables["geo_cityview"]));
            if ((initTable == true)) {
                if ((this.tablegeo_cityview != null)) {
                    this.tablegeo_cityview.InitVars();
                }
            }
            this.tableregionalrateforcityvalidityview = ((regionalrateforcityvalidityviewDataTable)(base.Tables["regionalrateforcityvalidityview"]));
            if ((initTable == true)) {
                if ((this.tableregionalrateforcityvalidityview != null)) {
                    this.tableregionalrateforcityvalidityview.InitVars();
                }
            }
            this.tabletax = ((taxDataTable)(base.Tables["tax"]));
            if ((initTable == true)) {
                if ((this.tabletax != null)) {
                    this.tabletax.InitVars();
                }
            }
            this.tableregionalrateforcitybracket = ((regionalrateforcitybracketDataTable)(base.Tables["regionalrateforcitybracket"]));
            if ((initTable == true)) {
                if ((this.tableregionalrateforcitybracket != null)) {
                    this.tableregionalrateforcitybracket.InitVars();
                }
            }
            this.relationgeo_cityviewregionalrateforcityvalidity = this.Relations["geo_cityviewregionalrateforcityvalidity"];
            this.relationtaxregionalrateforcityvalidity = this.Relations["taxregionalrateforcityvalidity"];
            this.relationregionalrateforcityvalidityregionalrateforcitybracket = this.Relations["regionalrateforcityvalidityregionalrateforcitybracket"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "vistaForm";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/VistaStrutturaAliquoteRegionaliPerComune.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.EnforceConstraints = false;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableregionalrateforcityvalidity = new regionalrateforcityvalidityDataTable();
            base.Tables.Add(this.tableregionalrateforcityvalidity);
            this.tablegeo_cityview = new geo_cityviewDataTable();
            base.Tables.Add(this.tablegeo_cityview);
            this.tableregionalrateforcityvalidityview = new regionalrateforcityvalidityviewDataTable();
            base.Tables.Add(this.tableregionalrateforcityvalidityview);
            this.tabletax = new taxDataTable();
            base.Tables.Add(this.tabletax);
            this.tableregionalrateforcitybracket = new regionalrateforcitybracketDataTable();
            base.Tables.Add(this.tableregionalrateforcitybracket);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("geo_cityviewregionalrateforcityvalidity", new System.Data.DataColumn[] {
                        this.tablegeo_cityview.idcityColumn}, new System.Data.DataColumn[] {
                        this.tableregionalrateforcityvalidity.idcityColumn});
            this.tableregionalrateforcityvalidity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("taxregionalrateforcityvalidity", new System.Data.DataColumn[] {
                        this.tabletax.taxcodeColumn}, new System.Data.DataColumn[] {
                        this.tableregionalrateforcityvalidity.taxcodeColumn});
            this.tableregionalrateforcityvalidity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("regionalrateforcityvalidityregionalrateforcitybracket", new System.Data.DataColumn[] {
                        this.tableregionalrateforcityvalidity.taxcodeColumn,
                        this.tableregionalrateforcityvalidity.idcityColumn,
                        this.tableregionalrateforcityvalidity.validitystartColumn}, new System.Data.DataColumn[] {
                        this.tableregionalrateforcitybracket.taxcodeColumn,
                        this.tableregionalrateforcitybracket.idcityColumn,
                        this.tableregionalrateforcitybracket.validitystartColumn});
            this.tableregionalrateforcitybracket.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationgeo_cityviewregionalrateforcityvalidity = new System.Data.DataRelation("geo_cityviewregionalrateforcityvalidity", new System.Data.DataColumn[] {
                        this.tablegeo_cityview.idcityColumn}, new System.Data.DataColumn[] {
                        this.tableregionalrateforcityvalidity.idcityColumn}, false);
            this.Relations.Add(this.relationgeo_cityviewregionalrateforcityvalidity);
            this.relationtaxregionalrateforcityvalidity = new System.Data.DataRelation("taxregionalrateforcityvalidity", new System.Data.DataColumn[] {
                        this.tabletax.taxcodeColumn}, new System.Data.DataColumn[] {
                        this.tableregionalrateforcityvalidity.taxcodeColumn}, false);
            this.Relations.Add(this.relationtaxregionalrateforcityvalidity);
            this.relationregionalrateforcityvalidityregionalrateforcitybracket = new System.Data.DataRelation("regionalrateforcityvalidityregionalrateforcitybracket", new System.Data.DataColumn[] {
                        this.tableregionalrateforcityvalidity.taxcodeColumn,
                        this.tableregionalrateforcityvalidity.idcityColumn,
                        this.tableregionalrateforcityvalidity.validitystartColumn}, new System.Data.DataColumn[] {
                        this.tableregionalrateforcitybracket.taxcodeColumn,
                        this.tableregionalrateforcitybracket.idcityColumn,
                        this.tableregionalrateforcitybracket.validitystartColumn}, false);
            this.Relations.Add(this.relationregionalrateforcityvalidityregionalrateforcitybracket);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeregionalrateforcityvalidity() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializegeo_cityview() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeregionalrateforcityvalidityview() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetax() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeregionalrateforcitybracket() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            vistaForm ds = new vistaForm();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void regionalrateforcityvalidityRowChangeEventHandler(object sender, regionalrateforcityvalidityRowChangeEvent e);
        
        public delegate void geo_cityviewRowChangeEventHandler(object sender, geo_cityviewRowChangeEvent e);
        
        public delegate void regionalrateforcityvalidityviewRowChangeEventHandler(object sender, regionalrateforcityvalidityviewRowChangeEvent e);
        
        public delegate void taxRowChangeEventHandler(object sender, taxRowChangeEvent e);
        
        public delegate void regionalrateforcitybracketRowChangeEventHandler(object sender, regionalrateforcitybracketRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class regionalrateforcityvalidityDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columntaxcode;
            
            private System.Data.DataColumn columnidcity;
            
            private System.Data.DataColumn columnvaliditystart;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcityvalidityDataTable() {
                this.TableName = "regionalrateforcityvalidity";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal regionalrateforcityvalidityDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected regionalrateforcityvalidityDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn taxcodeColumn {
                get {
                    return this.columntaxcode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idcityColumn {
                get {
                    return this.columnidcity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn validitystartColumn {
                get {
                    return this.columnvaliditystart;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcityvalidityRow this[int index] {
                get {
                    return ((regionalrateforcityvalidityRow)(this.Rows[index]));
                }
            }
            
            public event regionalrateforcityvalidityRowChangeEventHandler regionalrateforcityvalidityRowChanging;
            
            public event regionalrateforcityvalidityRowChangeEventHandler regionalrateforcityvalidityRowChanged;
            
            public event regionalrateforcityvalidityRowChangeEventHandler regionalrateforcityvalidityRowDeleting;
            
            public event regionalrateforcityvalidityRowChangeEventHandler regionalrateforcityvalidityRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddregionalrateforcityvalidityRow(regionalrateforcityvalidityRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcityvalidityRow AddregionalrateforcityvalidityRow(taxRow parenttaxRowBytaxregionalrateforcityvalidity, geo_cityviewRow parentgeo_cityviewRowBygeo_cityviewregionalrateforcityvalidity, System.DateTime validitystart) {
                regionalrateforcityvalidityRow rowregionalrateforcityvalidityRow = ((regionalrateforcityvalidityRow)(this.NewRow()));
                rowregionalrateforcityvalidityRow.ItemArray = new object[] {
                        parenttaxRowBytaxregionalrateforcityvalidity[0],
                        parentgeo_cityviewRowBygeo_cityviewregionalrateforcityvalidity[0],
                        validitystart};
                this.Rows.Add(rowregionalrateforcityvalidityRow);
                return rowregionalrateforcityvalidityRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcityvalidityRow FindBytaxcodeidcityvaliditystart(int taxcode, int idcity, System.DateTime validitystart) {
                return ((regionalrateforcityvalidityRow)(this.Rows.Find(new object[] {
                            taxcode,
                            idcity,
                            validitystart})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                regionalrateforcityvalidityDataTable cln = ((regionalrateforcityvalidityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new regionalrateforcityvalidityDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntaxcode = base.Columns["taxcode"];
                this.columnidcity = base.Columns["idcity"];
                this.columnvaliditystart = base.Columns["validitystart"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntaxcode = new System.Data.DataColumn("taxcode", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxcode);
                this.columnidcity = new System.Data.DataColumn("idcity", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidcity);
                this.columnvaliditystart = new System.Data.DataColumn("validitystart", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvaliditystart);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columntaxcode,
                                this.columnidcity,
                                this.columnvaliditystart}, true));
                this.columntaxcode.AllowDBNull = false;
                this.columnidcity.AllowDBNull = false;
                this.columnvaliditystart.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcityvalidityRow NewregionalrateforcityvalidityRow() {
                return ((regionalrateforcityvalidityRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new regionalrateforcityvalidityRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(regionalrateforcityvalidityRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.regionalrateforcityvalidityRowChanged != null)) {
                    this.regionalrateforcityvalidityRowChanged(this, new regionalrateforcityvalidityRowChangeEvent(((regionalrateforcityvalidityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.regionalrateforcityvalidityRowChanging != null)) {
                    this.regionalrateforcityvalidityRowChanging(this, new regionalrateforcityvalidityRowChangeEvent(((regionalrateforcityvalidityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.regionalrateforcityvalidityRowDeleted != null)) {
                    this.regionalrateforcityvalidityRowDeleted(this, new regionalrateforcityvalidityRowChangeEvent(((regionalrateforcityvalidityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.regionalrateforcityvalidityRowDeleting != null)) {
                    this.regionalrateforcityvalidityRowDeleting(this, new regionalrateforcityvalidityRowChangeEvent(((regionalrateforcityvalidityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveregionalrateforcityvalidityRow(regionalrateforcityvalidityRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                vistaForm ds = new vistaForm();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "regionalrateforcityvalidityDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class geo_cityviewDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnidcity;
            
            private System.Data.DataColumn columntitle;
            
            private System.Data.DataColumn columnoldcity;
            
            private System.Data.DataColumn columnnewcity;
            
            private System.Data.DataColumn columnstart;
            
            private System.Data.DataColumn columnstop;
            
            private System.Data.DataColumn columnidcountry;
            
            private System.Data.DataColumn columnprovincecode;
            
            private System.Data.DataColumn columncountry;
            
            private System.Data.DataColumn columnoldcountry;
            
            private System.Data.DataColumn columnnewcountry;
            
            private System.Data.DataColumn columncountrydatestart;
            
            private System.Data.DataColumn columncountrydatestop;
            
            private System.Data.DataColumn columnidregion;
            
            private System.Data.DataColumn columnregion;
            
            private System.Data.DataColumn columnregiondatestart;
            
            private System.Data.DataColumn columnregiondatestop;
            
            private System.Data.DataColumn columnoldregion;
            
            private System.Data.DataColumn columnnewregion;
            
            private System.Data.DataColumn columnidnation;
            
            private System.Data.DataColumn columnidcontinent;
            
            private System.Data.DataColumn columnnation;
            
            private System.Data.DataColumn columnnationdatestart;
            
            private System.Data.DataColumn columnnationdatestop;
            
            private System.Data.DataColumn columnoldnation;
            
            private System.Data.DataColumn columnnewnation;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public geo_cityviewDataTable() {
                this.TableName = "geo_cityview";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal geo_cityviewDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected geo_cityviewDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idcityColumn {
                get {
                    return this.columnidcity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn titleColumn {
                get {
                    return this.columntitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn oldcityColumn {
                get {
                    return this.columnoldcity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn newcityColumn {
                get {
                    return this.columnnewcity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn startColumn {
                get {
                    return this.columnstart;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn stopColumn {
                get {
                    return this.columnstop;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idcountryColumn {
                get {
                    return this.columnidcountry;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn provincecodeColumn {
                get {
                    return this.columnprovincecode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn countryColumn {
                get {
                    return this.columncountry;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn oldcountryColumn {
                get {
                    return this.columnoldcountry;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn newcountryColumn {
                get {
                    return this.columnnewcountry;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn countrydatestartColumn {
                get {
                    return this.columncountrydatestart;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn countrydatestopColumn {
                get {
                    return this.columncountrydatestop;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idregionColumn {
                get {
                    return this.columnidregion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn regionColumn {
                get {
                    return this.columnregion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn regiondatestartColumn {
                get {
                    return this.columnregiondatestart;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn regiondatestopColumn {
                get {
                    return this.columnregiondatestop;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn oldregionColumn {
                get {
                    return this.columnoldregion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn newregionColumn {
                get {
                    return this.columnnewregion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idnationColumn {
                get {
                    return this.columnidnation;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idcontinentColumn {
                get {
                    return this.columnidcontinent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nationColumn {
                get {
                    return this.columnnation;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nationdatestartColumn {
                get {
                    return this.columnnationdatestart;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nationdatestopColumn {
                get {
                    return this.columnnationdatestop;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn oldnationColumn {
                get {
                    return this.columnoldnation;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn newnationColumn {
                get {
                    return this.columnnewnation;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public geo_cityviewRow this[int index] {
                get {
                    return ((geo_cityviewRow)(this.Rows[index]));
                }
            }
            
            public event geo_cityviewRowChangeEventHandler geo_cityviewRowChanging;
            
            public event geo_cityviewRowChangeEventHandler geo_cityviewRowChanged;
            
            public event geo_cityviewRowChangeEventHandler geo_cityviewRowDeleting;
            
            public event geo_cityviewRowChangeEventHandler geo_cityviewRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addgeo_cityviewRow(geo_cityviewRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public geo_cityviewRow Addgeo_cityviewRow(
                        int idcity, 
                        string title, 
                        int oldcity, 
                        int newcity, 
                        System.DateTime start, 
                        System.DateTime stop, 
                        int idcountry, 
                        string provincecode, 
                        string country, 
                        int oldcountry, 
                        int newcountry, 
                        System.DateTime countrydatestart, 
                        System.DateTime countrydatestop, 
                        int idregion, 
                        string region, 
                        System.DateTime regiondatestart, 
                        System.DateTime regiondatestop, 
                        int oldregion, 
                        int newregion, 
                        int idnation, 
                        int idcontinent, 
                        string nation, 
                        System.DateTime nationdatestart, 
                        System.DateTime nationdatestop, 
                        int oldnation, 
                        int newnation) {
                geo_cityviewRow rowgeo_cityviewRow = ((geo_cityviewRow)(this.NewRow()));
                rowgeo_cityviewRow.ItemArray = new object[] {
                        idcity,
                        title,
                        oldcity,
                        newcity,
                        start,
                        stop,
                        idcountry,
                        provincecode,
                        country,
                        oldcountry,
                        newcountry,
                        countrydatestart,
                        countrydatestop,
                        idregion,
                        region,
                        regiondatestart,
                        regiondatestop,
                        oldregion,
                        newregion,
                        idnation,
                        idcontinent,
                        nation,
                        nationdatestart,
                        nationdatestop,
                        oldnation,
                        newnation};
                this.Rows.Add(rowgeo_cityviewRow);
                return rowgeo_cityviewRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public geo_cityviewRow FindByidcity(int idcity) {
                return ((geo_cityviewRow)(this.Rows.Find(new object[] {
                            idcity})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                geo_cityviewDataTable cln = ((geo_cityviewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new geo_cityviewDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidcity = base.Columns["idcity"];
                this.columntitle = base.Columns["title"];
                this.columnoldcity = base.Columns["oldcity"];
                this.columnnewcity = base.Columns["newcity"];
                this.columnstart = base.Columns["start"];
                this.columnstop = base.Columns["stop"];
                this.columnidcountry = base.Columns["idcountry"];
                this.columnprovincecode = base.Columns["provincecode"];
                this.columncountry = base.Columns["country"];
                this.columnoldcountry = base.Columns["oldcountry"];
                this.columnnewcountry = base.Columns["newcountry"];
                this.columncountrydatestart = base.Columns["countrydatestart"];
                this.columncountrydatestop = base.Columns["countrydatestop"];
                this.columnidregion = base.Columns["idregion"];
                this.columnregion = base.Columns["region"];
                this.columnregiondatestart = base.Columns["regiondatestart"];
                this.columnregiondatestop = base.Columns["regiondatestop"];
                this.columnoldregion = base.Columns["oldregion"];
                this.columnnewregion = base.Columns["newregion"];
                this.columnidnation = base.Columns["idnation"];
                this.columnidcontinent = base.Columns["idcontinent"];
                this.columnnation = base.Columns["nation"];
                this.columnnationdatestart = base.Columns["nationdatestart"];
                this.columnnationdatestop = base.Columns["nationdatestop"];
                this.columnoldnation = base.Columns["oldnation"];
                this.columnnewnation = base.Columns["newnation"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidcity = new System.Data.DataColumn("idcity", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidcity);
                this.columntitle = new System.Data.DataColumn("title", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntitle);
                this.columnoldcity = new System.Data.DataColumn("oldcity", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnoldcity);
                this.columnnewcity = new System.Data.DataColumn("newcity", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnewcity);
                this.columnstart = new System.Data.DataColumn("start", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstart);
                this.columnstop = new System.Data.DataColumn("stop", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstop);
                this.columnidcountry = new System.Data.DataColumn("idcountry", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidcountry);
                this.columnprovincecode = new System.Data.DataColumn("provincecode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprovincecode);
                this.columncountry = new System.Data.DataColumn("country", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncountry);
                this.columnoldcountry = new System.Data.DataColumn("oldcountry", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnoldcountry);
                this.columnnewcountry = new System.Data.DataColumn("newcountry", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnewcountry);
                this.columncountrydatestart = new System.Data.DataColumn("countrydatestart", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncountrydatestart);
                this.columncountrydatestop = new System.Data.DataColumn("countrydatestop", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncountrydatestop);
                this.columnidregion = new System.Data.DataColumn("idregion", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidregion);
                this.columnregion = new System.Data.DataColumn("region", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnregion);
                this.columnregiondatestart = new System.Data.DataColumn("regiondatestart", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnregiondatestart);
                this.columnregiondatestop = new System.Data.DataColumn("regiondatestop", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnregiondatestop);
                this.columnoldregion = new System.Data.DataColumn("oldregion", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnoldregion);
                this.columnnewregion = new System.Data.DataColumn("newregion", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnewregion);
                this.columnidnation = new System.Data.DataColumn("idnation", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidnation);
                this.columnidcontinent = new System.Data.DataColumn("idcontinent", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidcontinent);
                this.columnnation = new System.Data.DataColumn("nation", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnation);
                this.columnnationdatestart = new System.Data.DataColumn("nationdatestart", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnationdatestart);
                this.columnnationdatestop = new System.Data.DataColumn("nationdatestop", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnationdatestop);
                this.columnoldnation = new System.Data.DataColumn("oldnation", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnoldnation);
                this.columnnewnation = new System.Data.DataColumn("newnation", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnewnation);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnidcity}, true));
                this.columnidcity.AllowDBNull = false;
                this.columnidcity.Unique = true;
                this.columnidcountry.AllowDBNull = false;
                this.columnidregion.AllowDBNull = false;
                this.columnidnation.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public geo_cityviewRow Newgeo_cityviewRow() {
                return ((geo_cityviewRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new geo_cityviewRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(geo_cityviewRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.geo_cityviewRowChanged != null)) {
                    this.geo_cityviewRowChanged(this, new geo_cityviewRowChangeEvent(((geo_cityviewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.geo_cityviewRowChanging != null)) {
                    this.geo_cityviewRowChanging(this, new geo_cityviewRowChangeEvent(((geo_cityviewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.geo_cityviewRowDeleted != null)) {
                    this.geo_cityviewRowDeleted(this, new geo_cityviewRowChangeEvent(((geo_cityviewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.geo_cityviewRowDeleting != null)) {
                    this.geo_cityviewRowDeleting(this, new geo_cityviewRowChangeEvent(((geo_cityviewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removegeo_cityviewRow(geo_cityviewRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                vistaForm ds = new vistaForm();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "geo_cityviewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class regionalrateforcityvalidityviewDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columntaxcode;
            
            private System.Data.DataColumn columnidregion;
            
            private System.Data.DataColumn columnregion;
            
            private System.Data.DataColumn columnidcity;
            
            private System.Data.DataColumn columncity;
            
            private System.Data.DataColumn columnvaliditystart;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcityvalidityviewDataTable() {
                this.TableName = "regionalrateforcityvalidityview";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal regionalrateforcityvalidityviewDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected regionalrateforcityvalidityviewDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn taxcodeColumn {
                get {
                    return this.columntaxcode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idregionColumn {
                get {
                    return this.columnidregion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn regionColumn {
                get {
                    return this.columnregion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idcityColumn {
                get {
                    return this.columnidcity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cityColumn {
                get {
                    return this.columncity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn validitystartColumn {
                get {
                    return this.columnvaliditystart;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcityvalidityviewRow this[int index] {
                get {
                    return ((regionalrateforcityvalidityviewRow)(this.Rows[index]));
                }
            }
            
            public event regionalrateforcityvalidityviewRowChangeEventHandler regionalrateforcityvalidityviewRowChanging;
            
            public event regionalrateforcityvalidityviewRowChangeEventHandler regionalrateforcityvalidityviewRowChanged;
            
            public event regionalrateforcityvalidityviewRowChangeEventHandler regionalrateforcityvalidityviewRowDeleting;
            
            public event regionalrateforcityvalidityviewRowChangeEventHandler regionalrateforcityvalidityviewRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddregionalrateforcityvalidityviewRow(regionalrateforcityvalidityviewRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcityvalidityviewRow AddregionalrateforcityvalidityviewRow(int taxcode, int idregion, string region, int idcity, string city, System.DateTime validitystart) {
                regionalrateforcityvalidityviewRow rowregionalrateforcityvalidityviewRow = ((regionalrateforcityvalidityviewRow)(this.NewRow()));
                rowregionalrateforcityvalidityviewRow.ItemArray = new object[] {
                        taxcode,
                        idregion,
                        region,
                        idcity,
                        city,
                        validitystart};
                this.Rows.Add(rowregionalrateforcityvalidityviewRow);
                return rowregionalrateforcityvalidityviewRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                regionalrateforcityvalidityviewDataTable cln = ((regionalrateforcityvalidityviewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new regionalrateforcityvalidityviewDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntaxcode = base.Columns["taxcode"];
                this.columnidregion = base.Columns["idregion"];
                this.columnregion = base.Columns["region"];
                this.columnidcity = base.Columns["idcity"];
                this.columncity = base.Columns["city"];
                this.columnvaliditystart = base.Columns["validitystart"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntaxcode = new System.Data.DataColumn("taxcode", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxcode);
                this.columnidregion = new System.Data.DataColumn("idregion", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidregion);
                this.columnregion = new System.Data.DataColumn("region", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnregion);
                this.columnidcity = new System.Data.DataColumn("idcity", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidcity);
                this.columncity = new System.Data.DataColumn("city", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncity);
                this.columnvaliditystart = new System.Data.DataColumn("validitystart", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvaliditystart);
                this.columntaxcode.AllowDBNull = false;
                this.columnidregion.AllowDBNull = false;
                this.columnidcity.AllowDBNull = false;
                this.columnvaliditystart.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcityvalidityviewRow NewregionalrateforcityvalidityviewRow() {
                return ((regionalrateforcityvalidityviewRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new regionalrateforcityvalidityviewRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(regionalrateforcityvalidityviewRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.regionalrateforcityvalidityviewRowChanged != null)) {
                    this.regionalrateforcityvalidityviewRowChanged(this, new regionalrateforcityvalidityviewRowChangeEvent(((regionalrateforcityvalidityviewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.regionalrateforcityvalidityviewRowChanging != null)) {
                    this.regionalrateforcityvalidityviewRowChanging(this, new regionalrateforcityvalidityviewRowChangeEvent(((regionalrateforcityvalidityviewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.regionalrateforcityvalidityviewRowDeleted != null)) {
                    this.regionalrateforcityvalidityviewRowDeleted(this, new regionalrateforcityvalidityviewRowChangeEvent(((regionalrateforcityvalidityviewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.regionalrateforcityvalidityviewRowDeleting != null)) {
                    this.regionalrateforcityvalidityviewRowDeleting(this, new regionalrateforcityvalidityviewRowChangeEvent(((regionalrateforcityvalidityviewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveregionalrateforcityvalidityviewRow(regionalrateforcityvalidityviewRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                vistaForm ds = new vistaForm();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "regionalrateforcityvalidityviewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class taxDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columntaxcode;
            
            private System.Data.DataColumn columndescription;
            
            private System.Data.DataColumn columntaxkind;
            
            private System.Data.DataColumn columnfiscaltaxcode;
            
            private System.Data.DataColumn columnflagunabatable;
            
            private System.Data.DataColumn columncu;
            
            private System.Data.DataColumn columnct;
            
            private System.Data.DataColumn columnlu;
            
            private System.Data.DataColumn columnlt;
            
            private System.Data.DataColumn columnactive;
            
            private System.Data.DataColumn columntaxablecode;
            
            private System.Data.DataColumn columngeoappliance;
            
            private System.Data.DataColumn columnappliancebasis;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxDataTable() {
                this.TableName = "tax";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal taxDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected taxDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn taxcodeColumn {
                get {
                    return this.columntaxcode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn taxkindColumn {
                get {
                    return this.columntaxkind;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn fiscaltaxcodeColumn {
                get {
                    return this.columnfiscaltaxcode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn flagunabatableColumn {
                get {
                    return this.columnflagunabatable;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cuColumn {
                get {
                    return this.columncu;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ctColumn {
                get {
                    return this.columnct;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn luColumn {
                get {
                    return this.columnlu;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ltColumn {
                get {
                    return this.columnlt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn activeColumn {
                get {
                    return this.columnactive;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn taxablecodeColumn {
                get {
                    return this.columntaxablecode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn geoapplianceColumn {
                get {
                    return this.columngeoappliance;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn appliancebasisColumn {
                get {
                    return this.columnappliancebasis;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxRow this[int index] {
                get {
                    return ((taxRow)(this.Rows[index]));
                }
            }
            
            public event taxRowChangeEventHandler taxRowChanging;
            
            public event taxRowChangeEventHandler taxRowChanged;
            
            public event taxRowChangeEventHandler taxRowDeleting;
            
            public event taxRowChangeEventHandler taxRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtaxRow(taxRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxRow AddtaxRow(int taxcode, string description, short taxkind, string fiscaltaxcode, string flagunabatable, string cu, System.DateTime ct, string lu, System.DateTime lt, string active, string taxablecode, string geoappliance, string appliancebasis) {
                taxRow rowtaxRow = ((taxRow)(this.NewRow()));
                rowtaxRow.ItemArray = new object[] {
                        taxcode,
                        description,
                        taxkind,
                        fiscaltaxcode,
                        flagunabatable,
                        cu,
                        ct,
                        lu,
                        lt,
                        active,
                        taxablecode,
                        geoappliance,
                        appliancebasis};
                this.Rows.Add(rowtaxRow);
                return rowtaxRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxRow FindBytaxcode(int taxcode) {
                return ((taxRow)(this.Rows.Find(new object[] {
                            taxcode})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                taxDataTable cln = ((taxDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new taxDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntaxcode = base.Columns["taxcode"];
                this.columndescription = base.Columns["description"];
                this.columntaxkind = base.Columns["taxkind"];
                this.columnfiscaltaxcode = base.Columns["fiscaltaxcode"];
                this.columnflagunabatable = base.Columns["flagunabatable"];
                this.columncu = base.Columns["cu"];
                this.columnct = base.Columns["ct"];
                this.columnlu = base.Columns["lu"];
                this.columnlt = base.Columns["lt"];
                this.columnactive = base.Columns["active"];
                this.columntaxablecode = base.Columns["taxablecode"];
                this.columngeoappliance = base.Columns["geoappliance"];
                this.columnappliancebasis = base.Columns["appliancebasis"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntaxcode = new System.Data.DataColumn("taxcode", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxcode);
                this.columndescription = new System.Data.DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columntaxkind = new System.Data.DataColumn("taxkind", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxkind);
                this.columnfiscaltaxcode = new System.Data.DataColumn("fiscaltaxcode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfiscaltaxcode);
                this.columnflagunabatable = new System.Data.DataColumn("flagunabatable", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnflagunabatable);
                this.columncu = new System.Data.DataColumn("cu", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncu);
                this.columnct = new System.Data.DataColumn("ct", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnct);
                this.columnlu = new System.Data.DataColumn("lu", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlu);
                this.columnlt = new System.Data.DataColumn("lt", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlt);
                this.columnactive = new System.Data.DataColumn("active", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnactive);
                this.columntaxablecode = new System.Data.DataColumn("taxablecode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxablecode);
                this.columngeoappliance = new System.Data.DataColumn("geoappliance", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngeoappliance);
                this.columnappliancebasis = new System.Data.DataColumn("appliancebasis", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnappliancebasis);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columntaxcode}, true));
                this.columntaxcode.AllowDBNull = false;
                this.columntaxcode.Unique = true;
                this.columndescription.AllowDBNull = false;
                this.columncu.AllowDBNull = false;
                this.columnct.AllowDBNull = false;
                this.columnlu.AllowDBNull = false;
                this.columnlt.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxRow NewtaxRow() {
                return ((taxRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new taxRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(taxRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.taxRowChanged != null)) {
                    this.taxRowChanged(this, new taxRowChangeEvent(((taxRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.taxRowChanging != null)) {
                    this.taxRowChanging(this, new taxRowChangeEvent(((taxRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.taxRowDeleted != null)) {
                    this.taxRowDeleted(this, new taxRowChangeEvent(((taxRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.taxRowDeleting != null)) {
                    this.taxRowDeleting(this, new taxRowChangeEvent(((taxRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetaxRow(taxRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                vistaForm ds = new vistaForm();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "taxDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class regionalrateforcitybracketDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columntaxcode;
            
            private System.Data.DataColumn columnidcity;
            
            private System.Data.DataColumn columnvaliditystart;
            
            private System.Data.DataColumn columnnbracket;
            
            private System.Data.DataColumn columnminamount;
            
            private System.Data.DataColumn columnmaxamount;
            
            private System.Data.DataColumn columnlu;
            
            private System.Data.DataColumn columnlt;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcitybracketDataTable() {
                this.TableName = "regionalrateforcitybracket";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal regionalrateforcitybracketDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected regionalrateforcitybracketDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn taxcodeColumn {
                get {
                    return this.columntaxcode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idcityColumn {
                get {
                    return this.columnidcity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn validitystartColumn {
                get {
                    return this.columnvaliditystart;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nbracketColumn {
                get {
                    return this.columnnbracket;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn minamountColumn {
                get {
                    return this.columnminamount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn maxamountColumn {
                get {
                    return this.columnmaxamount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn luColumn {
                get {
                    return this.columnlu;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ltColumn {
                get {
                    return this.columnlt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcitybracketRow this[int index] {
                get {
                    return ((regionalrateforcitybracketRow)(this.Rows[index]));
                }
            }
            
            public event regionalrateforcitybracketRowChangeEventHandler regionalrateforcitybracketRowChanging;
            
            public event regionalrateforcitybracketRowChangeEventHandler regionalrateforcitybracketRowChanged;
            
            public event regionalrateforcitybracketRowChangeEventHandler regionalrateforcitybracketRowDeleting;
            
            public event regionalrateforcitybracketRowChangeEventHandler regionalrateforcitybracketRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddregionalrateforcitybracketRow(regionalrateforcitybracketRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcitybracketRow AddregionalrateforcitybracketRow(int taxcode, int idcity, System.DateTime validitystart, int nbracket, decimal minamount, decimal maxamount, string lu, System.DateTime lt) {
                regionalrateforcitybracketRow rowregionalrateforcitybracketRow = ((regionalrateforcitybracketRow)(this.NewRow()));
                rowregionalrateforcitybracketRow.ItemArray = new object[] {
                        taxcode,
                        idcity,
                        validitystart,
                        nbracket,
                        minamount,
                        maxamount,
                        lu,
                        lt};
                this.Rows.Add(rowregionalrateforcitybracketRow);
                return rowregionalrateforcitybracketRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcitybracketRow FindBytaxcodeidcityvaliditystartnbracket(int taxcode, int idcity, System.DateTime validitystart, int nbracket) {
                return ((regionalrateforcitybracketRow)(this.Rows.Find(new object[] {
                            taxcode,
                            idcity,
                            validitystart,
                            nbracket})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                regionalrateforcitybracketDataTable cln = ((regionalrateforcitybracketDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new regionalrateforcitybracketDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntaxcode = base.Columns["taxcode"];
                this.columnidcity = base.Columns["idcity"];
                this.columnvaliditystart = base.Columns["validitystart"];
                this.columnnbracket = base.Columns["nbracket"];
                this.columnminamount = base.Columns["minamount"];
                this.columnmaxamount = base.Columns["maxamount"];
                this.columnlu = base.Columns["lu"];
                this.columnlt = base.Columns["lt"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntaxcode = new System.Data.DataColumn("taxcode", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxcode);
                this.columnidcity = new System.Data.DataColumn("idcity", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidcity);
                this.columnvaliditystart = new System.Data.DataColumn("validitystart", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvaliditystart);
                this.columnnbracket = new System.Data.DataColumn("nbracket", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnbracket);
                this.columnminamount = new System.Data.DataColumn("minamount", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnminamount);
                this.columnmaxamount = new System.Data.DataColumn("maxamount", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmaxamount);
                this.columnlu = new System.Data.DataColumn("lu", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlu);
                this.columnlt = new System.Data.DataColumn("lt", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlt);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columntaxcode,
                                this.columnidcity,
                                this.columnvaliditystart,
                                this.columnnbracket}, true));
                this.columntaxcode.AllowDBNull = false;
                this.columnidcity.AllowDBNull = false;
                this.columnvaliditystart.AllowDBNull = false;
                this.columnnbracket.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcitybracketRow NewregionalrateforcitybracketRow() {
                return ((regionalrateforcitybracketRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new regionalrateforcitybracketRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(regionalrateforcitybracketRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.regionalrateforcitybracketRowChanged != null)) {
                    this.regionalrateforcitybracketRowChanged(this, new regionalrateforcitybracketRowChangeEvent(((regionalrateforcitybracketRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.regionalrateforcitybracketRowChanging != null)) {
                    this.regionalrateforcitybracketRowChanging(this, new regionalrateforcitybracketRowChangeEvent(((regionalrateforcitybracketRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.regionalrateforcitybracketRowDeleted != null)) {
                    this.regionalrateforcitybracketRowDeleted(this, new regionalrateforcitybracketRowChangeEvent(((regionalrateforcitybracketRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.regionalrateforcitybracketRowDeleting != null)) {
                    this.regionalrateforcitybracketRowDeleting(this, new regionalrateforcitybracketRowChangeEvent(((regionalrateforcitybracketRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveregionalrateforcitybracketRow(regionalrateforcitybracketRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                vistaForm ds = new vistaForm();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "regionalrateforcitybracketDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class regionalrateforcityvalidityRow : System.Data.DataRow {
            
            private regionalrateforcityvalidityDataTable tableregionalrateforcityvalidity;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal regionalrateforcityvalidityRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableregionalrateforcityvalidity = ((regionalrateforcityvalidityDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int taxcode {
                get {
                    return ((int)(this[this.tableregionalrateforcityvalidity.taxcodeColumn]));
                }
                set {
                    this[this.tableregionalrateforcityvalidity.taxcodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idcity {
                get {
                    return ((int)(this[this.tableregionalrateforcityvalidity.idcityColumn]));
                }
                set {
                    this[this.tableregionalrateforcityvalidity.idcityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime validitystart {
                get {
                    return ((System.DateTime)(this[this.tableregionalrateforcityvalidity.validitystartColumn]));
                }
                set {
                    this[this.tableregionalrateforcityvalidity.validitystartColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public geo_cityviewRow geo_cityviewRow {
                get {
                    return ((geo_cityviewRow)(this.GetParentRow(this.Table.ParentRelations["geo_cityviewregionalrateforcityvalidity"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["geo_cityviewregionalrateforcityvalidity"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxRow taxRow {
                get {
                    return ((taxRow)(this.GetParentRow(this.Table.ParentRelations["taxregionalrateforcityvalidity"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["taxregionalrateforcityvalidity"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcitybracketRow[] GetregionalrateforcitybracketRows() {
                return ((regionalrateforcitybracketRow[])(base.GetChildRows(this.Table.ChildRelations["regionalrateforcityvalidityregionalrateforcitybracket"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class geo_cityviewRow : System.Data.DataRow {
            
            private geo_cityviewDataTable tablegeo_cityview;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal geo_cityviewRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablegeo_cityview = ((geo_cityviewDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idcity {
                get {
                    return ((int)(this[this.tablegeo_cityview.idcityColumn]));
                }
                set {
                    this[this.tablegeo_cityview.idcityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string title {
                get {
                    try {
                        return ((string)(this[this.tablegeo_cityview.titleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'title\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.titleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int oldcity {
                get {
                    try {
                        return ((int)(this[this.tablegeo_cityview.oldcityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'oldcity\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.oldcityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int newcity {
                get {
                    try {
                        return ((int)(this[this.tablegeo_cityview.newcityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'newcity\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.newcityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime start {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_cityview.startColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'start\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.startColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime stop {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_cityview.stopColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'stop\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.stopColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idcountry {
                get {
                    return ((int)(this[this.tablegeo_cityview.idcountryColumn]));
                }
                set {
                    this[this.tablegeo_cityview.idcountryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string provincecode {
                get {
                    try {
                        return ((string)(this[this.tablegeo_cityview.provincecodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'provincecode\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.provincecodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string country {
                get {
                    try {
                        return ((string)(this[this.tablegeo_cityview.countryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'country\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.countryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int oldcountry {
                get {
                    try {
                        return ((int)(this[this.tablegeo_cityview.oldcountryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'oldcountry\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.oldcountryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int newcountry {
                get {
                    try {
                        return ((int)(this[this.tablegeo_cityview.newcountryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'newcountry\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.newcountryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime countrydatestart {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_cityview.countrydatestartColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'countrydatestart\' nella tabella \'geo_cityview\' è DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.countrydatestartColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime countrydatestop {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_cityview.countrydatestopColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'countrydatestop\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.countrydatestopColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idregion {
                get {
                    return ((int)(this[this.tablegeo_cityview.idregionColumn]));
                }
                set {
                    this[this.tablegeo_cityview.idregionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string region {
                get {
                    try {
                        return ((string)(this[this.tablegeo_cityview.regionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'region\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.regionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime regiondatestart {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_cityview.regiondatestartColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'regiondatestart\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.regiondatestartColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime regiondatestop {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_cityview.regiondatestopColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'regiondatestop\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.regiondatestopColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int oldregion {
                get {
                    try {
                        return ((int)(this[this.tablegeo_cityview.oldregionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'oldregion\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.oldregionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int newregion {
                get {
                    try {
                        return ((int)(this[this.tablegeo_cityview.newregionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'newregion\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.newregionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idnation {
                get {
                    return ((int)(this[this.tablegeo_cityview.idnationColumn]));
                }
                set {
                    this[this.tablegeo_cityview.idnationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idcontinent {
                get {
                    try {
                        return ((int)(this[this.tablegeo_cityview.idcontinentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'idcontinent\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.idcontinentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nation {
                get {
                    try {
                        return ((string)(this[this.tablegeo_cityview.nationColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'nation\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.nationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime nationdatestart {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_cityview.nationdatestartColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'nationdatestart\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.nationdatestartColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime nationdatestop {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_cityview.nationdatestopColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'nationdatestop\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.nationdatestopColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int oldnation {
                get {
                    try {
                        return ((int)(this[this.tablegeo_cityview.oldnationColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'oldnation\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.oldnationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int newnation {
                get {
                    try {
                        return ((int)(this[this.tablegeo_cityview.newnationColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'newnation\' nella tabella \'geo_cityview\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_cityview.newnationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstitleNull() {
                return this.IsNull(this.tablegeo_cityview.titleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettitleNull() {
                this[this.tablegeo_cityview.titleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsoldcityNull() {
                return this.IsNull(this.tablegeo_cityview.oldcityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetoldcityNull() {
                this[this.tablegeo_cityview.oldcityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnewcityNull() {
                return this.IsNull(this.tablegeo_cityview.newcityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnewcityNull() {
                this[this.tablegeo_cityview.newcityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstartNull() {
                return this.IsNull(this.tablegeo_cityview.startColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstartNull() {
                this[this.tablegeo_cityview.startColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstopNull() {
                return this.IsNull(this.tablegeo_cityview.stopColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstopNull() {
                this[this.tablegeo_cityview.stopColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprovincecodeNull() {
                return this.IsNull(this.tablegeo_cityview.provincecodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprovincecodeNull() {
                this[this.tablegeo_cityview.provincecodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscountryNull() {
                return this.IsNull(this.tablegeo_cityview.countryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcountryNull() {
                this[this.tablegeo_cityview.countryColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsoldcountryNull() {
                return this.IsNull(this.tablegeo_cityview.oldcountryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetoldcountryNull() {
                this[this.tablegeo_cityview.oldcountryColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnewcountryNull() {
                return this.IsNull(this.tablegeo_cityview.newcountryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnewcountryNull() {
                this[this.tablegeo_cityview.newcountryColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscountrydatestartNull() {
                return this.IsNull(this.tablegeo_cityview.countrydatestartColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcountrydatestartNull() {
                this[this.tablegeo_cityview.countrydatestartColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscountrydatestopNull() {
                return this.IsNull(this.tablegeo_cityview.countrydatestopColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcountrydatestopNull() {
                this[this.tablegeo_cityview.countrydatestopColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsregionNull() {
                return this.IsNull(this.tablegeo_cityview.regionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetregionNull() {
                this[this.tablegeo_cityview.regionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsregiondatestartNull() {
                return this.IsNull(this.tablegeo_cityview.regiondatestartColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetregiondatestartNull() {
                this[this.tablegeo_cityview.regiondatestartColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsregiondatestopNull() {
                return this.IsNull(this.tablegeo_cityview.regiondatestopColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetregiondatestopNull() {
                this[this.tablegeo_cityview.regiondatestopColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsoldregionNull() {
                return this.IsNull(this.tablegeo_cityview.oldregionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetoldregionNull() {
                this[this.tablegeo_cityview.oldregionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnewregionNull() {
                return this.IsNull(this.tablegeo_cityview.newregionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnewregionNull() {
                this[this.tablegeo_cityview.newregionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidcontinentNull() {
                return this.IsNull(this.tablegeo_cityview.idcontinentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidcontinentNull() {
                this[this.tablegeo_cityview.idcontinentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnationNull() {
                return this.IsNull(this.tablegeo_cityview.nationColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnationNull() {
                this[this.tablegeo_cityview.nationColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnationdatestartNull() {
                return this.IsNull(this.tablegeo_cityview.nationdatestartColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnationdatestartNull() {
                this[this.tablegeo_cityview.nationdatestartColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnationdatestopNull() {
                return this.IsNull(this.tablegeo_cityview.nationdatestopColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnationdatestopNull() {
                this[this.tablegeo_cityview.nationdatestopColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsoldnationNull() {
                return this.IsNull(this.tablegeo_cityview.oldnationColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetoldnationNull() {
                this[this.tablegeo_cityview.oldnationColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnewnationNull() {
                return this.IsNull(this.tablegeo_cityview.newnationColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnewnationNull() {
                this[this.tablegeo_cityview.newnationColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcityvalidityRow[] GetregionalrateforcityvalidityRows() {
                return ((regionalrateforcityvalidityRow[])(base.GetChildRows(this.Table.ChildRelations["geo_cityviewregionalrateforcityvalidity"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class regionalrateforcityvalidityviewRow : System.Data.DataRow {
            
            private regionalrateforcityvalidityviewDataTable tableregionalrateforcityvalidityview;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal regionalrateforcityvalidityviewRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableregionalrateforcityvalidityview = ((regionalrateforcityvalidityviewDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int taxcode {
                get {
                    return ((int)(this[this.tableregionalrateforcityvalidityview.taxcodeColumn]));
                }
                set {
                    this[this.tableregionalrateforcityvalidityview.taxcodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idregion {
                get {
                    return ((int)(this[this.tableregionalrateforcityvalidityview.idregionColumn]));
                }
                set {
                    this[this.tableregionalrateforcityvalidityview.idregionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string region {
                get {
                    try {
                        return ((string)(this[this.tableregionalrateforcityvalidityview.regionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'region\' nella tabella \'regionalrateforcityvalidityview\' " +
                                "è DBNull.", e);
                    }
                }
                set {
                    this[this.tableregionalrateforcityvalidityview.regionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idcity {
                get {
                    return ((int)(this[this.tableregionalrateforcityvalidityview.idcityColumn]));
                }
                set {
                    this[this.tableregionalrateforcityvalidityview.idcityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string city {
                get {
                    try {
                        return ((string)(this[this.tableregionalrateforcityvalidityview.cityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'city\' nella tabella \'regionalrateforcityvalidityview\' è " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableregionalrateforcityvalidityview.cityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime validitystart {
                get {
                    return ((System.DateTime)(this[this.tableregionalrateforcityvalidityview.validitystartColumn]));
                }
                set {
                    this[this.tableregionalrateforcityvalidityview.validitystartColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsregionNull() {
                return this.IsNull(this.tableregionalrateforcityvalidityview.regionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetregionNull() {
                this[this.tableregionalrateforcityvalidityview.regionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscityNull() {
                return this.IsNull(this.tableregionalrateforcityvalidityview.cityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcityNull() {
                this[this.tableregionalrateforcityvalidityview.cityColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class taxRow : System.Data.DataRow {
            
            private taxDataTable tabletax;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal taxRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletax = ((taxDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int taxcode {
                get {
                    return ((int)(this[this.tabletax.taxcodeColumn]));
                }
                set {
                    this[this.tabletax.taxcodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    return ((string)(this[this.tabletax.descriptionColumn]));
                }
                set {
                    this[this.tabletax.descriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short taxkind {
                get {
                    try {
                        return ((short)(this[this.tabletax.taxkindColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'taxkind\' nella tabella \'tax\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletax.taxkindColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fiscaltaxcode {
                get {
                    try {
                        return ((string)(this[this.tabletax.fiscaltaxcodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'fiscaltaxcode\' nella tabella \'tax\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletax.fiscaltaxcodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string flagunabatable {
                get {
                    try {
                        return ((string)(this[this.tabletax.flagunabatableColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'flagunabatable\' nella tabella \'tax\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletax.flagunabatableColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cu {
                get {
                    return ((string)(this[this.tabletax.cuColumn]));
                }
                set {
                    this[this.tabletax.cuColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ct {
                get {
                    return ((System.DateTime)(this[this.tabletax.ctColumn]));
                }
                set {
                    this[this.tabletax.ctColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lu {
                get {
                    return ((string)(this[this.tabletax.luColumn]));
                }
                set {
                    this[this.tabletax.luColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime lt {
                get {
                    return ((System.DateTime)(this[this.tabletax.ltColumn]));
                }
                set {
                    this[this.tabletax.ltColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string active {
                get {
                    try {
                        return ((string)(this[this.tabletax.activeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'active\' nella tabella \'tax\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletax.activeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string taxablecode {
                get {
                    try {
                        return ((string)(this[this.tabletax.taxablecodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'taxablecode\' nella tabella \'tax\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletax.taxablecodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string geoappliance {
                get {
                    try {
                        return ((string)(this[this.tabletax.geoapplianceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'geoappliance\' nella tabella \'tax\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletax.geoapplianceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string appliancebasis {
                get {
                    try {
                        return ((string)(this[this.tabletax.appliancebasisColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'appliancebasis\' nella tabella \'tax\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletax.appliancebasisColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstaxkindNull() {
                return this.IsNull(this.tabletax.taxkindColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettaxkindNull() {
                this[this.tabletax.taxkindColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfiscaltaxcodeNull() {
                return this.IsNull(this.tabletax.fiscaltaxcodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfiscaltaxcodeNull() {
                this[this.tabletax.fiscaltaxcodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsflagunabatableNull() {
                return this.IsNull(this.tabletax.flagunabatableColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetflagunabatableNull() {
                this[this.tabletax.flagunabatableColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsactiveNull() {
                return this.IsNull(this.tabletax.activeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetactiveNull() {
                this[this.tabletax.activeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstaxablecodeNull() {
                return this.IsNull(this.tabletax.taxablecodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettaxablecodeNull() {
                this[this.tabletax.taxablecodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgeoapplianceNull() {
                return this.IsNull(this.tabletax.geoapplianceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgeoapplianceNull() {
                this[this.tabletax.geoapplianceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsappliancebasisNull() {
                return this.IsNull(this.tabletax.appliancebasisColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetappliancebasisNull() {
                this[this.tabletax.appliancebasisColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcityvalidityRow[] GetregionalrateforcityvalidityRows() {
                return ((regionalrateforcityvalidityRow[])(base.GetChildRows(this.Table.ChildRelations["taxregionalrateforcityvalidity"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class regionalrateforcitybracketRow : System.Data.DataRow {
            
            private regionalrateforcitybracketDataTable tableregionalrateforcitybracket;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal regionalrateforcitybracketRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableregionalrateforcitybracket = ((regionalrateforcitybracketDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int taxcode {
                get {
                    return ((int)(this[this.tableregionalrateforcitybracket.taxcodeColumn]));
                }
                set {
                    this[this.tableregionalrateforcitybracket.taxcodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idcity {
                get {
                    return ((int)(this[this.tableregionalrateforcitybracket.idcityColumn]));
                }
                set {
                    this[this.tableregionalrateforcitybracket.idcityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime validitystart {
                get {
                    return ((System.DateTime)(this[this.tableregionalrateforcitybracket.validitystartColumn]));
                }
                set {
                    this[this.tableregionalrateforcitybracket.validitystartColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int nbracket {
                get {
                    return ((int)(this[this.tableregionalrateforcitybracket.nbracketColumn]));
                }
                set {
                    this[this.tableregionalrateforcitybracket.nbracketColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal minamount {
                get {
                    try {
                        return ((decimal)(this[this.tableregionalrateforcitybracket.minamountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'minamount\' nella tabella \'regionalrateforcitybracket\' è " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableregionalrateforcitybracket.minamountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal maxamount {
                get {
                    try {
                        return ((decimal)(this[this.tableregionalrateforcitybracket.maxamountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'maxamount\' nella tabella \'regionalrateforcitybracket\' è " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableregionalrateforcitybracket.maxamountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lu {
                get {
                    try {
                        return ((string)(this[this.tableregionalrateforcitybracket.luColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'lu\' nella tabella \'regionalrateforcitybracket\' è DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableregionalrateforcitybracket.luColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime lt {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableregionalrateforcitybracket.ltColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'lt\' nella tabella \'regionalrateforcitybracket\' è DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableregionalrateforcitybracket.ltColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcityvalidityRow regionalrateforcityvalidityRowParent {
                get {
                    return ((regionalrateforcityvalidityRow)(this.GetParentRow(this.Table.ParentRelations["regionalrateforcityvalidityregionalrateforcitybracket"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["regionalrateforcityvalidityregionalrateforcitybracket"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsminamountNull() {
                return this.IsNull(this.tableregionalrateforcitybracket.minamountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetminamountNull() {
                this[this.tableregionalrateforcitybracket.minamountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaxamountNull() {
                return this.IsNull(this.tableregionalrateforcitybracket.maxamountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaxamountNull() {
                this[this.tableregionalrateforcitybracket.maxamountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsluNull() {
                return this.IsNull(this.tableregionalrateforcitybracket.luColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetluNull() {
                this[this.tableregionalrateforcitybracket.luColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsltNull() {
                return this.IsNull(this.tableregionalrateforcitybracket.ltColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetltNull() {
                this[this.tableregionalrateforcitybracket.ltColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class regionalrateforcityvalidityRowChangeEvent : System.EventArgs {
            
            private regionalrateforcityvalidityRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcityvalidityRowChangeEvent(regionalrateforcityvalidityRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcityvalidityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class geo_cityviewRowChangeEvent : System.EventArgs {
            
            private geo_cityviewRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public geo_cityviewRowChangeEvent(geo_cityviewRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public geo_cityviewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class regionalrateforcityvalidityviewRowChangeEvent : System.EventArgs {
            
            private regionalrateforcityvalidityviewRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcityvalidityviewRowChangeEvent(regionalrateforcityvalidityviewRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcityvalidityviewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class taxRowChangeEvent : System.EventArgs {
            
            private taxRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxRowChangeEvent(taxRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class regionalrateforcitybracketRowChangeEvent : System.EventArgs {
            
            private regionalrateforcitybracketRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcitybracketRowChangeEvent(regionalrateforcitybracketRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalrateforcitybracketRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
