
/*
Easy
Copyright (C) 2021 Universit√† degli Studi di Catania (www.unict.it)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace webuser_default.helpDeskService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="doHelpDeskSoap", Namespace="http://SERVER/")]
    public partial class doHelpDesk : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback registerClienteOperationCompleted;
        
        private System.Threading.SendOrPostCallback aggiornaClienteOperationCompleted;
        
        private System.Threading.SendOrPostCallback registerStrutturaOperationCompleted;
        
        private System.Threading.SendOrPostCallback registerEnteOperationCompleted;
        
        private System.Threading.SendOrPostCallback elencaEntiOperationCompleted;
        
        private System.Threading.SendOrPostCallback getStatoTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback creaTicketOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public doHelpDesk() {
            this.Url = global::webuser_default.Properties.Settings.Default.webuser_default_helpDeskService_doHelpDesk;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event registerClienteCompletedEventHandler registerClienteCompleted;
        
        /// <remarks/>
        public event aggiornaClienteCompletedEventHandler aggiornaClienteCompleted;
        
        /// <remarks/>
        public event registerStrutturaCompletedEventHandler registerStrutturaCompleted;
        
        /// <remarks/>
        public event registerEnteCompletedEventHandler registerEnteCompleted;
        
        /// <remarks/>
        public event elencaEntiCompletedEventHandler elencaEntiCompleted;
        
        /// <remarks/>
        public event getStatoTicketCompletedEventHandler getStatoTicketCompleted;
        
        /// <remarks/>
        public event creaTicketCompletedEventHandler creaTicketCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SERVER/registerCliente", RequestNamespace="http://SERVER/", ResponseNamespace="http://SERVER/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string registerCliente(string idente, string idstruttura, string email, string tel1, string tel2, string cell, string nome, string cognome, string sessoMF, string titolo, string username) {
            object[] results = this.Invoke("registerCliente", new object[] {
                        idente,
                        idstruttura,
                        email,
                        tel1,
                        tel2,
                        cell,
                        nome,
                        cognome,
                        sessoMF,
                        titolo,
                        username});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void registerClienteAsync(string idente, string idstruttura, string email, string tel1, string tel2, string cell, string nome, string cognome, string sessoMF, string titolo, string username) {
            this.registerClienteAsync(idente, idstruttura, email, tel1, tel2, cell, nome, cognome, sessoMF, titolo, username, null);
        }
        
        /// <remarks/>
        public void registerClienteAsync(string idente, string idstruttura, string email, string tel1, string tel2, string cell, string nome, string cognome, string sessoMF, string titolo, string username, object userState) {
            if ((this.registerClienteOperationCompleted == null)) {
                this.registerClienteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregisterClienteOperationCompleted);
            }
            this.InvokeAsync("registerCliente", new object[] {
                        idente,
                        idstruttura,
                        email,
                        tel1,
                        tel2,
                        cell,
                        nome,
                        cognome,
                        sessoMF,
                        titolo,
                        username}, this.registerClienteOperationCompleted, userState);
        }
        
        private void OnregisterClienteOperationCompleted(object arg) {
            if ((this.registerClienteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.registerClienteCompleted(this, new registerClienteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SERVER/aggiornaCliente", RequestNamespace="http://SERVER/", ResponseNamespace="http://SERVER/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string aggiornaCliente(string idcliente, string idente, string email, string tel1, string tel2, string cell, string nome, string cognome, string sessoMF, string titolo, string username) {
            object[] results = this.Invoke("aggiornaCliente", new object[] {
                        idcliente,
                        idente,
                        email,
                        tel1,
                        tel2,
                        cell,
                        nome,
                        cognome,
                        sessoMF,
                        titolo,
                        username});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void aggiornaClienteAsync(string idcliente, string idente, string email, string tel1, string tel2, string cell, string nome, string cognome, string sessoMF, string titolo, string username) {
            this.aggiornaClienteAsync(idcliente, idente, email, tel1, tel2, cell, nome, cognome, sessoMF, titolo, username, null);
        }
        
        /// <remarks/>
        public void aggiornaClienteAsync(string idcliente, string idente, string email, string tel1, string tel2, string cell, string nome, string cognome, string sessoMF, string titolo, string username, object userState) {
            if ((this.aggiornaClienteOperationCompleted == null)) {
                this.aggiornaClienteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaggiornaClienteOperationCompleted);
            }
            this.InvokeAsync("aggiornaCliente", new object[] {
                        idcliente,
                        idente,
                        email,
                        tel1,
                        tel2,
                        cell,
                        nome,
                        cognome,
                        sessoMF,
                        titolo,
                        username}, this.aggiornaClienteOperationCompleted, userState);
        }
        
        private void OnaggiornaClienteOperationCompleted(object arg) {
            if ((this.aggiornaClienteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.aggiornaClienteCompleted(this, new aggiornaClienteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SERVER/registerStruttura", RequestNamespace="http://SERVER/", ResponseNamespace="http://SERVER/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string registerStruttura(string nomeDip, string idente) {
            object[] results = this.Invoke("registerStruttura", new object[] {
                        nomeDip,
                        idente});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void registerStrutturaAsync(string nomeDip, string idente) {
            this.registerStrutturaAsync(nomeDip, idente, null);
        }
        
        /// <remarks/>
        public void registerStrutturaAsync(string nomeDip, string idente, object userState) {
            if ((this.registerStrutturaOperationCompleted == null)) {
                this.registerStrutturaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregisterStrutturaOperationCompleted);
            }
            this.InvokeAsync("registerStruttura", new object[] {
                        nomeDip,
                        idente}, this.registerStrutturaOperationCompleted, userState);
        }
        
        private void OnregisterStrutturaOperationCompleted(object arg) {
            if ((this.registerStrutturaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.registerStrutturaCompleted(this, new registerStrutturaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SERVER/registerEnte", RequestNamespace="http://SERVER/", ResponseNamespace="http://SERVER/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string registerEnte(string nomeEnte, string p_iva) {
            object[] results = this.Invoke("registerEnte", new object[] {
                        nomeEnte,
                        p_iva});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void registerEnteAsync(string nomeEnte, string p_iva) {
            this.registerEnteAsync(nomeEnte, p_iva, null);
        }
        
        /// <remarks/>
        public void registerEnteAsync(string nomeEnte, string p_iva, object userState) {
            if ((this.registerEnteOperationCompleted == null)) {
                this.registerEnteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnregisterEnteOperationCompleted);
            }
            this.InvokeAsync("registerEnte", new object[] {
                        nomeEnte,
                        p_iva}, this.registerEnteOperationCompleted, userState);
        }
        
        private void OnregisterEnteOperationCompleted(object arg) {
            if ((this.registerEnteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.registerEnteCompleted(this, new registerEnteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SERVER/elencaEnti", RequestNamespace="http://SERVER/", ResponseNamespace="http://SERVER/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string elencaEnti() {
            object[] results = this.Invoke("elencaEnti", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void elencaEntiAsync() {
            this.elencaEntiAsync(null);
        }
        
        /// <remarks/>
        public void elencaEntiAsync(object userState) {
            if ((this.elencaEntiOperationCompleted == null)) {
                this.elencaEntiOperationCompleted = new System.Threading.SendOrPostCallback(this.OnelencaEntiOperationCompleted);
            }
            this.InvokeAsync("elencaEnti", new object[0], this.elencaEntiOperationCompleted, userState);
        }
        
        private void OnelencaEntiOperationCompleted(object arg) {
            if ((this.elencaEntiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.elencaEntiCompleted(this, new elencaEntiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SERVER/getStatoTicket", RequestNamespace="http://SERVER/", ResponseNamespace="http://SERVER/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getStatoTicket(int idticket) {
            object[] results = this.Invoke("getStatoTicket", new object[] {
                        idticket});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getStatoTicketAsync(int idticket) {
            this.getStatoTicketAsync(idticket, null);
        }
        
        /// <remarks/>
        public void getStatoTicketAsync(int idticket, object userState) {
            if ((this.getStatoTicketOperationCompleted == null)) {
                this.getStatoTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetStatoTicketOperationCompleted);
            }
            this.InvokeAsync("getStatoTicket", new object[] {
                        idticket}, this.getStatoTicketOperationCompleted, userState);
        }
        
        private void OngetStatoTicketOperationCompleted(object arg) {
            if ((this.getStatoTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getStatoTicketCompleted(this, new getStatoTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SERVER/creaTicket", RequestNamespace="http://SERVER/", ResponseNamespace="http://SERVER/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string creaTicket(int idcliente, int idstruttura, int idente, string dataSet, string immagine, string stato, string attachment, string attachmentname, string outputView, string dlllist, string problema) {
            object[] results = this.Invoke("creaTicket", new object[] {
                        idcliente,
                        idstruttura,
                        idente,
                        dataSet,
                        immagine,
                        stato,
                        attachment,
                        attachmentname,
                        outputView,
                        dlllist,
                        problema});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void creaTicketAsync(int idcliente, int idstruttura, int idente, string dataSet, string immagine, string stato, string attachment, string attachmentname, string outputView, string dlllist, string problema) {
            this.creaTicketAsync(idcliente, idstruttura, idente, dataSet, immagine, stato, attachment, attachmentname, outputView, dlllist, problema, null);
        }
        
        /// <remarks/>
        public void creaTicketAsync(int idcliente, int idstruttura, int idente, string dataSet, string immagine, string stato, string attachment, string attachmentname, string outputView, string dlllist, string problema, object userState) {
            if ((this.creaTicketOperationCompleted == null)) {
                this.creaTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreaTicketOperationCompleted);
            }
            this.InvokeAsync("creaTicket", new object[] {
                        idcliente,
                        idstruttura,
                        idente,
                        dataSet,
                        immagine,
                        stato,
                        attachment,
                        attachmentname,
                        outputView,
                        dlllist,
                        problema}, this.creaTicketOperationCompleted, userState);
        }
        
        private void OncreaTicketOperationCompleted(object arg) {
            if ((this.creaTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.creaTicketCompleted(this, new creaTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void registerClienteCompletedEventHandler(object sender, registerClienteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class registerClienteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal registerClienteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void aggiornaClienteCompletedEventHandler(object sender, aggiornaClienteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class aggiornaClienteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal aggiornaClienteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void registerStrutturaCompletedEventHandler(object sender, registerStrutturaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class registerStrutturaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal registerStrutturaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void registerEnteCompletedEventHandler(object sender, registerEnteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class registerEnteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal registerEnteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void elencaEntiCompletedEventHandler(object sender, elencaEntiCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class elencaEntiCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal elencaEntiCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void getStatoTicketCompletedEventHandler(object sender, getStatoTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getStatoTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getStatoTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void creaTicketCompletedEventHandler(object sender, creaTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class creaTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal creaTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591