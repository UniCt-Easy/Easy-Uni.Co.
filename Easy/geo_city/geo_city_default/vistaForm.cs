
/*
Easy
Copyright (C) 2021 Università degli Studi di Catania (www.unict.it)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2300
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace geo_city_default {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class vistaForm : DataSet {
        
        private geo_cityDataTable tablegeo_city;
        
        private geo_countryDataTable tablegeo_country;
        
        private geo_city_agencyDataTable tablegeo_city_agency;
        
        private geo_comuni_da_importareDataTable tablegeo_comuni_da_importare;
        
        private tutte_le_coppieDataTable tabletutte_le_coppie;
        
        private tutti_i_single1DataTable tabletutti_i_single1;
        
        private tutti_i_single2DataTable tabletutti_i_single2;
        
        private coppie_della_provincia_correnteDataTable tablecoppie_della_provincia_corrente;
        
        private dettagliDataTable tabledettagli;
        
        private single1_della_provincia_correnteDataTable tablesingle1_della_provincia_corrente;
        
        private single2_della_provincia_correnteDataTable tablesingle2_della_provincia_corrente;
        
        private province_selezionateDataTable tableprovince_selezionate;
        
        private geo_aggiornamentoDataTable tablegeo_aggiornamento;
        
        private geo_importazione_datiDataTable tablegeo_importazione_dati;
        
        private DataRelation relationgeo_citygeo_city_agency;
        
        public vistaForm() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected vistaForm(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["geo_city"] != null)) {
                    this.Tables.Add(new geo_cityDataTable(ds.Tables["geo_city"]));
                }
                if ((ds.Tables["geo_country"] != null)) {
                    this.Tables.Add(new geo_countryDataTable(ds.Tables["geo_country"]));
                }
                if ((ds.Tables["geo_city_agency"] != null)) {
                    this.Tables.Add(new geo_city_agencyDataTable(ds.Tables["geo_city_agency"]));
                }
                if ((ds.Tables["geo_comuni_da_importare"] != null)) {
                    this.Tables.Add(new geo_comuni_da_importareDataTable(ds.Tables["geo_comuni_da_importare"]));
                }
                if ((ds.Tables["tutte_le_coppie"] != null)) {
                    this.Tables.Add(new tutte_le_coppieDataTable(ds.Tables["tutte_le_coppie"]));
                }
                if ((ds.Tables["tutti_i_single1"] != null)) {
                    this.Tables.Add(new tutti_i_single1DataTable(ds.Tables["tutti_i_single1"]));
                }
                if ((ds.Tables["tutti_i_single2"] != null)) {
                    this.Tables.Add(new tutti_i_single2DataTable(ds.Tables["tutti_i_single2"]));
                }
                if ((ds.Tables["coppie_della_provincia_corrente"] != null)) {
                    this.Tables.Add(new coppie_della_provincia_correnteDataTable(ds.Tables["coppie_della_provincia_corrente"]));
                }
                if ((ds.Tables["dettagli"] != null)) {
                    this.Tables.Add(new dettagliDataTable(ds.Tables["dettagli"]));
                }
                if ((ds.Tables["single1_della_provincia_corrente"] != null)) {
                    this.Tables.Add(new single1_della_provincia_correnteDataTable(ds.Tables["single1_della_provincia_corrente"]));
                }
                if ((ds.Tables["single2_della_provincia_corrente"] != null)) {
                    this.Tables.Add(new single2_della_provincia_correnteDataTable(ds.Tables["single2_della_provincia_corrente"]));
                }
                if ((ds.Tables["province_selezionate"] != null)) {
                    this.Tables.Add(new province_selezionateDataTable(ds.Tables["province_selezionate"]));
                }
                if ((ds.Tables["geo_aggiornamento"] != null)) {
                    this.Tables.Add(new geo_aggiornamentoDataTable(ds.Tables["geo_aggiornamento"]));
                }
                if ((ds.Tables["geo_importazione_dati"] != null)) {
                    this.Tables.Add(new geo_importazione_datiDataTable(ds.Tables["geo_importazione_dati"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public geo_cityDataTable geo_city {
            get {
                return this.tablegeo_city;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public geo_countryDataTable geo_country {
            get {
                return this.tablegeo_country;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public geo_city_agencyDataTable geo_city_agency {
            get {
                return this.tablegeo_city_agency;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public geo_comuni_da_importareDataTable geo_comuni_da_importare {
            get {
                return this.tablegeo_comuni_da_importare;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tutte_le_coppieDataTable tutte_le_coppie {
            get {
                return this.tabletutte_le_coppie;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tutti_i_single1DataTable tutti_i_single1 {
            get {
                return this.tabletutti_i_single1;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tutti_i_single2DataTable tutti_i_single2 {
            get {
                return this.tabletutti_i_single2;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public coppie_della_provincia_correnteDataTable coppie_della_provincia_corrente {
            get {
                return this.tablecoppie_della_provincia_corrente;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dettagliDataTable dettagli {
            get {
                return this.tabledettagli;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public single1_della_provincia_correnteDataTable single1_della_provincia_corrente {
            get {
                return this.tablesingle1_della_provincia_corrente;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public single2_della_provincia_correnteDataTable single2_della_provincia_corrente {
            get {
                return this.tablesingle2_della_provincia_corrente;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public province_selezionateDataTable province_selezionate {
            get {
                return this.tableprovince_selezionate;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public geo_aggiornamentoDataTable geo_aggiornamento {
            get {
                return this.tablegeo_aggiornamento;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public geo_importazione_datiDataTable geo_importazione_dati {
            get {
                return this.tablegeo_importazione_dati;
            }
        }
        
        public override DataSet Clone() {
            vistaForm cln = ((vistaForm)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["geo_city"] != null)) {
                this.Tables.Add(new geo_cityDataTable(ds.Tables["geo_city"]));
            }
            if ((ds.Tables["geo_country"] != null)) {
                this.Tables.Add(new geo_countryDataTable(ds.Tables["geo_country"]));
            }
            if ((ds.Tables["geo_city_agency"] != null)) {
                this.Tables.Add(new geo_city_agencyDataTable(ds.Tables["geo_city_agency"]));
            }
            if ((ds.Tables["geo_comuni_da_importare"] != null)) {
                this.Tables.Add(new geo_comuni_da_importareDataTable(ds.Tables["geo_comuni_da_importare"]));
            }
            if ((ds.Tables["tutte_le_coppie"] != null)) {
                this.Tables.Add(new tutte_le_coppieDataTable(ds.Tables["tutte_le_coppie"]));
            }
            if ((ds.Tables["tutti_i_single1"] != null)) {
                this.Tables.Add(new tutti_i_single1DataTable(ds.Tables["tutti_i_single1"]));
            }
            if ((ds.Tables["tutti_i_single2"] != null)) {
                this.Tables.Add(new tutti_i_single2DataTable(ds.Tables["tutti_i_single2"]));
            }
            if ((ds.Tables["coppie_della_provincia_corrente"] != null)) {
                this.Tables.Add(new coppie_della_provincia_correnteDataTable(ds.Tables["coppie_della_provincia_corrente"]));
            }
            if ((ds.Tables["dettagli"] != null)) {
                this.Tables.Add(new dettagliDataTable(ds.Tables["dettagli"]));
            }
            if ((ds.Tables["single1_della_provincia_corrente"] != null)) {
                this.Tables.Add(new single1_della_provincia_correnteDataTable(ds.Tables["single1_della_provincia_corrente"]));
            }
            if ((ds.Tables["single2_della_provincia_corrente"] != null)) {
                this.Tables.Add(new single2_della_provincia_correnteDataTable(ds.Tables["single2_della_provincia_corrente"]));
            }
            if ((ds.Tables["province_selezionate"] != null)) {
                this.Tables.Add(new province_selezionateDataTable(ds.Tables["province_selezionate"]));
            }
            if ((ds.Tables["geo_aggiornamento"] != null)) {
                this.Tables.Add(new geo_aggiornamentoDataTable(ds.Tables["geo_aggiornamento"]));
            }
            if ((ds.Tables["geo_importazione_dati"] != null)) {
                this.Tables.Add(new geo_importazione_datiDataTable(ds.Tables["geo_importazione_dati"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablegeo_city = ((geo_cityDataTable)(this.Tables["geo_city"]));
            if ((this.tablegeo_city != null)) {
                this.tablegeo_city.InitVars();
            }
            this.tablegeo_country = ((geo_countryDataTable)(this.Tables["geo_country"]));
            if ((this.tablegeo_country != null)) {
                this.tablegeo_country.InitVars();
            }
            this.tablegeo_city_agency = ((geo_city_agencyDataTable)(this.Tables["geo_city_agency"]));
            if ((this.tablegeo_city_agency != null)) {
                this.tablegeo_city_agency.InitVars();
            }
            this.tablegeo_comuni_da_importare = ((geo_comuni_da_importareDataTable)(this.Tables["geo_comuni_da_importare"]));
            if ((this.tablegeo_comuni_da_importare != null)) {
                this.tablegeo_comuni_da_importare.InitVars();
            }
            this.tabletutte_le_coppie = ((tutte_le_coppieDataTable)(this.Tables["tutte_le_coppie"]));
            if ((this.tabletutte_le_coppie != null)) {
                this.tabletutte_le_coppie.InitVars();
            }
            this.tabletutti_i_single1 = ((tutti_i_single1DataTable)(this.Tables["tutti_i_single1"]));
            if ((this.tabletutti_i_single1 != null)) {
                this.tabletutti_i_single1.InitVars();
            }
            this.tabletutti_i_single2 = ((tutti_i_single2DataTable)(this.Tables["tutti_i_single2"]));
            if ((this.tabletutti_i_single2 != null)) {
                this.tabletutti_i_single2.InitVars();
            }
            this.tablecoppie_della_provincia_corrente = ((coppie_della_provincia_correnteDataTable)(this.Tables["coppie_della_provincia_corrente"]));
            if ((this.tablecoppie_della_provincia_corrente != null)) {
                this.tablecoppie_della_provincia_corrente.InitVars();
            }
            this.tabledettagli = ((dettagliDataTable)(this.Tables["dettagli"]));
            if ((this.tabledettagli != null)) {
                this.tabledettagli.InitVars();
            }
            this.tablesingle1_della_provincia_corrente = ((single1_della_provincia_correnteDataTable)(this.Tables["single1_della_provincia_corrente"]));
            if ((this.tablesingle1_della_provincia_corrente != null)) {
                this.tablesingle1_della_provincia_corrente.InitVars();
            }
            this.tablesingle2_della_provincia_corrente = ((single2_della_provincia_correnteDataTable)(this.Tables["single2_della_provincia_corrente"]));
            if ((this.tablesingle2_della_provincia_corrente != null)) {
                this.tablesingle2_della_provincia_corrente.InitVars();
            }
            this.tableprovince_selezionate = ((province_selezionateDataTable)(this.Tables["province_selezionate"]));
            if ((this.tableprovince_selezionate != null)) {
                this.tableprovince_selezionate.InitVars();
            }
            this.tablegeo_aggiornamento = ((geo_aggiornamentoDataTable)(this.Tables["geo_aggiornamento"]));
            if ((this.tablegeo_aggiornamento != null)) {
                this.tablegeo_aggiornamento.InitVars();
            }
            this.tablegeo_importazione_dati = ((geo_importazione_datiDataTable)(this.Tables["geo_importazione_dati"]));
            if ((this.tablegeo_importazione_dati != null)) {
                this.tablegeo_importazione_dati.InitVars();
            }
            this.relationgeo_citygeo_city_agency = this.Relations["geo_citygeo_city_agency"];
        }
        
        private void InitClass() {
            this.DataSetName = "vistaForm";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/VistaGeo_Comune.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablegeo_city = new geo_cityDataTable();
            this.Tables.Add(this.tablegeo_city);
            this.tablegeo_country = new geo_countryDataTable();
            this.Tables.Add(this.tablegeo_country);
            this.tablegeo_city_agency = new geo_city_agencyDataTable();
            this.Tables.Add(this.tablegeo_city_agency);
            this.tablegeo_comuni_da_importare = new geo_comuni_da_importareDataTable();
            this.Tables.Add(this.tablegeo_comuni_da_importare);
            this.tabletutte_le_coppie = new tutte_le_coppieDataTable();
            this.Tables.Add(this.tabletutte_le_coppie);
            this.tabletutti_i_single1 = new tutti_i_single1DataTable();
            this.Tables.Add(this.tabletutti_i_single1);
            this.tabletutti_i_single2 = new tutti_i_single2DataTable();
            this.Tables.Add(this.tabletutti_i_single2);
            this.tablecoppie_della_provincia_corrente = new coppie_della_provincia_correnteDataTable();
            this.Tables.Add(this.tablecoppie_della_provincia_corrente);
            this.tabledettagli = new dettagliDataTable();
            this.Tables.Add(this.tabledettagli);
            this.tablesingle1_della_provincia_corrente = new single1_della_provincia_correnteDataTable();
            this.Tables.Add(this.tablesingle1_della_provincia_corrente);
            this.tablesingle2_della_provincia_corrente = new single2_della_provincia_correnteDataTable();
            this.Tables.Add(this.tablesingle2_della_provincia_corrente);
            this.tableprovince_selezionate = new province_selezionateDataTable();
            this.Tables.Add(this.tableprovince_selezionate);
            this.tablegeo_aggiornamento = new geo_aggiornamentoDataTable();
            this.Tables.Add(this.tablegeo_aggiornamento);
            this.tablegeo_importazione_dati = new geo_importazione_datiDataTable();
            this.Tables.Add(this.tablegeo_importazione_dati);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("vistaFormKey4", new DataColumn[] {
                        this.tablegeo_city.idcityColumn}, new DataColumn[] {
                        this.tablegeo_city_agency.idcityColumn});
            this.tablegeo_city_agency.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationgeo_citygeo_city_agency = new DataRelation("geo_citygeo_city_agency", new DataColumn[] {
                        this.tablegeo_city.idcityColumn}, new DataColumn[] {
                        this.tablegeo_city_agency.idcityColumn}, false);
            this.Relations.Add(this.relationgeo_citygeo_city_agency);
        }
        
        private bool ShouldSerializegeo_city() {
            return false;
        }
        
        private bool ShouldSerializegeo_country() {
            return false;
        }
        
        private bool ShouldSerializegeo_city_agency() {
            return false;
        }
        
        private bool ShouldSerializegeo_comuni_da_importare() {
            return false;
        }
        
        private bool ShouldSerializetutte_le_coppie() {
            return false;
        }
        
        private bool ShouldSerializetutti_i_single1() {
            return false;
        }
        
        private bool ShouldSerializetutti_i_single2() {
            return false;
        }
        
        private bool ShouldSerializecoppie_della_provincia_corrente() {
            return false;
        }
        
        private bool ShouldSerializedettagli() {
            return false;
        }
        
        private bool ShouldSerializesingle1_della_provincia_corrente() {
            return false;
        }
        
        private bool ShouldSerializesingle2_della_provincia_corrente() {
            return false;
        }
        
        private bool ShouldSerializeprovince_selezionate() {
            return false;
        }
        
        private bool ShouldSerializegeo_aggiornamento() {
            return false;
        }
        
        private bool ShouldSerializegeo_importazione_dati() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void geo_cityRowChangeEventHandler(object sender, geo_cityRowChangeEvent e);
        
        public delegate void geo_countryRowChangeEventHandler(object sender, geo_countryRowChangeEvent e);
        
        public delegate void geo_city_agencyRowChangeEventHandler(object sender, geo_city_agencyRowChangeEvent e);
        
        public delegate void geo_comuni_da_importareRowChangeEventHandler(object sender, geo_comuni_da_importareRowChangeEvent e);
        
        public delegate void tutte_le_coppieRowChangeEventHandler(object sender, tutte_le_coppieRowChangeEvent e);
        
        public delegate void tutti_i_single1RowChangeEventHandler(object sender, tutti_i_single1RowChangeEvent e);
        
        public delegate void tutti_i_single2RowChangeEventHandler(object sender, tutti_i_single2RowChangeEvent e);
        
        public delegate void coppie_della_provincia_correnteRowChangeEventHandler(object sender, coppie_della_provincia_correnteRowChangeEvent e);
        
        public delegate void dettagliRowChangeEventHandler(object sender, dettagliRowChangeEvent e);
        
        public delegate void single1_della_provincia_correnteRowChangeEventHandler(object sender, single1_della_provincia_correnteRowChangeEvent e);
        
        public delegate void single2_della_provincia_correnteRowChangeEventHandler(object sender, single2_della_provincia_correnteRowChangeEvent e);
        
        public delegate void province_selezionateRowChangeEventHandler(object sender, province_selezionateRowChangeEvent e);
        
        public delegate void geo_aggiornamentoRowChangeEventHandler(object sender, geo_aggiornamentoRowChangeEvent e);
        
        public delegate void geo_importazione_datiRowChangeEventHandler(object sender, geo_importazione_datiRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class geo_cityDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidcity;
            
            private DataColumn columnoldcity;
            
            private DataColumn columnnewcity;
            
            private DataColumn columntitle;
            
            private DataColumn columnstart;
            
            private DataColumn columnstop;
            
            private DataColumn columnidcountry;
            
            private DataColumn columnlu;
            
            private DataColumn columnlt;
            
            internal geo_cityDataTable() : 
                    base("geo_city") {
                this.InitClass();
            }
            
            internal geo_cityDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idcityColumn {
                get {
                    return this.columnidcity;
                }
            }
            
            internal DataColumn oldcityColumn {
                get {
                    return this.columnoldcity;
                }
            }
            
            internal DataColumn newcityColumn {
                get {
                    return this.columnnewcity;
                }
            }
            
            internal DataColumn titleColumn {
                get {
                    return this.columntitle;
                }
            }
            
            internal DataColumn startColumn {
                get {
                    return this.columnstart;
                }
            }
            
            internal DataColumn stopColumn {
                get {
                    return this.columnstop;
                }
            }
            
            internal DataColumn idcountryColumn {
                get {
                    return this.columnidcountry;
                }
            }
            
            internal DataColumn luColumn {
                get {
                    return this.columnlu;
                }
            }
            
            internal DataColumn ltColumn {
                get {
                    return this.columnlt;
                }
            }
            
            public geo_cityRow this[int index] {
                get {
                    return ((geo_cityRow)(this.Rows[index]));
                }
            }
            
            public event geo_cityRowChangeEventHandler geo_cityRowChanged;
            
            public event geo_cityRowChangeEventHandler geo_cityRowChanging;
            
            public event geo_cityRowChangeEventHandler geo_cityRowDeleted;
            
            public event geo_cityRowChangeEventHandler geo_cityRowDeleting;
            
            public void Addgeo_cityRow(geo_cityRow row) {
                this.Rows.Add(row);
            }
            
            public geo_cityRow Addgeo_cityRow(int idcity, int oldcity, int newcity, string title, System.DateTime start, System.DateTime stop, int idcountry, string lu, System.DateTime lt) {
                geo_cityRow rowgeo_cityRow = ((geo_cityRow)(this.NewRow()));
                rowgeo_cityRow.ItemArray = new object[] {
                        idcity,
                        oldcity,
                        newcity,
                        title,
                        start,
                        stop,
                        idcountry,
                        lu,
                        lt};
                this.Rows.Add(rowgeo_cityRow);
                return rowgeo_cityRow;
            }
            
            public geo_cityRow FindByidcity(int idcity) {
                return ((geo_cityRow)(this.Rows.Find(new object[] {
                            idcity})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                geo_cityDataTable cln = ((geo_cityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new geo_cityDataTable();
            }
            
            internal void InitVars() {
                this.columnidcity = this.Columns["idcity"];
                this.columnoldcity = this.Columns["oldcity"];
                this.columnnewcity = this.Columns["newcity"];
                this.columntitle = this.Columns["title"];
                this.columnstart = this.Columns["start"];
                this.columnstop = this.Columns["stop"];
                this.columnidcountry = this.Columns["idcountry"];
                this.columnlu = this.Columns["lu"];
                this.columnlt = this.Columns["lt"];
            }
            
            private void InitClass() {
                this.columnidcity = new DataColumn("idcity", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidcity);
                this.columnoldcity = new DataColumn("oldcity", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnoldcity);
                this.columnnewcity = new DataColumn("newcity", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnewcity);
                this.columntitle = new DataColumn("title", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntitle);
                this.columnstart = new DataColumn("start", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstart);
                this.columnstop = new DataColumn("stop", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstop);
                this.columnidcountry = new DataColumn("idcountry", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidcountry);
                this.columnlu = new DataColumn("lu", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlu);
                this.columnlt = new DataColumn("lt", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlt);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey1", new DataColumn[] {
                                this.columnidcity}, true));
                this.columnidcity.AllowDBNull = false;
                this.columnidcity.Unique = true;
            }
            
            public geo_cityRow Newgeo_cityRow() {
                return ((geo_cityRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new geo_cityRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(geo_cityRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.geo_cityRowChanged != null)) {
                    this.geo_cityRowChanged(this, new geo_cityRowChangeEvent(((geo_cityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.geo_cityRowChanging != null)) {
                    this.geo_cityRowChanging(this, new geo_cityRowChangeEvent(((geo_cityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.geo_cityRowDeleted != null)) {
                    this.geo_cityRowDeleted(this, new geo_cityRowChangeEvent(((geo_cityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.geo_cityRowDeleting != null)) {
                    this.geo_cityRowDeleting(this, new geo_cityRowChangeEvent(((geo_cityRow)(e.Row)), e.Action));
                }
            }
            
            public void Removegeo_cityRow(geo_cityRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class geo_cityRow : DataRow {
            
            private geo_cityDataTable tablegeo_city;
            
            internal geo_cityRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablegeo_city = ((geo_cityDataTable)(this.Table));
            }
            
            public int idcity {
                get {
                    return ((int)(this[this.tablegeo_city.idcityColumn]));
                }
                set {
                    this[this.tablegeo_city.idcityColumn] = value;
                }
            }
            
            public int oldcity {
                get {
                    try {
                        return ((int)(this[this.tablegeo_city.oldcityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_city.oldcityColumn] = value;
                }
            }
            
            public int newcity {
                get {
                    try {
                        return ((int)(this[this.tablegeo_city.newcityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_city.newcityColumn] = value;
                }
            }
            
            public string title {
                get {
                    try {
                        return ((string)(this[this.tablegeo_city.titleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_city.titleColumn] = value;
                }
            }
            
            public System.DateTime start {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_city.startColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_city.startColumn] = value;
                }
            }
            
            public System.DateTime stop {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_city.stopColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_city.stopColumn] = value;
                }
            }
            
            public int idcountry {
                get {
                    try {
                        return ((int)(this[this.tablegeo_city.idcountryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_city.idcountryColumn] = value;
                }
            }
            
            public string lu {
                get {
                    try {
                        return ((string)(this[this.tablegeo_city.luColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_city.luColumn] = value;
                }
            }
            
            public System.DateTime lt {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_city.ltColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_city.ltColumn] = value;
                }
            }
            
            public bool IsoldcityNull() {
                return this.IsNull(this.tablegeo_city.oldcityColumn);
            }
            
            public void SetoldcityNull() {
                this[this.tablegeo_city.oldcityColumn] = System.Convert.DBNull;
            }
            
            public bool IsnewcityNull() {
                return this.IsNull(this.tablegeo_city.newcityColumn);
            }
            
            public void SetnewcityNull() {
                this[this.tablegeo_city.newcityColumn] = System.Convert.DBNull;
            }
            
            public bool IstitleNull() {
                return this.IsNull(this.tablegeo_city.titleColumn);
            }
            
            public void SettitleNull() {
                this[this.tablegeo_city.titleColumn] = System.Convert.DBNull;
            }
            
            public bool IsstartNull() {
                return this.IsNull(this.tablegeo_city.startColumn);
            }
            
            public void SetstartNull() {
                this[this.tablegeo_city.startColumn] = System.Convert.DBNull;
            }
            
            public bool IsstopNull() {
                return this.IsNull(this.tablegeo_city.stopColumn);
            }
            
            public void SetstopNull() {
                this[this.tablegeo_city.stopColumn] = System.Convert.DBNull;
            }
            
            public bool IsidcountryNull() {
                return this.IsNull(this.tablegeo_city.idcountryColumn);
            }
            
            public void SetidcountryNull() {
                this[this.tablegeo_city.idcountryColumn] = System.Convert.DBNull;
            }
            
            public bool IsluNull() {
                return this.IsNull(this.tablegeo_city.luColumn);
            }
            
            public void SetluNull() {
                this[this.tablegeo_city.luColumn] = System.Convert.DBNull;
            }
            
            public bool IsltNull() {
                return this.IsNull(this.tablegeo_city.ltColumn);
            }
            
            public void SetltNull() {
                this[this.tablegeo_city.ltColumn] = System.Convert.DBNull;
            }
            
            public geo_city_agencyRow[] Getgeo_city_agencyRows() {
                return ((geo_city_agencyRow[])(this.GetChildRows(this.Table.ChildRelations["geo_citygeo_city_agency"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class geo_cityRowChangeEvent : EventArgs {
            
            private geo_cityRow eventRow;
            
            private DataRowAction eventAction;
            
            public geo_cityRowChangeEvent(geo_cityRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public geo_cityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class geo_countryDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidcountry;
            
            private DataColumn columnprovince;
            
            private DataColumn columntitle;
            
            private DataColumn columnoldcountry;
            
            private DataColumn columnnewcountry;
            
            private DataColumn columnstart;
            
            private DataColumn columnstop;
            
            private DataColumn columnidregion;
            
            private DataColumn columnlu;
            
            private DataColumn columnlt;
            
            internal geo_countryDataTable() : 
                    base("geo_country") {
                this.InitClass();
            }
            
            internal geo_countryDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idcountryColumn {
                get {
                    return this.columnidcountry;
                }
            }
            
            internal DataColumn provinceColumn {
                get {
                    return this.columnprovince;
                }
            }
            
            internal DataColumn titleColumn {
                get {
                    return this.columntitle;
                }
            }
            
            internal DataColumn oldcountryColumn {
                get {
                    return this.columnoldcountry;
                }
            }
            
            internal DataColumn newcountryColumn {
                get {
                    return this.columnnewcountry;
                }
            }
            
            internal DataColumn startColumn {
                get {
                    return this.columnstart;
                }
            }
            
            internal DataColumn stopColumn {
                get {
                    return this.columnstop;
                }
            }
            
            internal DataColumn idregionColumn {
                get {
                    return this.columnidregion;
                }
            }
            
            internal DataColumn luColumn {
                get {
                    return this.columnlu;
                }
            }
            
            internal DataColumn ltColumn {
                get {
                    return this.columnlt;
                }
            }
            
            public geo_countryRow this[int index] {
                get {
                    return ((geo_countryRow)(this.Rows[index]));
                }
            }
            
            public event geo_countryRowChangeEventHandler geo_countryRowChanged;
            
            public event geo_countryRowChangeEventHandler geo_countryRowChanging;
            
            public event geo_countryRowChangeEventHandler geo_countryRowDeleted;
            
            public event geo_countryRowChangeEventHandler geo_countryRowDeleting;
            
            public void Addgeo_countryRow(geo_countryRow row) {
                this.Rows.Add(row);
            }
            
            public geo_countryRow Addgeo_countryRow(int idcountry, string province, string title, int oldcountry, int newcountry, System.DateTime start, System.DateTime stop, int idregion, string lu, System.DateTime lt) {
                geo_countryRow rowgeo_countryRow = ((geo_countryRow)(this.NewRow()));
                rowgeo_countryRow.ItemArray = new object[] {
                        idcountry,
                        province,
                        title,
                        oldcountry,
                        newcountry,
                        start,
                        stop,
                        idregion,
                        lu,
                        lt};
                this.Rows.Add(rowgeo_countryRow);
                return rowgeo_countryRow;
            }
            
            public geo_countryRow FindByidcountry(int idcountry) {
                return ((geo_countryRow)(this.Rows.Find(new object[] {
                            idcountry})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                geo_countryDataTable cln = ((geo_countryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new geo_countryDataTable();
            }
            
            internal void InitVars() {
                this.columnidcountry = this.Columns["idcountry"];
                this.columnprovince = this.Columns["province"];
                this.columntitle = this.Columns["title"];
                this.columnoldcountry = this.Columns["oldcountry"];
                this.columnnewcountry = this.Columns["newcountry"];
                this.columnstart = this.Columns["start"];
                this.columnstop = this.Columns["stop"];
                this.columnidregion = this.Columns["idregion"];
                this.columnlu = this.Columns["lu"];
                this.columnlt = this.Columns["lt"];
            }
            
            private void InitClass() {
                this.columnidcountry = new DataColumn("idcountry", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidcountry);
                this.columnprovince = new DataColumn("province", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprovince);
                this.columntitle = new DataColumn("title", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntitle);
                this.columnoldcountry = new DataColumn("oldcountry", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnoldcountry);
                this.columnnewcountry = new DataColumn("newcountry", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnewcountry);
                this.columnstart = new DataColumn("start", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstart);
                this.columnstop = new DataColumn("stop", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstop);
                this.columnidregion = new DataColumn("idregion", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidregion);
                this.columnlu = new DataColumn("lu", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlu);
                this.columnlt = new DataColumn("lt", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlt);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey2", new DataColumn[] {
                                this.columnidcountry}, true));
                this.columnidcountry.AllowDBNull = false;
                this.columnidcountry.Unique = true;
            }
            
            public geo_countryRow Newgeo_countryRow() {
                return ((geo_countryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new geo_countryRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(geo_countryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.geo_countryRowChanged != null)) {
                    this.geo_countryRowChanged(this, new geo_countryRowChangeEvent(((geo_countryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.geo_countryRowChanging != null)) {
                    this.geo_countryRowChanging(this, new geo_countryRowChangeEvent(((geo_countryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.geo_countryRowDeleted != null)) {
                    this.geo_countryRowDeleted(this, new geo_countryRowChangeEvent(((geo_countryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.geo_countryRowDeleting != null)) {
                    this.geo_countryRowDeleting(this, new geo_countryRowChangeEvent(((geo_countryRow)(e.Row)), e.Action));
                }
            }
            
            public void Removegeo_countryRow(geo_countryRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class geo_countryRow : DataRow {
            
            private geo_countryDataTable tablegeo_country;
            
            internal geo_countryRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablegeo_country = ((geo_countryDataTable)(this.Table));
            }
            
            public int idcountry {
                get {
                    return ((int)(this[this.tablegeo_country.idcountryColumn]));
                }
                set {
                    this[this.tablegeo_country.idcountryColumn] = value;
                }
            }
            
            public string province {
                get {
                    try {
                        return ((string)(this[this.tablegeo_country.provinceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_country.provinceColumn] = value;
                }
            }
            
            public string title {
                get {
                    try {
                        return ((string)(this[this.tablegeo_country.titleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_country.titleColumn] = value;
                }
            }
            
            public int oldcountry {
                get {
                    try {
                        return ((int)(this[this.tablegeo_country.oldcountryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_country.oldcountryColumn] = value;
                }
            }
            
            public int newcountry {
                get {
                    try {
                        return ((int)(this[this.tablegeo_country.newcountryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_country.newcountryColumn] = value;
                }
            }
            
            public System.DateTime start {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_country.startColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_country.startColumn] = value;
                }
            }
            
            public System.DateTime stop {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_country.stopColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_country.stopColumn] = value;
                }
            }
            
            public int idregion {
                get {
                    try {
                        return ((int)(this[this.tablegeo_country.idregionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_country.idregionColumn] = value;
                }
            }
            
            public string lu {
                get {
                    try {
                        return ((string)(this[this.tablegeo_country.luColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_country.luColumn] = value;
                }
            }
            
            public System.DateTime lt {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_country.ltColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_country.ltColumn] = value;
                }
            }
            
            public bool IsprovinceNull() {
                return this.IsNull(this.tablegeo_country.provinceColumn);
            }
            
            public void SetprovinceNull() {
                this[this.tablegeo_country.provinceColumn] = System.Convert.DBNull;
            }
            
            public bool IstitleNull() {
                return this.IsNull(this.tablegeo_country.titleColumn);
            }
            
            public void SettitleNull() {
                this[this.tablegeo_country.titleColumn] = System.Convert.DBNull;
            }
            
            public bool IsoldcountryNull() {
                return this.IsNull(this.tablegeo_country.oldcountryColumn);
            }
            
            public void SetoldcountryNull() {
                this[this.tablegeo_country.oldcountryColumn] = System.Convert.DBNull;
            }
            
            public bool IsnewcountryNull() {
                return this.IsNull(this.tablegeo_country.newcountryColumn);
            }
            
            public void SetnewcountryNull() {
                this[this.tablegeo_country.newcountryColumn] = System.Convert.DBNull;
            }
            
            public bool IsstartNull() {
                return this.IsNull(this.tablegeo_country.startColumn);
            }
            
            public void SetstartNull() {
                this[this.tablegeo_country.startColumn] = System.Convert.DBNull;
            }
            
            public bool IsstopNull() {
                return this.IsNull(this.tablegeo_country.stopColumn);
            }
            
            public void SetstopNull() {
                this[this.tablegeo_country.stopColumn] = System.Convert.DBNull;
            }
            
            public bool IsidregionNull() {
                return this.IsNull(this.tablegeo_country.idregionColumn);
            }
            
            public void SetidregionNull() {
                this[this.tablegeo_country.idregionColumn] = System.Convert.DBNull;
            }
            
            public bool IsluNull() {
                return this.IsNull(this.tablegeo_country.luColumn);
            }
            
            public void SetluNull() {
                this[this.tablegeo_country.luColumn] = System.Convert.DBNull;
            }
            
            public bool IsltNull() {
                return this.IsNull(this.tablegeo_country.ltColumn);
            }
            
            public void SetltNull() {
                this[this.tablegeo_country.ltColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class geo_countryRowChangeEvent : EventArgs {
            
            private geo_countryRow eventRow;
            
            private DataRowAction eventAction;
            
            public geo_countryRowChangeEvent(geo_countryRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public geo_countryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class geo_city_agencyDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidcity;
            
            private DataColumn columnidagency;
            
            private DataColumn columnidcode;
            
            private DataColumn columnversion;
            
            private DataColumn columnstart;
            
            private DataColumn columnstop;
            
            private DataColumn columnvalue;
            
            private DataColumn columnlu;
            
            private DataColumn columnlt;
            
            internal geo_city_agencyDataTable() : 
                    base("geo_city_agency") {
                this.InitClass();
            }
            
            internal geo_city_agencyDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idcityColumn {
                get {
                    return this.columnidcity;
                }
            }
            
            internal DataColumn idagencyColumn {
                get {
                    return this.columnidagency;
                }
            }
            
            internal DataColumn idcodeColumn {
                get {
                    return this.columnidcode;
                }
            }
            
            internal DataColumn versionColumn {
                get {
                    return this.columnversion;
                }
            }
            
            internal DataColumn startColumn {
                get {
                    return this.columnstart;
                }
            }
            
            internal DataColumn stopColumn {
                get {
                    return this.columnstop;
                }
            }
            
            internal DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            internal DataColumn luColumn {
                get {
                    return this.columnlu;
                }
            }
            
            internal DataColumn ltColumn {
                get {
                    return this.columnlt;
                }
            }
            
            public geo_city_agencyRow this[int index] {
                get {
                    return ((geo_city_agencyRow)(this.Rows[index]));
                }
            }
            
            public event geo_city_agencyRowChangeEventHandler geo_city_agencyRowChanged;
            
            public event geo_city_agencyRowChangeEventHandler geo_city_agencyRowChanging;
            
            public event geo_city_agencyRowChangeEventHandler geo_city_agencyRowDeleted;
            
            public event geo_city_agencyRowChangeEventHandler geo_city_agencyRowDeleting;
            
            public void Addgeo_city_agencyRow(geo_city_agencyRow row) {
                this.Rows.Add(row);
            }
            
            public geo_city_agencyRow Addgeo_city_agencyRow(geo_cityRow parentgeo_cityRowBygeo_citygeo_city_agency, int idagency, int idcode, int version, System.DateTime start, System.DateTime stop, string value, string lu, System.DateTime lt) {
                geo_city_agencyRow rowgeo_city_agencyRow = ((geo_city_agencyRow)(this.NewRow()));
                rowgeo_city_agencyRow.ItemArray = new object[] {
                        parentgeo_cityRowBygeo_citygeo_city_agency[0],
                        idagency,
                        idcode,
                        version,
                        start,
                        stop,
                        value,
                        lu,
                        lt};
                this.Rows.Add(rowgeo_city_agencyRow);
                return rowgeo_city_agencyRow;
            }
            
            public geo_city_agencyRow FindByidcityidagencyidcodeversion(int idcity, int idagency, int idcode, int version) {
                return ((geo_city_agencyRow)(this.Rows.Find(new object[] {
                            idcity,
                            idagency,
                            idcode,
                            version})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                geo_city_agencyDataTable cln = ((geo_city_agencyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new geo_city_agencyDataTable();
            }
            
            internal void InitVars() {
                this.columnidcity = this.Columns["idcity"];
                this.columnidagency = this.Columns["idagency"];
                this.columnidcode = this.Columns["idcode"];
                this.columnversion = this.Columns["version"];
                this.columnstart = this.Columns["start"];
                this.columnstop = this.Columns["stop"];
                this.columnvalue = this.Columns["value"];
                this.columnlu = this.Columns["lu"];
                this.columnlt = this.Columns["lt"];
            }
            
            private void InitClass() {
                this.columnidcity = new DataColumn("idcity", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidcity);
                this.columnidagency = new DataColumn("idagency", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidagency);
                this.columnidcode = new DataColumn("idcode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidcode);
                this.columnversion = new DataColumn("version", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnversion);
                this.columnstart = new DataColumn("start", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstart);
                this.columnstop = new DataColumn("stop", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstop);
                this.columnvalue = new DataColumn("value", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvalue);
                this.columnlu = new DataColumn("lu", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlu);
                this.columnlt = new DataColumn("lt", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlt);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey3", new DataColumn[] {
                                this.columnidcity,
                                this.columnidagency,
                                this.columnidcode,
                                this.columnversion}, true));
                this.columnidcity.AllowDBNull = false;
                this.columnidagency.AllowDBNull = false;
                this.columnidcode.AllowDBNull = false;
                this.columnversion.AllowDBNull = false;
            }
            
            public geo_city_agencyRow Newgeo_city_agencyRow() {
                return ((geo_city_agencyRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new geo_city_agencyRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(geo_city_agencyRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.geo_city_agencyRowChanged != null)) {
                    this.geo_city_agencyRowChanged(this, new geo_city_agencyRowChangeEvent(((geo_city_agencyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.geo_city_agencyRowChanging != null)) {
                    this.geo_city_agencyRowChanging(this, new geo_city_agencyRowChangeEvent(((geo_city_agencyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.geo_city_agencyRowDeleted != null)) {
                    this.geo_city_agencyRowDeleted(this, new geo_city_agencyRowChangeEvent(((geo_city_agencyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.geo_city_agencyRowDeleting != null)) {
                    this.geo_city_agencyRowDeleting(this, new geo_city_agencyRowChangeEvent(((geo_city_agencyRow)(e.Row)), e.Action));
                }
            }
            
            public void Removegeo_city_agencyRow(geo_city_agencyRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class geo_city_agencyRow : DataRow {
            
            private geo_city_agencyDataTable tablegeo_city_agency;
            
            internal geo_city_agencyRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablegeo_city_agency = ((geo_city_agencyDataTable)(this.Table));
            }
            
            public int idcity {
                get {
                    return ((int)(this[this.tablegeo_city_agency.idcityColumn]));
                }
                set {
                    this[this.tablegeo_city_agency.idcityColumn] = value;
                }
            }
            
            public int idagency {
                get {
                    return ((int)(this[this.tablegeo_city_agency.idagencyColumn]));
                }
                set {
                    this[this.tablegeo_city_agency.idagencyColumn] = value;
                }
            }
            
            public int idcode {
                get {
                    return ((int)(this[this.tablegeo_city_agency.idcodeColumn]));
                }
                set {
                    this[this.tablegeo_city_agency.idcodeColumn] = value;
                }
            }
            
            public int version {
                get {
                    return ((int)(this[this.tablegeo_city_agency.versionColumn]));
                }
                set {
                    this[this.tablegeo_city_agency.versionColumn] = value;
                }
            }
            
            public System.DateTime start {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_city_agency.startColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_city_agency.startColumn] = value;
                }
            }
            
            public System.DateTime stop {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_city_agency.stopColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_city_agency.stopColumn] = value;
                }
            }
            
            public string value {
                get {
                    try {
                        return ((string)(this[this.tablegeo_city_agency.valueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_city_agency.valueColumn] = value;
                }
            }
            
            public string lu {
                get {
                    try {
                        return ((string)(this[this.tablegeo_city_agency.luColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_city_agency.luColumn] = value;
                }
            }
            
            public System.DateTime lt {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_city_agency.ltColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_city_agency.ltColumn] = value;
                }
            }
            
            public geo_cityRow geo_cityRow {
                get {
                    return ((geo_cityRow)(this.GetParentRow(this.Table.ParentRelations["geo_citygeo_city_agency"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["geo_citygeo_city_agency"]);
                }
            }
            
            public bool IsstartNull() {
                return this.IsNull(this.tablegeo_city_agency.startColumn);
            }
            
            public void SetstartNull() {
                this[this.tablegeo_city_agency.startColumn] = System.Convert.DBNull;
            }
            
            public bool IsstopNull() {
                return this.IsNull(this.tablegeo_city_agency.stopColumn);
            }
            
            public void SetstopNull() {
                this[this.tablegeo_city_agency.stopColumn] = System.Convert.DBNull;
            }
            
            public bool IsvalueNull() {
                return this.IsNull(this.tablegeo_city_agency.valueColumn);
            }
            
            public void SetvalueNull() {
                this[this.tablegeo_city_agency.valueColumn] = System.Convert.DBNull;
            }
            
            public bool IsluNull() {
                return this.IsNull(this.tablegeo_city_agency.luColumn);
            }
            
            public void SetluNull() {
                this[this.tablegeo_city_agency.luColumn] = System.Convert.DBNull;
            }
            
            public bool IsltNull() {
                return this.IsNull(this.tablegeo_city_agency.ltColumn);
            }
            
            public void SetltNull() {
                this[this.tablegeo_city_agency.ltColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class geo_city_agencyRowChangeEvent : EventArgs {
            
            private geo_city_agencyRow eventRow;
            
            private DataRowAction eventAction;
            
            public geo_city_agencyRowChangeEvent(geo_city_agencyRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public geo_city_agencyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class geo_comuni_da_importareDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidcomune;
            
            private DataColumn columnnome;
            
            private DataColumn columnidprovincia;
            
            private DataColumn columnsigla_provincia;
            
            private DataColumn columndatainizio;
            
            private DataColumn columndatafine;
            
            private DataColumn columnfisco;
            
            private DataColumn columncatasto;
            
            private DataColumn columnistat;
            
            private DataColumn columncap;
            
            private DataColumn columnvalore1;
            
            private DataColumn columnvalore2;
            
            internal geo_comuni_da_importareDataTable() : 
                    base("geo_comuni_da_importare") {
                this.InitClass();
            }
            
            internal geo_comuni_da_importareDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idcomuneColumn {
                get {
                    return this.columnidcomune;
                }
            }
            
            internal DataColumn nomeColumn {
                get {
                    return this.columnnome;
                }
            }
            
            internal DataColumn idprovinciaColumn {
                get {
                    return this.columnidprovincia;
                }
            }
            
            internal DataColumn sigla_provinciaColumn {
                get {
                    return this.columnsigla_provincia;
                }
            }
            
            internal DataColumn datainizioColumn {
                get {
                    return this.columndatainizio;
                }
            }
            
            internal DataColumn datafineColumn {
                get {
                    return this.columndatafine;
                }
            }
            
            internal DataColumn fiscoColumn {
                get {
                    return this.columnfisco;
                }
            }
            
            internal DataColumn catastoColumn {
                get {
                    return this.columncatasto;
                }
            }
            
            internal DataColumn istatColumn {
                get {
                    return this.columnistat;
                }
            }
            
            internal DataColumn capColumn {
                get {
                    return this.columncap;
                }
            }
            
            internal DataColumn valore1Column {
                get {
                    return this.columnvalore1;
                }
            }
            
            internal DataColumn valore2Column {
                get {
                    return this.columnvalore2;
                }
            }
            
            public geo_comuni_da_importareRow this[int index] {
                get {
                    return ((geo_comuni_da_importareRow)(this.Rows[index]));
                }
            }
            
            public event geo_comuni_da_importareRowChangeEventHandler geo_comuni_da_importareRowChanged;
            
            public event geo_comuni_da_importareRowChangeEventHandler geo_comuni_da_importareRowChanging;
            
            public event geo_comuni_da_importareRowChangeEventHandler geo_comuni_da_importareRowDeleted;
            
            public event geo_comuni_da_importareRowChangeEventHandler geo_comuni_da_importareRowDeleting;
            
            public void Addgeo_comuni_da_importareRow(geo_comuni_da_importareRow row) {
                this.Rows.Add(row);
            }
            
            public geo_comuni_da_importareRow Addgeo_comuni_da_importareRow(string nome, int idprovincia, string sigla_provincia, System.DateTime datainizio, System.DateTime datafine, string fisco, string catasto, string istat, string cap, string valore1, string valore2) {
                geo_comuni_da_importareRow rowgeo_comuni_da_importareRow = ((geo_comuni_da_importareRow)(this.NewRow()));
                rowgeo_comuni_da_importareRow.ItemArray = new object[] {
                        null,
                        nome,
                        idprovincia,
                        sigla_provincia,
                        datainizio,
                        datafine,
                        fisco,
                        catasto,
                        istat,
                        cap,
                        valore1,
                        valore2};
                this.Rows.Add(rowgeo_comuni_da_importareRow);
                return rowgeo_comuni_da_importareRow;
            }
            
            public geo_comuni_da_importareRow FindByidcomune(int idcomune) {
                return ((geo_comuni_da_importareRow)(this.Rows.Find(new object[] {
                            idcomune})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                geo_comuni_da_importareDataTable cln = ((geo_comuni_da_importareDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new geo_comuni_da_importareDataTable();
            }
            
            internal void InitVars() {
                this.columnidcomune = this.Columns["idcomune"];
                this.columnnome = this.Columns["nome"];
                this.columnidprovincia = this.Columns["idprovincia"];
                this.columnsigla_provincia = this.Columns["sigla_provincia"];
                this.columndatainizio = this.Columns["datainizio"];
                this.columndatafine = this.Columns["datafine"];
                this.columnfisco = this.Columns["fisco"];
                this.columncatasto = this.Columns["catasto"];
                this.columnistat = this.Columns["istat"];
                this.columncap = this.Columns["cap"];
                this.columnvalore1 = this.Columns["valore1"];
                this.columnvalore2 = this.Columns["valore2"];
            }
            
            private void InitClass() {
                this.columnidcomune = new DataColumn("idcomune", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidcomune);
                this.columnnome = new DataColumn("nome", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnome);
                this.columnidprovincia = new DataColumn("idprovincia", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidprovincia);
                this.columnsigla_provincia = new DataColumn("sigla_provincia", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsigla_provincia);
                this.columndatainizio = new DataColumn("datainizio", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndatainizio);
                this.columndatafine = new DataColumn("datafine", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndatafine);
                this.columnfisco = new DataColumn("fisco", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfisco);
                this.columncatasto = new DataColumn("catasto", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncatasto);
                this.columnistat = new DataColumn("istat", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnistat);
                this.columncap = new DataColumn("cap", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncap);
                this.columnvalore1 = new DataColumn("valore1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvalore1);
                this.columnvalore2 = new DataColumn("valore2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvalore2);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey5", new DataColumn[] {
                                this.columnidcomune}, true));
                this.columnidcomune.AutoIncrement = true;
                this.columnidcomune.AllowDBNull = false;
                this.columnidcomune.ReadOnly = true;
                this.columnidcomune.Unique = true;
            }
            
            public geo_comuni_da_importareRow Newgeo_comuni_da_importareRow() {
                return ((geo_comuni_da_importareRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new geo_comuni_da_importareRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(geo_comuni_da_importareRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.geo_comuni_da_importareRowChanged != null)) {
                    this.geo_comuni_da_importareRowChanged(this, new geo_comuni_da_importareRowChangeEvent(((geo_comuni_da_importareRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.geo_comuni_da_importareRowChanging != null)) {
                    this.geo_comuni_da_importareRowChanging(this, new geo_comuni_da_importareRowChangeEvent(((geo_comuni_da_importareRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.geo_comuni_da_importareRowDeleted != null)) {
                    this.geo_comuni_da_importareRowDeleted(this, new geo_comuni_da_importareRowChangeEvent(((geo_comuni_da_importareRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.geo_comuni_da_importareRowDeleting != null)) {
                    this.geo_comuni_da_importareRowDeleting(this, new geo_comuni_da_importareRowChangeEvent(((geo_comuni_da_importareRow)(e.Row)), e.Action));
                }
            }
            
            public void Removegeo_comuni_da_importareRow(geo_comuni_da_importareRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class geo_comuni_da_importareRow : DataRow {
            
            private geo_comuni_da_importareDataTable tablegeo_comuni_da_importare;
            
            internal geo_comuni_da_importareRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablegeo_comuni_da_importare = ((geo_comuni_da_importareDataTable)(this.Table));
            }
            
            public int idcomune {
                get {
                    return ((int)(this[this.tablegeo_comuni_da_importare.idcomuneColumn]));
                }
                set {
                    this[this.tablegeo_comuni_da_importare.idcomuneColumn] = value;
                }
            }
            
            public string nome {
                get {
                    try {
                        return ((string)(this[this.tablegeo_comuni_da_importare.nomeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_comuni_da_importare.nomeColumn] = value;
                }
            }
            
            public int idprovincia {
                get {
                    try {
                        return ((int)(this[this.tablegeo_comuni_da_importare.idprovinciaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_comuni_da_importare.idprovinciaColumn] = value;
                }
            }
            
            public string sigla_provincia {
                get {
                    try {
                        return ((string)(this[this.tablegeo_comuni_da_importare.sigla_provinciaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_comuni_da_importare.sigla_provinciaColumn] = value;
                }
            }
            
            public System.DateTime datainizio {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_comuni_da_importare.datainizioColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_comuni_da_importare.datainizioColumn] = value;
                }
            }
            
            public System.DateTime datafine {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_comuni_da_importare.datafineColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_comuni_da_importare.datafineColumn] = value;
                }
            }
            
            public string fisco {
                get {
                    try {
                        return ((string)(this[this.tablegeo_comuni_da_importare.fiscoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_comuni_da_importare.fiscoColumn] = value;
                }
            }
            
            public string catasto {
                get {
                    try {
                        return ((string)(this[this.tablegeo_comuni_da_importare.catastoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_comuni_da_importare.catastoColumn] = value;
                }
            }
            
            public string istat {
                get {
                    try {
                        return ((string)(this[this.tablegeo_comuni_da_importare.istatColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_comuni_da_importare.istatColumn] = value;
                }
            }
            
            public string cap {
                get {
                    try {
                        return ((string)(this[this.tablegeo_comuni_da_importare.capColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_comuni_da_importare.capColumn] = value;
                }
            }
            
            public string valore1 {
                get {
                    try {
                        return ((string)(this[this.tablegeo_comuni_da_importare.valore1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_comuni_da_importare.valore1Column] = value;
                }
            }
            
            public string valore2 {
                get {
                    try {
                        return ((string)(this[this.tablegeo_comuni_da_importare.valore2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_comuni_da_importare.valore2Column] = value;
                }
            }
            
            public bool IsnomeNull() {
                return this.IsNull(this.tablegeo_comuni_da_importare.nomeColumn);
            }
            
            public void SetnomeNull() {
                this[this.tablegeo_comuni_da_importare.nomeColumn] = System.Convert.DBNull;
            }
            
            public bool IsidprovinciaNull() {
                return this.IsNull(this.tablegeo_comuni_da_importare.idprovinciaColumn);
            }
            
            public void SetidprovinciaNull() {
                this[this.tablegeo_comuni_da_importare.idprovinciaColumn] = System.Convert.DBNull;
            }
            
            public bool Issigla_provinciaNull() {
                return this.IsNull(this.tablegeo_comuni_da_importare.sigla_provinciaColumn);
            }
            
            public void Setsigla_provinciaNull() {
                this[this.tablegeo_comuni_da_importare.sigla_provinciaColumn] = System.Convert.DBNull;
            }
            
            public bool IsdatainizioNull() {
                return this.IsNull(this.tablegeo_comuni_da_importare.datainizioColumn);
            }
            
            public void SetdatainizioNull() {
                this[this.tablegeo_comuni_da_importare.datainizioColumn] = System.Convert.DBNull;
            }
            
            public bool IsdatafineNull() {
                return this.IsNull(this.tablegeo_comuni_da_importare.datafineColumn);
            }
            
            public void SetdatafineNull() {
                this[this.tablegeo_comuni_da_importare.datafineColumn] = System.Convert.DBNull;
            }
            
            public bool IsfiscoNull() {
                return this.IsNull(this.tablegeo_comuni_da_importare.fiscoColumn);
            }
            
            public void SetfiscoNull() {
                this[this.tablegeo_comuni_da_importare.fiscoColumn] = System.Convert.DBNull;
            }
            
            public bool IscatastoNull() {
                return this.IsNull(this.tablegeo_comuni_da_importare.catastoColumn);
            }
            
            public void SetcatastoNull() {
                this[this.tablegeo_comuni_da_importare.catastoColumn] = System.Convert.DBNull;
            }
            
            public bool IsistatNull() {
                return this.IsNull(this.tablegeo_comuni_da_importare.istatColumn);
            }
            
            public void SetistatNull() {
                this[this.tablegeo_comuni_da_importare.istatColumn] = System.Convert.DBNull;
            }
            
            public bool IscapNull() {
                return this.IsNull(this.tablegeo_comuni_da_importare.capColumn);
            }
            
            public void SetcapNull() {
                this[this.tablegeo_comuni_da_importare.capColumn] = System.Convert.DBNull;
            }
            
            public bool Isvalore1Null() {
                return this.IsNull(this.tablegeo_comuni_da_importare.valore1Column);
            }
            
            public void Setvalore1Null() {
                this[this.tablegeo_comuni_da_importare.valore1Column] = System.Convert.DBNull;
            }
            
            public bool Isvalore2Null() {
                return this.IsNull(this.tablegeo_comuni_da_importare.valore2Column);
            }
            
            public void Setvalore2Null() {
                this[this.tablegeo_comuni_da_importare.valore2Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class geo_comuni_da_importareRowChangeEvent : EventArgs {
            
            private geo_comuni_da_importareRow eventRow;
            
            private DataRowAction eventAction;
            
            public geo_comuni_da_importareRowChangeEvent(geo_comuni_da_importareRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public geo_comuni_da_importareRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tutte_le_coppieDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidcomune1;
            
            private DataColumn columnidcomune2;
            
            private DataColumn columnidprovincia1;
            
            private DataColumn columnidprovincia2;
            
            private DataColumn columnprovincia1;
            
            private DataColumn columnprovincia2;
            
            private DataColumn columnnome1;
            
            private DataColumn columnnome2;
            
            private DataColumn columnisnuovo1;
            
            private DataColumn columnisnuovo2;
            
            private DataColumn columnmatching;
            
            internal tutte_le_coppieDataTable() : 
                    base("tutte_le_coppie") {
                this.InitClass();
            }
            
            internal tutte_le_coppieDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idcomune1Column {
                get {
                    return this.columnidcomune1;
                }
            }
            
            internal DataColumn idcomune2Column {
                get {
                    return this.columnidcomune2;
                }
            }
            
            internal DataColumn idprovincia1Column {
                get {
                    return this.columnidprovincia1;
                }
            }
            
            internal DataColumn idprovincia2Column {
                get {
                    return this.columnidprovincia2;
                }
            }
            
            internal DataColumn provincia1Column {
                get {
                    return this.columnprovincia1;
                }
            }
            
            internal DataColumn provincia2Column {
                get {
                    return this.columnprovincia2;
                }
            }
            
            internal DataColumn nome1Column {
                get {
                    return this.columnnome1;
                }
            }
            
            internal DataColumn nome2Column {
                get {
                    return this.columnnome2;
                }
            }
            
            internal DataColumn isnuovo1Column {
                get {
                    return this.columnisnuovo1;
                }
            }
            
            internal DataColumn isnuovo2Column {
                get {
                    return this.columnisnuovo2;
                }
            }
            
            internal DataColumn matchingColumn {
                get {
                    return this.columnmatching;
                }
            }
            
            public tutte_le_coppieRow this[int index] {
                get {
                    return ((tutte_le_coppieRow)(this.Rows[index]));
                }
            }
            
            public event tutte_le_coppieRowChangeEventHandler tutte_le_coppieRowChanged;
            
            public event tutte_le_coppieRowChangeEventHandler tutte_le_coppieRowChanging;
            
            public event tutte_le_coppieRowChangeEventHandler tutte_le_coppieRowDeleted;
            
            public event tutte_le_coppieRowChangeEventHandler tutte_le_coppieRowDeleting;
            
            public void Addtutte_le_coppieRow(tutte_le_coppieRow row) {
                this.Rows.Add(row);
            }
            
            public tutte_le_coppieRow Addtutte_le_coppieRow(int idcomune1, int idcomune2, int idprovincia1, int idprovincia2, string provincia1, string provincia2, string nome1, string nome2, bool isnuovo1, bool isnuovo2, int matching) {
                tutte_le_coppieRow rowtutte_le_coppieRow = ((tutte_le_coppieRow)(this.NewRow()));
                rowtutte_le_coppieRow.ItemArray = new object[] {
                        idcomune1,
                        idcomune2,
                        idprovincia1,
                        idprovincia2,
                        provincia1,
                        provincia2,
                        nome1,
                        nome2,
                        isnuovo1,
                        isnuovo2,
                        matching};
                this.Rows.Add(rowtutte_le_coppieRow);
                return rowtutte_le_coppieRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                tutte_le_coppieDataTable cln = ((tutte_le_coppieDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new tutte_le_coppieDataTable();
            }
            
            internal void InitVars() {
                this.columnidcomune1 = this.Columns["idcomune1"];
                this.columnidcomune2 = this.Columns["idcomune2"];
                this.columnidprovincia1 = this.Columns["idprovincia1"];
                this.columnidprovincia2 = this.Columns["idprovincia2"];
                this.columnprovincia1 = this.Columns["provincia1"];
                this.columnprovincia2 = this.Columns["provincia2"];
                this.columnnome1 = this.Columns["nome1"];
                this.columnnome2 = this.Columns["nome2"];
                this.columnisnuovo1 = this.Columns["isnuovo1"];
                this.columnisnuovo2 = this.Columns["isnuovo2"];
                this.columnmatching = this.Columns["matching"];
            }
            
            private void InitClass() {
                this.columnidcomune1 = new DataColumn("idcomune1", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidcomune1);
                this.columnidcomune2 = new DataColumn("idcomune2", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidcomune2);
                this.columnidprovincia1 = new DataColumn("idprovincia1", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidprovincia1);
                this.columnidprovincia2 = new DataColumn("idprovincia2", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidprovincia2);
                this.columnprovincia1 = new DataColumn("provincia1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprovincia1);
                this.columnprovincia2 = new DataColumn("provincia2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprovincia2);
                this.columnnome1 = new DataColumn("nome1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnome1);
                this.columnnome2 = new DataColumn("nome2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnome2);
                this.columnisnuovo1 = new DataColumn("isnuovo1", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisnuovo1);
                this.columnisnuovo2 = new DataColumn("isnuovo2", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisnuovo2);
                this.columnmatching = new DataColumn("matching", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmatching);
            }
            
            public tutte_le_coppieRow Newtutte_le_coppieRow() {
                return ((tutte_le_coppieRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new tutte_le_coppieRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(tutte_le_coppieRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tutte_le_coppieRowChanged != null)) {
                    this.tutte_le_coppieRowChanged(this, new tutte_le_coppieRowChangeEvent(((tutte_le_coppieRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tutte_le_coppieRowChanging != null)) {
                    this.tutte_le_coppieRowChanging(this, new tutte_le_coppieRowChangeEvent(((tutte_le_coppieRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tutte_le_coppieRowDeleted != null)) {
                    this.tutte_le_coppieRowDeleted(this, new tutte_le_coppieRowChangeEvent(((tutte_le_coppieRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tutte_le_coppieRowDeleting != null)) {
                    this.tutte_le_coppieRowDeleting(this, new tutte_le_coppieRowChangeEvent(((tutte_le_coppieRow)(e.Row)), e.Action));
                }
            }
            
            public void Removetutte_le_coppieRow(tutte_le_coppieRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tutte_le_coppieRow : DataRow {
            
            private tutte_le_coppieDataTable tabletutte_le_coppie;
            
            internal tutte_le_coppieRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletutte_le_coppie = ((tutte_le_coppieDataTable)(this.Table));
            }
            
            public int idcomune1 {
                get {
                    try {
                        return ((int)(this[this.tabletutte_le_coppie.idcomune1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutte_le_coppie.idcomune1Column] = value;
                }
            }
            
            public int idcomune2 {
                get {
                    try {
                        return ((int)(this[this.tabletutte_le_coppie.idcomune2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutte_le_coppie.idcomune2Column] = value;
                }
            }
            
            public int idprovincia1 {
                get {
                    try {
                        return ((int)(this[this.tabletutte_le_coppie.idprovincia1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutte_le_coppie.idprovincia1Column] = value;
                }
            }
            
            public int idprovincia2 {
                get {
                    try {
                        return ((int)(this[this.tabletutte_le_coppie.idprovincia2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutte_le_coppie.idprovincia2Column] = value;
                }
            }
            
            public string provincia1 {
                get {
                    try {
                        return ((string)(this[this.tabletutte_le_coppie.provincia1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutte_le_coppie.provincia1Column] = value;
                }
            }
            
            public string provincia2 {
                get {
                    try {
                        return ((string)(this[this.tabletutte_le_coppie.provincia2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutte_le_coppie.provincia2Column] = value;
                }
            }
            
            public string nome1 {
                get {
                    try {
                        return ((string)(this[this.tabletutte_le_coppie.nome1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutte_le_coppie.nome1Column] = value;
                }
            }
            
            public string nome2 {
                get {
                    try {
                        return ((string)(this[this.tabletutte_le_coppie.nome2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutte_le_coppie.nome2Column] = value;
                }
            }
            
            public bool isnuovo1 {
                get {
                    try {
                        return ((bool)(this[this.tabletutte_le_coppie.isnuovo1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutte_le_coppie.isnuovo1Column] = value;
                }
            }
            
            public bool isnuovo2 {
                get {
                    try {
                        return ((bool)(this[this.tabletutte_le_coppie.isnuovo2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutte_le_coppie.isnuovo2Column] = value;
                }
            }
            
            public int matching {
                get {
                    try {
                        return ((int)(this[this.tabletutte_le_coppie.matchingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutte_le_coppie.matchingColumn] = value;
                }
            }
            
            public bool Isidcomune1Null() {
                return this.IsNull(this.tabletutte_le_coppie.idcomune1Column);
            }
            
            public void Setidcomune1Null() {
                this[this.tabletutte_le_coppie.idcomune1Column] = System.Convert.DBNull;
            }
            
            public bool Isidcomune2Null() {
                return this.IsNull(this.tabletutte_le_coppie.idcomune2Column);
            }
            
            public void Setidcomune2Null() {
                this[this.tabletutte_le_coppie.idcomune2Column] = System.Convert.DBNull;
            }
            
            public bool Isidprovincia1Null() {
                return this.IsNull(this.tabletutte_le_coppie.idprovincia1Column);
            }
            
            public void Setidprovincia1Null() {
                this[this.tabletutte_le_coppie.idprovincia1Column] = System.Convert.DBNull;
            }
            
            public bool Isidprovincia2Null() {
                return this.IsNull(this.tabletutte_le_coppie.idprovincia2Column);
            }
            
            public void Setidprovincia2Null() {
                this[this.tabletutte_le_coppie.idprovincia2Column] = System.Convert.DBNull;
            }
            
            public bool Isprovincia1Null() {
                return this.IsNull(this.tabletutte_le_coppie.provincia1Column);
            }
            
            public void Setprovincia1Null() {
                this[this.tabletutte_le_coppie.provincia1Column] = System.Convert.DBNull;
            }
            
            public bool Isprovincia2Null() {
                return this.IsNull(this.tabletutte_le_coppie.provincia2Column);
            }
            
            public void Setprovincia2Null() {
                this[this.tabletutte_le_coppie.provincia2Column] = System.Convert.DBNull;
            }
            
            public bool Isnome1Null() {
                return this.IsNull(this.tabletutte_le_coppie.nome1Column);
            }
            
            public void Setnome1Null() {
                this[this.tabletutte_le_coppie.nome1Column] = System.Convert.DBNull;
            }
            
            public bool Isnome2Null() {
                return this.IsNull(this.tabletutte_le_coppie.nome2Column);
            }
            
            public void Setnome2Null() {
                this[this.tabletutte_le_coppie.nome2Column] = System.Convert.DBNull;
            }
            
            public bool Isisnuovo1Null() {
                return this.IsNull(this.tabletutte_le_coppie.isnuovo1Column);
            }
            
            public void Setisnuovo1Null() {
                this[this.tabletutte_le_coppie.isnuovo1Column] = System.Convert.DBNull;
            }
            
            public bool Isisnuovo2Null() {
                return this.IsNull(this.tabletutte_le_coppie.isnuovo2Column);
            }
            
            public void Setisnuovo2Null() {
                this[this.tabletutte_le_coppie.isnuovo2Column] = System.Convert.DBNull;
            }
            
            public bool IsmatchingNull() {
                return this.IsNull(this.tabletutte_le_coppie.matchingColumn);
            }
            
            public void SetmatchingNull() {
                this[this.tabletutte_le_coppie.matchingColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tutte_le_coppieRowChangeEvent : EventArgs {
            
            private tutte_le_coppieRow eventRow;
            
            private DataRowAction eventAction;
            
            public tutte_le_coppieRowChangeEvent(tutte_le_coppieRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public tutte_le_coppieRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tutti_i_single1DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidcomune;
            
            private DataColumn columnidprovincia;
            
            private DataColumn columnnome;
            
            private DataColumn columnprovincia;
            
            private DataColumn columnisnuovo;
            
            private DataColumn columnmatching;
            
            internal tutti_i_single1DataTable() : 
                    base("tutti_i_single1") {
                this.InitClass();
            }
            
            internal tutti_i_single1DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idcomuneColumn {
                get {
                    return this.columnidcomune;
                }
            }
            
            internal DataColumn idprovinciaColumn {
                get {
                    return this.columnidprovincia;
                }
            }
            
            internal DataColumn nomeColumn {
                get {
                    return this.columnnome;
                }
            }
            
            internal DataColumn provinciaColumn {
                get {
                    return this.columnprovincia;
                }
            }
            
            internal DataColumn isnuovoColumn {
                get {
                    return this.columnisnuovo;
                }
            }
            
            internal DataColumn matchingColumn {
                get {
                    return this.columnmatching;
                }
            }
            
            public tutti_i_single1Row this[int index] {
                get {
                    return ((tutti_i_single1Row)(this.Rows[index]));
                }
            }
            
            public event tutti_i_single1RowChangeEventHandler tutti_i_single1RowChanged;
            
            public event tutti_i_single1RowChangeEventHandler tutti_i_single1RowChanging;
            
            public event tutti_i_single1RowChangeEventHandler tutti_i_single1RowDeleted;
            
            public event tutti_i_single1RowChangeEventHandler tutti_i_single1RowDeleting;
            
            public void Addtutti_i_single1Row(tutti_i_single1Row row) {
                this.Rows.Add(row);
            }
            
            public tutti_i_single1Row Addtutti_i_single1Row(int idcomune, int idprovincia, string nome, string provincia, bool isnuovo, int matching) {
                tutti_i_single1Row rowtutti_i_single1Row = ((tutti_i_single1Row)(this.NewRow()));
                rowtutti_i_single1Row.ItemArray = new object[] {
                        idcomune,
                        idprovincia,
                        nome,
                        provincia,
                        isnuovo,
                        matching};
                this.Rows.Add(rowtutti_i_single1Row);
                return rowtutti_i_single1Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                tutti_i_single1DataTable cln = ((tutti_i_single1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new tutti_i_single1DataTable();
            }
            
            internal void InitVars() {
                this.columnidcomune = this.Columns["idcomune"];
                this.columnidprovincia = this.Columns["idprovincia"];
                this.columnnome = this.Columns["nome"];
                this.columnprovincia = this.Columns["provincia"];
                this.columnisnuovo = this.Columns["isnuovo"];
                this.columnmatching = this.Columns["matching"];
            }
            
            private void InitClass() {
                this.columnidcomune = new DataColumn("idcomune", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidcomune);
                this.columnidprovincia = new DataColumn("idprovincia", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidprovincia);
                this.columnnome = new DataColumn("nome", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnome);
                this.columnprovincia = new DataColumn("provincia", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprovincia);
                this.columnisnuovo = new DataColumn("isnuovo", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisnuovo);
                this.columnmatching = new DataColumn("matching", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmatching);
            }
            
            public tutti_i_single1Row Newtutti_i_single1Row() {
                return ((tutti_i_single1Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new tutti_i_single1Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(tutti_i_single1Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tutti_i_single1RowChanged != null)) {
                    this.tutti_i_single1RowChanged(this, new tutti_i_single1RowChangeEvent(((tutti_i_single1Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tutti_i_single1RowChanging != null)) {
                    this.tutti_i_single1RowChanging(this, new tutti_i_single1RowChangeEvent(((tutti_i_single1Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tutti_i_single1RowDeleted != null)) {
                    this.tutti_i_single1RowDeleted(this, new tutti_i_single1RowChangeEvent(((tutti_i_single1Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tutti_i_single1RowDeleting != null)) {
                    this.tutti_i_single1RowDeleting(this, new tutti_i_single1RowChangeEvent(((tutti_i_single1Row)(e.Row)), e.Action));
                }
            }
            
            public void Removetutti_i_single1Row(tutti_i_single1Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tutti_i_single1Row : DataRow {
            
            private tutti_i_single1DataTable tabletutti_i_single1;
            
            internal tutti_i_single1Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletutti_i_single1 = ((tutti_i_single1DataTable)(this.Table));
            }
            
            public int idcomune {
                get {
                    try {
                        return ((int)(this[this.tabletutti_i_single1.idcomuneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutti_i_single1.idcomuneColumn] = value;
                }
            }
            
            public int idprovincia {
                get {
                    try {
                        return ((int)(this[this.tabletutti_i_single1.idprovinciaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutti_i_single1.idprovinciaColumn] = value;
                }
            }
            
            public string nome {
                get {
                    try {
                        return ((string)(this[this.tabletutti_i_single1.nomeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutti_i_single1.nomeColumn] = value;
                }
            }
            
            public string provincia {
                get {
                    try {
                        return ((string)(this[this.tabletutti_i_single1.provinciaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutti_i_single1.provinciaColumn] = value;
                }
            }
            
            public bool isnuovo {
                get {
                    try {
                        return ((bool)(this[this.tabletutti_i_single1.isnuovoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutti_i_single1.isnuovoColumn] = value;
                }
            }
            
            public int matching {
                get {
                    try {
                        return ((int)(this[this.tabletutti_i_single1.matchingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutti_i_single1.matchingColumn] = value;
                }
            }
            
            public bool IsidcomuneNull() {
                return this.IsNull(this.tabletutti_i_single1.idcomuneColumn);
            }
            
            public void SetidcomuneNull() {
                this[this.tabletutti_i_single1.idcomuneColumn] = System.Convert.DBNull;
            }
            
            public bool IsidprovinciaNull() {
                return this.IsNull(this.tabletutti_i_single1.idprovinciaColumn);
            }
            
            public void SetidprovinciaNull() {
                this[this.tabletutti_i_single1.idprovinciaColumn] = System.Convert.DBNull;
            }
            
            public bool IsnomeNull() {
                return this.IsNull(this.tabletutti_i_single1.nomeColumn);
            }
            
            public void SetnomeNull() {
                this[this.tabletutti_i_single1.nomeColumn] = System.Convert.DBNull;
            }
            
            public bool IsprovinciaNull() {
                return this.IsNull(this.tabletutti_i_single1.provinciaColumn);
            }
            
            public void SetprovinciaNull() {
                this[this.tabletutti_i_single1.provinciaColumn] = System.Convert.DBNull;
            }
            
            public bool IsisnuovoNull() {
                return this.IsNull(this.tabletutti_i_single1.isnuovoColumn);
            }
            
            public void SetisnuovoNull() {
                this[this.tabletutti_i_single1.isnuovoColumn] = System.Convert.DBNull;
            }
            
            public bool IsmatchingNull() {
                return this.IsNull(this.tabletutti_i_single1.matchingColumn);
            }
            
            public void SetmatchingNull() {
                this[this.tabletutti_i_single1.matchingColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tutti_i_single1RowChangeEvent : EventArgs {
            
            private tutti_i_single1Row eventRow;
            
            private DataRowAction eventAction;
            
            public tutti_i_single1RowChangeEvent(tutti_i_single1Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public tutti_i_single1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tutti_i_single2DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidcomune;
            
            private DataColumn columnidprovincia;
            
            private DataColumn columndenominazione;
            
            private DataColumn columnprovincia;
            
            private DataColumn columnisnuovo;
            
            private DataColumn columnmatching;
            
            internal tutti_i_single2DataTable() : 
                    base("tutti_i_single2") {
                this.InitClass();
            }
            
            internal tutti_i_single2DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idcomuneColumn {
                get {
                    return this.columnidcomune;
                }
            }
            
            internal DataColumn idprovinciaColumn {
                get {
                    return this.columnidprovincia;
                }
            }
            
            internal DataColumn denominazioneColumn {
                get {
                    return this.columndenominazione;
                }
            }
            
            internal DataColumn provinciaColumn {
                get {
                    return this.columnprovincia;
                }
            }
            
            internal DataColumn isnuovoColumn {
                get {
                    return this.columnisnuovo;
                }
            }
            
            internal DataColumn matchingColumn {
                get {
                    return this.columnmatching;
                }
            }
            
            public tutti_i_single2Row this[int index] {
                get {
                    return ((tutti_i_single2Row)(this.Rows[index]));
                }
            }
            
            public event tutti_i_single2RowChangeEventHandler tutti_i_single2RowChanged;
            
            public event tutti_i_single2RowChangeEventHandler tutti_i_single2RowChanging;
            
            public event tutti_i_single2RowChangeEventHandler tutti_i_single2RowDeleted;
            
            public event tutti_i_single2RowChangeEventHandler tutti_i_single2RowDeleting;
            
            public void Addtutti_i_single2Row(tutti_i_single2Row row) {
                this.Rows.Add(row);
            }
            
            public tutti_i_single2Row Addtutti_i_single2Row(int idcomune, int idprovincia, string denominazione, string provincia, bool isnuovo, long matching) {
                tutti_i_single2Row rowtutti_i_single2Row = ((tutti_i_single2Row)(this.NewRow()));
                rowtutti_i_single2Row.ItemArray = new object[] {
                        idcomune,
                        idprovincia,
                        denominazione,
                        provincia,
                        isnuovo,
                        matching};
                this.Rows.Add(rowtutti_i_single2Row);
                return rowtutti_i_single2Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                tutti_i_single2DataTable cln = ((tutti_i_single2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new tutti_i_single2DataTable();
            }
            
            internal void InitVars() {
                this.columnidcomune = this.Columns["idcomune"];
                this.columnidprovincia = this.Columns["idprovincia"];
                this.columndenominazione = this.Columns["denominazione"];
                this.columnprovincia = this.Columns["provincia"];
                this.columnisnuovo = this.Columns["isnuovo"];
                this.columnmatching = this.Columns["matching"];
            }
            
            private void InitClass() {
                this.columnidcomune = new DataColumn("idcomune", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidcomune);
                this.columnidprovincia = new DataColumn("idprovincia", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidprovincia);
                this.columndenominazione = new DataColumn("denominazione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndenominazione);
                this.columnprovincia = new DataColumn("provincia", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprovincia);
                this.columnisnuovo = new DataColumn("isnuovo", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisnuovo);
                this.columnmatching = new DataColumn("matching", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmatching);
            }
            
            public tutti_i_single2Row Newtutti_i_single2Row() {
                return ((tutti_i_single2Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new tutti_i_single2Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(tutti_i_single2Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tutti_i_single2RowChanged != null)) {
                    this.tutti_i_single2RowChanged(this, new tutti_i_single2RowChangeEvent(((tutti_i_single2Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tutti_i_single2RowChanging != null)) {
                    this.tutti_i_single2RowChanging(this, new tutti_i_single2RowChangeEvent(((tutti_i_single2Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tutti_i_single2RowDeleted != null)) {
                    this.tutti_i_single2RowDeleted(this, new tutti_i_single2RowChangeEvent(((tutti_i_single2Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tutti_i_single2RowDeleting != null)) {
                    this.tutti_i_single2RowDeleting(this, new tutti_i_single2RowChangeEvent(((tutti_i_single2Row)(e.Row)), e.Action));
                }
            }
            
            public void Removetutti_i_single2Row(tutti_i_single2Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tutti_i_single2Row : DataRow {
            
            private tutti_i_single2DataTable tabletutti_i_single2;
            
            internal tutti_i_single2Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletutti_i_single2 = ((tutti_i_single2DataTable)(this.Table));
            }
            
            public int idcomune {
                get {
                    try {
                        return ((int)(this[this.tabletutti_i_single2.idcomuneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutti_i_single2.idcomuneColumn] = value;
                }
            }
            
            public int idprovincia {
                get {
                    try {
                        return ((int)(this[this.tabletutti_i_single2.idprovinciaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutti_i_single2.idprovinciaColumn] = value;
                }
            }
            
            public string denominazione {
                get {
                    try {
                        return ((string)(this[this.tabletutti_i_single2.denominazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutti_i_single2.denominazioneColumn] = value;
                }
            }
            
            public string provincia {
                get {
                    try {
                        return ((string)(this[this.tabletutti_i_single2.provinciaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutti_i_single2.provinciaColumn] = value;
                }
            }
            
            public bool isnuovo {
                get {
                    try {
                        return ((bool)(this[this.tabletutti_i_single2.isnuovoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutti_i_single2.isnuovoColumn] = value;
                }
            }
            
            public long matching {
                get {
                    try {
                        return ((long)(this[this.tabletutti_i_single2.matchingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletutti_i_single2.matchingColumn] = value;
                }
            }
            
            public bool IsidcomuneNull() {
                return this.IsNull(this.tabletutti_i_single2.idcomuneColumn);
            }
            
            public void SetidcomuneNull() {
                this[this.tabletutti_i_single2.idcomuneColumn] = System.Convert.DBNull;
            }
            
            public bool IsidprovinciaNull() {
                return this.IsNull(this.tabletutti_i_single2.idprovinciaColumn);
            }
            
            public void SetidprovinciaNull() {
                this[this.tabletutti_i_single2.idprovinciaColumn] = System.Convert.DBNull;
            }
            
            public bool IsdenominazioneNull() {
                return this.IsNull(this.tabletutti_i_single2.denominazioneColumn);
            }
            
            public void SetdenominazioneNull() {
                this[this.tabletutti_i_single2.denominazioneColumn] = System.Convert.DBNull;
            }
            
            public bool IsprovinciaNull() {
                return this.IsNull(this.tabletutti_i_single2.provinciaColumn);
            }
            
            public void SetprovinciaNull() {
                this[this.tabletutti_i_single2.provinciaColumn] = System.Convert.DBNull;
            }
            
            public bool IsisnuovoNull() {
                return this.IsNull(this.tabletutti_i_single2.isnuovoColumn);
            }
            
            public void SetisnuovoNull() {
                this[this.tabletutti_i_single2.isnuovoColumn] = System.Convert.DBNull;
            }
            
            public bool IsmatchingNull() {
                return this.IsNull(this.tabletutti_i_single2.matchingColumn);
            }
            
            public void SetmatchingNull() {
                this[this.tabletutti_i_single2.matchingColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tutti_i_single2RowChangeEvent : EventArgs {
            
            private tutti_i_single2Row eventRow;
            
            private DataRowAction eventAction;
            
            public tutti_i_single2RowChangeEvent(tutti_i_single2Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public tutti_i_single2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class coppie_della_provincia_correnteDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidcomune1;
            
            private DataColumn columnidcomune2;
            
            private DataColumn columnnome1;
            
            private DataColumn columnnome2;
            
            private DataColumn columnisnuovo1;
            
            private DataColumn columnisnuovo2;
            
            private DataColumn columnmatching;
            
            internal coppie_della_provincia_correnteDataTable() : 
                    base("coppie_della_provincia_corrente") {
                this.InitClass();
            }
            
            internal coppie_della_provincia_correnteDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idcomune1Column {
                get {
                    return this.columnidcomune1;
                }
            }
            
            internal DataColumn idcomune2Column {
                get {
                    return this.columnidcomune2;
                }
            }
            
            internal DataColumn nome1Column {
                get {
                    return this.columnnome1;
                }
            }
            
            internal DataColumn nome2Column {
                get {
                    return this.columnnome2;
                }
            }
            
            internal DataColumn isnuovo1Column {
                get {
                    return this.columnisnuovo1;
                }
            }
            
            internal DataColumn isnuovo2Column {
                get {
                    return this.columnisnuovo2;
                }
            }
            
            internal DataColumn matchingColumn {
                get {
                    return this.columnmatching;
                }
            }
            
            public coppie_della_provincia_correnteRow this[int index] {
                get {
                    return ((coppie_della_provincia_correnteRow)(this.Rows[index]));
                }
            }
            
            public event coppie_della_provincia_correnteRowChangeEventHandler coppie_della_provincia_correnteRowChanged;
            
            public event coppie_della_provincia_correnteRowChangeEventHandler coppie_della_provincia_correnteRowChanging;
            
            public event coppie_della_provincia_correnteRowChangeEventHandler coppie_della_provincia_correnteRowDeleted;
            
            public event coppie_della_provincia_correnteRowChangeEventHandler coppie_della_provincia_correnteRowDeleting;
            
            public void Addcoppie_della_provincia_correnteRow(coppie_della_provincia_correnteRow row) {
                this.Rows.Add(row);
            }
            
            public coppie_della_provincia_correnteRow Addcoppie_della_provincia_correnteRow(int idcomune1, int idcomune2, string nome1, string nome2, bool isnuovo1, bool isnuovo2, int matching) {
                coppie_della_provincia_correnteRow rowcoppie_della_provincia_correnteRow = ((coppie_della_provincia_correnteRow)(this.NewRow()));
                rowcoppie_della_provincia_correnteRow.ItemArray = new object[] {
                        idcomune1,
                        idcomune2,
                        nome1,
                        nome2,
                        isnuovo1,
                        isnuovo2,
                        matching};
                this.Rows.Add(rowcoppie_della_provincia_correnteRow);
                return rowcoppie_della_provincia_correnteRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                coppie_della_provincia_correnteDataTable cln = ((coppie_della_provincia_correnteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new coppie_della_provincia_correnteDataTable();
            }
            
            internal void InitVars() {
                this.columnidcomune1 = this.Columns["idcomune1"];
                this.columnidcomune2 = this.Columns["idcomune2"];
                this.columnnome1 = this.Columns["nome1"];
                this.columnnome2 = this.Columns["nome2"];
                this.columnisnuovo1 = this.Columns["isnuovo1"];
                this.columnisnuovo2 = this.Columns["isnuovo2"];
                this.columnmatching = this.Columns["matching"];
            }
            
            private void InitClass() {
                this.columnidcomune1 = new DataColumn("idcomune1", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidcomune1);
                this.columnidcomune2 = new DataColumn("idcomune2", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidcomune2);
                this.columnnome1 = new DataColumn("nome1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnome1);
                this.columnnome2 = new DataColumn("nome2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnome2);
                this.columnisnuovo1 = new DataColumn("isnuovo1", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisnuovo1);
                this.columnisnuovo2 = new DataColumn("isnuovo2", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisnuovo2);
                this.columnmatching = new DataColumn("matching", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmatching);
            }
            
            public coppie_della_provincia_correnteRow Newcoppie_della_provincia_correnteRow() {
                return ((coppie_della_provincia_correnteRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new coppie_della_provincia_correnteRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(coppie_della_provincia_correnteRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.coppie_della_provincia_correnteRowChanged != null)) {
                    this.coppie_della_provincia_correnteRowChanged(this, new coppie_della_provincia_correnteRowChangeEvent(((coppie_della_provincia_correnteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.coppie_della_provincia_correnteRowChanging != null)) {
                    this.coppie_della_provincia_correnteRowChanging(this, new coppie_della_provincia_correnteRowChangeEvent(((coppie_della_provincia_correnteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.coppie_della_provincia_correnteRowDeleted != null)) {
                    this.coppie_della_provincia_correnteRowDeleted(this, new coppie_della_provincia_correnteRowChangeEvent(((coppie_della_provincia_correnteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.coppie_della_provincia_correnteRowDeleting != null)) {
                    this.coppie_della_provincia_correnteRowDeleting(this, new coppie_della_provincia_correnteRowChangeEvent(((coppie_della_provincia_correnteRow)(e.Row)), e.Action));
                }
            }
            
            public void Removecoppie_della_provincia_correnteRow(coppie_della_provincia_correnteRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class coppie_della_provincia_correnteRow : DataRow {
            
            private coppie_della_provincia_correnteDataTable tablecoppie_della_provincia_corrente;
            
            internal coppie_della_provincia_correnteRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecoppie_della_provincia_corrente = ((coppie_della_provincia_correnteDataTable)(this.Table));
            }
            
            public int idcomune1 {
                get {
                    try {
                        return ((int)(this[this.tablecoppie_della_provincia_corrente.idcomune1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecoppie_della_provincia_corrente.idcomune1Column] = value;
                }
            }
            
            public int idcomune2 {
                get {
                    try {
                        return ((int)(this[this.tablecoppie_della_provincia_corrente.idcomune2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecoppie_della_provincia_corrente.idcomune2Column] = value;
                }
            }
            
            public string nome1 {
                get {
                    try {
                        return ((string)(this[this.tablecoppie_della_provincia_corrente.nome1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecoppie_della_provincia_corrente.nome1Column] = value;
                }
            }
            
            public string nome2 {
                get {
                    try {
                        return ((string)(this[this.tablecoppie_della_provincia_corrente.nome2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecoppie_della_provincia_corrente.nome2Column] = value;
                }
            }
            
            public bool isnuovo1 {
                get {
                    try {
                        return ((bool)(this[this.tablecoppie_della_provincia_corrente.isnuovo1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecoppie_della_provincia_corrente.isnuovo1Column] = value;
                }
            }
            
            public bool isnuovo2 {
                get {
                    try {
                        return ((bool)(this[this.tablecoppie_della_provincia_corrente.isnuovo2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecoppie_della_provincia_corrente.isnuovo2Column] = value;
                }
            }
            
            public int matching {
                get {
                    try {
                        return ((int)(this[this.tablecoppie_della_provincia_corrente.matchingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecoppie_della_provincia_corrente.matchingColumn] = value;
                }
            }
            
            public bool Isidcomune1Null() {
                return this.IsNull(this.tablecoppie_della_provincia_corrente.idcomune1Column);
            }
            
            public void Setidcomune1Null() {
                this[this.tablecoppie_della_provincia_corrente.idcomune1Column] = System.Convert.DBNull;
            }
            
            public bool Isidcomune2Null() {
                return this.IsNull(this.tablecoppie_della_provincia_corrente.idcomune2Column);
            }
            
            public void Setidcomune2Null() {
                this[this.tablecoppie_della_provincia_corrente.idcomune2Column] = System.Convert.DBNull;
            }
            
            public bool Isnome1Null() {
                return this.IsNull(this.tablecoppie_della_provincia_corrente.nome1Column);
            }
            
            public void Setnome1Null() {
                this[this.tablecoppie_della_provincia_corrente.nome1Column] = System.Convert.DBNull;
            }
            
            public bool Isnome2Null() {
                return this.IsNull(this.tablecoppie_della_provincia_corrente.nome2Column);
            }
            
            public void Setnome2Null() {
                this[this.tablecoppie_della_provincia_corrente.nome2Column] = System.Convert.DBNull;
            }
            
            public bool Isisnuovo1Null() {
                return this.IsNull(this.tablecoppie_della_provincia_corrente.isnuovo1Column);
            }
            
            public void Setisnuovo1Null() {
                this[this.tablecoppie_della_provincia_corrente.isnuovo1Column] = System.Convert.DBNull;
            }
            
            public bool Isisnuovo2Null() {
                return this.IsNull(this.tablecoppie_della_provincia_corrente.isnuovo2Column);
            }
            
            public void Setisnuovo2Null() {
                this[this.tablecoppie_della_provincia_corrente.isnuovo2Column] = System.Convert.DBNull;
            }
            
            public bool IsmatchingNull() {
                return this.IsNull(this.tablecoppie_della_provincia_corrente.matchingColumn);
            }
            
            public void SetmatchingNull() {
                this[this.tablecoppie_della_provincia_corrente.matchingColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class coppie_della_provincia_correnteRowChangeEvent : EventArgs {
            
            private coppie_della_provincia_correnteRow eventRow;
            
            private DataRowAction eventAction;
            
            public coppie_della_provincia_correnteRowChangeEvent(coppie_della_provincia_correnteRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public coppie_della_provincia_correnteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class dettagliDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidcomune;
            
            private DataColumn columndata_inizio;
            
            private DataColumn columndata_fine;
            
            private DataColumn columnstatus;
            
            private DataColumn columnprovincia;
            
            private DataColumn columndenominazione;
            
            private DataColumn columnfisco;
            
            private DataColumn columncatasto;
            
            private DataColumn columnistat;
            
            private DataColumn columncap;
            
            private DataColumn columnvecchio_comune;
            
            private DataColumn columnnuovo_comune;
            
            internal dettagliDataTable() : 
                    base("dettagli") {
                this.InitClass();
            }
            
            internal dettagliDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idcomuneColumn {
                get {
                    return this.columnidcomune;
                }
            }
            
            internal DataColumn data_inizioColumn {
                get {
                    return this.columndata_inizio;
                }
            }
            
            internal DataColumn data_fineColumn {
                get {
                    return this.columndata_fine;
                }
            }
            
            internal DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            internal DataColumn provinciaColumn {
                get {
                    return this.columnprovincia;
                }
            }
            
            internal DataColumn denominazioneColumn {
                get {
                    return this.columndenominazione;
                }
            }
            
            internal DataColumn fiscoColumn {
                get {
                    return this.columnfisco;
                }
            }
            
            internal DataColumn catastoColumn {
                get {
                    return this.columncatasto;
                }
            }
            
            internal DataColumn istatColumn {
                get {
                    return this.columnistat;
                }
            }
            
            internal DataColumn capColumn {
                get {
                    return this.columncap;
                }
            }
            
            internal DataColumn vecchio_comuneColumn {
                get {
                    return this.columnvecchio_comune;
                }
            }
            
            internal DataColumn nuovo_comuneColumn {
                get {
                    return this.columnnuovo_comune;
                }
            }
            
            public dettagliRow this[int index] {
                get {
                    return ((dettagliRow)(this.Rows[index]));
                }
            }
            
            public event dettagliRowChangeEventHandler dettagliRowChanged;
            
            public event dettagliRowChangeEventHandler dettagliRowChanging;
            
            public event dettagliRowChangeEventHandler dettagliRowDeleted;
            
            public event dettagliRowChangeEventHandler dettagliRowDeleting;
            
            public void AdddettagliRow(dettagliRow row) {
                this.Rows.Add(row);
            }
            
            public dettagliRow AdddettagliRow(int idcomune, System.DateTime data_inizio, System.DateTime data_fine, string status, string provincia, string denominazione, string fisco, string catasto, string istat, string cap, string vecchio_comune, string nuovo_comune) {
                dettagliRow rowdettagliRow = ((dettagliRow)(this.NewRow()));
                rowdettagliRow.ItemArray = new object[] {
                        idcomune,
                        data_inizio,
                        data_fine,
                        status,
                        provincia,
                        denominazione,
                        fisco,
                        catasto,
                        istat,
                        cap,
                        vecchio_comune,
                        nuovo_comune};
                this.Rows.Add(rowdettagliRow);
                return rowdettagliRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                dettagliDataTable cln = ((dettagliDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new dettagliDataTable();
            }
            
            internal void InitVars() {
                this.columnidcomune = this.Columns["idcomune"];
                this.columndata_inizio = this.Columns["data_inizio"];
                this.columndata_fine = this.Columns["data_fine"];
                this.columnstatus = this.Columns["status"];
                this.columnprovincia = this.Columns["provincia"];
                this.columndenominazione = this.Columns["denominazione"];
                this.columnfisco = this.Columns["fisco"];
                this.columncatasto = this.Columns["catasto"];
                this.columnistat = this.Columns["istat"];
                this.columncap = this.Columns["cap"];
                this.columnvecchio_comune = this.Columns["vecchio_comune"];
                this.columnnuovo_comune = this.Columns["nuovo_comune"];
            }
            
            private void InitClass() {
                this.columnidcomune = new DataColumn("idcomune", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidcomune);
                this.columndata_inizio = new DataColumn("data_inizio", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndata_inizio);
                this.columndata_fine = new DataColumn("data_fine", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndata_fine);
                this.columnstatus = new DataColumn("status", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstatus);
                this.columnprovincia = new DataColumn("provincia", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprovincia);
                this.columndenominazione = new DataColumn("denominazione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndenominazione);
                this.columnfisco = new DataColumn("fisco", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfisco);
                this.columncatasto = new DataColumn("catasto", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncatasto);
                this.columnistat = new DataColumn("istat", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnistat);
                this.columncap = new DataColumn("cap", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncap);
                this.columnvecchio_comune = new DataColumn("vecchio_comune", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvecchio_comune);
                this.columnnuovo_comune = new DataColumn("nuovo_comune", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnuovo_comune);
            }
            
            public dettagliRow NewdettagliRow() {
                return ((dettagliRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new dettagliRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(dettagliRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dettagliRowChanged != null)) {
                    this.dettagliRowChanged(this, new dettagliRowChangeEvent(((dettagliRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dettagliRowChanging != null)) {
                    this.dettagliRowChanging(this, new dettagliRowChangeEvent(((dettagliRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dettagliRowDeleted != null)) {
                    this.dettagliRowDeleted(this, new dettagliRowChangeEvent(((dettagliRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dettagliRowDeleting != null)) {
                    this.dettagliRowDeleting(this, new dettagliRowChangeEvent(((dettagliRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovedettagliRow(dettagliRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class dettagliRow : DataRow {
            
            private dettagliDataTable tabledettagli;
            
            internal dettagliRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabledettagli = ((dettagliDataTable)(this.Table));
            }
            
            public int idcomune {
                get {
                    try {
                        return ((int)(this[this.tabledettagli.idcomuneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledettagli.idcomuneColumn] = value;
                }
            }
            
            public System.DateTime data_inizio {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabledettagli.data_inizioColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledettagli.data_inizioColumn] = value;
                }
            }
            
            public System.DateTime data_fine {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabledettagli.data_fineColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledettagli.data_fineColumn] = value;
                }
            }
            
            public string status {
                get {
                    try {
                        return ((string)(this[this.tabledettagli.statusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledettagli.statusColumn] = value;
                }
            }
            
            public string provincia {
                get {
                    try {
                        return ((string)(this[this.tabledettagli.provinciaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledettagli.provinciaColumn] = value;
                }
            }
            
            public string denominazione {
                get {
                    try {
                        return ((string)(this[this.tabledettagli.denominazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledettagli.denominazioneColumn] = value;
                }
            }
            
            public string fisco {
                get {
                    try {
                        return ((string)(this[this.tabledettagli.fiscoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledettagli.fiscoColumn] = value;
                }
            }
            
            public string catasto {
                get {
                    try {
                        return ((string)(this[this.tabledettagli.catastoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledettagli.catastoColumn] = value;
                }
            }
            
            public string istat {
                get {
                    try {
                        return ((string)(this[this.tabledettagli.istatColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledettagli.istatColumn] = value;
                }
            }
            
            public string cap {
                get {
                    try {
                        return ((string)(this[this.tabledettagli.capColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledettagli.capColumn] = value;
                }
            }
            
            public string vecchio_comune {
                get {
                    try {
                        return ((string)(this[this.tabledettagli.vecchio_comuneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledettagli.vecchio_comuneColumn] = value;
                }
            }
            
            public string nuovo_comune {
                get {
                    try {
                        return ((string)(this[this.tabledettagli.nuovo_comuneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledettagli.nuovo_comuneColumn] = value;
                }
            }
            
            public bool IsidcomuneNull() {
                return this.IsNull(this.tabledettagli.idcomuneColumn);
            }
            
            public void SetidcomuneNull() {
                this[this.tabledettagli.idcomuneColumn] = System.Convert.DBNull;
            }
            
            public bool Isdata_inizioNull() {
                return this.IsNull(this.tabledettagli.data_inizioColumn);
            }
            
            public void Setdata_inizioNull() {
                this[this.tabledettagli.data_inizioColumn] = System.Convert.DBNull;
            }
            
            public bool Isdata_fineNull() {
                return this.IsNull(this.tabledettagli.data_fineColumn);
            }
            
            public void Setdata_fineNull() {
                this[this.tabledettagli.data_fineColumn] = System.Convert.DBNull;
            }
            
            public bool IsstatusNull() {
                return this.IsNull(this.tabledettagli.statusColumn);
            }
            
            public void SetstatusNull() {
                this[this.tabledettagli.statusColumn] = System.Convert.DBNull;
            }
            
            public bool IsprovinciaNull() {
                return this.IsNull(this.tabledettagli.provinciaColumn);
            }
            
            public void SetprovinciaNull() {
                this[this.tabledettagli.provinciaColumn] = System.Convert.DBNull;
            }
            
            public bool IsdenominazioneNull() {
                return this.IsNull(this.tabledettagli.denominazioneColumn);
            }
            
            public void SetdenominazioneNull() {
                this[this.tabledettagli.denominazioneColumn] = System.Convert.DBNull;
            }
            
            public bool IsfiscoNull() {
                return this.IsNull(this.tabledettagli.fiscoColumn);
            }
            
            public void SetfiscoNull() {
                this[this.tabledettagli.fiscoColumn] = System.Convert.DBNull;
            }
            
            public bool IscatastoNull() {
                return this.IsNull(this.tabledettagli.catastoColumn);
            }
            
            public void SetcatastoNull() {
                this[this.tabledettagli.catastoColumn] = System.Convert.DBNull;
            }
            
            public bool IsistatNull() {
                return this.IsNull(this.tabledettagli.istatColumn);
            }
            
            public void SetistatNull() {
                this[this.tabledettagli.istatColumn] = System.Convert.DBNull;
            }
            
            public bool IscapNull() {
                return this.IsNull(this.tabledettagli.capColumn);
            }
            
            public void SetcapNull() {
                this[this.tabledettagli.capColumn] = System.Convert.DBNull;
            }
            
            public bool Isvecchio_comuneNull() {
                return this.IsNull(this.tabledettagli.vecchio_comuneColumn);
            }
            
            public void Setvecchio_comuneNull() {
                this[this.tabledettagli.vecchio_comuneColumn] = System.Convert.DBNull;
            }
            
            public bool Isnuovo_comuneNull() {
                return this.IsNull(this.tabledettagli.nuovo_comuneColumn);
            }
            
            public void Setnuovo_comuneNull() {
                this[this.tabledettagli.nuovo_comuneColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class dettagliRowChangeEvent : EventArgs {
            
            private dettagliRow eventRow;
            
            private DataRowAction eventAction;
            
            public dettagliRowChangeEvent(dettagliRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public dettagliRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class single1_della_provincia_correnteDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidcomune;
            
            private DataColumn columnnome;
            
            private DataColumn columnidprovincia;
            
            private DataColumn columnisnuovo;
            
            private DataColumn columnmatching;
            
            internal single1_della_provincia_correnteDataTable() : 
                    base("single1_della_provincia_corrente") {
                this.InitClass();
            }
            
            internal single1_della_provincia_correnteDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idcomuneColumn {
                get {
                    return this.columnidcomune;
                }
            }
            
            internal DataColumn nomeColumn {
                get {
                    return this.columnnome;
                }
            }
            
            internal DataColumn idprovinciaColumn {
                get {
                    return this.columnidprovincia;
                }
            }
            
            internal DataColumn isnuovoColumn {
                get {
                    return this.columnisnuovo;
                }
            }
            
            internal DataColumn matchingColumn {
                get {
                    return this.columnmatching;
                }
            }
            
            public single1_della_provincia_correnteRow this[int index] {
                get {
                    return ((single1_della_provincia_correnteRow)(this.Rows[index]));
                }
            }
            
            public event single1_della_provincia_correnteRowChangeEventHandler single1_della_provincia_correnteRowChanged;
            
            public event single1_della_provincia_correnteRowChangeEventHandler single1_della_provincia_correnteRowChanging;
            
            public event single1_della_provincia_correnteRowChangeEventHandler single1_della_provincia_correnteRowDeleted;
            
            public event single1_della_provincia_correnteRowChangeEventHandler single1_della_provincia_correnteRowDeleting;
            
            public void Addsingle1_della_provincia_correnteRow(single1_della_provincia_correnteRow row) {
                this.Rows.Add(row);
            }
            
            public single1_della_provincia_correnteRow Addsingle1_della_provincia_correnteRow(int idcomune, string nome, int idprovincia, bool isnuovo, int matching) {
                single1_della_provincia_correnteRow rowsingle1_della_provincia_correnteRow = ((single1_della_provincia_correnteRow)(this.NewRow()));
                rowsingle1_della_provincia_correnteRow.ItemArray = new object[] {
                        idcomune,
                        nome,
                        idprovincia,
                        isnuovo,
                        matching};
                this.Rows.Add(rowsingle1_della_provincia_correnteRow);
                return rowsingle1_della_provincia_correnteRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                single1_della_provincia_correnteDataTable cln = ((single1_della_provincia_correnteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new single1_della_provincia_correnteDataTable();
            }
            
            internal void InitVars() {
                this.columnidcomune = this.Columns["idcomune"];
                this.columnnome = this.Columns["nome"];
                this.columnidprovincia = this.Columns["idprovincia"];
                this.columnisnuovo = this.Columns["isnuovo"];
                this.columnmatching = this.Columns["matching"];
            }
            
            private void InitClass() {
                this.columnidcomune = new DataColumn("idcomune", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidcomune);
                this.columnnome = new DataColumn("nome", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnome);
                this.columnidprovincia = new DataColumn("idprovincia", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidprovincia);
                this.columnisnuovo = new DataColumn("isnuovo", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisnuovo);
                this.columnmatching = new DataColumn("matching", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmatching);
            }
            
            public single1_della_provincia_correnteRow Newsingle1_della_provincia_correnteRow() {
                return ((single1_della_provincia_correnteRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new single1_della_provincia_correnteRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(single1_della_provincia_correnteRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.single1_della_provincia_correnteRowChanged != null)) {
                    this.single1_della_provincia_correnteRowChanged(this, new single1_della_provincia_correnteRowChangeEvent(((single1_della_provincia_correnteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.single1_della_provincia_correnteRowChanging != null)) {
                    this.single1_della_provincia_correnteRowChanging(this, new single1_della_provincia_correnteRowChangeEvent(((single1_della_provincia_correnteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.single1_della_provincia_correnteRowDeleted != null)) {
                    this.single1_della_provincia_correnteRowDeleted(this, new single1_della_provincia_correnteRowChangeEvent(((single1_della_provincia_correnteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.single1_della_provincia_correnteRowDeleting != null)) {
                    this.single1_della_provincia_correnteRowDeleting(this, new single1_della_provincia_correnteRowChangeEvent(((single1_della_provincia_correnteRow)(e.Row)), e.Action));
                }
            }
            
            public void Removesingle1_della_provincia_correnteRow(single1_della_provincia_correnteRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class single1_della_provincia_correnteRow : DataRow {
            
            private single1_della_provincia_correnteDataTable tablesingle1_della_provincia_corrente;
            
            internal single1_della_provincia_correnteRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablesingle1_della_provincia_corrente = ((single1_della_provincia_correnteDataTable)(this.Table));
            }
            
            public int idcomune {
                get {
                    try {
                        return ((int)(this[this.tablesingle1_della_provincia_corrente.idcomuneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesingle1_della_provincia_corrente.idcomuneColumn] = value;
                }
            }
            
            public string nome {
                get {
                    try {
                        return ((string)(this[this.tablesingle1_della_provincia_corrente.nomeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesingle1_della_provincia_corrente.nomeColumn] = value;
                }
            }
            
            public int idprovincia {
                get {
                    try {
                        return ((int)(this[this.tablesingle1_della_provincia_corrente.idprovinciaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesingle1_della_provincia_corrente.idprovinciaColumn] = value;
                }
            }
            
            public bool isnuovo {
                get {
                    try {
                        return ((bool)(this[this.tablesingle1_della_provincia_corrente.isnuovoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesingle1_della_provincia_corrente.isnuovoColumn] = value;
                }
            }
            
            public int matching {
                get {
                    try {
                        return ((int)(this[this.tablesingle1_della_provincia_corrente.matchingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesingle1_della_provincia_corrente.matchingColumn] = value;
                }
            }
            
            public bool IsidcomuneNull() {
                return this.IsNull(this.tablesingle1_della_provincia_corrente.idcomuneColumn);
            }
            
            public void SetidcomuneNull() {
                this[this.tablesingle1_della_provincia_corrente.idcomuneColumn] = System.Convert.DBNull;
            }
            
            public bool IsnomeNull() {
                return this.IsNull(this.tablesingle1_della_provincia_corrente.nomeColumn);
            }
            
            public void SetnomeNull() {
                this[this.tablesingle1_della_provincia_corrente.nomeColumn] = System.Convert.DBNull;
            }
            
            public bool IsidprovinciaNull() {
                return this.IsNull(this.tablesingle1_della_provincia_corrente.idprovinciaColumn);
            }
            
            public void SetidprovinciaNull() {
                this[this.tablesingle1_della_provincia_corrente.idprovinciaColumn] = System.Convert.DBNull;
            }
            
            public bool IsisnuovoNull() {
                return this.IsNull(this.tablesingle1_della_provincia_corrente.isnuovoColumn);
            }
            
            public void SetisnuovoNull() {
                this[this.tablesingle1_della_provincia_corrente.isnuovoColumn] = System.Convert.DBNull;
            }
            
            public bool IsmatchingNull() {
                return this.IsNull(this.tablesingle1_della_provincia_corrente.matchingColumn);
            }
            
            public void SetmatchingNull() {
                this[this.tablesingle1_della_provincia_corrente.matchingColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class single1_della_provincia_correnteRowChangeEvent : EventArgs {
            
            private single1_della_provincia_correnteRow eventRow;
            
            private DataRowAction eventAction;
            
            public single1_della_provincia_correnteRowChangeEvent(single1_della_provincia_correnteRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public single1_della_provincia_correnteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class single2_della_provincia_correnteDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidcomune;
            
            private DataColumn columndenominazione;
            
            private DataColumn columnidprovincia;
            
            private DataColumn columnisnuovo;
            
            private DataColumn columnmatching;
            
            internal single2_della_provincia_correnteDataTable() : 
                    base("single2_della_provincia_corrente") {
                this.InitClass();
            }
            
            internal single2_della_provincia_correnteDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idcomuneColumn {
                get {
                    return this.columnidcomune;
                }
            }
            
            internal DataColumn denominazioneColumn {
                get {
                    return this.columndenominazione;
                }
            }
            
            internal DataColumn idprovinciaColumn {
                get {
                    return this.columnidprovincia;
                }
            }
            
            internal DataColumn isnuovoColumn {
                get {
                    return this.columnisnuovo;
                }
            }
            
            internal DataColumn matchingColumn {
                get {
                    return this.columnmatching;
                }
            }
            
            public single2_della_provincia_correnteRow this[int index] {
                get {
                    return ((single2_della_provincia_correnteRow)(this.Rows[index]));
                }
            }
            
            public event single2_della_provincia_correnteRowChangeEventHandler single2_della_provincia_correnteRowChanged;
            
            public event single2_della_provincia_correnteRowChangeEventHandler single2_della_provincia_correnteRowChanging;
            
            public event single2_della_provincia_correnteRowChangeEventHandler single2_della_provincia_correnteRowDeleted;
            
            public event single2_della_provincia_correnteRowChangeEventHandler single2_della_provincia_correnteRowDeleting;
            
            public void Addsingle2_della_provincia_correnteRow(single2_della_provincia_correnteRow row) {
                this.Rows.Add(row);
            }
            
            public single2_della_provincia_correnteRow Addsingle2_della_provincia_correnteRow(int idcomune, string denominazione, int idprovincia, bool isnuovo, int matching) {
                single2_della_provincia_correnteRow rowsingle2_della_provincia_correnteRow = ((single2_della_provincia_correnteRow)(this.NewRow()));
                rowsingle2_della_provincia_correnteRow.ItemArray = new object[] {
                        idcomune,
                        denominazione,
                        idprovincia,
                        isnuovo,
                        matching};
                this.Rows.Add(rowsingle2_della_provincia_correnteRow);
                return rowsingle2_della_provincia_correnteRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                single2_della_provincia_correnteDataTable cln = ((single2_della_provincia_correnteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new single2_della_provincia_correnteDataTable();
            }
            
            internal void InitVars() {
                this.columnidcomune = this.Columns["idcomune"];
                this.columndenominazione = this.Columns["denominazione"];
                this.columnidprovincia = this.Columns["idprovincia"];
                this.columnisnuovo = this.Columns["isnuovo"];
                this.columnmatching = this.Columns["matching"];
            }
            
            private void InitClass() {
                this.columnidcomune = new DataColumn("idcomune", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidcomune);
                this.columndenominazione = new DataColumn("denominazione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndenominazione);
                this.columnidprovincia = new DataColumn("idprovincia", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidprovincia);
                this.columnisnuovo = new DataColumn("isnuovo", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisnuovo);
                this.columnmatching = new DataColumn("matching", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmatching);
            }
            
            public single2_della_provincia_correnteRow Newsingle2_della_provincia_correnteRow() {
                return ((single2_della_provincia_correnteRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new single2_della_provincia_correnteRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(single2_della_provincia_correnteRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.single2_della_provincia_correnteRowChanged != null)) {
                    this.single2_della_provincia_correnteRowChanged(this, new single2_della_provincia_correnteRowChangeEvent(((single2_della_provincia_correnteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.single2_della_provincia_correnteRowChanging != null)) {
                    this.single2_della_provincia_correnteRowChanging(this, new single2_della_provincia_correnteRowChangeEvent(((single2_della_provincia_correnteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.single2_della_provincia_correnteRowDeleted != null)) {
                    this.single2_della_provincia_correnteRowDeleted(this, new single2_della_provincia_correnteRowChangeEvent(((single2_della_provincia_correnteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.single2_della_provincia_correnteRowDeleting != null)) {
                    this.single2_della_provincia_correnteRowDeleting(this, new single2_della_provincia_correnteRowChangeEvent(((single2_della_provincia_correnteRow)(e.Row)), e.Action));
                }
            }
            
            public void Removesingle2_della_provincia_correnteRow(single2_della_provincia_correnteRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class single2_della_provincia_correnteRow : DataRow {
            
            private single2_della_provincia_correnteDataTable tablesingle2_della_provincia_corrente;
            
            internal single2_della_provincia_correnteRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablesingle2_della_provincia_corrente = ((single2_della_provincia_correnteDataTable)(this.Table));
            }
            
            public int idcomune {
                get {
                    try {
                        return ((int)(this[this.tablesingle2_della_provincia_corrente.idcomuneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesingle2_della_provincia_corrente.idcomuneColumn] = value;
                }
            }
            
            public string denominazione {
                get {
                    try {
                        return ((string)(this[this.tablesingle2_della_provincia_corrente.denominazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesingle2_della_provincia_corrente.denominazioneColumn] = value;
                }
            }
            
            public int idprovincia {
                get {
                    try {
                        return ((int)(this[this.tablesingle2_della_provincia_corrente.idprovinciaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesingle2_della_provincia_corrente.idprovinciaColumn] = value;
                }
            }
            
            public bool isnuovo {
                get {
                    try {
                        return ((bool)(this[this.tablesingle2_della_provincia_corrente.isnuovoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesingle2_della_provincia_corrente.isnuovoColumn] = value;
                }
            }
            
            public int matching {
                get {
                    try {
                        return ((int)(this[this.tablesingle2_della_provincia_corrente.matchingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesingle2_della_provincia_corrente.matchingColumn] = value;
                }
            }
            
            public bool IsidcomuneNull() {
                return this.IsNull(this.tablesingle2_della_provincia_corrente.idcomuneColumn);
            }
            
            public void SetidcomuneNull() {
                this[this.tablesingle2_della_provincia_corrente.idcomuneColumn] = System.Convert.DBNull;
            }
            
            public bool IsdenominazioneNull() {
                return this.IsNull(this.tablesingle2_della_provincia_corrente.denominazioneColumn);
            }
            
            public void SetdenominazioneNull() {
                this[this.tablesingle2_della_provincia_corrente.denominazioneColumn] = System.Convert.DBNull;
            }
            
            public bool IsidprovinciaNull() {
                return this.IsNull(this.tablesingle2_della_provincia_corrente.idprovinciaColumn);
            }
            
            public void SetidprovinciaNull() {
                this[this.tablesingle2_della_provincia_corrente.idprovinciaColumn] = System.Convert.DBNull;
            }
            
            public bool IsisnuovoNull() {
                return this.IsNull(this.tablesingle2_della_provincia_corrente.isnuovoColumn);
            }
            
            public void SetisnuovoNull() {
                this[this.tablesingle2_della_provincia_corrente.isnuovoColumn] = System.Convert.DBNull;
            }
            
            public bool IsmatchingNull() {
                return this.IsNull(this.tablesingle2_della_provincia_corrente.matchingColumn);
            }
            
            public void SetmatchingNull() {
                this[this.tablesingle2_della_provincia_corrente.matchingColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class single2_della_provincia_correnteRowChangeEvent : EventArgs {
            
            private single2_della_provincia_correnteRow eventRow;
            
            private DataRowAction eventAction;
            
            public single2_della_provincia_correnteRowChangeEvent(single2_della_provincia_correnteRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public single2_della_provincia_correnteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class province_selezionateDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidprovincia;
            
            private DataColumn columnsigla;
            
            internal province_selezionateDataTable() : 
                    base("province_selezionate") {
                this.InitClass();
            }
            
            internal province_selezionateDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idprovinciaColumn {
                get {
                    return this.columnidprovincia;
                }
            }
            
            internal DataColumn siglaColumn {
                get {
                    return this.columnsigla;
                }
            }
            
            public province_selezionateRow this[int index] {
                get {
                    return ((province_selezionateRow)(this.Rows[index]));
                }
            }
            
            public event province_selezionateRowChangeEventHandler province_selezionateRowChanged;
            
            public event province_selezionateRowChangeEventHandler province_selezionateRowChanging;
            
            public event province_selezionateRowChangeEventHandler province_selezionateRowDeleted;
            
            public event province_selezionateRowChangeEventHandler province_selezionateRowDeleting;
            
            public void Addprovince_selezionateRow(province_selezionateRow row) {
                this.Rows.Add(row);
            }
            
            public province_selezionateRow Addprovince_selezionateRow(int idprovincia, string sigla) {
                province_selezionateRow rowprovince_selezionateRow = ((province_selezionateRow)(this.NewRow()));
                rowprovince_selezionateRow.ItemArray = new object[] {
                        idprovincia,
                        sigla};
                this.Rows.Add(rowprovince_selezionateRow);
                return rowprovince_selezionateRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                province_selezionateDataTable cln = ((province_selezionateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new province_selezionateDataTable();
            }
            
            internal void InitVars() {
                this.columnidprovincia = this.Columns["idprovincia"];
                this.columnsigla = this.Columns["sigla"];
            }
            
            private void InitClass() {
                this.columnidprovincia = new DataColumn("idprovincia", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidprovincia);
                this.columnsigla = new DataColumn("sigla", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsigla);
            }
            
            public province_selezionateRow Newprovince_selezionateRow() {
                return ((province_selezionateRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new province_selezionateRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(province_selezionateRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.province_selezionateRowChanged != null)) {
                    this.province_selezionateRowChanged(this, new province_selezionateRowChangeEvent(((province_selezionateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.province_selezionateRowChanging != null)) {
                    this.province_selezionateRowChanging(this, new province_selezionateRowChangeEvent(((province_selezionateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.province_selezionateRowDeleted != null)) {
                    this.province_selezionateRowDeleted(this, new province_selezionateRowChangeEvent(((province_selezionateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.province_selezionateRowDeleting != null)) {
                    this.province_selezionateRowDeleting(this, new province_selezionateRowChangeEvent(((province_selezionateRow)(e.Row)), e.Action));
                }
            }
            
            public void Removeprovince_selezionateRow(province_selezionateRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class province_selezionateRow : DataRow {
            
            private province_selezionateDataTable tableprovince_selezionate;
            
            internal province_selezionateRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableprovince_selezionate = ((province_selezionateDataTable)(this.Table));
            }
            
            public int idprovincia {
                get {
                    try {
                        return ((int)(this[this.tableprovince_selezionate.idprovinciaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprovince_selezionate.idprovinciaColumn] = value;
                }
            }
            
            public string sigla {
                get {
                    try {
                        return ((string)(this[this.tableprovince_selezionate.siglaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprovince_selezionate.siglaColumn] = value;
                }
            }
            
            public bool IsidprovinciaNull() {
                return this.IsNull(this.tableprovince_selezionate.idprovinciaColumn);
            }
            
            public void SetidprovinciaNull() {
                this[this.tableprovince_selezionate.idprovinciaColumn] = System.Convert.DBNull;
            }
            
            public bool IssiglaNull() {
                return this.IsNull(this.tableprovince_selezionate.siglaColumn);
            }
            
            public void SetsiglaNull() {
                this[this.tableprovince_selezionate.siglaColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class province_selezionateRowChangeEvent : EventArgs {
            
            private province_selezionateRow eventRow;
            
            private DataRowAction eventAction;
            
            public province_selezionateRowChangeEvent(province_selezionateRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public province_selezionateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class geo_aggiornamentoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnid_aggiornamento;
            
            private DataColumn columndata;
            
            private DataColumn columntabella_originale;
            
            private DataColumn columntabella_geo;
            
            private DataColumn columntipo;
            
            private DataColumn columncomune_importato;
            
            private DataColumn columngeo_comune;
            
            private DataColumn columnchiave;
            
            private DataColumn columnvecchio_valore;
            
            private DataColumn columnnuovo_valore;
            
            internal geo_aggiornamentoDataTable() : 
                    base("geo_aggiornamento") {
                this.InitClass();
            }
            
            internal geo_aggiornamentoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn id_aggiornamentoColumn {
                get {
                    return this.columnid_aggiornamento;
                }
            }
            
            internal DataColumn dataColumn {
                get {
                    return this.columndata;
                }
            }
            
            internal DataColumn tabella_originaleColumn {
                get {
                    return this.columntabella_originale;
                }
            }
            
            internal DataColumn tabella_geoColumn {
                get {
                    return this.columntabella_geo;
                }
            }
            
            internal DataColumn tipoColumn {
                get {
                    return this.columntipo;
                }
            }
            
            internal DataColumn comune_importatoColumn {
                get {
                    return this.columncomune_importato;
                }
            }
            
            internal DataColumn geo_comuneColumn {
                get {
                    return this.columngeo_comune;
                }
            }
            
            internal DataColumn chiaveColumn {
                get {
                    return this.columnchiave;
                }
            }
            
            internal DataColumn vecchio_valoreColumn {
                get {
                    return this.columnvecchio_valore;
                }
            }
            
            internal DataColumn nuovo_valoreColumn {
                get {
                    return this.columnnuovo_valore;
                }
            }
            
            public geo_aggiornamentoRow this[int index] {
                get {
                    return ((geo_aggiornamentoRow)(this.Rows[index]));
                }
            }
            
            public event geo_aggiornamentoRowChangeEventHandler geo_aggiornamentoRowChanged;
            
            public event geo_aggiornamentoRowChangeEventHandler geo_aggiornamentoRowChanging;
            
            public event geo_aggiornamentoRowChangeEventHandler geo_aggiornamentoRowDeleted;
            
            public event geo_aggiornamentoRowChangeEventHandler geo_aggiornamentoRowDeleting;
            
            public void Addgeo_aggiornamentoRow(geo_aggiornamentoRow row) {
                this.Rows.Add(row);
            }
            
            public geo_aggiornamentoRow Addgeo_aggiornamentoRow(int id_aggiornamento, System.DateTime data, string tabella_originale, string tabella_geo, string tipo, string comune_importato, string geo_comune, string chiave, string vecchio_valore, string nuovo_valore) {
                geo_aggiornamentoRow rowgeo_aggiornamentoRow = ((geo_aggiornamentoRow)(this.NewRow()));
                rowgeo_aggiornamentoRow.ItemArray = new object[] {
                        id_aggiornamento,
                        data,
                        tabella_originale,
                        tabella_geo,
                        tipo,
                        comune_importato,
                        geo_comune,
                        chiave,
                        vecchio_valore,
                        nuovo_valore};
                this.Rows.Add(rowgeo_aggiornamentoRow);
                return rowgeo_aggiornamentoRow;
            }
            
            public geo_aggiornamentoRow FindByid_aggiornamento(int id_aggiornamento) {
                return ((geo_aggiornamentoRow)(this.Rows.Find(new object[] {
                            id_aggiornamento})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                geo_aggiornamentoDataTable cln = ((geo_aggiornamentoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new geo_aggiornamentoDataTable();
            }
            
            internal void InitVars() {
                this.columnid_aggiornamento = this.Columns["id_aggiornamento"];
                this.columndata = this.Columns["data"];
                this.columntabella_originale = this.Columns["tabella_originale"];
                this.columntabella_geo = this.Columns["tabella_geo"];
                this.columntipo = this.Columns["tipo"];
                this.columncomune_importato = this.Columns["comune_importato"];
                this.columngeo_comune = this.Columns["geo_comune"];
                this.columnchiave = this.Columns["chiave"];
                this.columnvecchio_valore = this.Columns["vecchio_valore"];
                this.columnnuovo_valore = this.Columns["nuovo_valore"];
            }
            
            private void InitClass() {
                this.columnid_aggiornamento = new DataColumn("id_aggiornamento", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnid_aggiornamento);
                this.columndata = new DataColumn("data", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndata);
                this.columntabella_originale = new DataColumn("tabella_originale", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntabella_originale);
                this.columntabella_geo = new DataColumn("tabella_geo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntabella_geo);
                this.columntipo = new DataColumn("tipo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntipo);
                this.columncomune_importato = new DataColumn("comune_importato", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncomune_importato);
                this.columngeo_comune = new DataColumn("geo_comune", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columngeo_comune);
                this.columnchiave = new DataColumn("chiave", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnchiave);
                this.columnvecchio_valore = new DataColumn("vecchio_valore", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvecchio_valore);
                this.columnnuovo_valore = new DataColumn("nuovo_valore", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnuovo_valore);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey6", new DataColumn[] {
                                this.columnid_aggiornamento}, true));
                this.columnid_aggiornamento.AllowDBNull = false;
                this.columnid_aggiornamento.Unique = true;
            }
            
            public geo_aggiornamentoRow Newgeo_aggiornamentoRow() {
                return ((geo_aggiornamentoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new geo_aggiornamentoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(geo_aggiornamentoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.geo_aggiornamentoRowChanged != null)) {
                    this.geo_aggiornamentoRowChanged(this, new geo_aggiornamentoRowChangeEvent(((geo_aggiornamentoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.geo_aggiornamentoRowChanging != null)) {
                    this.geo_aggiornamentoRowChanging(this, new geo_aggiornamentoRowChangeEvent(((geo_aggiornamentoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.geo_aggiornamentoRowDeleted != null)) {
                    this.geo_aggiornamentoRowDeleted(this, new geo_aggiornamentoRowChangeEvent(((geo_aggiornamentoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.geo_aggiornamentoRowDeleting != null)) {
                    this.geo_aggiornamentoRowDeleting(this, new geo_aggiornamentoRowChangeEvent(((geo_aggiornamentoRow)(e.Row)), e.Action));
                }
            }
            
            public void Removegeo_aggiornamentoRow(geo_aggiornamentoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class geo_aggiornamentoRow : DataRow {
            
            private geo_aggiornamentoDataTable tablegeo_aggiornamento;
            
            internal geo_aggiornamentoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablegeo_aggiornamento = ((geo_aggiornamentoDataTable)(this.Table));
            }
            
            public int id_aggiornamento {
                get {
                    return ((int)(this[this.tablegeo_aggiornamento.id_aggiornamentoColumn]));
                }
                set {
                    this[this.tablegeo_aggiornamento.id_aggiornamentoColumn] = value;
                }
            }
            
            public System.DateTime data {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_aggiornamento.dataColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_aggiornamento.dataColumn] = value;
                }
            }
            
            public string tabella_originale {
                get {
                    try {
                        return ((string)(this[this.tablegeo_aggiornamento.tabella_originaleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_aggiornamento.tabella_originaleColumn] = value;
                }
            }
            
            public string tabella_geo {
                get {
                    try {
                        return ((string)(this[this.tablegeo_aggiornamento.tabella_geoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_aggiornamento.tabella_geoColumn] = value;
                }
            }
            
            public string tipo {
                get {
                    try {
                        return ((string)(this[this.tablegeo_aggiornamento.tipoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_aggiornamento.tipoColumn] = value;
                }
            }
            
            public string comune_importato {
                get {
                    try {
                        return ((string)(this[this.tablegeo_aggiornamento.comune_importatoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_aggiornamento.comune_importatoColumn] = value;
                }
            }
            
            public string geo_comune {
                get {
                    try {
                        return ((string)(this[this.tablegeo_aggiornamento.geo_comuneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_aggiornamento.geo_comuneColumn] = value;
                }
            }
            
            public string chiave {
                get {
                    try {
                        return ((string)(this[this.tablegeo_aggiornamento.chiaveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_aggiornamento.chiaveColumn] = value;
                }
            }
            
            public string vecchio_valore {
                get {
                    try {
                        return ((string)(this[this.tablegeo_aggiornamento.vecchio_valoreColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_aggiornamento.vecchio_valoreColumn] = value;
                }
            }
            
            public string nuovo_valore {
                get {
                    try {
                        return ((string)(this[this.tablegeo_aggiornamento.nuovo_valoreColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_aggiornamento.nuovo_valoreColumn] = value;
                }
            }
            
            public bool IsdataNull() {
                return this.IsNull(this.tablegeo_aggiornamento.dataColumn);
            }
            
            public void SetdataNull() {
                this[this.tablegeo_aggiornamento.dataColumn] = System.Convert.DBNull;
            }
            
            public bool Istabella_originaleNull() {
                return this.IsNull(this.tablegeo_aggiornamento.tabella_originaleColumn);
            }
            
            public void Settabella_originaleNull() {
                this[this.tablegeo_aggiornamento.tabella_originaleColumn] = System.Convert.DBNull;
            }
            
            public bool Istabella_geoNull() {
                return this.IsNull(this.tablegeo_aggiornamento.tabella_geoColumn);
            }
            
            public void Settabella_geoNull() {
                this[this.tablegeo_aggiornamento.tabella_geoColumn] = System.Convert.DBNull;
            }
            
            public bool IstipoNull() {
                return this.IsNull(this.tablegeo_aggiornamento.tipoColumn);
            }
            
            public void SettipoNull() {
                this[this.tablegeo_aggiornamento.tipoColumn] = System.Convert.DBNull;
            }
            
            public bool Iscomune_importatoNull() {
                return this.IsNull(this.tablegeo_aggiornamento.comune_importatoColumn);
            }
            
            public void Setcomune_importatoNull() {
                this[this.tablegeo_aggiornamento.comune_importatoColumn] = System.Convert.DBNull;
            }
            
            public bool Isgeo_comuneNull() {
                return this.IsNull(this.tablegeo_aggiornamento.geo_comuneColumn);
            }
            
            public void Setgeo_comuneNull() {
                this[this.tablegeo_aggiornamento.geo_comuneColumn] = System.Convert.DBNull;
            }
            
            public bool IschiaveNull() {
                return this.IsNull(this.tablegeo_aggiornamento.chiaveColumn);
            }
            
            public void SetchiaveNull() {
                this[this.tablegeo_aggiornamento.chiaveColumn] = System.Convert.DBNull;
            }
            
            public bool Isvecchio_valoreNull() {
                return this.IsNull(this.tablegeo_aggiornamento.vecchio_valoreColumn);
            }
            
            public void Setvecchio_valoreNull() {
                this[this.tablegeo_aggiornamento.vecchio_valoreColumn] = System.Convert.DBNull;
            }
            
            public bool Isnuovo_valoreNull() {
                return this.IsNull(this.tablegeo_aggiornamento.nuovo_valoreColumn);
            }
            
            public void Setnuovo_valoreNull() {
                this[this.tablegeo_aggiornamento.nuovo_valoreColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class geo_aggiornamentoRowChangeEvent : EventArgs {
            
            private geo_aggiornamentoRow eventRow;
            
            private DataRowAction eventAction;
            
            public geo_aggiornamentoRowChangeEvent(geo_aggiornamentoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public geo_aggiornamentoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class geo_importazione_datiDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidente;
            
            private DataColumn columnnome_importazione;
            
            private DataColumn columntabella_sorgente;
            
            private DataColumn columncln_valore1;
            
            private DataColumn columncln_valore2;
            
            private DataColumn columncln_denominazione;
            
            private DataColumn columncln_id_provincia;
            
            private DataColumn columncln_sigla_provincia;
            
            private DataColumn columncln_data_inizio;
            
            private DataColumn columncln_data_fine;
            
            private DataColumn columncln_istat;
            
            private DataColumn columncln_fisco;
            
            private DataColumn columncln_catasto;
            
            private DataColumn columncln_cap;
            
            private DataColumn columncorrezione_fofc_pspu;
            
            private DataColumn columncorrezione_datainizio_1960_01_01;
            
            internal geo_importazione_datiDataTable() : 
                    base("geo_importazione_dati") {
                this.InitClass();
            }
            
            internal geo_importazione_datiDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn identeColumn {
                get {
                    return this.columnidente;
                }
            }
            
            internal DataColumn nome_importazioneColumn {
                get {
                    return this.columnnome_importazione;
                }
            }
            
            internal DataColumn tabella_sorgenteColumn {
                get {
                    return this.columntabella_sorgente;
                }
            }
            
            internal DataColumn cln_valore1Column {
                get {
                    return this.columncln_valore1;
                }
            }
            
            internal DataColumn cln_valore2Column {
                get {
                    return this.columncln_valore2;
                }
            }
            
            internal DataColumn cln_denominazioneColumn {
                get {
                    return this.columncln_denominazione;
                }
            }
            
            internal DataColumn cln_id_provinciaColumn {
                get {
                    return this.columncln_id_provincia;
                }
            }
            
            internal DataColumn cln_sigla_provinciaColumn {
                get {
                    return this.columncln_sigla_provincia;
                }
            }
            
            internal DataColumn cln_data_inizioColumn {
                get {
                    return this.columncln_data_inizio;
                }
            }
            
            internal DataColumn cln_data_fineColumn {
                get {
                    return this.columncln_data_fine;
                }
            }
            
            internal DataColumn cln_istatColumn {
                get {
                    return this.columncln_istat;
                }
            }
            
            internal DataColumn cln_fiscoColumn {
                get {
                    return this.columncln_fisco;
                }
            }
            
            internal DataColumn cln_catastoColumn {
                get {
                    return this.columncln_catasto;
                }
            }
            
            internal DataColumn cln_capColumn {
                get {
                    return this.columncln_cap;
                }
            }
            
            internal DataColumn correzione_fofc_pspuColumn {
                get {
                    return this.columncorrezione_fofc_pspu;
                }
            }
            
            internal DataColumn correzione_datainizio_1960_01_01Column {
                get {
                    return this.columncorrezione_datainizio_1960_01_01;
                }
            }
            
            public geo_importazione_datiRow this[int index] {
                get {
                    return ((geo_importazione_datiRow)(this.Rows[index]));
                }
            }
            
            public event geo_importazione_datiRowChangeEventHandler geo_importazione_datiRowChanged;
            
            public event geo_importazione_datiRowChangeEventHandler geo_importazione_datiRowChanging;
            
            public event geo_importazione_datiRowChangeEventHandler geo_importazione_datiRowDeleted;
            
            public event geo_importazione_datiRowChangeEventHandler geo_importazione_datiRowDeleting;
            
            public void Addgeo_importazione_datiRow(geo_importazione_datiRow row) {
                this.Rows.Add(row);
            }
            
            public geo_importazione_datiRow Addgeo_importazione_datiRow(
                        int idente, 
                        string nome_importazione, 
                        string tabella_sorgente, 
                        string cln_valore1, 
                        string cln_valore2, 
                        string cln_denominazione, 
                        string cln_id_provincia, 
                        string cln_sigla_provincia, 
                        string cln_data_inizio, 
                        string cln_data_fine, 
                        string cln_istat, 
                        string cln_fisco, 
                        string cln_catasto, 
                        string cln_cap, 
                        string correzione_fofc_pspu, 
                        string correzione_datainizio_1960_01_01) {
                geo_importazione_datiRow rowgeo_importazione_datiRow = ((geo_importazione_datiRow)(this.NewRow()));
                rowgeo_importazione_datiRow.ItemArray = new object[] {
                        idente,
                        nome_importazione,
                        tabella_sorgente,
                        cln_valore1,
                        cln_valore2,
                        cln_denominazione,
                        cln_id_provincia,
                        cln_sigla_provincia,
                        cln_data_inizio,
                        cln_data_fine,
                        cln_istat,
                        cln_fisco,
                        cln_catasto,
                        cln_cap,
                        correzione_fofc_pspu,
                        correzione_datainizio_1960_01_01};
                this.Rows.Add(rowgeo_importazione_datiRow);
                return rowgeo_importazione_datiRow;
            }
            
            public geo_importazione_datiRow FindByidente(int idente) {
                return ((geo_importazione_datiRow)(this.Rows.Find(new object[] {
                            idente})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                geo_importazione_datiDataTable cln = ((geo_importazione_datiDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new geo_importazione_datiDataTable();
            }
            
            internal void InitVars() {
                this.columnidente = this.Columns["idente"];
                this.columnnome_importazione = this.Columns["nome_importazione"];
                this.columntabella_sorgente = this.Columns["tabella_sorgente"];
                this.columncln_valore1 = this.Columns["cln_valore1"];
                this.columncln_valore2 = this.Columns["cln_valore2"];
                this.columncln_denominazione = this.Columns["cln_denominazione"];
                this.columncln_id_provincia = this.Columns["cln_id_provincia"];
                this.columncln_sigla_provincia = this.Columns["cln_sigla_provincia"];
                this.columncln_data_inizio = this.Columns["cln_data_inizio"];
                this.columncln_data_fine = this.Columns["cln_data_fine"];
                this.columncln_istat = this.Columns["cln_istat"];
                this.columncln_fisco = this.Columns["cln_fisco"];
                this.columncln_catasto = this.Columns["cln_catasto"];
                this.columncln_cap = this.Columns["cln_cap"];
                this.columncorrezione_fofc_pspu = this.Columns["correzione_fofc_pspu"];
                this.columncorrezione_datainizio_1960_01_01 = this.Columns["correzione_datainizio_1960_01_01"];
            }
            
            private void InitClass() {
                this.columnidente = new DataColumn("idente", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidente);
                this.columnnome_importazione = new DataColumn("nome_importazione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnome_importazione);
                this.columntabella_sorgente = new DataColumn("tabella_sorgente", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntabella_sorgente);
                this.columncln_valore1 = new DataColumn("cln_valore1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncln_valore1);
                this.columncln_valore2 = new DataColumn("cln_valore2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncln_valore2);
                this.columncln_denominazione = new DataColumn("cln_denominazione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncln_denominazione);
                this.columncln_id_provincia = new DataColumn("cln_id_provincia", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncln_id_provincia);
                this.columncln_sigla_provincia = new DataColumn("cln_sigla_provincia", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncln_sigla_provincia);
                this.columncln_data_inizio = new DataColumn("cln_data_inizio", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncln_data_inizio);
                this.columncln_data_fine = new DataColumn("cln_data_fine", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncln_data_fine);
                this.columncln_istat = new DataColumn("cln_istat", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncln_istat);
                this.columncln_fisco = new DataColumn("cln_fisco", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncln_fisco);
                this.columncln_catasto = new DataColumn("cln_catasto", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncln_catasto);
                this.columncln_cap = new DataColumn("cln_cap", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncln_cap);
                this.columncorrezione_fofc_pspu = new DataColumn("correzione_fofc_pspu", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncorrezione_fofc_pspu);
                this.columncorrezione_datainizio_1960_01_01 = new DataColumn("correzione_datainizio_1960_01_01", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncorrezione_datainizio_1960_01_01);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey7", new DataColumn[] {
                                this.columnidente}, true));
                this.columnidente.AllowDBNull = false;
                this.columnidente.Unique = true;
            }
            
            public geo_importazione_datiRow Newgeo_importazione_datiRow() {
                return ((geo_importazione_datiRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new geo_importazione_datiRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(geo_importazione_datiRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.geo_importazione_datiRowChanged != null)) {
                    this.geo_importazione_datiRowChanged(this, new geo_importazione_datiRowChangeEvent(((geo_importazione_datiRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.geo_importazione_datiRowChanging != null)) {
                    this.geo_importazione_datiRowChanging(this, new geo_importazione_datiRowChangeEvent(((geo_importazione_datiRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.geo_importazione_datiRowDeleted != null)) {
                    this.geo_importazione_datiRowDeleted(this, new geo_importazione_datiRowChangeEvent(((geo_importazione_datiRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.geo_importazione_datiRowDeleting != null)) {
                    this.geo_importazione_datiRowDeleting(this, new geo_importazione_datiRowChangeEvent(((geo_importazione_datiRow)(e.Row)), e.Action));
                }
            }
            
            public void Removegeo_importazione_datiRow(geo_importazione_datiRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class geo_importazione_datiRow : DataRow {
            
            private geo_importazione_datiDataTable tablegeo_importazione_dati;
            
            internal geo_importazione_datiRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablegeo_importazione_dati = ((geo_importazione_datiDataTable)(this.Table));
            }
            
            public int idente {
                get {
                    return ((int)(this[this.tablegeo_importazione_dati.identeColumn]));
                }
                set {
                    this[this.tablegeo_importazione_dati.identeColumn] = value;
                }
            }
            
            public string nome_importazione {
                get {
                    try {
                        return ((string)(this[this.tablegeo_importazione_dati.nome_importazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_importazione_dati.nome_importazioneColumn] = value;
                }
            }
            
            public string tabella_sorgente {
                get {
                    try {
                        return ((string)(this[this.tablegeo_importazione_dati.tabella_sorgenteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_importazione_dati.tabella_sorgenteColumn] = value;
                }
            }
            
            public string cln_valore1 {
                get {
                    try {
                        return ((string)(this[this.tablegeo_importazione_dati.cln_valore1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_importazione_dati.cln_valore1Column] = value;
                }
            }
            
            public string cln_valore2 {
                get {
                    try {
                        return ((string)(this[this.tablegeo_importazione_dati.cln_valore2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_importazione_dati.cln_valore2Column] = value;
                }
            }
            
            public string cln_denominazione {
                get {
                    try {
                        return ((string)(this[this.tablegeo_importazione_dati.cln_denominazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_importazione_dati.cln_denominazioneColumn] = value;
                }
            }
            
            public string cln_id_provincia {
                get {
                    try {
                        return ((string)(this[this.tablegeo_importazione_dati.cln_id_provinciaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_importazione_dati.cln_id_provinciaColumn] = value;
                }
            }
            
            public string cln_sigla_provincia {
                get {
                    try {
                        return ((string)(this[this.tablegeo_importazione_dati.cln_sigla_provinciaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_importazione_dati.cln_sigla_provinciaColumn] = value;
                }
            }
            
            public string cln_data_inizio {
                get {
                    try {
                        return ((string)(this[this.tablegeo_importazione_dati.cln_data_inizioColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_importazione_dati.cln_data_inizioColumn] = value;
                }
            }
            
            public string cln_data_fine {
                get {
                    try {
                        return ((string)(this[this.tablegeo_importazione_dati.cln_data_fineColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_importazione_dati.cln_data_fineColumn] = value;
                }
            }
            
            public string cln_istat {
                get {
                    try {
                        return ((string)(this[this.tablegeo_importazione_dati.cln_istatColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_importazione_dati.cln_istatColumn] = value;
                }
            }
            
            public string cln_fisco {
                get {
                    try {
                        return ((string)(this[this.tablegeo_importazione_dati.cln_fiscoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_importazione_dati.cln_fiscoColumn] = value;
                }
            }
            
            public string cln_catasto {
                get {
                    try {
                        return ((string)(this[this.tablegeo_importazione_dati.cln_catastoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_importazione_dati.cln_catastoColumn] = value;
                }
            }
            
            public string cln_cap {
                get {
                    try {
                        return ((string)(this[this.tablegeo_importazione_dati.cln_capColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_importazione_dati.cln_capColumn] = value;
                }
            }
            
            public string correzione_fofc_pspu {
                get {
                    try {
                        return ((string)(this[this.tablegeo_importazione_dati.correzione_fofc_pspuColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_importazione_dati.correzione_fofc_pspuColumn] = value;
                }
            }
            
            public string correzione_datainizio_1960_01_01 {
                get {
                    try {
                        return ((string)(this[this.tablegeo_importazione_dati.correzione_datainizio_1960_01_01Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_importazione_dati.correzione_datainizio_1960_01_01Column] = value;
                }
            }
            
            public bool Isnome_importazioneNull() {
                return this.IsNull(this.tablegeo_importazione_dati.nome_importazioneColumn);
            }
            
            public void Setnome_importazioneNull() {
                this[this.tablegeo_importazione_dati.nome_importazioneColumn] = System.Convert.DBNull;
            }
            
            public bool Istabella_sorgenteNull() {
                return this.IsNull(this.tablegeo_importazione_dati.tabella_sorgenteColumn);
            }
            
            public void Settabella_sorgenteNull() {
                this[this.tablegeo_importazione_dati.tabella_sorgenteColumn] = System.Convert.DBNull;
            }
            
            public bool Iscln_valore1Null() {
                return this.IsNull(this.tablegeo_importazione_dati.cln_valore1Column);
            }
            
            public void Setcln_valore1Null() {
                this[this.tablegeo_importazione_dati.cln_valore1Column] = System.Convert.DBNull;
            }
            
            public bool Iscln_valore2Null() {
                return this.IsNull(this.tablegeo_importazione_dati.cln_valore2Column);
            }
            
            public void Setcln_valore2Null() {
                this[this.tablegeo_importazione_dati.cln_valore2Column] = System.Convert.DBNull;
            }
            
            public bool Iscln_denominazioneNull() {
                return this.IsNull(this.tablegeo_importazione_dati.cln_denominazioneColumn);
            }
            
            public void Setcln_denominazioneNull() {
                this[this.tablegeo_importazione_dati.cln_denominazioneColumn] = System.Convert.DBNull;
            }
            
            public bool Iscln_id_provinciaNull() {
                return this.IsNull(this.tablegeo_importazione_dati.cln_id_provinciaColumn);
            }
            
            public void Setcln_id_provinciaNull() {
                this[this.tablegeo_importazione_dati.cln_id_provinciaColumn] = System.Convert.DBNull;
            }
            
            public bool Iscln_sigla_provinciaNull() {
                return this.IsNull(this.tablegeo_importazione_dati.cln_sigla_provinciaColumn);
            }
            
            public void Setcln_sigla_provinciaNull() {
                this[this.tablegeo_importazione_dati.cln_sigla_provinciaColumn] = System.Convert.DBNull;
            }
            
            public bool Iscln_data_inizioNull() {
                return this.IsNull(this.tablegeo_importazione_dati.cln_data_inizioColumn);
            }
            
            public void Setcln_data_inizioNull() {
                this[this.tablegeo_importazione_dati.cln_data_inizioColumn] = System.Convert.DBNull;
            }
            
            public bool Iscln_data_fineNull() {
                return this.IsNull(this.tablegeo_importazione_dati.cln_data_fineColumn);
            }
            
            public void Setcln_data_fineNull() {
                this[this.tablegeo_importazione_dati.cln_data_fineColumn] = System.Convert.DBNull;
            }
            
            public bool Iscln_istatNull() {
                return this.IsNull(this.tablegeo_importazione_dati.cln_istatColumn);
            }
            
            public void Setcln_istatNull() {
                this[this.tablegeo_importazione_dati.cln_istatColumn] = System.Convert.DBNull;
            }
            
            public bool Iscln_fiscoNull() {
                return this.IsNull(this.tablegeo_importazione_dati.cln_fiscoColumn);
            }
            
            public void Setcln_fiscoNull() {
                this[this.tablegeo_importazione_dati.cln_fiscoColumn] = System.Convert.DBNull;
            }
            
            public bool Iscln_catastoNull() {
                return this.IsNull(this.tablegeo_importazione_dati.cln_catastoColumn);
            }
            
            public void Setcln_catastoNull() {
                this[this.tablegeo_importazione_dati.cln_catastoColumn] = System.Convert.DBNull;
            }
            
            public bool Iscln_capNull() {
                return this.IsNull(this.tablegeo_importazione_dati.cln_capColumn);
            }
            
            public void Setcln_capNull() {
                this[this.tablegeo_importazione_dati.cln_capColumn] = System.Convert.DBNull;
            }
            
            public bool Iscorrezione_fofc_pspuNull() {
                return this.IsNull(this.tablegeo_importazione_dati.correzione_fofc_pspuColumn);
            }
            
            public void Setcorrezione_fofc_pspuNull() {
                this[this.tablegeo_importazione_dati.correzione_fofc_pspuColumn] = System.Convert.DBNull;
            }
            
            public bool Iscorrezione_datainizio_1960_01_01Null() {
                return this.IsNull(this.tablegeo_importazione_dati.correzione_datainizio_1960_01_01Column);
            }
            
            public void Setcorrezione_datainizio_1960_01_01Null() {
                this[this.tablegeo_importazione_dati.correzione_datainizio_1960_01_01Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class geo_importazione_datiRowChangeEvent : EventArgs {
            
            private geo_importazione_datiRow eventRow;
            
            private DataRowAction eventAction;
            
            public geo_importazione_datiRowChangeEvent(geo_importazione_datiRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public geo_importazione_datiRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
