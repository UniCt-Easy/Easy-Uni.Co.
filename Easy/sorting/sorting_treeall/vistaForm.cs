/*
    Easy
    Copyright (C) 2020 Universit√† degli Studi di Catania (www.unict.it)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace sorting_treeall{//classmovimentiselect//
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class vistaForm : DataSet {
        
        private livelloclassmovimentiDataTable tablelivelloclassmovimenti;
        
        private classmovimentiDataTable tableclassmovimenti;
        
        private DataRelation relationlivelloclassmovimenticlassmovimenti;
        
        private DataRelation relationclassmovimenticlassmovimenti;
        
        public vistaForm() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected vistaForm(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["livelloclassmovimenti"] != null)) {
                    this.Tables.Add(new livelloclassmovimentiDataTable(ds.Tables["livelloclassmovimenti"]));
                }
                if ((ds.Tables["classmovimenti"] != null)) {
                    this.Tables.Add(new classmovimentiDataTable(ds.Tables["classmovimenti"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public livelloclassmovimentiDataTable livelloclassmovimenti {
            get {
                return this.tablelivelloclassmovimenti;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public classmovimentiDataTable classmovimenti {
            get {
                return this.tableclassmovimenti;
            }
        }
        
        public override DataSet Clone() {
            vistaForm cln = ((vistaForm)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["livelloclassmovimenti"] != null)) {
                this.Tables.Add(new livelloclassmovimentiDataTable(ds.Tables["livelloclassmovimenti"]));
            }
            if ((ds.Tables["classmovimenti"] != null)) {
                this.Tables.Add(new classmovimentiDataTable(ds.Tables["classmovimenti"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablelivelloclassmovimenti = ((livelloclassmovimentiDataTable)(this.Tables["livelloclassmovimenti"]));
            if ((this.tablelivelloclassmovimenti != null)) {
                this.tablelivelloclassmovimenti.InitVars();
            }
            this.tableclassmovimenti = ((classmovimentiDataTable)(this.Tables["classmovimenti"]));
            if ((this.tableclassmovimenti != null)) {
                this.tableclassmovimenti.InitVars();
            }
            this.relationlivelloclassmovimenticlassmovimenti = this.Relations["livelloclassmovimenticlassmovimenti"];
            this.relationclassmovimenticlassmovimenti = this.Relations["classmovimenticlassmovimenti"];
        }
        
        private void InitClass() {
            this.DataSetName = "vistaForm";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/vistaForm.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablelivelloclassmovimenti = new livelloclassmovimentiDataTable();
            this.Tables.Add(this.tablelivelloclassmovimenti);
            this.tableclassmovimenti = new classmovimentiDataTable();
            this.Tables.Add(this.tableclassmovimenti);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("livelloclassmovimenticlassmovimenti", new DataColumn[] {
                        this.tablelivelloclassmovimenti.codicelivelloColumn,
                        this.tablelivelloclassmovimenti.codicetipoclassColumn}, new DataColumn[] {
                        this.tableclassmovimenti.codicelivelloColumn,
                        this.tableclassmovimenti.codicetipoclassColumn});
            this.tableclassmovimenti.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("classmovimenticlassmovimenti", new DataColumn[] {
                        this.tableclassmovimenti.codicetipoclassColumn,
                        this.tableclassmovimenti.idclassColumn}, new DataColumn[] {
                        this.tableclassmovimenti.codicetipoclassColumn,
                        this.tableclassmovimenti.livsupidclassColumn});
            this.tableclassmovimenti.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            this.relationlivelloclassmovimenticlassmovimenti = new DataRelation("livelloclassmovimenticlassmovimenti", new DataColumn[] {
                        this.tablelivelloclassmovimenti.codicelivelloColumn,
                        this.tablelivelloclassmovimenti.codicetipoclassColumn}, new DataColumn[] {
                        this.tableclassmovimenti.codicelivelloColumn,
                        this.tableclassmovimenti.codicetipoclassColumn}, false);
            this.Relations.Add(this.relationlivelloclassmovimenticlassmovimenti);
            this.relationclassmovimenticlassmovimenti = new DataRelation("classmovimenticlassmovimenti", new DataColumn[] {
                        this.tableclassmovimenti.codicetipoclassColumn,
                        this.tableclassmovimenti.idclassColumn}, new DataColumn[] {
                        this.tableclassmovimenti.codicetipoclassColumn,
                        this.tableclassmovimenti.livsupidclassColumn}, false);
            this.Relations.Add(this.relationclassmovimenticlassmovimenti);
        }
        
        private bool ShouldSerializelivelloclassmovimenti() {
            return false;
        }
        
        private bool ShouldSerializeclassmovimenti() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void livelloclassmovimentiRowChangeEventHandler(object sender, livelloclassmovimentiRowChangeEvent e);
        
        public delegate void classmovimentiRowChangeEventHandler(object sender, classmovimentiRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class livelloclassmovimentiDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columncodicelivello;
            
            private DataColumn columncodicetipoclass;
            
            private DataColumn columndescrizione;
            
            private DataColumn columntipocodice;
            
            private DataColumn columnlunghcodice;
            
            private DataColumn columnflagreset;
            
            private DataColumn columnflagoperativo;
            
            private DataColumn columnnoupdate;
            
            private DataColumn columnnodelete;
            
            private DataColumn columncreateuser;
            
            private DataColumn columncreatetimestamp;
            
            private DataColumn columnlastmoduser;
            
            private DataColumn columnlastmodtimestamp;
            
            internal livelloclassmovimentiDataTable() : 
                    base("livelloclassmovimenti") {
                this.InitClass();
            }
            
            internal livelloclassmovimentiDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn codicelivelloColumn {
                get {
                    return this.columncodicelivello;
                }
            }
            
            internal DataColumn codicetipoclassColumn {
                get {
                    return this.columncodicetipoclass;
                }
            }
            
            internal DataColumn descrizioneColumn {
                get {
                    return this.columndescrizione;
                }
            }
            
            internal DataColumn tipocodiceColumn {
                get {
                    return this.columntipocodice;
                }
            }
            
            internal DataColumn lunghcodiceColumn {
                get {
                    return this.columnlunghcodice;
                }
            }
            
            internal DataColumn flagresetColumn {
                get {
                    return this.columnflagreset;
                }
            }
            
            internal DataColumn flagoperativoColumn {
                get {
                    return this.columnflagoperativo;
                }
            }
            
            internal DataColumn noupdateColumn {
                get {
                    return this.columnnoupdate;
                }
            }
            
            internal DataColumn nodeleteColumn {
                get {
                    return this.columnnodelete;
                }
            }
            
            internal DataColumn createuserColumn {
                get {
                    return this.columncreateuser;
                }
            }
            
            internal DataColumn createtimestampColumn {
                get {
                    return this.columncreatetimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            public livelloclassmovimentiRow this[int index] {
                get {
                    return ((livelloclassmovimentiRow)(this.Rows[index]));
                }
            }
            
            public event livelloclassmovimentiRowChangeEventHandler livelloclassmovimentiRowChanged;
            
            public event livelloclassmovimentiRowChangeEventHandler livelloclassmovimentiRowChanging;
            
            public event livelloclassmovimentiRowChangeEventHandler livelloclassmovimentiRowDeleted;
            
            public event livelloclassmovimentiRowChangeEventHandler livelloclassmovimentiRowDeleting;
            
            public void AddlivelloclassmovimentiRow(livelloclassmovimentiRow row) {
                this.Rows.Add(row);
            }
            
            public livelloclassmovimentiRow AddlivelloclassmovimentiRow(string codicelivello, string codicetipoclass, string descrizione, string tipocodice, short lunghcodice, string flagreset, string flagoperativo, short noupdate, short nodelete, string createuser, System.DateTime createtimestamp, string lastmoduser, System.DateTime lastmodtimestamp) {
                livelloclassmovimentiRow rowlivelloclassmovimentiRow = ((livelloclassmovimentiRow)(this.NewRow()));
                rowlivelloclassmovimentiRow.ItemArray = new object[] {
                        codicelivello,
                        codicetipoclass,
                        descrizione,
                        tipocodice,
                        lunghcodice,
                        flagreset,
                        flagoperativo,
                        noupdate,
                        nodelete,
                        createuser,
                        createtimestamp,
                        lastmoduser,
                        lastmodtimestamp};
                this.Rows.Add(rowlivelloclassmovimentiRow);
                return rowlivelloclassmovimentiRow;
            }
            
            public livelloclassmovimentiRow FindBycodicelivellocodicetipoclass(string codicelivello, string codicetipoclass) {
                return ((livelloclassmovimentiRow)(this.Rows.Find(new object[] {
                            codicelivello,
                            codicetipoclass})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                livelloclassmovimentiDataTable cln = ((livelloclassmovimentiDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new livelloclassmovimentiDataTable();
            }
            
            internal void InitVars() {
                this.columncodicelivello = this.Columns["codicelivello"];
                this.columncodicetipoclass = this.Columns["codicetipoclass"];
                this.columndescrizione = this.Columns["descrizione"];
                this.columntipocodice = this.Columns["tipocodice"];
                this.columnlunghcodice = this.Columns["lunghcodice"];
                this.columnflagreset = this.Columns["flagreset"];
                this.columnflagoperativo = this.Columns["flagoperativo"];
                this.columnnoupdate = this.Columns["noupdate"];
                this.columnnodelete = this.Columns["nodelete"];
                this.columncreateuser = this.Columns["createuser"];
                this.columncreatetimestamp = this.Columns["createtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
            }
            
            private void InitClass() {
                this.columncodicelivello = new DataColumn("codicelivello", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncodicelivello);
                this.columncodicetipoclass = new DataColumn("codicetipoclass", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncodicetipoclass);
                this.columndescrizione = new DataColumn("descrizione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescrizione);
                this.columntipocodice = new DataColumn("tipocodice", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntipocodice);
                this.columnlunghcodice = new DataColumn("lunghcodice", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlunghcodice);
                this.columnflagreset = new DataColumn("flagreset", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnflagreset);
                this.columnflagoperativo = new DataColumn("flagoperativo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnflagoperativo);
                this.columnnoupdate = new DataColumn("noupdate", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnoupdate);
                this.columnnodelete = new DataColumn("nodelete", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnodelete);
                this.columncreateuser = new DataColumn("createuser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncreateuser);
                this.columncreatetimestamp = new DataColumn("createtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncreatetimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey1", new DataColumn[] {
                                this.columncodicelivello,
                                this.columncodicetipoclass}, true));
                this.columncodicelivello.AllowDBNull = false;
                this.columncodicetipoclass.AllowDBNull = false;
                this.columndescrizione.AllowDBNull = false;
                this.columntipocodice.AllowDBNull = false;
                this.columnlunghcodice.AllowDBNull = false;
                this.columnflagreset.AllowDBNull = false;
                this.columnflagoperativo.AllowDBNull = false;
                this.columncreateuser.AllowDBNull = false;
                this.columncreatetimestamp.AllowDBNull = false;
                this.columnlastmoduser.AllowDBNull = false;
                this.columnlastmodtimestamp.AllowDBNull = false;
            }
            
            public livelloclassmovimentiRow NewlivelloclassmovimentiRow() {
                return ((livelloclassmovimentiRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new livelloclassmovimentiRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(livelloclassmovimentiRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.livelloclassmovimentiRowChanged != null)) {
                    this.livelloclassmovimentiRowChanged(this, new livelloclassmovimentiRowChangeEvent(((livelloclassmovimentiRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.livelloclassmovimentiRowChanging != null)) {
                    this.livelloclassmovimentiRowChanging(this, new livelloclassmovimentiRowChangeEvent(((livelloclassmovimentiRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.livelloclassmovimentiRowDeleted != null)) {
                    this.livelloclassmovimentiRowDeleted(this, new livelloclassmovimentiRowChangeEvent(((livelloclassmovimentiRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.livelloclassmovimentiRowDeleting != null)) {
                    this.livelloclassmovimentiRowDeleting(this, new livelloclassmovimentiRowChangeEvent(((livelloclassmovimentiRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovelivelloclassmovimentiRow(livelloclassmovimentiRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class livelloclassmovimentiRow : DataRow {
            
            private livelloclassmovimentiDataTable tablelivelloclassmovimenti;
            
            internal livelloclassmovimentiRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablelivelloclassmovimenti = ((livelloclassmovimentiDataTable)(this.Table));
            }
            
            public string codicelivello {
                get {
                    return ((string)(this[this.tablelivelloclassmovimenti.codicelivelloColumn]));
                }
                set {
                    this[this.tablelivelloclassmovimenti.codicelivelloColumn] = value;
                }
            }
            
            public string codicetipoclass {
                get {
                    return ((string)(this[this.tablelivelloclassmovimenti.codicetipoclassColumn]));
                }
                set {
                    this[this.tablelivelloclassmovimenti.codicetipoclassColumn] = value;
                }
            }
            
            public string descrizione {
                get {
                    return ((string)(this[this.tablelivelloclassmovimenti.descrizioneColumn]));
                }
                set {
                    this[this.tablelivelloclassmovimenti.descrizioneColumn] = value;
                }
            }
            
            public string tipocodice {
                get {
                    return ((string)(this[this.tablelivelloclassmovimenti.tipocodiceColumn]));
                }
                set {
                    this[this.tablelivelloclassmovimenti.tipocodiceColumn] = value;
                }
            }
            
            public short lunghcodice {
                get {
                    return ((short)(this[this.tablelivelloclassmovimenti.lunghcodiceColumn]));
                }
                set {
                    this[this.tablelivelloclassmovimenti.lunghcodiceColumn] = value;
                }
            }
            
            public string flagreset {
                get {
                    return ((string)(this[this.tablelivelloclassmovimenti.flagresetColumn]));
                }
                set {
                    this[this.tablelivelloclassmovimenti.flagresetColumn] = value;
                }
            }
            
            public string flagoperativo {
                get {
                    return ((string)(this[this.tablelivelloclassmovimenti.flagoperativoColumn]));
                }
                set {
                    this[this.tablelivelloclassmovimenti.flagoperativoColumn] = value;
                }
            }
            
            public short noupdate {
                get {
                    try {
                        return ((short)(this[this.tablelivelloclassmovimenti.noupdateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perchÈ Ë DBNull.", e);
                    }
                }
                set {
                    this[this.tablelivelloclassmovimenti.noupdateColumn] = value;
                }
            }
            
            public short nodelete {
                get {
                    try {
                        return ((short)(this[this.tablelivelloclassmovimenti.nodeleteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perchÈ Ë DBNull.", e);
                    }
                }
                set {
                    this[this.tablelivelloclassmovimenti.nodeleteColumn] = value;
                }
            }
            
            public string createuser {
                get {
                    return ((string)(this[this.tablelivelloclassmovimenti.createuserColumn]));
                }
                set {
                    this[this.tablelivelloclassmovimenti.createuserColumn] = value;
                }
            }
            
            public System.DateTime createtimestamp {
                get {
                    return ((System.DateTime)(this[this.tablelivelloclassmovimenti.createtimestampColumn]));
                }
                set {
                    this[this.tablelivelloclassmovimenti.createtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    return ((string)(this[this.tablelivelloclassmovimenti.lastmoduserColumn]));
                }
                set {
                    this[this.tablelivelloclassmovimenti.lastmoduserColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    return ((System.DateTime)(this[this.tablelivelloclassmovimenti.lastmodtimestampColumn]));
                }
                set {
                    this[this.tablelivelloclassmovimenti.lastmodtimestampColumn] = value;
                }
            }
            
            public bool IsnoupdateNull() {
                return this.IsNull(this.tablelivelloclassmovimenti.noupdateColumn);
            }
            
            public void SetnoupdateNull() {
                this[this.tablelivelloclassmovimenti.noupdateColumn] = System.Convert.DBNull;
            }
            
            public bool IsnodeleteNull() {
                return this.IsNull(this.tablelivelloclassmovimenti.nodeleteColumn);
            }
            
            public void SetnodeleteNull() {
                this[this.tablelivelloclassmovimenti.nodeleteColumn] = System.Convert.DBNull;
            }
            
            public classmovimentiRow[] GetclassmovimentiRows() {
                return ((classmovimentiRow[])(this.GetChildRows(this.Table.ChildRelations["livelloclassmovimenticlassmovimenti"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class livelloclassmovimentiRowChangeEvent : EventArgs {
            
            private livelloclassmovimentiRow eventRow;
            
            private DataRowAction eventAction;
            
            public livelloclassmovimentiRowChangeEvent(livelloclassmovimentiRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public livelloclassmovimentiRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class classmovimentiDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columncodicetipoclass;
            
            private DataColumn columnidclass;
            
            private DataColumn columncodiceclass;
            
            private DataColumn columnlivsupidclass;
            
            private DataColumn columncodicelivello;
            
            private DataColumn columndescrizione;
            
            private DataColumn columnnotes;
            
            private DataColumn columnolenotes;
            
            private DataColumn columnnoupdate;
            
            private DataColumn columnnodelete;
            
            private DataColumn columncreateuser;
            
            private DataColumn columncreatetimestamp;
            
            private DataColumn columnlastmoduser;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columndefaultN1;
            
            private DataColumn columndefaultN2;
            
            private DataColumn columndefaultN3;
            
            private DataColumn columndefaultN4;
            
            private DataColumn columndefaultN5;
            
            private DataColumn columndefaultS1;
            
            private DataColumn columndefaultS2;
            
            private DataColumn columndefaultS3;
            
            private DataColumn columndefaultS4;
            
            private DataColumn columndefaultS5;
            
            private DataColumn columnflagignoradate;
            
            internal classmovimentiDataTable() : 
                    base("classmovimenti") {
                this.InitClass();
            }
            
            internal classmovimentiDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn codicetipoclassColumn {
                get {
                    return this.columncodicetipoclass;
                }
            }
            
            internal DataColumn idclassColumn {
                get {
                    return this.columnidclass;
                }
            }
            
            internal DataColumn codiceclassColumn {
                get {
                    return this.columncodiceclass;
                }
            }
            
            internal DataColumn livsupidclassColumn {
                get {
                    return this.columnlivsupidclass;
                }
            }
            
            internal DataColumn codicelivelloColumn {
                get {
                    return this.columncodicelivello;
                }
            }
            
            internal DataColumn descrizioneColumn {
                get {
                    return this.columndescrizione;
                }
            }
            
            internal DataColumn notesColumn {
                get {
                    return this.columnnotes;
                }
            }
            
            internal DataColumn olenotesColumn {
                get {
                    return this.columnolenotes;
                }
            }
            
            internal DataColumn noupdateColumn {
                get {
                    return this.columnnoupdate;
                }
            }
            
            internal DataColumn nodeleteColumn {
                get {
                    return this.columnnodelete;
                }
            }
            
            internal DataColumn createuserColumn {
                get {
                    return this.columncreateuser;
                }
            }
            
            internal DataColumn createtimestampColumn {
                get {
                    return this.columncreatetimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn defaultN1Column {
                get {
                    return this.columndefaultN1;
                }
            }
            
            internal DataColumn defaultN2Column {
                get {
                    return this.columndefaultN2;
                }
            }
            
            internal DataColumn defaultN3Column {
                get {
                    return this.columndefaultN3;
                }
            }
            
            internal DataColumn defaultN4Column {
                get {
                    return this.columndefaultN4;
                }
            }
            
            internal DataColumn defaultN5Column {
                get {
                    return this.columndefaultN5;
                }
            }
            
            internal DataColumn defaultS1Column {
                get {
                    return this.columndefaultS1;
                }
            }
            
            internal DataColumn defaultS2Column {
                get {
                    return this.columndefaultS2;
                }
            }
            
            internal DataColumn defaultS3Column {
                get {
                    return this.columndefaultS3;
                }
            }
            
            internal DataColumn defaultS4Column {
                get {
                    return this.columndefaultS4;
                }
            }
            
            internal DataColumn defaultS5Column {
                get {
                    return this.columndefaultS5;
                }
            }
            
            internal DataColumn flagignoradateColumn {
                get {
                    return this.columnflagignoradate;
                }
            }
            
            public classmovimentiRow this[int index] {
                get {
                    return ((classmovimentiRow)(this.Rows[index]));
                }
            }
            
            public event classmovimentiRowChangeEventHandler classmovimentiRowChanged;
            
            public event classmovimentiRowChangeEventHandler classmovimentiRowChanging;
            
            public event classmovimentiRowChangeEventHandler classmovimentiRowDeleted;
            
            public event classmovimentiRowChangeEventHandler classmovimentiRowDeleting;
            
            public void AddclassmovimentiRow(classmovimentiRow row) {
                this.Rows.Add(row);
            }
            
            public classmovimentiRow AddclassmovimentiRow(
                        string codicetipoclass, 
                        string idclass, 
                        string codiceclass, 
                        string livsupidclass, 
                        string codicelivello, 
                        string descrizione, 
                        string notes, 
                        System.Byte[] olenotes, 
                        short noupdate, 
                        short nodelete, 
                        string createuser, 
                        System.DateTime createtimestamp, 
                        string lastmoduser, 
                        System.DateTime lastmodtimestamp, 
                        System.Decimal defaultN1, 
                        System.Decimal defaultN2, 
                        System.Decimal defaultN3, 
                        System.Decimal defaultN4, 
                        System.Decimal defaultN5, 
                        string defaultS1, 
                        string defaultS2, 
                        string defaultS3, 
                        string defaultS4, 
                        string defaultS5, 
                        string flagignoradate) {
                classmovimentiRow rowclassmovimentiRow = ((classmovimentiRow)(this.NewRow()));
                rowclassmovimentiRow.ItemArray = new object[] {
                        codicetipoclass,
                        idclass,
                        codiceclass,
                        livsupidclass,
                        codicelivello,
                        descrizione,
                        notes,
                        olenotes,
                        noupdate,
                        nodelete,
                        createuser,
                        createtimestamp,
                        lastmoduser,
                        lastmodtimestamp,
                        defaultN1,
                        defaultN2,
                        defaultN3,
                        defaultN4,
                        defaultN5,
                        defaultS1,
                        defaultS2,
                        defaultS3,
                        defaultS4,
                        defaultS5,
                        flagignoradate};
                this.Rows.Add(rowclassmovimentiRow);
                return rowclassmovimentiRow;
            }
            
            public classmovimentiRow FindBycodicetipoclassidclass(string codicetipoclass, string idclass) {
                return ((classmovimentiRow)(this.Rows.Find(new object[] {
                            codicetipoclass,
                            idclass})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                classmovimentiDataTable cln = ((classmovimentiDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new classmovimentiDataTable();
            }
            
            internal void InitVars() {
                this.columncodicetipoclass = this.Columns["codicetipoclass"];
                this.columnidclass = this.Columns["idclass"];
                this.columncodiceclass = this.Columns["codiceclass"];
                this.columnlivsupidclass = this.Columns["livsupidclass"];
                this.columncodicelivello = this.Columns["codicelivello"];
                this.columndescrizione = this.Columns["descrizione"];
                this.columnnotes = this.Columns["notes"];
                this.columnolenotes = this.Columns["olenotes"];
                this.columnnoupdate = this.Columns["noupdate"];
                this.columnnodelete = this.Columns["nodelete"];
                this.columncreateuser = this.Columns["createuser"];
                this.columncreatetimestamp = this.Columns["createtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columndefaultN1 = this.Columns["defaultN1"];
                this.columndefaultN2 = this.Columns["defaultN2"];
                this.columndefaultN3 = this.Columns["defaultN3"];
                this.columndefaultN4 = this.Columns["defaultN4"];
                this.columndefaultN5 = this.Columns["defaultN5"];
                this.columndefaultS1 = this.Columns["defaultS1"];
                this.columndefaultS2 = this.Columns["defaultS2"];
                this.columndefaultS3 = this.Columns["defaultS3"];
                this.columndefaultS4 = this.Columns["defaultS4"];
                this.columndefaultS5 = this.Columns["defaultS5"];
                this.columnflagignoradate = this.Columns["flagignoradate"];
            }
            
            private void InitClass() {
                this.columncodicetipoclass = new DataColumn("codicetipoclass", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncodicetipoclass);
                this.columnidclass = new DataColumn("idclass", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidclass);
                this.columncodiceclass = new DataColumn("codiceclass", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncodiceclass);
                this.columnlivsupidclass = new DataColumn("livsupidclass", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlivsupidclass);
                this.columncodicelivello = new DataColumn("codicelivello", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncodicelivello);
                this.columndescrizione = new DataColumn("descrizione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescrizione);
                this.columnnotes = new DataColumn("notes", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnotes);
                this.columnolenotes = new DataColumn("olenotes", typeof(System.Byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnolenotes);
                this.columnnoupdate = new DataColumn("noupdate", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnoupdate);
                this.columnnodelete = new DataColumn("nodelete", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnodelete);
                this.columncreateuser = new DataColumn("createuser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncreateuser);
                this.columncreatetimestamp = new DataColumn("createtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncreatetimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columndefaultN1 = new DataColumn("defaultN1", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndefaultN1);
                this.columndefaultN2 = new DataColumn("defaultN2", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndefaultN2);
                this.columndefaultN3 = new DataColumn("defaultN3", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndefaultN3);
                this.columndefaultN4 = new DataColumn("defaultN4", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndefaultN4);
                this.columndefaultN5 = new DataColumn("defaultN5", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndefaultN5);
                this.columndefaultS1 = new DataColumn("defaultS1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndefaultS1);
                this.columndefaultS2 = new DataColumn("defaultS2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndefaultS2);
                this.columndefaultS3 = new DataColumn("defaultS3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndefaultS3);
                this.columndefaultS4 = new DataColumn("defaultS4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndefaultS4);
                this.columndefaultS5 = new DataColumn("defaultS5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndefaultS5);
                this.columnflagignoradate = new DataColumn("flagignoradate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnflagignoradate);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey2", new DataColumn[] {
                                this.columncodicetipoclass,
                                this.columnidclass}, true));
                this.columncodicetipoclass.AllowDBNull = false;
                this.columnidclass.AllowDBNull = false;
                this.columncodiceclass.AllowDBNull = false;
                this.columncodicelivello.AllowDBNull = false;
                this.columndescrizione.AllowDBNull = false;
                this.columncreateuser.AllowDBNull = false;
                this.columncreatetimestamp.AllowDBNull = false;
                this.columnlastmoduser.AllowDBNull = false;
                this.columnlastmodtimestamp.AllowDBNull = false;
            }
            
            public classmovimentiRow NewclassmovimentiRow() {
                return ((classmovimentiRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new classmovimentiRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(classmovimentiRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.classmovimentiRowChanged != null)) {
                    this.classmovimentiRowChanged(this, new classmovimentiRowChangeEvent(((classmovimentiRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.classmovimentiRowChanging != null)) {
                    this.classmovimentiRowChanging(this, new classmovimentiRowChangeEvent(((classmovimentiRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.classmovimentiRowDeleted != null)) {
                    this.classmovimentiRowDeleted(this, new classmovimentiRowChangeEvent(((classmovimentiRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.classmovimentiRowDeleting != null)) {
                    this.classmovimentiRowDeleting(this, new classmovimentiRowChangeEvent(((classmovimentiRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveclassmovimentiRow(classmovimentiRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class classmovimentiRow : DataRow {
            
            private classmovimentiDataTable tableclassmovimenti;
            
            internal classmovimentiRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableclassmovimenti = ((classmovimentiDataTable)(this.Table));
            }
            
            public string codicetipoclass {
                get {
                    return ((string)(this[this.tableclassmovimenti.codicetipoclassColumn]));
                }
                set {
                    this[this.tableclassmovimenti.codicetipoclassColumn] = value;
                }
            }
            
            public string idclass {
                get {
                    return ((string)(this[this.tableclassmovimenti.idclassColumn]));
                }
                set {
                    this[this.tableclassmovimenti.idclassColumn] = value;
                }
            }
            
            public string codiceclass {
                get {
                    return ((string)(this[this.tableclassmovimenti.codiceclassColumn]));
                }
                set {
                    this[this.tableclassmovimenti.codiceclassColumn] = value;
                }
            }
            
            public string livsupidclass {
                get {
                    try {
                        return ((string)(this[this.tableclassmovimenti.livsupidclassColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perchÈ Ë DBNull.", e);
                    }
                }
                set {
                    this[this.tableclassmovimenti.livsupidclassColumn] = value;
                }
            }
            
            public string codicelivello {
                get {
                    return ((string)(this[this.tableclassmovimenti.codicelivelloColumn]));
                }
                set {
                    this[this.tableclassmovimenti.codicelivelloColumn] = value;
                }
            }
            
            public string descrizione {
                get {
                    return ((string)(this[this.tableclassmovimenti.descrizioneColumn]));
                }
                set {
                    this[this.tableclassmovimenti.descrizioneColumn] = value;
                }
            }
            
            public string notes {
                get {
                    try {
                        return ((string)(this[this.tableclassmovimenti.notesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perchÈ Ë DBNull.", e);
                    }
                }
                set {
                    this[this.tableclassmovimenti.notesColumn] = value;
                }
            }
            
            public System.Byte[] olenotes {
                get {
                    try {
                        return ((System.Byte[])(this[this.tableclassmovimenti.olenotesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perchÈ Ë DBNull.", e);
                    }
                }
                set {
                    this[this.tableclassmovimenti.olenotesColumn] = value;
                }
            }
            
            public short noupdate {
                get {
                    try {
                        return ((short)(this[this.tableclassmovimenti.noupdateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perchÈ Ë DBNull.", e);
                    }
                }
                set {
                    this[this.tableclassmovimenti.noupdateColumn] = value;
                }
            }
            
            public short nodelete {
                get {
                    try {
                        return ((short)(this[this.tableclassmovimenti.nodeleteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perchÈ Ë DBNull.", e);
                    }
                }
                set {
                    this[this.tableclassmovimenti.nodeleteColumn] = value;
                }
            }
            
            public string createuser {
                get {
                    return ((string)(this[this.tableclassmovimenti.createuserColumn]));
                }
                set {
                    this[this.tableclassmovimenti.createuserColumn] = value;
                }
            }
            
            public System.DateTime createtimestamp {
                get {
                    return ((System.DateTime)(this[this.tableclassmovimenti.createtimestampColumn]));
                }
                set {
                    this[this.tableclassmovimenti.createtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    return ((string)(this[this.tableclassmovimenti.lastmoduserColumn]));
                }
                set {
                    this[this.tableclassmovimenti.lastmoduserColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    return ((System.DateTime)(this[this.tableclassmovimenti.lastmodtimestampColumn]));
                }
                set {
                    this[this.tableclassmovimenti.lastmodtimestampColumn] = value;
                }
            }
            
            public System.Decimal defaultN1 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableclassmovimenti.defaultN1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perchÈ Ë DBNull.", e);
                    }
                }
                set {
                    this[this.tableclassmovimenti.defaultN1Column] = value;
                }
            }
            
            public System.Decimal defaultN2 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableclassmovimenti.defaultN2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perchÈ Ë DBNull.", e);
                    }
                }
                set {
                    this[this.tableclassmovimenti.defaultN2Column] = value;
                }
            }
            
            public System.Decimal defaultN3 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableclassmovimenti.defaultN3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perchÈ Ë DBNull.", e);
                    }
                }
                set {
                    this[this.tableclassmovimenti.defaultN3Column] = value;
                }
            }
            
            public System.Decimal defaultN4 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableclassmovimenti.defaultN4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perchÈ Ë DBNull.", e);
                    }
                }
                set {
                    this[this.tableclassmovimenti.defaultN4Column] = value;
                }
            }
            
            public System.Decimal defaultN5 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableclassmovimenti.defaultN5Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perchÈ Ë DBNull.", e);
                    }
                }
                set {
                    this[this.tableclassmovimenti.defaultN5Column] = value;
                }
            }
            
            public string defaultS1 {
                get {
                    try {
                        return ((string)(this[this.tableclassmovimenti.defaultS1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perchÈ Ë DBNull.", e);
                    }
                }
                set {
                    this[this.tableclassmovimenti.defaultS1Column] = value;
                }
            }
            
            public string defaultS2 {
                get {
                    try {
                        return ((string)(this[this.tableclassmovimenti.defaultS2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perchÈ Ë DBNull.", e);
                    }
                }
                set {
                    this[this.tableclassmovimenti.defaultS2Column] = value;
                }
            }
            
            public string defaultS3 {
                get {
                    try {
                        return ((string)(this[this.tableclassmovimenti.defaultS3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perchÈ Ë DBNull.", e);
                    }
                }
                set {
                    this[this.tableclassmovimenti.defaultS3Column] = value;
                }
            }
            
            public string defaultS4 {
                get {
                    try {
                        return ((string)(this[this.tableclassmovimenti.defaultS4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perchÈ Ë DBNull.", e);
                    }
                }
                set {
                    this[this.tableclassmovimenti.defaultS4Column] = value;
                }
            }
            
            public string defaultS5 {
                get {
                    try {
                        return ((string)(this[this.tableclassmovimenti.defaultS5Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perchÈ Ë DBNull.", e);
                    }
                }
                set {
                    this[this.tableclassmovimenti.defaultS5Column] = value;
                }
            }
            
            public string flagignoradate {
                get {
                    try {
                        return ((string)(this[this.tableclassmovimenti.flagignoradateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perchÈ Ë DBNull.", e);
                    }
                }
                set {
                    this[this.tableclassmovimenti.flagignoradateColumn] = value;
                }
            }
            
            public livelloclassmovimentiRow livelloclassmovimentiRowParent {
                get {
                    return ((livelloclassmovimentiRow)(this.GetParentRow(this.Table.ParentRelations["livelloclassmovimenticlassmovimenti"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["livelloclassmovimenticlassmovimenti"]);
                }
            }
            
            public classmovimentiRow classmovimentiRowParent {
                get {
                    return ((classmovimentiRow)(this.GetParentRow(this.Table.ParentRelations["classmovimenticlassmovimenti"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["classmovimenticlassmovimenti"]);
                }
            }
            
            public bool IslivsupidclassNull() {
                return this.IsNull(this.tableclassmovimenti.livsupidclassColumn);
            }
            
            public void SetlivsupidclassNull() {
                this[this.tableclassmovimenti.livsupidclassColumn] = System.Convert.DBNull;
            }
            
            public bool IsnotesNull() {
                return this.IsNull(this.tableclassmovimenti.notesColumn);
            }
            
            public void SetnotesNull() {
                this[this.tableclassmovimenti.notesColumn] = System.Convert.DBNull;
            }
            
            public bool IsolenotesNull() {
                return this.IsNull(this.tableclassmovimenti.olenotesColumn);
            }
            
            public void SetolenotesNull() {
                this[this.tableclassmovimenti.olenotesColumn] = System.Convert.DBNull;
            }
            
            public bool IsnoupdateNull() {
                return this.IsNull(this.tableclassmovimenti.noupdateColumn);
            }
            
            public void SetnoupdateNull() {
                this[this.tableclassmovimenti.noupdateColumn] = System.Convert.DBNull;
            }
            
            public bool IsnodeleteNull() {
                return this.IsNull(this.tableclassmovimenti.nodeleteColumn);
            }
            
            public void SetnodeleteNull() {
                this[this.tableclassmovimenti.nodeleteColumn] = System.Convert.DBNull;
            }
            
            public bool IsdefaultN1Null() {
                return this.IsNull(this.tableclassmovimenti.defaultN1Column);
            }
            
            public void SetdefaultN1Null() {
                this[this.tableclassmovimenti.defaultN1Column] = System.Convert.DBNull;
            }
            
            public bool IsdefaultN2Null() {
                return this.IsNull(this.tableclassmovimenti.defaultN2Column);
            }
            
            public void SetdefaultN2Null() {
                this[this.tableclassmovimenti.defaultN2Column] = System.Convert.DBNull;
            }
            
            public bool IsdefaultN3Null() {
                return this.IsNull(this.tableclassmovimenti.defaultN3Column);
            }
            
            public void SetdefaultN3Null() {
                this[this.tableclassmovimenti.defaultN3Column] = System.Convert.DBNull;
            }
            
            public bool IsdefaultN4Null() {
                return this.IsNull(this.tableclassmovimenti.defaultN4Column);
            }
            
            public void SetdefaultN4Null() {
                this[this.tableclassmovimenti.defaultN4Column] = System.Convert.DBNull;
            }
            
            public bool IsdefaultN5Null() {
                return this.IsNull(this.tableclassmovimenti.defaultN5Column);
            }
            
            public void SetdefaultN5Null() {
                this[this.tableclassmovimenti.defaultN5Column] = System.Convert.DBNull;
            }
            
            public bool IsdefaultS1Null() {
                return this.IsNull(this.tableclassmovimenti.defaultS1Column);
            }
            
            public void SetdefaultS1Null() {
                this[this.tableclassmovimenti.defaultS1Column] = System.Convert.DBNull;
            }
            
            public bool IsdefaultS2Null() {
                return this.IsNull(this.tableclassmovimenti.defaultS2Column);
            }
            
            public void SetdefaultS2Null() {
                this[this.tableclassmovimenti.defaultS2Column] = System.Convert.DBNull;
            }
            
            public bool IsdefaultS3Null() {
                return this.IsNull(this.tableclassmovimenti.defaultS3Column);
            }
            
            public void SetdefaultS3Null() {
                this[this.tableclassmovimenti.defaultS3Column] = System.Convert.DBNull;
            }
            
            public bool IsdefaultS4Null() {
                return this.IsNull(this.tableclassmovimenti.defaultS4Column);
            }
            
            public void SetdefaultS4Null() {
                this[this.tableclassmovimenti.defaultS4Column] = System.Convert.DBNull;
            }
            
            public bool IsdefaultS5Null() {
                return this.IsNull(this.tableclassmovimenti.defaultS5Column);
            }
            
            public void SetdefaultS5Null() {
                this[this.tableclassmovimenti.defaultS5Column] = System.Convert.DBNull;
            }
            
            public bool IsflagignoradateNull() {
                return this.IsNull(this.tableclassmovimenti.flagignoradateColumn);
            }
            
            public void SetflagignoradateNull() {
                this[this.tableclassmovimenti.flagignoradateColumn] = System.Convert.DBNull;
            }
            
            public classmovimentiRow[] GetclassmovimentiRows() {
                return ((classmovimentiRow[])(this.GetChildRows(this.Table.ChildRelations["classmovimenticlassmovimenti"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class classmovimentiRowChangeEvent : EventArgs {
            
            private classmovimentiRow eventRow;
            
            private DataRowAction eventAction;
            
            public classmovimentiRowChangeEvent(classmovimentiRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public classmovimentiRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
