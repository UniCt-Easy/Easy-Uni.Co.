
/*
Easy
Copyright (C) 2022 Università degli Studi di Catania (www.unict.it)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace delete_alertaddress_default{//alertaddress//
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class vistaForm : DataSet {
        
        private alertaddressDataTable tablealertaddress;
        
        private configurazionepostaDataTable tableconfigurazioneposta;
        
        public vistaForm() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected vistaForm(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["alertaddress"] != null)) {
                    this.Tables.Add(new alertaddressDataTable(ds.Tables["alertaddress"]));
                }
                if ((ds.Tables["configurazioneposta"] != null)) {
                    this.Tables.Add(new configurazionepostaDataTable(ds.Tables["configurazioneposta"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public alertaddressDataTable alertaddress {
            get {
                return this.tablealertaddress;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public configurazionepostaDataTable configurazioneposta {
            get {
                return this.tableconfigurazioneposta;
            }
        }
        
        public override DataSet Clone() {
            vistaForm cln = ((vistaForm)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["alertaddress"] != null)) {
                this.Tables.Add(new alertaddressDataTable(ds.Tables["alertaddress"]));
            }
            if ((ds.Tables["configurazioneposta"] != null)) {
                this.Tables.Add(new configurazionepostaDataTable(ds.Tables["configurazioneposta"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablealertaddress = ((alertaddressDataTable)(this.Tables["alertaddress"]));
            if ((this.tablealertaddress != null)) {
                this.tablealertaddress.InitVars();
            }
            this.tableconfigurazioneposta = ((configurazionepostaDataTable)(this.Tables["configurazioneposta"]));
            if ((this.tableconfigurazioneposta != null)) {
                this.tableconfigurazioneposta.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "vistaForm";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/vistaForm.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablealertaddress = new alertaddressDataTable();
            this.Tables.Add(this.tablealertaddress);
            this.tableconfigurazioneposta = new configurazionepostaDataTable();
            this.Tables.Add(this.tableconfigurazioneposta);
        }
        
        private bool ShouldSerializealertaddress() {
            return false;
        }
        
        private bool ShouldSerializeconfigurazioneposta() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void alertaddressRowChangeEventHandler(object sender, alertaddressRowChangeEvent e);
        
        public delegate void configurazionepostaRowChangeEventHandler(object sender, configurazionepostaRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class alertaddressDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columnmapiaddress;
            
            internal alertaddressDataTable() : 
                    base("alertaddress") {
                this.InitClass();
            }
            
            internal alertaddressDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn mapiaddressColumn {
                get {
                    return this.columnmapiaddress;
                }
            }
            
            public alertaddressRow this[int index] {
                get {
                    return ((alertaddressRow)(this.Rows[index]));
                }
            }
            
            public event alertaddressRowChangeEventHandler alertaddressRowChanged;
            
            public event alertaddressRowChangeEventHandler alertaddressRowChanging;
            
            public event alertaddressRowChangeEventHandler alertaddressRowDeleted;
            
            public event alertaddressRowChangeEventHandler alertaddressRowDeleting;
            
            public void AddalertaddressRow(alertaddressRow row) {
                this.Rows.Add(row);
            }
            
            public alertaddressRow AddalertaddressRow(string name, string mapiaddress) {
                alertaddressRow rowalertaddressRow = ((alertaddressRow)(this.NewRow()));
                rowalertaddressRow.ItemArray = new object[] {
                        name,
                        mapiaddress};
                this.Rows.Add(rowalertaddressRow);
                return rowalertaddressRow;
            }
            
            public alertaddressRow FindByname(string name) {
                return ((alertaddressRow)(this.Rows.Find(new object[] {
                            name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                alertaddressDataTable cln = ((alertaddressDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new alertaddressDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columnmapiaddress = this.Columns["mapiaddress"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.columnmapiaddress = new DataColumn("mapiaddress", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmapiaddress);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey1", new DataColumn[] {
                                this.columnname}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Unique = true;
                this.columnmapiaddress.AllowDBNull = false;
            }
            
            public alertaddressRow NewalertaddressRow() {
                return ((alertaddressRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new alertaddressRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(alertaddressRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.alertaddressRowChanged != null)) {
                    this.alertaddressRowChanged(this, new alertaddressRowChangeEvent(((alertaddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.alertaddressRowChanging != null)) {
                    this.alertaddressRowChanging(this, new alertaddressRowChangeEvent(((alertaddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.alertaddressRowDeleted != null)) {
                    this.alertaddressRowDeleted(this, new alertaddressRowChangeEvent(((alertaddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.alertaddressRowDeleting != null)) {
                    this.alertaddressRowDeleting(this, new alertaddressRowChangeEvent(((alertaddressRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovealertaddressRow(alertaddressRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class alertaddressRow : DataRow {
            
            private alertaddressDataTable tablealertaddress;
            
            internal alertaddressRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablealertaddress = ((alertaddressDataTable)(this.Table));
            }
            
            public string name {
                get {
                    return ((string)(this[this.tablealertaddress.nameColumn]));
                }
                set {
                    this[this.tablealertaddress.nameColumn] = value;
                }
            }
            
            public string mapiaddress {
                get {
                    return ((string)(this[this.tablealertaddress.mapiaddressColumn]));
                }
                set {
                    this[this.tablealertaddress.mapiaddressColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class alertaddressRowChangeEvent : EventArgs {
            
            private alertaddressRow eventRow;
            
            private DataRowAction eventAction;
            
            public alertaddressRowChangeEvent(alertaddressRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public alertaddressRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class configurazionepostaDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidconfigurazioneposta;
            
            private DataColumn columnsmtp;
            
            private DataColumn columndenominazione;
            
            private DataColumn columnemail;
            
            private DataColumn columncreateuser;
            
            private DataColumn columncreatetimestamp;
            
            private DataColumn columnlastmoduser;
            
            private DataColumn columnlastmodtimestamp;
            
            internal configurazionepostaDataTable() : 
                    base("configurazioneposta") {
                this.InitClass();
            }
            
            internal configurazionepostaDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idconfigurazionepostaColumn {
                get {
                    return this.columnidconfigurazioneposta;
                }
            }
            
            internal DataColumn smtpColumn {
                get {
                    return this.columnsmtp;
                }
            }
            
            internal DataColumn denominazioneColumn {
                get {
                    return this.columndenominazione;
                }
            }
            
            internal DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            internal DataColumn createuserColumn {
                get {
                    return this.columncreateuser;
                }
            }
            
            internal DataColumn createtimestampColumn {
                get {
                    return this.columncreatetimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            public configurazionepostaRow this[int index] {
                get {
                    return ((configurazionepostaRow)(this.Rows[index]));
                }
            }
            
            public event configurazionepostaRowChangeEventHandler configurazionepostaRowChanged;
            
            public event configurazionepostaRowChangeEventHandler configurazionepostaRowChanging;
            
            public event configurazionepostaRowChangeEventHandler configurazionepostaRowDeleted;
            
            public event configurazionepostaRowChangeEventHandler configurazionepostaRowDeleting;
            
            public void AddconfigurazionepostaRow(configurazionepostaRow row) {
                this.Rows.Add(row);
            }
            
            public configurazionepostaRow AddconfigurazionepostaRow(int idconfigurazioneposta, string smtp, string denominazione, string email, string createuser, System.DateTime createtimestamp, string lastmoduser, System.DateTime lastmodtimestamp) {
                configurazionepostaRow rowconfigurazionepostaRow = ((configurazionepostaRow)(this.NewRow()));
                rowconfigurazionepostaRow.ItemArray = new object[] {
                        idconfigurazioneposta,
                        smtp,
                        denominazione,
                        email,
                        createuser,
                        createtimestamp,
                        lastmoduser,
                        lastmodtimestamp};
                this.Rows.Add(rowconfigurazionepostaRow);
                return rowconfigurazionepostaRow;
            }
            
            public configurazionepostaRow FindByidconfigurazioneposta(int idconfigurazioneposta) {
                return ((configurazionepostaRow)(this.Rows.Find(new object[] {
                            idconfigurazioneposta})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                configurazionepostaDataTable cln = ((configurazionepostaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new configurazionepostaDataTable();
            }
            
            internal void InitVars() {
                this.columnidconfigurazioneposta = this.Columns["idconfigurazioneposta"];
                this.columnsmtp = this.Columns["smtp"];
                this.columndenominazione = this.Columns["denominazione"];
                this.columnemail = this.Columns["email"];
                this.columncreateuser = this.Columns["createuser"];
                this.columncreatetimestamp = this.Columns["createtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
            }
            
            private void InitClass() {
                this.columnidconfigurazioneposta = new DataColumn("idconfigurazioneposta", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidconfigurazioneposta);
                this.columnsmtp = new DataColumn("smtp", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsmtp);
                this.columndenominazione = new DataColumn("denominazione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndenominazione);
                this.columnemail = new DataColumn("email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnemail);
                this.columncreateuser = new DataColumn("createuser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncreateuser);
                this.columncreatetimestamp = new DataColumn("createtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncreatetimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey2", new DataColumn[] {
                                this.columnidconfigurazioneposta}, true));
                this.columnidconfigurazioneposta.AllowDBNull = false;
                this.columnidconfigurazioneposta.Unique = true;
                this.columnsmtp.AllowDBNull = false;
                this.columnemail.AllowDBNull = false;
            }
            
            public configurazionepostaRow NewconfigurazionepostaRow() {
                return ((configurazionepostaRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new configurazionepostaRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(configurazionepostaRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.configurazionepostaRowChanged != null)) {
                    this.configurazionepostaRowChanged(this, new configurazionepostaRowChangeEvent(((configurazionepostaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.configurazionepostaRowChanging != null)) {
                    this.configurazionepostaRowChanging(this, new configurazionepostaRowChangeEvent(((configurazionepostaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.configurazionepostaRowDeleted != null)) {
                    this.configurazionepostaRowDeleted(this, new configurazionepostaRowChangeEvent(((configurazionepostaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.configurazionepostaRowDeleting != null)) {
                    this.configurazionepostaRowDeleting(this, new configurazionepostaRowChangeEvent(((configurazionepostaRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveconfigurazionepostaRow(configurazionepostaRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class configurazionepostaRow : DataRow {
            
            private configurazionepostaDataTable tableconfigurazioneposta;
            
            internal configurazionepostaRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableconfigurazioneposta = ((configurazionepostaDataTable)(this.Table));
            }
            
            public int idconfigurazioneposta {
                get {
                    return ((int)(this[this.tableconfigurazioneposta.idconfigurazionepostaColumn]));
                }
                set {
                    this[this.tableconfigurazioneposta.idconfigurazionepostaColumn] = value;
                }
            }
            
            public string smtp {
                get {
                    return ((string)(this[this.tableconfigurazioneposta.smtpColumn]));
                }
                set {
                    this[this.tableconfigurazioneposta.smtpColumn] = value;
                }
            }
            
            public string denominazione {
                get {
                    try {
                        return ((string)(this[this.tableconfigurazioneposta.denominazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfigurazioneposta.denominazioneColumn] = value;
                }
            }
            
            public string email {
                get {
                    return ((string)(this[this.tableconfigurazioneposta.emailColumn]));
                }
                set {
                    this[this.tableconfigurazioneposta.emailColumn] = value;
                }
            }
            
            public string createuser {
                get {
                    try {
                        return ((string)(this[this.tableconfigurazioneposta.createuserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfigurazioneposta.createuserColumn] = value;
                }
            }
            
            public System.DateTime createtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableconfigurazioneposta.createtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfigurazioneposta.createtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tableconfigurazioneposta.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfigurazioneposta.lastmoduserColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableconfigurazioneposta.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableconfigurazioneposta.lastmodtimestampColumn] = value;
                }
            }
            
            public bool IsdenominazioneNull() {
                return this.IsNull(this.tableconfigurazioneposta.denominazioneColumn);
            }
            
            public void SetdenominazioneNull() {
                this[this.tableconfigurazioneposta.denominazioneColumn] = System.Convert.DBNull;
            }
            
            public bool IscreateuserNull() {
                return this.IsNull(this.tableconfigurazioneposta.createuserColumn);
            }
            
            public void SetcreateuserNull() {
                this[this.tableconfigurazioneposta.createuserColumn] = System.Convert.DBNull;
            }
            
            public bool IscreatetimestampNull() {
                return this.IsNull(this.tableconfigurazioneposta.createtimestampColumn);
            }
            
            public void SetcreatetimestampNull() {
                this[this.tableconfigurazioneposta.createtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tableconfigurazioneposta.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tableconfigurazioneposta.lastmoduserColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tableconfigurazioneposta.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tableconfigurazioneposta.lastmodtimestampColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class configurazionepostaRowChangeEvent : EventArgs {
            
            private configurazionepostaRow eventRow;
            
            private DataRowAction eventAction;
            
            public configurazionepostaRowChangeEvent(configurazionepostaRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public configurazionepostaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
