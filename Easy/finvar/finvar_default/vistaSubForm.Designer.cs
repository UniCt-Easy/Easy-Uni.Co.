/*
    Easy
    Copyright (C) 2019 Università degli Studi di Catania (www.unict.it)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace finvar_default {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("vistaSubForm")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class vistaSubForm : global::System.Data.DataSet {
        
        private upb2DataTable tableupb2;
        
        private upb1DataTable tableupb1;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public vistaSubForm() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected vistaSubForm(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["upb2"] != null)) {
                    base.Tables.Add(new upb2DataTable(ds.Tables["upb2"]));
                }
                if ((ds.Tables["upb1"] != null)) {
                    base.Tables.Add(new upb1DataTable(ds.Tables["upb1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public upb2DataTable upb2 {
            get {
                return this.tableupb2;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public upb1DataTable upb1 {
            get {
                return this.tableupb1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            vistaSubForm cln = ((vistaSubForm)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["upb2"] != null)) {
                    base.Tables.Add(new upb2DataTable(ds.Tables["upb2"]));
                }
                if ((ds.Tables["upb1"] != null)) {
                    base.Tables.Add(new upb1DataTable(ds.Tables["upb1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableupb2 = ((upb2DataTable)(base.Tables["upb2"]));
            if ((initTable == true)) {
                if ((this.tableupb2 != null)) {
                    this.tableupb2.InitVars();
                }
            }
            this.tableupb1 = ((upb1DataTable)(base.Tables["upb1"]));
            if ((initTable == true)) {
                if ((this.tableupb1 != null)) {
                    this.tableupb1.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "vistaSubForm";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/vistaSubForm.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableupb2 = new upb2DataTable();
            base.Tables.Add(this.tableupb2);
            this.tableupb1 = new upb1DataTable();
            base.Tables.Add(this.tableupb1);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeupb2() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeupb1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            vistaSubForm ds = new vistaSubForm();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void upb2RowChangeEventHandler(object sender, upb2RowChangeEvent e);
        
        public delegate void upb1RowChangeEventHandler(object sender, upb1RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class upb2DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnidupb;
            
            private global::System.Data.DataColumn columnactive;
            
            private global::System.Data.DataColumn columnassured;
            
            private global::System.Data.DataColumn columncodeupb;
            
            private global::System.Data.DataColumn columnct;
            
            private global::System.Data.DataColumn columncu;
            
            private global::System.Data.DataColumn columnexpiration;
            
            private global::System.Data.DataColumn columngranted;
            
            private global::System.Data.DataColumn columnlt;
            
            private global::System.Data.DataColumn columnlu;
            
            private global::System.Data.DataColumn columnparidupb;
            
            private global::System.Data.DataColumn columnpreviousappropriation;
            
            private global::System.Data.DataColumn columnpreviousassessment;
            
            private global::System.Data.DataColumn columnprintingorder;
            
            private global::System.Data.DataColumn columnrequested;
            
            private global::System.Data.DataColumn columnrtf;
            
            private global::System.Data.DataColumn columntitle;
            
            private global::System.Data.DataColumn columntxt;
            
            private global::System.Data.DataColumn columnidman;
            
            private global::System.Data.DataColumn columnidunderwriter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public upb2DataTable() {
                this.TableName = "upb2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal upb2DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected upb2DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idupbColumn {
                get {
                    return this.columnidupb;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn activeColumn {
                get {
                    return this.columnactive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assuredColumn {
                get {
                    return this.columnassured;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn codeupbColumn {
                get {
                    return this.columncodeupb;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ctColumn {
                get {
                    return this.columnct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cuColumn {
                get {
                    return this.columncu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn expirationColumn {
                get {
                    return this.columnexpiration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn grantedColumn {
                get {
                    return this.columngranted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ltColumn {
                get {
                    return this.columnlt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn luColumn {
                get {
                    return this.columnlu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn paridupbColumn {
                get {
                    return this.columnparidupb;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn previousappropriationColumn {
                get {
                    return this.columnpreviousappropriation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn previousassessmentColumn {
                get {
                    return this.columnpreviousassessment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn printingorderColumn {
                get {
                    return this.columnprintingorder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn requestedColumn {
                get {
                    return this.columnrequested;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rtfColumn {
                get {
                    return this.columnrtf;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn titleColumn {
                get {
                    return this.columntitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn txtColumn {
                get {
                    return this.columntxt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idmanColumn {
                get {
                    return this.columnidman;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idunderwriterColumn {
                get {
                    return this.columnidunderwriter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public upb2Row this[int index] {
                get {
                    return ((upb2Row)(this.Rows[index]));
                }
            }
            
            public event upb2RowChangeEventHandler upb2RowChanging;
            
            public event upb2RowChangeEventHandler upb2RowChanged;
            
            public event upb2RowChangeEventHandler upb2RowDeleting;
            
            public event upb2RowChangeEventHandler upb2RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addupb2Row(upb2Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public upb2Row Addupb2Row(
                        string idupb, 
                        string active, 
                        string assured, 
                        string codeupb, 
                        System.DateTime ct, 
                        string cu, 
                        System.DateTime expiration, 
                        decimal granted, 
                        System.DateTime lt, 
                        string lu, 
                        string paridupb, 
                        decimal previousappropriation, 
                        decimal previousassessment, 
                        string printingorder, 
                        decimal requested, 
                        byte[] rtf, 
                        string title, 
                        string txt, 
                        int idman, 
                        int idunderwriter) {
                upb2Row rowupb2Row = ((upb2Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        idupb,
                        active,
                        assured,
                        codeupb,
                        ct,
                        cu,
                        expiration,
                        granted,
                        lt,
                        lu,
                        paridupb,
                        previousappropriation,
                        previousassessment,
                        printingorder,
                        requested,
                        rtf,
                        title,
                        txt,
                        idman,
                        idunderwriter};
                rowupb2Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowupb2Row);
                return rowupb2Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public upb2Row FindByidupb(string idupb) {
                return ((upb2Row)(this.Rows.Find(new object[] {
                            idupb})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                upb2DataTable cln = ((upb2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new upb2DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidupb = base.Columns["idupb"];
                this.columnactive = base.Columns["active"];
                this.columnassured = base.Columns["assured"];
                this.columncodeupb = base.Columns["codeupb"];
                this.columnct = base.Columns["ct"];
                this.columncu = base.Columns["cu"];
                this.columnexpiration = base.Columns["expiration"];
                this.columngranted = base.Columns["granted"];
                this.columnlt = base.Columns["lt"];
                this.columnlu = base.Columns["lu"];
                this.columnparidupb = base.Columns["paridupb"];
                this.columnpreviousappropriation = base.Columns["previousappropriation"];
                this.columnpreviousassessment = base.Columns["previousassessment"];
                this.columnprintingorder = base.Columns["printingorder"];
                this.columnrequested = base.Columns["requested"];
                this.columnrtf = base.Columns["rtf"];
                this.columntitle = base.Columns["title"];
                this.columntxt = base.Columns["txt"];
                this.columnidman = base.Columns["idman"];
                this.columnidunderwriter = base.Columns["idunderwriter"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidupb = new global::System.Data.DataColumn("idupb", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidupb);
                this.columnactive = new global::System.Data.DataColumn("active", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnactive);
                this.columnassured = new global::System.Data.DataColumn("assured", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassured);
                this.columncodeupb = new global::System.Data.DataColumn("codeupb", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncodeupb);
                this.columnct = new global::System.Data.DataColumn("ct", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnct);
                this.columncu = new global::System.Data.DataColumn("cu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncu);
                this.columnexpiration = new global::System.Data.DataColumn("expiration", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexpiration);
                this.columngranted = new global::System.Data.DataColumn("granted", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngranted);
                this.columnlt = new global::System.Data.DataColumn("lt", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlt);
                this.columnlu = new global::System.Data.DataColumn("lu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlu);
                this.columnparidupb = new global::System.Data.DataColumn("paridupb", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparidupb);
                this.columnpreviousappropriation = new global::System.Data.DataColumn("previousappropriation", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpreviousappropriation);
                this.columnpreviousassessment = new global::System.Data.DataColumn("previousassessment", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpreviousassessment);
                this.columnprintingorder = new global::System.Data.DataColumn("printingorder", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprintingorder);
                this.columnrequested = new global::System.Data.DataColumn("requested", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrequested);
                this.columnrtf = new global::System.Data.DataColumn("rtf", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrtf);
                this.columntitle = new global::System.Data.DataColumn("title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntitle);
                this.columntxt = new global::System.Data.DataColumn("txt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntxt);
                this.columnidman = new global::System.Data.DataColumn("idman", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidman);
                this.columnidunderwriter = new global::System.Data.DataColumn("idunderwriter", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidunderwriter);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnidupb}, true));
                this.columnidupb.AllowDBNull = false;
                this.columnidupb.Unique = true;
                this.columnidupb.MaxLength = 36;
                this.columnactive.MaxLength = 1;
                this.columnassured.MaxLength = 1;
                this.columncodeupb.AllowDBNull = false;
                this.columncodeupb.MaxLength = 50;
                this.columnct.AllowDBNull = false;
                this.columncu.AllowDBNull = false;
                this.columncu.MaxLength = 64;
                this.columnlt.AllowDBNull = false;
                this.columnlu.AllowDBNull = false;
                this.columnlu.MaxLength = 64;
                this.columnparidupb.MaxLength = 36;
                this.columnprintingorder.AllowDBNull = false;
                this.columnprintingorder.MaxLength = 50;
                this.columntitle.AllowDBNull = false;
                this.columntitle.MaxLength = 150;
                this.columntxt.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public upb2Row Newupb2Row() {
                return ((upb2Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new upb2Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(upb2Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.upb2RowChanged != null)) {
                    this.upb2RowChanged(this, new upb2RowChangeEvent(((upb2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.upb2RowChanging != null)) {
                    this.upb2RowChanging(this, new upb2RowChangeEvent(((upb2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.upb2RowDeleted != null)) {
                    this.upb2RowDeleted(this, new upb2RowChangeEvent(((upb2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.upb2RowDeleting != null)) {
                    this.upb2RowDeleting(this, new upb2RowChangeEvent(((upb2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeupb2Row(upb2Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                vistaSubForm ds = new vistaSubForm();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "upb2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class upb1DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnidupb;
            
            private global::System.Data.DataColumn columnactive;
            
            private global::System.Data.DataColumn columnassured;
            
            private global::System.Data.DataColumn columncodeupb;
            
            private global::System.Data.DataColumn columnct;
            
            private global::System.Data.DataColumn columncu;
            
            private global::System.Data.DataColumn columnexpiration;
            
            private global::System.Data.DataColumn columngranted;
            
            private global::System.Data.DataColumn columnlt;
            
            private global::System.Data.DataColumn columnlu;
            
            private global::System.Data.DataColumn columnparidupb;
            
            private global::System.Data.DataColumn columnpreviousappropriation;
            
            private global::System.Data.DataColumn columnpreviousassessment;
            
            private global::System.Data.DataColumn columnprintingorder;
            
            private global::System.Data.DataColumn columnrequested;
            
            private global::System.Data.DataColumn columnrtf;
            
            private global::System.Data.DataColumn columntitle;
            
            private global::System.Data.DataColumn columntxt;
            
            private global::System.Data.DataColumn columnidman;
            
            private global::System.Data.DataColumn columnidunderwriter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public upb1DataTable() {
                this.TableName = "upb1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal upb1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected upb1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idupbColumn {
                get {
                    return this.columnidupb;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn activeColumn {
                get {
                    return this.columnactive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assuredColumn {
                get {
                    return this.columnassured;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn codeupbColumn {
                get {
                    return this.columncodeupb;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ctColumn {
                get {
                    return this.columnct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cuColumn {
                get {
                    return this.columncu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn expirationColumn {
                get {
                    return this.columnexpiration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn grantedColumn {
                get {
                    return this.columngranted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ltColumn {
                get {
                    return this.columnlt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn luColumn {
                get {
                    return this.columnlu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn paridupbColumn {
                get {
                    return this.columnparidupb;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn previousappropriationColumn {
                get {
                    return this.columnpreviousappropriation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn previousassessmentColumn {
                get {
                    return this.columnpreviousassessment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn printingorderColumn {
                get {
                    return this.columnprintingorder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn requestedColumn {
                get {
                    return this.columnrequested;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rtfColumn {
                get {
                    return this.columnrtf;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn titleColumn {
                get {
                    return this.columntitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn txtColumn {
                get {
                    return this.columntxt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idmanColumn {
                get {
                    return this.columnidman;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idunderwriterColumn {
                get {
                    return this.columnidunderwriter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public upb1Row this[int index] {
                get {
                    return ((upb1Row)(this.Rows[index]));
                }
            }
            
            public event upb1RowChangeEventHandler upb1RowChanging;
            
            public event upb1RowChangeEventHandler upb1RowChanged;
            
            public event upb1RowChangeEventHandler upb1RowDeleting;
            
            public event upb1RowChangeEventHandler upb1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addupb1Row(upb1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public upb1Row Addupb1Row(
                        string idupb, 
                        string active, 
                        string assured, 
                        string codeupb, 
                        System.DateTime ct, 
                        string cu, 
                        System.DateTime expiration, 
                        decimal granted, 
                        System.DateTime lt, 
                        string lu, 
                        string paridupb, 
                        decimal previousappropriation, 
                        decimal previousassessment, 
                        string printingorder, 
                        decimal requested, 
                        byte[] rtf, 
                        string title, 
                        string txt, 
                        int idman, 
                        int idunderwriter) {
                upb1Row rowupb1Row = ((upb1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        idupb,
                        active,
                        assured,
                        codeupb,
                        ct,
                        cu,
                        expiration,
                        granted,
                        lt,
                        lu,
                        paridupb,
                        previousappropriation,
                        previousassessment,
                        printingorder,
                        requested,
                        rtf,
                        title,
                        txt,
                        idman,
                        idunderwriter};
                rowupb1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowupb1Row);
                return rowupb1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public upb1Row FindByidupb(string idupb) {
                return ((upb1Row)(this.Rows.Find(new object[] {
                            idupb})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                upb1DataTable cln = ((upb1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new upb1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidupb = base.Columns["idupb"];
                this.columnactive = base.Columns["active"];
                this.columnassured = base.Columns["assured"];
                this.columncodeupb = base.Columns["codeupb"];
                this.columnct = base.Columns["ct"];
                this.columncu = base.Columns["cu"];
                this.columnexpiration = base.Columns["expiration"];
                this.columngranted = base.Columns["granted"];
                this.columnlt = base.Columns["lt"];
                this.columnlu = base.Columns["lu"];
                this.columnparidupb = base.Columns["paridupb"];
                this.columnpreviousappropriation = base.Columns["previousappropriation"];
                this.columnpreviousassessment = base.Columns["previousassessment"];
                this.columnprintingorder = base.Columns["printingorder"];
                this.columnrequested = base.Columns["requested"];
                this.columnrtf = base.Columns["rtf"];
                this.columntitle = base.Columns["title"];
                this.columntxt = base.Columns["txt"];
                this.columnidman = base.Columns["idman"];
                this.columnidunderwriter = base.Columns["idunderwriter"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidupb = new global::System.Data.DataColumn("idupb", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidupb);
                this.columnactive = new global::System.Data.DataColumn("active", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnactive);
                this.columnassured = new global::System.Data.DataColumn("assured", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassured);
                this.columncodeupb = new global::System.Data.DataColumn("codeupb", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncodeupb);
                this.columnct = new global::System.Data.DataColumn("ct", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnct);
                this.columncu = new global::System.Data.DataColumn("cu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncu);
                this.columnexpiration = new global::System.Data.DataColumn("expiration", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexpiration);
                this.columngranted = new global::System.Data.DataColumn("granted", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngranted);
                this.columnlt = new global::System.Data.DataColumn("lt", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlt);
                this.columnlu = new global::System.Data.DataColumn("lu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlu);
                this.columnparidupb = new global::System.Data.DataColumn("paridupb", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparidupb);
                this.columnpreviousappropriation = new global::System.Data.DataColumn("previousappropriation", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpreviousappropriation);
                this.columnpreviousassessment = new global::System.Data.DataColumn("previousassessment", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpreviousassessment);
                this.columnprintingorder = new global::System.Data.DataColumn("printingorder", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprintingorder);
                this.columnrequested = new global::System.Data.DataColumn("requested", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrequested);
                this.columnrtf = new global::System.Data.DataColumn("rtf", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrtf);
                this.columntitle = new global::System.Data.DataColumn("title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntitle);
                this.columntxt = new global::System.Data.DataColumn("txt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntxt);
                this.columnidman = new global::System.Data.DataColumn("idman", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidman);
                this.columnidunderwriter = new global::System.Data.DataColumn("idunderwriter", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidunderwriter);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnidupb}, true));
                this.columnidupb.AllowDBNull = false;
                this.columnidupb.Unique = true;
                this.columnidupb.MaxLength = 36;
                this.columnactive.MaxLength = 1;
                this.columnassured.MaxLength = 1;
                this.columncodeupb.AllowDBNull = false;
                this.columncodeupb.MaxLength = 50;
                this.columnct.AllowDBNull = false;
                this.columncu.AllowDBNull = false;
                this.columncu.MaxLength = 64;
                this.columnlt.AllowDBNull = false;
                this.columnlu.AllowDBNull = false;
                this.columnlu.MaxLength = 64;
                this.columnparidupb.MaxLength = 36;
                this.columnprintingorder.AllowDBNull = false;
                this.columnprintingorder.MaxLength = 50;
                this.columntitle.AllowDBNull = false;
                this.columntitle.MaxLength = 150;
                this.columntxt.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public upb1Row Newupb1Row() {
                return ((upb1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new upb1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(upb1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.upb1RowChanged != null)) {
                    this.upb1RowChanged(this, new upb1RowChangeEvent(((upb1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.upb1RowChanging != null)) {
                    this.upb1RowChanging(this, new upb1RowChangeEvent(((upb1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.upb1RowDeleted != null)) {
                    this.upb1RowDeleted(this, new upb1RowChangeEvent(((upb1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.upb1RowDeleting != null)) {
                    this.upb1RowDeleting(this, new upb1RowChangeEvent(((upb1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeupb1Row(upb1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                vistaSubForm ds = new vistaSubForm();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "upb1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class upb2Row : global::System.Data.DataRow {
            
            private upb2DataTable tableupb2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal upb2Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableupb2 = ((upb2DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string idupb {
                get {
                    return ((string)(this[this.tableupb2.idupbColumn]));
                }
                set {
                    this[this.tableupb2.idupbColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string active {
                get {
                    try {
                        return ((string)(this[this.tableupb2.activeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'active\' in table \'upb2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb2.activeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string assured {
                get {
                    try {
                        return ((string)(this[this.tableupb2.assuredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'assured\' in table \'upb2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb2.assuredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string codeupb {
                get {
                    return ((string)(this[this.tableupb2.codeupbColumn]));
                }
                set {
                    this[this.tableupb2.codeupbColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ct {
                get {
                    return ((global::System.DateTime)(this[this.tableupb2.ctColumn]));
                }
                set {
                    this[this.tableupb2.ctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cu {
                get {
                    return ((string)(this[this.tableupb2.cuColumn]));
                }
                set {
                    this[this.tableupb2.cuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime expiration {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableupb2.expirationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'expiration\' in table \'upb2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb2.expirationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal granted {
                get {
                    try {
                        return ((decimal)(this[this.tableupb2.grantedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'granted\' in table \'upb2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb2.grantedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime lt {
                get {
                    return ((global::System.DateTime)(this[this.tableupb2.ltColumn]));
                }
                set {
                    this[this.tableupb2.ltColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lu {
                get {
                    return ((string)(this[this.tableupb2.luColumn]));
                }
                set {
                    this[this.tableupb2.luColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string paridupb {
                get {
                    try {
                        return ((string)(this[this.tableupb2.paridupbColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'paridupb\' in table \'upb2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb2.paridupbColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal previousappropriation {
                get {
                    try {
                        return ((decimal)(this[this.tableupb2.previousappropriationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'previousappropriation\' in table \'upb2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb2.previousappropriationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal previousassessment {
                get {
                    try {
                        return ((decimal)(this[this.tableupb2.previousassessmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'previousassessment\' in table \'upb2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb2.previousassessmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string printingorder {
                get {
                    return ((string)(this[this.tableupb2.printingorderColumn]));
                }
                set {
                    this[this.tableupb2.printingorderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal requested {
                get {
                    try {
                        return ((decimal)(this[this.tableupb2.requestedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'requested\' in table \'upb2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb2.requestedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] rtf {
                get {
                    try {
                        return ((byte[])(this[this.tableupb2.rtfColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rtf\' in table \'upb2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb2.rtfColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string title {
                get {
                    return ((string)(this[this.tableupb2.titleColumn]));
                }
                set {
                    this[this.tableupb2.titleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string txt {
                get {
                    try {
                        return ((string)(this[this.tableupb2.txtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'txt\' in table \'upb2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb2.txtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idman {
                get {
                    try {
                        return ((int)(this[this.tableupb2.idmanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'idman\' in table \'upb2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb2.idmanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idunderwriter {
                get {
                    try {
                        return ((int)(this[this.tableupb2.idunderwriterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'idunderwriter\' in table \'upb2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb2.idunderwriterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsactiveNull() {
                return this.IsNull(this.tableupb2.activeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetactiveNull() {
                this[this.tableupb2.activeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsassuredNull() {
                return this.IsNull(this.tableupb2.assuredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetassuredNull() {
                this[this.tableupb2.assuredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexpirationNull() {
                return this.IsNull(this.tableupb2.expirationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexpirationNull() {
                this[this.tableupb2.expirationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgrantedNull() {
                return this.IsNull(this.tableupb2.grantedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgrantedNull() {
                this[this.tableupb2.grantedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsparidupbNull() {
                return this.IsNull(this.tableupb2.paridupbColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetparidupbNull() {
                this[this.tableupb2.paridupbColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspreviousappropriationNull() {
                return this.IsNull(this.tableupb2.previousappropriationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpreviousappropriationNull() {
                this[this.tableupb2.previousappropriationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspreviousassessmentNull() {
                return this.IsNull(this.tableupb2.previousassessmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpreviousassessmentNull() {
                this[this.tableupb2.previousassessmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrequestedNull() {
                return this.IsNull(this.tableupb2.requestedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrequestedNull() {
                this[this.tableupb2.requestedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrtfNull() {
                return this.IsNull(this.tableupb2.rtfColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrtfNull() {
                this[this.tableupb2.rtfColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstxtNull() {
                return this.IsNull(this.tableupb2.txtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettxtNull() {
                this[this.tableupb2.txtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidmanNull() {
                return this.IsNull(this.tableupb2.idmanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidmanNull() {
                this[this.tableupb2.idmanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidunderwriterNull() {
                return this.IsNull(this.tableupb2.idunderwriterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidunderwriterNull() {
                this[this.tableupb2.idunderwriterColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class upb1Row : global::System.Data.DataRow {
            
            private upb1DataTable tableupb1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal upb1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableupb1 = ((upb1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string idupb {
                get {
                    return ((string)(this[this.tableupb1.idupbColumn]));
                }
                set {
                    this[this.tableupb1.idupbColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string active {
                get {
                    try {
                        return ((string)(this[this.tableupb1.activeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'active\' in table \'upb1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb1.activeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string assured {
                get {
                    try {
                        return ((string)(this[this.tableupb1.assuredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'assured\' in table \'upb1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb1.assuredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string codeupb {
                get {
                    return ((string)(this[this.tableupb1.codeupbColumn]));
                }
                set {
                    this[this.tableupb1.codeupbColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ct {
                get {
                    return ((global::System.DateTime)(this[this.tableupb1.ctColumn]));
                }
                set {
                    this[this.tableupb1.ctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cu {
                get {
                    return ((string)(this[this.tableupb1.cuColumn]));
                }
                set {
                    this[this.tableupb1.cuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime expiration {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableupb1.expirationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'expiration\' in table \'upb1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb1.expirationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal granted {
                get {
                    try {
                        return ((decimal)(this[this.tableupb1.grantedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'granted\' in table \'upb1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb1.grantedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime lt {
                get {
                    return ((global::System.DateTime)(this[this.tableupb1.ltColumn]));
                }
                set {
                    this[this.tableupb1.ltColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lu {
                get {
                    return ((string)(this[this.tableupb1.luColumn]));
                }
                set {
                    this[this.tableupb1.luColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string paridupb {
                get {
                    try {
                        return ((string)(this[this.tableupb1.paridupbColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'paridupb\' in table \'upb1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb1.paridupbColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal previousappropriation {
                get {
                    try {
                        return ((decimal)(this[this.tableupb1.previousappropriationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'previousappropriation\' in table \'upb1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb1.previousappropriationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal previousassessment {
                get {
                    try {
                        return ((decimal)(this[this.tableupb1.previousassessmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'previousassessment\' in table \'upb1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb1.previousassessmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string printingorder {
                get {
                    return ((string)(this[this.tableupb1.printingorderColumn]));
                }
                set {
                    this[this.tableupb1.printingorderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal requested {
                get {
                    try {
                        return ((decimal)(this[this.tableupb1.requestedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'requested\' in table \'upb1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb1.requestedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] rtf {
                get {
                    try {
                        return ((byte[])(this[this.tableupb1.rtfColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rtf\' in table \'upb1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb1.rtfColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string title {
                get {
                    return ((string)(this[this.tableupb1.titleColumn]));
                }
                set {
                    this[this.tableupb1.titleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string txt {
                get {
                    try {
                        return ((string)(this[this.tableupb1.txtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'txt\' in table \'upb1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb1.txtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idman {
                get {
                    try {
                        return ((int)(this[this.tableupb1.idmanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'idman\' in table \'upb1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb1.idmanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idunderwriter {
                get {
                    try {
                        return ((int)(this[this.tableupb1.idunderwriterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'idunderwriter\' in table \'upb1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableupb1.idunderwriterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsactiveNull() {
                return this.IsNull(this.tableupb1.activeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetactiveNull() {
                this[this.tableupb1.activeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsassuredNull() {
                return this.IsNull(this.tableupb1.assuredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetassuredNull() {
                this[this.tableupb1.assuredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexpirationNull() {
                return this.IsNull(this.tableupb1.expirationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexpirationNull() {
                this[this.tableupb1.expirationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgrantedNull() {
                return this.IsNull(this.tableupb1.grantedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgrantedNull() {
                this[this.tableupb1.grantedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsparidupbNull() {
                return this.IsNull(this.tableupb1.paridupbColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetparidupbNull() {
                this[this.tableupb1.paridupbColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspreviousappropriationNull() {
                return this.IsNull(this.tableupb1.previousappropriationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpreviousappropriationNull() {
                this[this.tableupb1.previousappropriationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspreviousassessmentNull() {
                return this.IsNull(this.tableupb1.previousassessmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpreviousassessmentNull() {
                this[this.tableupb1.previousassessmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrequestedNull() {
                return this.IsNull(this.tableupb1.requestedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrequestedNull() {
                this[this.tableupb1.requestedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrtfNull() {
                return this.IsNull(this.tableupb1.rtfColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrtfNull() {
                this[this.tableupb1.rtfColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstxtNull() {
                return this.IsNull(this.tableupb1.txtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettxtNull() {
                this[this.tableupb1.txtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidmanNull() {
                return this.IsNull(this.tableupb1.idmanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidmanNull() {
                this[this.tableupb1.idmanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidunderwriterNull() {
                return this.IsNull(this.tableupb1.idunderwriterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidunderwriterNull() {
                this[this.tableupb1.idunderwriterColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class upb2RowChangeEvent : global::System.EventArgs {
            
            private upb2Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public upb2RowChangeEvent(upb2Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public upb2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class upb1RowChangeEvent : global::System.EventArgs {
            
            private upb1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public upb1RowChangeEvent(upb1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public upb1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591