/*
    Easy
    Copyright (C) 2020 Universit√† degli Studi di Catania (www.unict.it)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using System;
using System.Windows.Forms;
using System.Data;
using metaeasylibrary;
using metadatalibrary;
using funzioni_configurazione;


namespace meta_entrydetail {//meta_dettvarbilancio//
	/// <summary>
	/// Summary description for Class1.
	/// </summary>
	public class Meta_entrydetail : Meta_easydata {
		public Meta_entrydetail(DataAccess Conn, MetaDataDispatcher Dispatcher):
			base(Conn, Dispatcher, "entrydetail") {
			EditTypes.Add("default");
			EditTypes.Add("single");
			ListingTypes.Add("default");
			ListingTypes.Add("lista");
			ListingTypes.Add("listaestesa");
		}

		protected override Form GetForm(string FormName){
			if (FormName=="default") {
				DefaultListType="listaestesa";
				Name = "Dettaglio scrittura";
				return MetaData.GetFormByDllName("entrydetail_default");//PinoRana
			}
			if (FormName=="single") {
				Name = "Dettaglio scrittura";
				return MetaData.GetFormByDllName("entrydetail_single");//PinoRana
			}
			return null;
		}			
	
		public override void SetDefaults(DataTable PrimaryTable){
			base.SetDefaults(PrimaryTable);
			SetDefault(PrimaryTable, "yentry", GetSys("esercizio"));
		    SetDefault(PrimaryTable, "autogenerated", "N");
        }
		override public DataRow Get_New_Row(DataRow ParentRow, DataTable T) {	
			RowChange.SetSelector(T,"yentry");
			RowChange.SetSelector(T,"nentry");
			RowChange.MarkAsAutoincrement(T.Columns["ndetail"],null,null,6);
            //RowChange.setMinimumTempValue(T.Columns["ndetail"], 99990000);
            DataRow R = base.Get_New_Row(ParentRow, T);
			return R;

		}

		public override void CalculateFields(System.Data.DataRow R, string listtype) {
            if (listtype == "default") {
	            if (R["amount"] == DBNull.Value) {
		            R["!dare"] = DBNull.Value;
		            R["!avere"] = DBNull.Value;
	            }
	            else {
		            decimal amount = (decimal)R["amount"];
		            if (amount <= 0) {
			            R["!dare"] = -amount;
			            R["!avere"] = DBNull.Value;
		            }
		            else {
			            R["!avere"] = amount;
			            R["!dare"] = DBNull.Value;
		            }
	            }

              
            }
		}
		
		public override void DescribeColumns(DataTable T, string listtype){
			base.DescribeColumns(T, listtype);
			if (listtype=="default") {
				foreach(DataColumn C in T.Columns) 
					DescribeAColumn(T,C.ColumnName,"",-1);
				int pos=1;
				DescribeAColumn(T, "!codiceconto", "Codice conto", "account.codeacc",pos++);
				DescribeAColumn(T, "!dare", "Dare",pos++);
				DescribeAColumn(T, "!avere", "Avere",pos++);
				DescribeAColumn(T, "!conto", "Conto", "account.title",pos++);
				DescribeAColumn(T, "!codeupb", "U.P.B.", "upb.codeupb",pos++);
				DescribeAColumn(T, "!registry", "Cliente/Fornitore", "registry.title",pos++);
                DescribeAColumn(T, "!doc", "Descrizione", "entry.doc", pos++);
                DescribeAColumn(T, "!docdate", "data", "entry.docdate", pos++);
                DescribeAColumn(T, "description", "Descrizione dettaglio", pos++);
				ComputeRowsAs(T, listtype);
			}
            if (listtype == "importflow") {
                foreach (DataColumn C in T.Columns)
                    DescribeAColumn(T, C.ColumnName, "", -1);
                int pos = 1;
                DescribeAColumn(T, "!codice", "Codice conto", pos++);
                DescribeAColumn(T, "!dare", "Dare", pos++);
                DescribeAColumn(T, "!avere", "Avere", pos++);
                DescribeAColumn(T, "!conto", "Conto", "account.title", pos++);
                ComputeRowsAs(T, listtype);
            }
		}   

		public override bool IsValid(DataRow R, out string errmess, out string errfield){            
			if (!base.IsValid(R, out errmess, out errfield)) return false;
			if (R["amount"]==DBNull.Value){
				errmess="Attenzione! L'importo non puÚ essere nullo.";
				errfield="amount";
				return false;
			}
			if (R["idacc"]==DBNull.Value){
				errmess="Attenzione! Il conto non puÚ essere nullo.";
				errfield="idacc";
				return false;
			}
			DataRow rParent = R.GetParentRow("accountentrydetail");
            if(rParent != null) {
                if((rParent["flagregistry"].ToString().ToUpper() == "S") && (CfgFn.GetNoNullDecimal(R["idreg"]) <= 0)) {
                    errmess = "Per il conto scelto Ë obbligatorio specificare il Cliente/Fornitore";
                    errfield = "idreg";
                    return false;
                }
                if((rParent["flagupb"].ToString().ToUpper() == "S") &&
                    ((R["idupb"] == DBNull.Value) || (R["idupb"].ToString().Trim() == ""))) {
                    errmess = "Per il conto scelto Ë obbligatorio specificare l'U.P.B.";
                    errfield = "idupb";
                    return false;
                }
            }

			return true;
		}


		public override DataRow SelectOne(string ListingType, string filter, string searchtable, DataTable Exclude) {
			if (ListingType=="listaestesa")
				return base.SelectOne(ListingType, filter, "entrydetailview", Exclude);
			else
				return base.SelectOne(ListingType, filter, "entrydetail", Exclude);
		}		

	}
}