<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Xceed.Ftp.v5.6</name>
  </assembly>
  <members>
    <member name="T:Xceed.Ftp.AuthenticationMethod">
      <summary>Value representing the authentication method to use when connecting to an FTP server. <b>Note: This enumeration is not available in Xceed FTP for .NET Compact
Framework because this product does not support Secure FTP.</b></summary>
    </member>
    <member name="F:Xceed.Ftp.AuthenticationMethod.None">
      <summary>No SSL protocol is specified.</summary>
    </member>
    <member name="F:Xceed.Ftp.AuthenticationMethod.Ssl">
      <summary>SSL authentication will be used. AUTH SSL is sent and only SSL 3.0 is accepted.</summary>
    </member>
    <member name="F:Xceed.Ftp.AuthenticationMethod.Tls">
      <summary>TLS (SSL 3.1) authentication will be used. AUTH TLS is sent, but both TLS and SSL 3.0 are accepted.</summary>
    </member>
    <member name="T:Xceed.Ftp.CertificateStoreLocation">
      <summary>Value representing a certificate's store location. <b>Note: This enumeration is not available in Xceed FTP for .NET Compact Framework because this product does
not support Secure FTP.</b></summary>
    </member>
    <member name="F:Xceed.Ftp.CertificateStoreLocation.CurrentService">
      <summary>The certificate store for the current service.</summary>
    </member>
    <member name="F:Xceed.Ftp.CertificateStoreLocation.CurrentUser">
      <summary>The certificate store for the currently logged-on user.</summary>
    </member>
    <member name="F:Xceed.Ftp.CertificateStoreLocation.CurrentUserGroupPolicy">
      <summary>The certificate store for the currently logged-on group.</summary>
    </member>
    <member name="F:Xceed.Ftp.CertificateStoreLocation.LocalMachine">
      <summary>The certificate store for the local computer.</summary>
    </member>
    <member name="F:Xceed.Ftp.CertificateStoreLocation.LocalMachineEnterprise">
      <summary>The certificate store for the local machine enterprise downloaded from a network setting.</summary>
    </member>
    <member name="F:Xceed.Ftp.CertificateStoreLocation.LocalMachineGroupPolicy">
      <summary>The certificate store for the local machine group policy downloaded from a network setting.</summary>
    </member>
    <member name="F:Xceed.Ftp.CertificateStoreLocation.Services">
      <summary>The certificate store for a specified service account; for example, an Alerter or the Event Log.</summary>
    </member>
    <member name="F:Xceed.Ftp.CertificateStoreLocation.Unknown">
      <summary>The location is unknown.</summary>
    </member>
    <member name="F:Xceed.Ftp.CertificateStoreLocation.Users">
      <summary>The certificate store for the users group of this computer.</summary>
    </member>
    <member name="T:Xceed.Ftp.DataChannelProtection">
      <summary>Value representing how a data channel is protected.</summary>
    </member>
    <member name="F:Xceed.Ftp.DataChannelProtection.Clear">
      <summary>Do not secure the data channel. Data is sent out in clear text.</summary>
    </member>
    <member name="F:Xceed.Ftp.DataChannelProtection.Private">
      <summary>The data will be encrypted and a checksum will be performed.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpClientState">
      <summary>Value representing the state of the .</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.NotConnected">
      <summary>The FTP client is not connected to an FTP server.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.Connecting">
      <summary>The FTP client is in the process of connecting to the FTP server.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.Connected">
      <summary>The FTP client is connected to the FTP server.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.Authenticating">
      <summary>The FTP client is authenticating with the FTP server.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.LoggingIn">
      <summary>The FTP client is logging in.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.ChangingUser">
      <summary>The FTP client is changing the current user.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.ChangingCurrentFolder">
      <summary>The FTP client is changing the FTP server's current working folder.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.ChangingDataChannelProtection">
      <summary>The FTP client is changing the data channel protection.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.ChangingToParentFolder">
      <summary>The FTP client is changing to the current working folder's parent folder.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.ChangingTransferMode">
      <summary>The FTP client is changing the transfer mode.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.CreatingFolder">
      <summary>The FTP client is creating a new folder in the FTP server's current working folder.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.DeletingFile">
      <summary>The FTP client is deleting a file in the FTP server's current working folder.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.DeletingFolder">
      <summary>The FTP client is deleting a folder in the FTP server's current working folder.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.GettingCurrentFolder">
      <summary>The FTP client is retrieving the FTP server's current working folder.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.GettingFolderContents">
      <summary>The FTP client is retrieving the contents of the FTP server's current working folder.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.GettingExtendedFeatures">
      <summary>The FTP client is retrieving the extended features.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.ReceivingFile">
      <summary>The FTP client is receiving a file from the FTP server's current working folder.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.ReceivingMultipleFiles">
      <summary>The FTP client is receiving multiple files from the FTP server's current working folder.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.RenamingFile">
      <summary>The FTP client is renaming a file in the FTP server's current working folder.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.SendingCustomCommand">
      <summary>The FTP client is sending a custom command to the FTP server.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.SendingFile">
      <summary>The FTP client is sending a file to the FTP server's current working folder.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.SendingMultipleFiles">
      <summary>The FTP client is sending multiple files to FTP server's current working folder.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.Disconnecting">
      <summary>The FTP client is disconnecting from the FTP server.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpClientState.ClearingCommandChannel">
      <summary>The FTP client is clearing the command channel.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpItemType">
      <summary>Value representing the type of the item on the FTP server.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpItemType.Unknown">
      <summary>The type of the item is unknown.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpItemType.File">
      <summary>The item is a file.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpItemType.Folder">
      <summary>The item is a folder.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpItemType.Link">
      <summary>The item is a link. A link is a shortcut to a folder or file, that can be located elsewhere than on the FTP server to which the FTP client is connected.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpReplyType">
      <summary>Value representing the type of reply received from the FTP server in response to a command.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpReplyType.Incomplete">
      <summary>More lines are expected therefore this reply is still incomplete. You should never receive such a reply, as this value is used internally.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpReplyType.PositivePreliminary">
      <summary>The requested action is being initiated and another reply should be expected before proceeding with a new command. Any reply between 100 and 159 inclusively is
a positive preliminary reply.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpReplyType.PositiveCompletion">
      <summary>The requested action has successfully completed and a new request may be initiated. Any reply between 200 and 259 inclusively is a positive completion reply.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpReplyType.PositiveIntermediate">
      <summary>The command was accepted, but the requested action is being held in abeyance, pending receipt of further information. Another command specifying this
information is expected by the FTP server. Any reply between 300 and 359 inclusively is a positive intermediate reply.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpReplyType.TransientNegativeCompletion">
      <summary>The command was not accepted and the requested action did not take place, but the error condition is not permanent and the action may be requested again once
the problem is addressed. Any reply between 400 and 459 inclusively is a transient negative completion reply.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpReplyType.PermanentNegativeCompletion">
      <summary>The command was not accepted and the requested action did not take place. Any reply between 500 and 559 inclusively is a permanent negative completion reply.</summary>
    </member>
    <member name="F:Xceed.Ftp.FtpReplyType.Invalid">
      <summary>The format of the reply received from the FTP server was not recognized.</summary>
    </member>
    <member name="T:Xceed.Ftp.FxpTransferPolicy">
      <summary>Value representing the <a class="PopupLink GlossaryLink" title="Click to show a definition of this term" data-popupclasses="ui-tooltip-green" data-popupshowevent="click mouseenter" data-popuptitle="FXP" data-popupcontent="\u003cp\u003eFXP stands for the File eXchange Protocol. It is a method of transferring data that uses FTP to transfer files from one remote server to another server without routing the file data through the client\u0027s connection. As such, it is a server-to-server protocol.\u003c/p\u003e\r\n\r\n\u003cp\u003eFXP is a feature that is part of the Xceed FTP for .NET component. It is available through both the FtpClientp and the FileSystem interfaces.\u003c/p\u003e">FXP</a> type transfer operations that are allowed by a FTPConnection.</summary>
    </member>
    <member name="F:Xceed.Ftp.FxpTransferPolicy.NoTransferAllowed">
      <summary>No FXP transfers are allowed to be made or accepted.</summary>
    </member>
    <member name="F:Xceed.Ftp.FxpTransferPolicy.AcceptIncomingTransfers">
      <summary>Incoming FXP transfers are allowed. Files can be received.</summary>
    </member>
    <member name="F:Xceed.Ftp.FxpTransferPolicy.AcceptOutgoingTransfers">
      <summary>Outgoing FXP transfers are allowed. Files can be sent.</summary>
    </member>
    <member name="F:Xceed.Ftp.FxpTransferPolicy.AcceptAllTransfers">
      <summary>All types of FXP transfers are allowed.</summary>
    </member>
    <member name="T:Xceed.Ftp.HttpReplyType">
      <summary>Represents the type of reply received from the HTTP proxy server in response to a remote connection request.</summary>
    </member>
    <member name="F:Xceed.Ftp.HttpReplyType.Incomplete">
      <summary>More lines are expected; therefore, this reply is still incomplete. You should never receive such a reply, as this value is used internally.</summary>
    </member>
    <member name="F:Xceed.Ftp.HttpReplyType.Informational">
      <summary>Request received, continuing process.</summary>
    </member>
    <member name="F:Xceed.Ftp.HttpReplyType.Success">
      <summary>The action was successfully received, understood, and accepted.</summary>
    </member>
    <member name="F:Xceed.Ftp.HttpReplyType.Redirection">
      <summary>Further action must be taken in order to complete the request.</summary>
    </member>
    <member name="F:Xceed.Ftp.HttpReplyType.ClientError">
      <summary>The request contains bad syntax or cannot be fulfilled.</summary>
    </member>
    <member name="F:Xceed.Ftp.HttpReplyType.ServerError">
      <summary>The server failed to fulfill an apparently valid request.</summary>
    </member>
    <member name="F:Xceed.Ftp.HttpReplyType.Invalid">
      <summary>The format of the reply received from the HTTP proxy server was not recognized.</summary>
    </member>
    <member name="T:Xceed.Ftp.ListingMethod">
      <summary>Value representing the method by which folder content (file names, size, dates, etc) is retrieved from the FTP server.</summary>
    </member>
    <member name="F:Xceed.Ftp.ListingMethod.Standard">
      <summary>The legacy way of getting folder content using the LIST command.</summary>
    </member>
    <member name="F:Xceed.Ftp.ListingMethod.MachineFormat">
      <summary>An extended FTP feature (MLSD) that uses a machine-readable format to get folder content, resulting in a more accurate listing (RFC 3659).</summary>
    </member>
    <member name="F:Xceed.Ftp.ListingMethod.Automatic">
      <summary>Use MachineFormat if supported by the server. Use standard method otherwise.</summary>
    </member>
    <member name="T:Xceed.Ftp.MultipleFileTransferErrorAction">
      <summary>Value representing the action to take when an error occurs while transferring <b>multiple</b> files.</summary>
    </member>
    <member name="F:Xceed.Ftp.MultipleFileTransferErrorAction.Abort">
      <summary>The entire process should be aborted.</summary>
    </member>
    <member name="F:Xceed.Ftp.MultipleFileTransferErrorAction.Retry">
      <summary>Attempt to retransfer the file.</summary>
    </member>
    <member name="F:Xceed.Ftp.MultipleFileTransferErrorAction.Ignore">
      <summary>Skip the file and continue with the next file to transfer.</summary>
    </member>
    <member name="T:Xceed.Ftp.RepresentationType">
      <summary>Value representing the representation type to use when sending or receiving files.</summary>
    </member>
    <member name="F:Xceed.Ftp.RepresentationType.Ascii">
      <summary>The data will be sent/received using the standard 8-bit NVT-ASCII representation. This representation type is intended primarily for the transfer of text
files.</summary>
    </member>
    <member name="F:Xceed.Ftp.RepresentationType.Binary">
      <summary>The data will be sent/received as contiguous bits which are packed into the 8-bit transfer bytes. This representation type is intended for the efficient
storage and retrieval of files and for the transfer of binary data.</summary>
    </member>
    <member name="T:Xceed.Ftp.TransferMode">
      <summary>Value indicating the data transfer mode.</summary>
    </member>
    <member name="F:Xceed.Ftp.TransferMode.Stream">
      <summary>Data is streamed to and from an FTP server.</summary>
    </member>
    <member name="F:Xceed.Ftp.TransferMode.ZLibCompressed">
      <summary>Data is compressed before sending to an FTP server and decompressed when received from a server. Also known as MODE Z.</summary>
    </member>
    <member name="T:Xceed.Ftp.VerificationAction">
      <summary>Value representing the verification action to take in the  event when a certificate is received from an FTP server.
<b>Note: This enumeration is not available in Xceed FTP for .NET Compact Framework because this product does not support Secure FTP.</b></summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationAction.Accept">
      <summary>Accept the FTP server's certificate.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationAction.Reject">
      <summary>Reject the FTP server's certificate and make the connection or authentication fail.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationAction.VerifyAgain">
      <summary>Verify the certificate again. The Flags property should have been updated to now accept the current reject reason. The
 event will be raised again with the new status.</summary>
    </member>
    <member name="T:Xceed.Ftp.VerificationFlags">
      <summary>Value representing the different verification flags used to verify an FTP server's certificate. <b>Note: This enumeration is not available in Xceed FTP for
.NET Compact Framework because this product does not support Secure FTP.</b></summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationFlags.None">
      <summary>No flags. This is the most severe form of validation: No certificate anomalies will be accepted.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationFlags.IgnoreTimeNotValid">
      <summary>Ignore certificates in the chain that are not valid either because they have expired or they are not yet in effect when determining certificate validity.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationFlags.IgnoreCtlTimeNotValid">
      <summary>Ignore that the certificate trust list (CTL) is not valid, for reasons such as the CTL has expired, when determining certificate verification.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationFlags.IgnoreTimeNotNested">
      <summary>Ignore that the CA (certificate authority) certificate and the issued certificate have validity periods that are not nested when verifying the certificate. For
example, the CA cert can be valid from January 1 to December 1 and the issued certificate from January 2 to December 2, which would mean the validity periods
are not nested.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationFlags.IgnoreInvalidBasicConstraints">
      <summary>Ignore that the basic constraints are not valid when determining certificate verification.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationFlags.AllowUnknownCA">
      <summary>Ignore that the chain cannot be verified due to an unknown certificate authority (CA).</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationFlags.IgnoreWrongUsage">
      <summary>Ignore that the certificate was not issued for the current use when determining certificate verification.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationFlags.IgnoreInvalidName">
      <summary>Ignore that the certificate has an invalid name when determining certificate verification.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationFlags.IgnoreInvalidPolicy">
      <summary>Ignore that the certificate has invalid policy when determining certificate verification.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationFlags.IgnoreEndRevUnknown">
      <summary>Ignore that the end certificate (the user certificate) revocation is unknown when determining certificate verification.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationFlags.IgnoreSignerRevUnknown">
      <summary>Ignore that the certificate trust list (CTL) signer revocation is unknown when determining certificate verification.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationFlags.IgnoreCARevUnknown">
      <summary>Ignore that the certificate authority revocation is unknown when determining certificate verification.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationFlags.IgnoreRootRevUnknown">
      <summary>Ignore that the root revocation is unknown when determining certificate verification.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationFlags.AllFlags">
      <summary>All flags pertaining to verification are included.</summary>
    </member>
    <member name="T:Xceed.Ftp.VerificationStatus">
      <summary>Value representing the different certificate status values. <b>Note: This enumeration is not available in Xceed FTP for .NET Compact Framework because this
product does not support Secure FTP.</b></summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.ValidCertificate">
      <summary>Specifies that the X509 chain has no errors.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.Expired">
      <summary>Specifies that the X509 chain is not valid due to an invalid time value, such as a value that indicates an expired certificate.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.InvalidNesting">
      <summary>Specifies that the CA (certificate authority) certificate and the issued certificate have validity periods that are not nested. For example, the CA cert can be
valid from January 1 to December 1 and the issued certificate from January 2 to December 2, which would mean the validity periods are not nested.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.Revoked">
      <summary>Specifies that the X509 chain is invalid due to a revoked certificate.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.InvalidSignature">
      <summary>Specifies that the X509 chain is invalid due to an invalid certificate signature.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.InvalidPurpose">
      <summary>Specifies that the key usage is not valid.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.UntrustedRoot">
      <summary>Specifies that the X509 chain is invalid due to an untrusted root certificate.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.RevocationFailure">
      <summary>Specifies that it is not possible to determine whether the certificate has been revoked. This can be due to the certificate revocation list (CRL) being offline
or unavailable.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.Cyclic">
      <summary>Specifies that the X509 chain could not be built.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.InvalidExtension">
      <summary>Specifies that the X509 chain is invalid due to an invalid extension.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.InvalidPolicyConstraints">
      <summary>Specifies that the X509 chain is invalid due to invalid policy constraints.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.InvalidBasicConstraints">
      <summary>Specifies that the X509 chain is invalid due to invalid basic constraints.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.NoCNMatch">
      <summary>Specifies that the X509 chain is invalid due to invalid name constraints.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.HasNotSupportedNameConstraint">
      <summary>Specifies that the certificate does not have a supported name constant or has a name constant that is unsupported.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.HasNotDefinedNameConstraint">
      <summary>Specifies that the certificate has an undefined name constant.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.HasNotPermittedNameConstraint">
      <summary>Specifies that the certificate has an impermissible name constraint.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.HasExcludedNameConstraint">
      <summary>Specifies that the X509 chain is invalid because a certificate has excluded a name constraint.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.PartialChain">
      <summary>Specifies that the X509 chain could not be built up to the root certificate.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.InvalidChain">
      <summary>Specifies that there is no certificate policy extension in the certificate. This error would occur if a group policy has specified that all certificates must
have a certificate policy.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.CtlNotTimeValid">
      <summary>Specifies that the certificate trust list (CTL) is not valid because of an invalid time value, such as one that indicates that the CTL has expired.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.CtlNotSignatureValid">
      <summary>Specifies that the certificate trust list (CTL) contains an invalid signature.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.CtlNotValidForUsage">
      <summary>Specifies that the certificate trust list (CTL) contains an invalid signature.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.RevocationServerOffline">
      <summary>Specifies that the online certificate revocation list (CRL) the X509 chain relies on is currently offline.</summary>
    </member>
    <member name="F:Xceed.Ftp.VerificationStatus.NoIssuanceChainPolicy">
      <summary>Specifies that there is no certificate policy extension in the certificate. This error would occur if a group policy has specified that all certificates must
have a certificate policy.</summary>
    </member>
    <member name="T:Xceed.Ftp.AsyncFtpClient">
      <summary>
        <para>AsyncFtpClient's methods now call the corresponding synchronous methods on a background thread. It is therefore recommended to use FtpClient and assign a
SynchronizingObject to its SynchronizingObject property to improve code readability. For this reason, the AsyncFtpClient class is now considered obsolete.</para>
        <para>This class provides you the with same functionalities that you will find in the  class but also gives you access to asynchronous FTP
functionalities.</para>
      </summary>
    </member>
    <member name="T:Xceed.Ftp.Certificate">
      <summary>Class which represents an X.509 certificate. <b>Note: This class is not available in Xceed FTP for .NET Compact Framework because this product does not support
Secure FTP.</b></summary>
    </member>
    <member name="T:Xceed.Ftp.CertificateReceivedEventArgs">
      <summary>Provides information on the certificate that is received from the FTP server. <b>Note: This class is not available in Xceed FTP for .NET Compact Framework
because this product does not support Secure FTP.</b></summary>
    </member>
    <member name="T:Xceed.Ftp.CertificateRequiredEventArgs">
      <summary>Provides information on the certificate that the FTP server requires from the FTP client. <b>Note: This class is not available in Xceed FTP for .NET Compact
Framework because this product does not support Secure FTP.</b></summary>
    </member>
    <member name="T:Xceed.Ftp.CommandSentEventArgs">
      <summary>Provides information on the command that has been sent to the FTP server.</summary>
    </member>
    <member name="T:Xceed.Ftp.FileTransferStatusEventArgs">
      <summary>Provides progress information while sending or receiving one or more files.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpAbortException">
      <summary>The exception that is thrown by the FTP client when the current operation is aborted.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpAS400ListingParser">
      <summary>Class which represents a parser that is used to parse lines received from an AS400 FTP server.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpClient">
      <summary>This class provides you with quick and easy access to FTP functionalities in the same style as the ActiveX version of the Xceed FTP Library.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpConnection">
      <summary>Class which represents the connection between a client and an FTP server.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpDosListingParser">
      <summary>Class which represents a parser that is used to parse lines received from a Windows or DOS FTP server.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpException">
      <summary>The exception that is thrown by the FTP client when a FTP-specific error occurs.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpFile">
      <summary>Specialization of the  class that implements access to a file located on an FTP server.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpFolder">
      <summary>Specialization of the  class that implements access to a folder located on an FTP server.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpInternalException">
      <summary>The exception that is thrown by the FTP client when an unexpected error occurs.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpInvalidStateException">
      <summary>The exception that is thrown by the FTP client when it is not in a valid state to perform the requested FTP operation.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpIOException">
      <summary>The exception that is thrown by the FTP client when an I/O error occurs.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpItemInfo">
      <summary>Represents an item on an FTP server and contains information relevant to that item.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpItemInfoList">
      <summary>Contains a list of  objects.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpListingParser">
      <summary>Class which represents a parser that is used to parse listing lines received from an FTP server.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpListingParserList">
      <summary>Contains a list of  objects.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpMachineListingParser">
      <summary>Class that implements a parser that is used to process lines received from an MLSD command.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpReply">
      <summary>Represents a reply received from the FTP server.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpReplyException">
      <summary>The exception that is thrown by the FTP client when an error reply is received from an FTP server.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpSslException">
      <summary>The exception that is thrown when a problem occurs with SSL handshake, encryption, or certificate manipulation.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpTimeoutException">
      <summary>The exception that is thrown by the FTP client when an operation times-out.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpUnixListingParser">
      <summary>Class which represents a parser that is used to parse lines received from a UNIX FTP server.</summary>
    </member>
    <member name="T:Xceed.Ftp.FtpVmsListingParser">
      <summary>Class which represents a parser that is used to parse lines received from a VMS FTP server.</summary>
    </member>
    <member name="T:Xceed.Ftp.HttpProxyClient">
      <summary>Class which enables connecting to an FTP server via an HTTP proxy server.</summary>
    </member>
    <member name="T:Xceed.Ftp.HttpReply">
      <summary>Represents a reply received from the HTTP proxy server.</summary>
    </member>
    <member name="T:Xceed.Ftp.HttpReplyException">
      <summary>The exception that is thrown by the FTP client when an error reply is received from an HTTP proxy.</summary>
    </member>
    <member name="T:Xceed.Ftp.Licenser">
      <summary>Class which is used to register the classes located in the Xceed.Ftp namespace.</summary>
    </member>
    <member name="T:Xceed.Ftp.MultipleFileTransferErrorEventArgs">
      <summary>Provides information for files that fail to be transferred during a multiple-file transfer.</summary>
    </member>
    <member name="T:Xceed.Ftp.ParsingListingLineEventArgs">
      <summary>Provides information on the FTP item whose listing information was retrieved.</summary>
    </member>
    <member name="T:Xceed.Ftp.ProxyClient">
      <summary>Base abstract class for creating a proxy client that allows connection or login to a remote FTP server via a proxy server.</summary>
    </member>
    <member name="T:Xceed.Ftp.QuickFtp">
      <summary>Exposes static methods that allow basic FTP file operations.</summary>
    </member>
    <member name="T:Xceed.Ftp.QuickFtpException">
      <summary>Exception that is thrown when an error occurs in a method of the  class.</summary>
    </member>
    <member name="T:Xceed.Ftp.QuickFtpItem">
      <summary>Represents an item located on an FTP server and exposes properties that get information in regards to the item.</summary>
    </member>
    <member name="T:Xceed.Ftp.ReplyReceivedEventArgs">
      <summary>Provides information on the reply that has been received from the FTP server.</summary>
    </member>
    <member name="T:Xceed.Ftp.StringList">
      <summary>Contains a list of strings.</summary>
    </member>
    <member name="T:Xceed.Ftp.TransferringFileEventArgs">
      <summary>Provides information on the file being sent or received.</summary>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.#ctor">
      <summary>Initializes a new instance of the AsyncFtpClient class.</summary>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginChangeDataChannelProtection(Xceed.Ftp.DataChannelProtection,System.Security.Authentication.SslProtocols,System.AsyncCallback,System.Object)">
      <summary>Begins the process of changing the data channel protection. Don't forget to call EndChangeDataChannelProtection!</summary>
      <param name="dataChannelProtection">The DataChannelProtection to use.</param>
      <param name="sslProtocol">The <strong>SslProtocols</strong> to use.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginClearCommandChannel(System.AsyncCallback,System.Object)">
      <summary>Begins the process of clearing the command channel. Don't forget to call EndClearCommandChannel!</summary>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginDisconnect(System.AsyncCallback,System.Object)">
      <summary>Begins the process of disconnecting the FTP client from the FTP server to which it is connected. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetRawExtendedFeatures">
      <exception caption="NotSupportException" cref="System.NotSupportedException">The FTP server foes not support extended features.</exception>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndAbort(System.IAsyncResult)">
      <summary>Ends the process of aborting the current FTP command</summary>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndAuthenticate(System.IAsyncResult)">
      <summary>Ends the authentification and encryption of the current FTP connection.</summary>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)">
      <summary>Ends the process of changing the current working folder of the FTP server.</summary>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndChangeDataChannelProtection(System.IAsyncResult)">
      <summary>Ends the change of the data channel protection..</summary>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndChangeToParentFolder(System.IAsyncResult)">
      <summary>Ends the process of changing the current working folder of the FTP server to the parent folder.</summary>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndChangeTransferMode(System.IAsyncResult)">
      <summary>Ends the process of changing the transfer mode.</summary>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndChangeUser(System.IAsyncResult)">
      <summary>Ends the process of changing the currently logged-in user.</summary>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndClearCommandChannel(System.IAsyncResult)">
      <summary>Ends the clearing of the command channel.</summary>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndConnect(System.IAsyncResult)">
      <summary>Ends the connection process of the FTP client to an FTP server.</summary>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndCreateFolder(System.IAsyncResult)">
      <summary>Ends the process of creating a folder on the FTP server.</summary>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndDeleteFile(System.IAsyncResult)">
      <summary>Ends the process of deleting a file from the FTP server.</summary>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndDeleteFolder(System.IAsyncResult)">
      <summary>Ends the process of deleting a folder from the FTP server.</summary>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndDisconnect(System.IAsyncResult)">
      <summary>Ends the process of disconnecting the FTP client from the FTP server to which it is connected.</summary>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndGetCurrentFolder(System.IAsyncResult)">
      <summary>Ends the process of retrieving the current working folder of the FTP server.</summary>
      <returns>A string representing the FTP server's current folder. The path returned is an absolute path that can be used with the
/%M:Xceed.Ftp.AsyncFtpClient.EndChangeCurrentFolder(System.IAsyncResult)% methods to go
directly to this folder regardless of the current working folder.</returns>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndGetDownloadStream(System.IAsyncResult)">
      <summary>Ends the process of retrieving a direct access to the <b>readonly</b> data stream being received.</summary>
      <returns>The data  to read from.</returns>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndGetFolderContents(System.IAsyncResult)">
      <summary>Ends the process of retrieving the contents of the current working folder.</summary>
      <returns>A reference to an  collection containing <see cref="T:Xceed.Ftp.FtpItemInfo" /> objects each representing a file matched by
<i>remoteFileMask</i>.</returns>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndGetRawExtendedFeatures(System.IAsyncResult)">
      <summary>Ends the process of retrieving an <b>unprocessed</b>, clear text list of the extended features that are implemented by an FTP server.</summary>
      <returns>An <strong>unprocessed</strong> text list containing the extended features that are implemented by an FTP server. Can be empty if no extended features are
implemented by the FTP server.</returns>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndGetRawFolderContents(System.IAsyncResult)">
      <summary>Ends the process of retrieving an <b>unprocessed</b>, clear text list representing the contents of the current working folder</summary>
      <returns>A reference to a  collection contain a list of unprocessed strings each representing an item <em>folder</em>. For example: <i>"07-25-03
11:46AM 101 001fdf63.xml"</i>. Of course, the format of the strings returned by the FTP server can vary from server to server.</returns>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndGetUploadStream(System.IAsyncResult)">
      <summary>Ends the process of retrieving a direct access to the <b>write-only</b> data stream to send to.</summary>
      <returns>The data  to write to.</returns>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndLogin(System.IAsyncResult)">
      <summary>Ends the login process of the FTP client to the FTP server to which it is connected.</summary>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)">
      <summary>Ends the process of receiving a file from the FTP server.</summary>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndReceiveMultipleFiles(System.IAsyncResult)">
      <summary>Ends the process of retreiving the files that match the provided file mask from the current working folder and stores them on the local system in the specified
folder.</summary>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndRenameFile(System.IAsyncResult)">
      <summary>Ends the process of renaming a file on the FTP server.</summary>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndSendCustomCommand(System.IAsyncResult)">
      <summary>Ends the process of sending a <b>custom</b> command to the FTP server.</summary>
      <returns>The reply received from the FTP server in response to the custom command.</returns>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult)">
      <summary>Ends the process of sending a file to the FTP server.</summary>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndSendFileToUniqueName(System.IAsyncResult)">
      <summary>Ends the process of sending a file to the FTP server's current working folder and storing it using a unique filename.</summary>
      <returns>A string representing the unique name that was generated for the file that was sent to the FTP server.</returns>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.EndSendMultipleFiles(System.IAsyncResult)">
      <summary>Ends the process of sending the files that match the provided file mask to the FTP server's current working folder.</summary>
      <param name="asyncResult">An  representing the status of the asynchronous operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginAbort(System.AsyncCallback,System.Object)">
      <summary>Begins the process of aborting the current FTP command. Don't forget to call !</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginAuthenticate(Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.AsyncCallback,System.Object)">
      <summary>Begins the authentification and encryption of the current FTP connection. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
      <param name="clientCertificate">The FTP client's certificate.</param>
      <param name="dataProtection">How the data channels will be protected.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginAuthenticate(Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,System.AsyncCallback,System.Object)">
      <summary>Begins the authentification and encryption of the current FTP connection. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
      <param name="clientCertificate">The FTP client's certificate.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginChangeCurrentFolder(System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the process of changing the current working folder of the FTP server. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="folder">The new current working folder. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginChangeToParentFolder(System.AsyncCallback,System.Object)">
      <summary>Begins the process of changing the current working folder of the FTP server to the parent folder. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginChangeTransferMode(Xceed.Ftp.TransferMode,System.AsyncCallback,System.Object)">
      <summary>Begins the process of changing the transfer mode. Don't forget to call EndChangeTransferMode!</summary>
      <param name="transferMode">The new transfer mode.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginChangeUser(System.AsyncCallback,System.Object)">
      <summary>Begins the process of changing the currently logged-in user to the anonymous user without disconnecting from the FTP server. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginChangeUser(System.String,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the process of changing the currently logged-in user to the specified user without disconnecting from the FTP server. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="userName">The username with which to relogin into the FTP server.</param>
      <param name="password">The password with which to relogin into the FTP server.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginChangeUser(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the process of changing the currently logged-in user to the specified user and account without disconnecting from the FTP server. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="userName">The username with which to relogin into the FTP server.</param>
      <param name="password">The password with which to relogin into the FTP server.</param>
      <param name="accountName">The name of the account on the FTP server.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginConnect(System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the connection process of the FTP client to an FTP server on port 21. Don't forget to call !</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginConnect(System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,System.AsyncCallback,System.Object)">
      <summary>Begins the connection process of the FTP client to a <b>secure</b> FTP server on port 21. Don't forget to call
! <b>Note: This method is not available in Xceed FTP for .NET Compact Framework because this
product does not support Secure FTP.</b></summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
      <param name="clientCertificate">The FTP client's certificate.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins the connection process of the FTP client to an FTP server using the specified hostname and port. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to. If 0 is specified for the port, 21 will be used.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginConnect(System.String,System.Int32,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,System.AsyncCallback,System.Object)">
      <summary>Begins the connection process of the FTP client to a <b>secure</b> FTP server using the specified hostname and port. Don't forget to call
! <b>Note: This method is not available in Xceed FTP for .NET Compact Framework because this
product does not support Secure FTP.</b></summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to. If 0 is specified for the port, 21 will be used.</param>
      <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
      <param name="clientCertificate">The FTP client's certificate.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginConnect(System.Net.IPEndPoint,System.AsyncCallback,System.Object)">
      <summary>Begins the connection of the FTP client to an FTP server using the specified  (IP address and port). Don't forget to call
<see cref="M:Xceed.Ftp.AsyncFtpClient.EndConnect(System.IAsyncResult)" />!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="serverAddress">An  representing the IP address and port of the FTP server to connect to. If 0 is specified for the port, 21 will be used.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginCreateFolder(System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the process of creating a folder on the FTP server. Don't forget to call !</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="folder">The name of the folder to create. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the process of deleting a file from the FTP server. Don't forget to call !</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="file">The name of the file to delete. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginDeleteFolder(System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the processing of deleting a folder from the FTP server. Don't forget to call !</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="folder">The name of the folder to delete. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginDeleteFolder(System.String,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Begins the process of deleting a folder, and optionally each item in the folder, from the FTP server. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="folder">The name of the folder to delete. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="recursive">true if each item in the folder should also be deleted; false otherwise.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetCurrentFolder(System.AsyncCallback,System.Object)">
      <summary>Begins the process of retrieving the current working folder of the FTP server. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetDownloadStream(System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the process of retrieving a direct access to the <b>readonly</b> data stream being received. Don't forget to call EndGetDownloadStream!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetDownloadStream(System.String,System.Int64,System.AsyncCallback,System.Object)">
      <summary>Begins the process of retrieving a direct access to the <b>readonly</b> data stream being received, beginning at the specified offset. Don't forget to call
EndGetDownloadStream!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="offset">The byte offset (of the remote file) at which to start receiving data from the remote file.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetFolderContents(System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the process of retrieving the contents of the current working folder. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="remoteFileMask">The file mask of the remote files to retrieve. This parameter can include a filtering mask to limit the files that are retrieved. For example, if
 is specified, the entire contents of the current working folder will be retrieved. If "*.txt" is used, all the files in the current
working folder that have the TXT extension will be retrieved. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetFolderContents(System.AsyncCallback,System.Object)">
      <summary>Begins the process of retrieving the entire contents of the current working folder. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetRawExtendedFeatures(System.AsyncCallback,System.Object)">
      <summary>Begins the process retrieving a list of the extended features that are implemented by the FTP server. Don't forget to call EndGetRawExtendedFeatures!</summary>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetRawFolderContents(System.String,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Begins the process of retrieving an <b>unprocessed</b>, clear text list representing the contents of the current working folder as sent by the FTP server and
indicates if the entire listing or only filenames should be retrieved. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="remoteFileMask">The file mask of the remote files to retrieve. This parameter can can include a filtering mask to limit the files that are retrieved. For example, if
 is specified, the entire contents of the current working folder will be retrieved. If "*.txt" is used, all the files in the current
working folder that have the TXT extension will be retrieved. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="namesOnly">true if only filenames should be retrieved; false otherwise.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetRawFolderContents(System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the process of retrieving an <b>unprocessed</b>, clear text list representing the contents of the current working folder as sent by the FTP server.
Don't forget to call !</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="remoteFileMask">The file mask of the remote files to retrieve. This parameter can can include a filtering mask to limit the files that are retrieved. For example, if
 is specified, the entire contents of the current working folder will be retrieved. If "*.txt" is used, all the files in the current
working folder that have the TXT extension will be retrieved. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetRawFolderContents(System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Begins the process of retrieving an <b>unprocessed</b>, clear text list representing the entire contents of current working folder as sent by the FTP server
and indicates if the entire listing or only filenames should be retrieved. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="namesOnly">true if only filenames should be retrieved; false otherwise.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetRawFolderContents(System.AsyncCallback,System.Object)">
      <summary>Begins the process of retrieving an <b>unprocessed</b>, clear text list representing the entire contents of current working folder as sent by the FTP server.
Don't forget to call !</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetUploadStream(System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the process of retrieving a direct access to the <b>write-only</b> data stream to send to.</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="remoteFilename">The filename of the file to write to. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginGetUploadStream(System.String,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Begins the process of retrieving a direct access to the <b>write-only</b> data stream to send to, indicating if existing data should be overwritten or appended
to.</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="remoteFilename">The filename of the file to write to. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="append">true if existing data should be appended to; false otherwise.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginLogin(System.AsyncCallback,System.Object)">
      <summary>Begins the <b>anonymous</b> login process of the FTP client to the FTP server to which it is connected. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginLogin(System.String,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the login process of the FTP client to the FTP server to which it is connected using the specified username and password. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="userName">The username with which to login into the FTP server.</param>
      <param name="password">The password with which to login into the FTP server.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginLogin(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the login process of the FTP client to the FTP server to which it is connected using the specified username and password. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="userName">The username with which to login into the FTP server.</param>
      <param name="password">The password with which to login into the FTP server.</param>
      <param name="accountName">The name of the account on the FTP server.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile(System.String,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the process of receiving the specified file from the current working folder and stores it on the local system using the specified path and filename.
Don't forget to call !</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="localFilename">The path and filename of the file as it will be stored on the local system.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Begins the process of receiving the specified file from the current working folder and stores it on the local system using the specified path and filename and
indicates if the file should append itself to the local file if it already exists. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="localFilename">The path and filename of the file as it will be stored on the local system.</param>
      <param name="append">true if the file should append itself to the local file if it already exists; false if the local file should be overwritten.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile(System.String,System.Int64,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the process of receiving the specified file from the current working folder starting from the specified offset and stores it on the local system using
the specified path and filename. Don't forget to call !</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="offset">The byte offset (of the remote file) at which to start receiving data from the remote file. If  is true, the remote file will be appended to the end of
the local file no matter what the value of <paramref name="offset" />. Therefore, to implement a real resume procedure, the size of the local file must be specified in <paramref name="offset" />
and <see cref="append" /> must be set to true.</param>
      <param name="localFilename">The path and filename of the file as it will be stored on the local system.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile(System.String,System.Int64,System.String,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Begins the process of receiving the specified file from the current working folder starting from the specified offset and stores it on the local system using
the specified path and filename indicating if the file should append itself to the local file if it already exists. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="offset">The byte offset (of the remote file) at which to start receiving data from the remote file. If <paramref name="append" /> is true, the remote file will be appended to the end of
the local file no matter what the value of <paramref name="offset" />. Therefore, to implement a real resume procedure, the size of the local file must be specified in <paramref name="offset" />
and <paramref name="append" /> must be set to true.</param>
      <param name="localFilename">The path and filename of the file as it will be stored on the local system.</param>
      <param name="append">true if the file should append itself to the local file if it already exists; false if the local file should be overwritten.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile(System.String,System.IO.Stream,System.AsyncCallback,System.Object)">
      <summary>Begins the process of receiving the specified file from the current working folder to the specified . Don't forget to call
<see cref="M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)" />!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="destination">A reference to the  to which to receive the file.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveFile(System.String,System.Int64,System.IO.Stream,System.AsyncCallback,System.Object)">
      <summary>Begins the process of receiving the specified file from the FTP server's current working folder into the specified , starting from the
specified offset. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndReceiveFile(System.IAsyncResult)" />!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="offset">The byte offset (of the remote file) at which to start receiving data from the remote file. If  is true, the remote file will be appended to the end of
the local file no matter what the value of <paramref name="offset" />. Therefore, to implement a real resume procedure, the size of the local file must be specified in <paramref name="offset" />
and <see cref="append" /> must be set to true.</param>
      <param name="destination">A reference to the  to which to receive the file.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginReceiveMultipleFiles(System.String,System.String,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Begins the process of retreiving the files that match the provided file mask from the current working folder and stores them on the local system in the
specified folder. Don't forget to call !</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="remoteFileMask">The file mask of the remote files to receive. This parameter can include a filtering mask to limit the files that are received. For example, if
 is specified, the entire contents of the current working folder will be received. If "*.txt" is used, all the files in the current
working folder that have the TXT extension will be received. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="localFolder">The path and name of the local folder where the files will be stored.</param>
      <param name="recursive">true if the files in child folders should also be received; false otherwise.</param>
      <param name="recreateFolderStructure">true if the remote directory structure should be recreated on the local machine; false otherwise.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginRenameFile(System.String,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the process of renaming a file on the FTP server. Don't forget to call !</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="currentFilename">The filename of the file to rename. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="newFilename">The new filename. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendCustomCommand(System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the process of sending a <b>custom</b> command to the FTP server. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="command">The command to send to the FTP server.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFile(System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the process of sending the specified file to the FTP server's current working folder and stores it using the same filename. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="localFilename">The path and filename of the local file to send.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFile(System.String,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Begins the process of sending the specified file to the FTP server's current working folder using the same filename and indicating if it should append itself
to the remote file if it already exists. Don't forget to call !</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="localFilename">The path and filename of the local file to send.</param>
      <param name="append">true if the file should append itself to the remote file if it already exists; false if the remote file should be overwritten.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFile(System.String,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the process of sending the specified file to the FTP server's current working folder and stores it using the specified filename. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="localFilename">The path and filename of the local file to send.</param>
      <param name="remoteFilename">The filename as it will be stored on the FTP server. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFile(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Begins the process of sending the specified file to the FTP server's current working folder, indicating if it should append itself to the remote file if it
already exists, and stores it using the specified filename. Don't forget to call !</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="localFilename">The path and filename of the local file to send.</param>
      <param name="remoteFilename">The filename as it will be stored on the FTP server. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="append">true if the file should append itself to the remote file if it already exists; false if the remote file should be overwritten.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFile(System.IO.Stream,System.String,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Begins the process of sending the data from the specified  to the FTP server's current working folder, indicating if it should append
itself to the remote file if it already exists, and stores it using the specified filename. Don't forget to call
<see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult)" />!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="source">A  whose data is to be sent to the FTP server.</param>
      <param name="remoteFilename">The filename as it will be stored on the FTP server. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="append">true if the file should append itself to the remote file if it already exists; false if the remote file should be overwritten.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFile(System.IO.Stream,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the process of sending the data from the specified  to the FTP server's current working folder. Don't forget to call
<see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendFile(System.IAsyncResult)" />!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="source">A  whose data is to be sent to the FTP server.</param>
      <param name="remoteFilename">The filename as it will be stored on the FTP server. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFileToUniqueName(System.String,System.AsyncCallback,System.Object)">
      <summary>Begins the process of sending the specified file to the FTP server's current working folder and stores it using a unique filename. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="localFilename">The path and filename of the local file to send.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendFileToUniqueName(System.IO.Stream,System.AsyncCallback,System.Object)">
      <summary>Begins the process of sending the data from the specified  to the FTP server's current working folder and stores it using a unique
filename. Don't forget to call <see cref="M:Xceed.Ftp.AsyncFtpClient.EndSendFileToUniqueName(System.IAsyncResult)" />!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="source">A  whose data is to be sent to the FTP server.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.AsyncFtpClient.BeginSendMultipleFiles(System.String,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Begins the process of sending the files that match the provided file mask to the FTP server's current working folder. Don't forget to call
!</summary>
      <returns>An  representing the status of the asynchronous operation.</returns>
      <param name="localFileMask">The full path and file mask of the local files to send. This parameter can include a filtering mask to limit the files that are sent. For example, if
"c:\temp\*" is specified, the entire contents of the "c:\temp" will be sent. If "c:\temp\*.txt" is used, all the files in the "c:\temp" folder that have the
TXT extension will be sent. The "temp" folder will not be recreated on the FTP server.</param>
      <param name="recursive">true if the files in child folders should also be sent; false otherwise.</param>
      <param name="recreateFolderStructure">true if the local directory structure should be recreated on the FTP server; false otherwise.</param>
      <param name="callback">Callback method to be called when the asynchronous operation is completed.</param>
      <param name="state">An object containing state information for this operation.</param>
    </member>
    <member name="M:Xceed.Ftp.Certificate.#ctor">
      <summary>Initializes a new intance of the Certificate class using the specified certificate.</summary>
    </member>
    <member name="P:Xceed.Ftp.CertificateReceivedEventArgs.Action">
      <summary>Gets or sets the verification action to take when a certificate is received from an FTP server.</summary>
    </member>
    <member name="P:Xceed.Ftp.CertificateReceivedEventArgs.Flags">
      <summary>Gets or sets the verification flags used to verify the FTP server's certificate.</summary>
    </member>
    <member name="P:Xceed.Ftp.CertificateReceivedEventArgs.ServerCertificate">
      <summary>Gets the certificate received from the FTP server.</summary>
    </member>
    <member name="P:Xceed.Ftp.CertificateReceivedEventArgs.Status">
      <summary>Gets the verification status of the certificate received from the FTP server.</summary>
    </member>
    <member name="P:Xceed.Ftp.CertificateRequiredEventArgs.Certificate">
      <summary>Gets or sets the FTP client's certificate that is required by the FTP server.</summary>
    </member>
    <member name="P:Xceed.Ftp.CommandSentEventArgs.Command">
      <summary>Gets the command that was sent to the FTP server.</summary>
    </member>
    <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.AllBytesPercent">
      <summary>Gets the percentage of the bytes that have been transferred for the entire group of files to transfer.</summary>
    </member>
    <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.AllBytesPerSecond">
      <summary>Gets the average throughput for the entire group of files being transferred, in bytes per second.</summary>
    </member>
    <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.AllBytesSkipped">
      <summary>Gets the total amount of bytes that were skipped so far for the group of files being transferred.</summary>
    </member>
    <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.AllBytesTotal">
      <summary>Gets the total amount of bytes of all files that will be transferred.</summary>
    </member>
    <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.AllBytesTransferred">
      <summary>Gets the total amount of bytes transferred so far for the group of files being transferred.</summary>
    </member>
    <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.BytesPercent">
      <summary>Gets the percentage of bytes transferred for the current file.</summary>
    </member>
    <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.BytesPerSecond">
      <summary>Gets the current file's average throughput in bytes per second.</summary>
    </member>
    <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.BytesSkipped">
      <summary>Gets the amount of bytes that were skipped for the current file.</summary>
    </member>
    <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.BytesTotal">
      <summary>Gets the total amount of bytes for the current file.</summary>
    </member>
    <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.BytesTransferred">
      <summary>Gets the amount of bytes transferred for the current file.</summary>
    </member>
    <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.FilesPercent">
      <summary>Gets the percentage of files that have been transferred so far.</summary>
    </member>
    <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.FilesSkipped">
      <summary>Gets the total number of files skipped so far.</summary>
    </member>
    <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.FilesTotal">
      <summary>Gets the total number of files to transfer.</summary>
    </member>
    <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.FilesTransferred">
      <summary>Gets the total number of files transferred so far.</summary>
    </member>
    <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.LocalFilename">
      <summary>Gets the path and filename of the local file.</summary>
    </member>
    <member name="P:Xceed.Ftp.FileTransferStatusEventArgs.RemoteFilename">
      <summary>Gets the filename of the remote file.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpAbortException.#ctor">
      <summary>Initializes a new instance of the FtpAbortException class.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpAbortException.#ctor(System.Exception)">
      <summary>Initializes a new instance of the FtpAbortException class with a reference to the inner exception that is the cause of this exception.</summary>
      <param name="inner">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpAS400ListingParser.ParseLine(System.String)">
      <summary>Parses the specified listing line received from the FTP server.</summary>
      <returns>A reference to an  object containing the information that was parsed from the listing line received from the FTP server. Can be
<see cref="P:Xceed.Ftp.FtpItemInfo.Empty" /> to indicate that the line was recognized but more information is required (for example, VMS listings are on 2 lines). Can be
a null reference (<b>Nothing</b> in Visual Basic) to indicate that the listing line was not recognized as a valid AS400 listing line.</returns>
      <param name="line">The listing line received from the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.#ctor">
      <summary>Initializes a new instance of the FtpClient class.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.Abort">
      <summary>Aborts the current FTP command.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.ChangeCurrentFolder(System.String)">
      <summary>Changes the current working folder of the FTP server.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="folder">The new current working folder. <b>Some FTP servers may be case-sensitive!</b></param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.ChangeDataChannelProtection(Xceed.Ftp.DataChannelProtection,System.Security.Authentication.SslProtocols)">
      <summary>Changes the data channel protection.</summary>
      <param name="dataChannelProtection">
        <para>The DataChannelProtection to use.</para>
      </param>
      <param name="sslProtocol">
        <para>The <strong>SslProtocols</strong> to use.</para>
      </param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.ChangeListingMethod(Xceed.Ftp.ListingMethod)">
      <summary>Changes the current listing method that is used to retrieve folder contents from the FTP server.</summary>
      <exception caption="" cref="System.ArgumentException">If an invalid listing method is specified.If the FTP server's machine listing doesn't support the 'Type'  fact.</exception>
      <param name="listingMethod">A ListingMethod value that indicates the current listing method that is used to retrieve folder
contents from the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.ChangeToParentFolder">
      <summary>Changes the current working folder of the FTP server to the parent folder.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.ChangeTransferMode(Xceed.Ftp.TransferMode)">
      <summary>Changes the current transfer mode.</summary>
      <param name="transferMode">A TransferMode value representing the new transfer mode.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.ClearCommandChannel">
      <summary>Clears the command channel after login to facilitate firewall NAT when connecting using a secure data channel.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.CreateFolder(System.String)">
      <summary>Create a folder on the FTP server.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="folder">The name of the folder to create. <b>Some FTP servers may be case-sensitive!</b></param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.DeleteFile(System.String)">
      <summary>Deletes a file from the FTP server.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="file">The name of the file to delete. <b>Some FTP servers may be case-sensitive!</b></param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.Disconnect">
      <summary>Disconnects the FTP client from the FTP server to which it is connected.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.FxpCopy(Xceed.Ftp.FtpClient,System.String,Xceed.Ftp.FtpClient,System.String)">
      <summary>Directs two specified FTP clients to perform a FXP (server to server) file transfer from the specified
source FTP server to the specified destination FTP server.</summary>
      <exception caption="" cref="System.ArgumentNullException">If a parameter is null.&lt;p&gt;If an empty string was specified.&lt;/p&gt;
&lt;p&gt;If the property values of the source and/or destination FTP client prevent a proper FXP transfer. Refer to the exception message for details.&lt;/p&gt;</exception>
      <param name="sourceClient">A FtpClient object that represents the source server. The server from which the file to copy will be
taken. Cannot be a null reference (<b>Nothing</b> in Visual Basic).</param>
      <param name="sourceFileName">The path and name of the source file on the source server. Cannot be a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</param>
      <param name="targetClient">A FtpClient object that represents the destination server. The server to which the source file will be
copied. Cannot be a null reference (<b>Nothing</b> in Visual Basic).</param>
      <param name="targetFileName">The path and name that the copied file will take on the destination server. Cannot be a null reference (<b>Nothing</b> in Visual Basic) or an empty string.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.GetCurrentFolder">
      <summary>Retrieves the current working folder of the FTP server.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <returns>A string representing the FTP server's current folder. The path returned is an absolute path that can be used with the
 to go directly to this folder regardless of the current working folder.</returns>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.GetRawExtendedFeatures">
      <summary>Retrieves an <strong>unprocessed</strong>, clear text list of the extended features that are implemented by an FTP server.</summary>
      <returns>An <strong>unprocessed</strong> text list containing the extended features that are implemented by an FTP server. Can be empty if no extended features are
implemented by the FTP server.</returns>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.ReceiveMultipleFiles(System.String,System.String,System.Boolean,System.Boolean)">
      <summary>Receives the files that match the provided file mask from the current working folder and stores them on the local system in the specified folder.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred.</exception>
      <param name="remoteFileMask">The file mask of the remote files to receive. This parameter can include a filtering mask to limit the files that are received. For example, if
 is specified, the entire contents of the current working folder will be received. If "*.txt" is used, all the files in the current
working folder that have the TXT extension will be received. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="localFolder">The path and name of the local folder where the files will be stored.</param>
      <param name="recursive">true if the files in child folders should also be received; false otherwise.</param>
      <param name="recreateFolderStructure">true if the remote directory structure should be recreated on the local machine; false otherwise.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.RenameFile(System.String,System.String)">
      <summary>Renames a file or, if supported, a folder on the FTP server.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred.</exception>
      <param name="currentFilename">The name of the file or folder to rename. <b>Some FTP servers may be case-sensitive. Not all servers support renaming folders.</b></param>
      <param name="newFilename">The new name. <b>Some FTP servers may be case-sensitive.</b></param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.SendCustomCommand(System.String)">
      <summary>Sends a <b>custom</b> command to the FTP server.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <returns>The reply received from the FTP server in response to the custom command.</returns>
      <param name="command">The command to send to the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.SendMultipleFiles(System.String,System.Boolean,System.Boolean)">
      <summary>Sends the files that match the provided file mask to the FTP server's current working folder.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="localFileMask">The full path and file mask of the local files to send. This parameter can include a filtering mask to limit the files that are sent. For example, if
"c:\temp\*" is specified, the entire contents of the "c:\temp" will be sent. If "c:\temp\*.txt" is used, all the files in the "c:\temp" folder that have the
TXT extension will be sent. The "temp" folder will not be recreated on the FTP server.</param>
      <param name="recursive">true if the files in child folders should also be sent; false otherwise.</param>
      <param name="recreateFolderStructure">true if the local directory structure should be recreated on the FTP server; false otherwise.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.Authenticate(Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection)">
      <summary>Authenticates and encrypts the current FTP connection.</summary>
      <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
      <param name="clientCertificate">The FTP client's certificate.</param>
      <param name="dataProtection">How the data channels will be protected.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.Authenticate(Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate)">
      <summary>Authenticates and encrypts the current FTP connection.</summary>
      <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
      <param name="clientCertificate">The FTP client's certificate.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.ChangeUser">
      <summary>Changes the currently logged-in user to the anonymous user without disconnecting from the FTP server.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.ChangeUser(System.String,System.String)">
      <summary>Changes the currently logged-in user to the specified user without disconnecting from the FTP server.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="userName">The username with which to relogin into the FTP server.</param>
      <param name="password">The password with which to relogin into the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.ChangeUser(System.String,System.String,System.String)">
      <summary>Changes the currently logged-in user to the specified user and account without disconnecting from the FTP server.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="userName">The username with which to relogin into the FTP server.</param>
      <param name="password">The password with which to relogin into the FTP server.</param>
      <param name="accountName">The name of the account on the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.Connect(System.String)">
      <summary>Connects the FTP client to an FTP server on port 21.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.Connect(System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate)">
      <summary>Connects the FTP client to a <b>secure</b> FTP server on port 21. <b>Note: This method is not available in Xceed FTP for .NET Compact Framework because this
product does not support Secure FTP.</b></summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
      <param name="clientCertificate">The FTP client's certificate.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.Connect(System.String,System.Int32)">
      <summary>Connects the FTP client to an FTP server using the specified hostname and port.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to. If 0 is specified for the port, 21 will be used.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.Connect(System.String,System.Int32,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate)">
      <summary>Connects the FTP client to a <b>secure</b> FTP server using the specified hostname and port. <b>Note: This method is not available in Xceed FTP for .NET
Compact Framework because this product does not support Secure FTP.</b></summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to. If 0 is specified for the port, 21 will be used.</param>
      <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
      <param name="clientCertificate">The FTP client's certificate.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.Connect(System.Net.IPEndPoint)">
      <summary>Connects the FTP client to an FTP server using the specified  (IP address and port).</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="serverAddress">An  representing the IP address and port of the FTP server to connect to. If 0 is specified for the port, 21 will be used.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.Connect(System.Net.IPEndPoint,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate)">
      <summary>Connects the FTP client to a <b>secure</b> FTP server using the specified hostname and port. <b>Note: This method is not available in Xceed FTP for .NET
Compact Framework because this product does not support Secure FTP.</b></summary>
      <param name="serverAddress">An  representing the IP address and port of the FTP server to connect to. If 0 is specified for the port, 21 will be used.</param>
      <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
      <param name="clientCertificate">The FTP client's certificate.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.DeleteFolder(System.String)">
      <summary>Deletes a folder from the FTP server.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="folder">The name of the folder to delete. <b>Some FTP servers may be case-sensitive!</b></param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.DeleteFolder(System.String,System.Boolean)">
      <summary>Deletes a folder, and optionally each item in the folder, from the FTP server.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the FTP client is in an invalid state.The format of the reply received from the FTP server was not recognized..An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="folder">The name of the folder to delete. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="recursive">true if each item in the folder should also be deleted; false otherwise.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.GetDownloadStream(System.String)">
      <summary>Retrieves a direct access to the <b>readonly</b> data stream being received.</summary>
      <returns>The data  to read from.</returns>
      <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.GetDownloadStream(System.String,System.Int64)">
      <summary>Retrieves a direct access to the <b>readonly</b> data stream being received, beginning at the specified offset.</summary>
      <returns>The data  to read from</returns>
      <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="offset">The byte offset (of the remote file) at which to start receiving data from the remote file.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.GetFolderContents(System.String)">
      <summary>Retrieves the contents of the current working folder.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <returns>A reference to an  collection containing <see cref="T:Xceed.Ftp.FtpItemInfo" /> objects each representing a file matched by <paramref name="remoteFileMask" />.</returns>
      <param name="remoteFileMask">The file mask of the remote files to retrieve. This parameter can include a filtering mask to limit the files that are retrieved. For example, if
 is specified, the entire contents of the current working folder will be retrieved. If "*.txt" is used, all the files in the current
working folder that have the TXT extension will be retrieved. <b>Some FTP servers may be case-sensitive!</b></param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.GetFolderContents">
      <summary>Retrieves the entire contents of the current working folder.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <returns>A reference to an  collection containing <see cref="T:Xceed.Ftp.FtpItemInfo" /> objects each representing a file matched by
<em>remoteFileMask</em>.</returns>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.GetRawFolderContents(System.String,System.Boolean)">
      <summary>Retrieves an <b>unprocessed</b>, clear text list representing the contents of the current working folder as sent by the FTP server and indicates if the entire
listing or only filenames should be retrieved.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <returns>A reference to a  collection containing a list of unprocessed strings each representing a file matched by <paramref name="remoteFileMask" />. For
example: <i>"07-25-03 11:46AM 101 001fdf63.xml"</i>. Of course, the format of the strings returned by the FTP server can vary from server to server.</returns>
      <param name="remoteFileMask">The file mask of the remote files to retrieve. This parameter can can include a filtering mask to limit the files that are retrieved. For example, if
 is specified, the entire contents of the current working folder will be retrieved. If "*.txt" is used, all the files in the current
working folder that have the TXT extension will be retrieved. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="namesOnly">true if only filenames should be retrieved; false otherwise.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.GetRawFolderContents(System.String)">
      <summary>Retrieves an <b>unprocessed</b>, clear text list representing the contents of the current working folder as sent by the FTP server.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <returns>A reference to a  collection containing a list of unprocessed strings each representing a file matched by <paramref name="remoteFileMask" />. For
example: <i>"07-25-03 11:46AM 101 001fdf63.xml"</i>. Of course, the format of the strings returned by the FTP server can vary from server to server.</returns>
      <param name="remoteFileMask">The file mask of the remote files to retrieve. This parameter can can include a filtering mask to limit the files that are retrieved. For example, if
 is specified, the entire contents of the current working folder will be retrieved. If "*.txt" is used, all the files in the current
working folder that have the TXT extension will be retrieved. <b>Some FTP servers may be case-sensitive!</b></param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.GetRawFolderContents(System.Boolean)">
      <summary>Retrieves an <b>unprocessed</b>, clear text list representing the entire contents of current working folder as sent by the FTP server and indicates if the
entire listing or only filenames should be retrieved.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <returns>A reference to a  collection contain a list of unprocessed strings each representing an item <em>folder</em>. For example: <i>"07-25-03
11:46AM 101 001fdf63.xml"</i>. Of course, the format of the strings returned by the FTP server can vary from server to server.</returns>
      <param name="namesOnly">true if only filenames should be retrieved; false otherwise.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.GetRawFolderContents">
      <summary>Retrieves an <b>unprocessed</b>, clear text list representing the entire contents of current working folder as sent by the FTP server.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred.</exception>
      <returns>A reference to a  collection contain a list of unprocessed strings each representing an item <em>folder</em>. For example: <i>"07-25-03
11:46AM 101 001fdf63.xml"</i>. Of course, the format of the strings returned by the FTP server can vary from server to server.</returns>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.GetUploadStream(System.String)">
      <summary>Retrieves a direct access to the <b>write-only</b> data stream to send to.</summary>
      <returns>The data  to write to.</returns>
      <param name="remoteFilename">The filename of the file to write to. <b>Some FTP servers may be case-sensitive!</b></param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.GetUploadStream(System.String,System.Boolean)">
      <summary>Retrieves a direct access to the <b>write-only</b> data stream to send to, indicating if existing data should be overwritten or appended to.</summary>
      <returns>The data  to write to.</returns>
      <param name="remoteFilename">The filename of the file to write to. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="append">true if existing data should be appended to; false otherwise.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.Login">
      <summary>Login the FTP client <b>anonymously</b> to the FTP server to which it is connected.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.Login(System.String,System.String)">
      <summary>Login the FTP client to the FTP server to which it is connected using the specified username and password.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="userName">The username with which to login into the FTP server.</param>
      <param name="password">The password with which to login into the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.Login(System.String,System.String,System.String)">
      <summary>Login the FTP client to the FTP server to which it is connected using the specified username and password.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="userName">The username with which to login into the FTP server.</param>
      <param name="password">The password with which to login into the FTP server.</param>
      <param name="accountName">The name of the account on the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.ReceiveFile(System.String,System.String)">
      <summary>Receives the specified file from the current working folder and stores it on the local system using the specified path and filename.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="localFilename">The path and filename of the file as it will be stored on the local system.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.ReceiveFile(System.String,System.String,System.Boolean)">
      <summary>Receives the specified file from the current working folder and stores it on the local system using the specified path and filename and indicates if the file
should append itself to the local file if it already exists.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="localFilename">The path and filename of the file as it will be stored on the local system.</param>
      <param name="append">true if the file should append itself to the local file if it already exists; false if the local file should be overwritten.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.ReceiveFile(System.String,System.Int64,System.String)">
      <summary>Receives the specified file from the current working folder starting from the specified offset and stores it on the local system using the specified path and
filename.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="offset">The byte offset (of the remote file) at which to start receiving data from the remote file.</param>
      <param name="localFilename">The path and filename of the file as it will be stored on the local system.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.ReceiveFile(System.String,System.Int64,System.String,System.Boolean)">
      <summary>Receives the specified file from the current working folder starting from the specified offset and stores it on the local system using the specified path and
filename indicating if the file should append itself to the local file if it already exists.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="offset">The byte offset (of the remote file) at which to start receiving data from the remote file. If <paramref name="append" /> is true, the remote file will be appended to the end of
the local file no matter what the value of <paramref name="offset" />. Therefore, to implement a real resume procedure, the size of the local file must be specified in <paramref name="offset" />
and <paramref name="append" /> must be set to true.</param>
      <param name="localFilename">The path and filename of the file as it will be stored on the local system.</param>
      <param name="append">true if the file should append itself to the local file if it already exists; false if the local file should be overwritten.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.ReceiveFile(System.String,System.IO.Stream)">
      <summary>Receives the specified file from the current working folder to the specified .</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="destination">A reference to the  to which to receive the file.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.ReceiveFile(System.String,System.Int64,System.IO.Stream)">
      <summary>Receives the specified file from the FTP server's current working folder into the specified , starting from the specified offset.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="remoteFilename">The filename of the file to retrieve. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="offset">The byte offset (of the remote file) at which to start receiving data from the remote file.</param>
      <param name="destination">A reference to the  to which to receive the file.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.SendFile(System.String)">
      <summary>Sends the specified file to the FTP server's current working folder and stores it using the same filename.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="localFilename">The path and filename of the local file to send.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.SendFile(System.String,System.Boolean)">
      <summary>Sends the specified file to the FTP server's current working folder using the same filename and indicating if it should append itself to the remote file if it
already exists.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="localFilename">The path and filename of the local file to send.</param>
      <param name="append">true if the file should append itself to the remote file if it already exists; false if the remote file should be overwritten.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.SendFile(System.String,System.String)">
      <summary>Sends the specified file to the FTP server's current working folder and stores it using the specified filename.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="localFilename">The path and filename of the local file to send.</param>
      <param name="remoteFilename">The filename as it will be stored on the FTP server. Cannot be empty. <b>Some FTP servers may be case-sensitive!</b></param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.SendFile(System.String,System.String,System.Boolean)">
      <summary>Sends the specified file to the FTP server's current working folder, indicating if it should append itself to the remote file if it already exists, and stores
it using the specified filename.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <param name="localFilename">The path and filename of the local file to send.</param>
      <param name="remoteFilename">The filename as it will be stored on the FTP server. Cannot be empty. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="append">true if the file should append itself to the remote file if it already exists; false if the remote file should be overwritten.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.SendFile(System.IO.Stream,System.String,System.Boolean)">
      <summary>Sends the data from the specified  to the FTP server's current working folder, indicating if it should append itself to the remote file if
it already exists, and stores it using the specified filename.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred.</exception>
      <param name="source">A  whose data is to be sent to the FTP server.</param>
      <param name="remoteFilename">The filename as it will be stored on the FTP server. Cannot be empty. <b>Some FTP servers may be case-sensitive!</b></param>
      <param name="append">true if the file should append itself to the remote file if it already exists; false if the remote file should be overwritten.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.SendFile(System.IO.Stream,System.String)">
      <summary>Sends the data from the specified  to the FTP server's current working folder.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred.</exception>
      <param name="source">A  whose data is to be sent to the FTP server.</param>
      <param name="remoteFilename">The filename as it will be stored on the FTP server. Cannot be empty. <b>Some FTP servers may be case-sensitive!</b></param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.SendFileToUniqueName(System.String)">
      <summary>Sends the specified file to the FTP server's current working folder and stores it using a unique filename.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <returns>A string representing the unique name that was generated for the file that was sent to the FTP server.</returns>
      <param name="localFilename">The path and filename of the local file to send.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpClient.SendFileToUniqueName(System.IO.Stream)">
      <summary>Sends the data from the specified  to the FTP server's current working folder and stores it using a unique filename.</summary>
      <exception caption="" cref="T:Xceed.Ftp.FtpInvalidStateException">Cannot perform the requested operation because the 
            FTP client is in an invalid state.An error reply was returned by the FTP server.An I/O error has occurred.A fatal FTP-specific error has occurred..</exception>
      <returns>A string representing the unique name that was generated for the file that was sent to the FTP server.</returns>
      <param name="source">A  whose data is to be sent to the FTP server.</param>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.Busy">
      <summary>Gets a boolean value indicating if the FTP client is currently performing an FTP operation. For detailed state information, consult the
 property.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.Connected">
      <summary>Gets a boolean value indicating if the FTP client is connected to an FTP server. For detailed state information, consult the 
property.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.DataTransferBufferSize">
      <summary>Gets or sets a value representing the size of the buffer used during data transfers.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.Encoding">
      <summary>Gets or sets the  that is used to encode commands sent to the server, and decode replies and folder listings received from the server.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.FxpPassiveTransfer">
      <summary>Gets or sets a Boolean value indicating if FXP file transfers use the passive method or not to initiate the
data connection.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.HostName">
      <summary>Gets the host name used to connect, or an empty string if not connected.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.KeepAliveInterval">
      <summary>Gets or sets the interval, in seconds, at which a NOOP command is sent on the command channel during a file transfer.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.ListingMethod">
      <summary>Gets the current listing method that is used to retrieve folder contents from the FTP server.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.ListingParsers">
      <summary>Gets a collection of  objects that are used to parse the lines returned by calls to various methods.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.LocalAddress">
      <summary>Gets or sets the local IP address and port from which the FTP client is connected.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.LocalDataAddress">
      <summary>Gets or sets the IP address and port of the client-side data connection to use in <b>subsequent</b> data connections. If
 is <strong>false</strong>, this property represents the address of the client-side listening socket waiting for the
server’s data connection request.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.PassiveTransfer">
      <summary>Gets or sets a boolean value indicating if the FTP client should initiate the data connection rather than the FTP server.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.PreAllocateStorage">
      <summary>Gets or sets a boolean value indicating if the FTP server must reserve enough space <b>before</b> a file is sent.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.Proxy">
      <summary>Gets or sets the proxy client to use for connecting and/or logging in via a proxy server.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.RepresentationType">
      <summary>Gets or sets a value indicating how the data is transferred to and from the FTP server.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.SendTelnetInterruptSignal">
      <summary>Gets or sets a value indicating if the Telnet interrupt signal should be sent before the QUIT command is sent to an FTP server, allowing an FTP server to be
notified that the connection will be terminated. <strong>This property does not apply to the Compact Framework.</strong></summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.SendTypeCommand">
      <summary>Gets or sets a boolean value indicating if the TYPE command should be sent before initiating a file transfer.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.ServerAddress">
      <summary>Gets the IP address and port to which the FTP client is connected.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.ServerFolderSeparator">
      <summary>Gets or sets the FTP server's folder separator character.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.State">
      <summary>Gets a value indicating the current state of the FTP client.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.SynchronizingObject">
      <summary>Gets or sets the object used to automatically redirect events on the main UI thread.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.Timeout">
      <summary>Gets or sets a value, in seconds, indicating after what period of time an FTP operation should timeout.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.TraceWriter">
      <summary>Gets or sets the  which will trace the connection/deconnection process as well as the commands and replies sent to and received from
the FTP server.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.TransferMode">
      <summary>Gets the transfer mode used to send and receive data to and from an FTP server.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpClient.UseRemoteAddress">
      <summary>Gets or sets a value indicating whether to use the remote address.</summary>
    </member>
    <member name="E:Xceed.Ftp.FtpClient.CertificateReceived">
      <summary>Raised when an FTP server's certificate was received and verified.</summary>
    </member>
    <member name="E:Xceed.Ftp.FtpClient.CertificateRequired">
      <summary>Raised when a client certificate is required by the FTP server, or the one provided (if e.Certificate is not a null reference (<b>Nothing</b> in Visual Basic)) was rejected. <b>Note: This event is not
available in Xceed FTP for .NET Compact Framework because this product does not support Secure FTP.</b></summary>
    </member>
    <member name="E:Xceed.Ftp.FtpClient.CommandSent">
      <summary>Raised once for every command sent to the FTP server.</summary>
    </member>
    <member name="E:Xceed.Ftp.FtpClient.Disconnected">
      <summary>Raised when the  method is called as well as when the connection is terminated by the FTP server.</summary>
    </member>
    <member name="E:Xceed.Ftp.FtpClient.FileTransferStatus">
      <summary>Raised for every 4Kb sent or received during a file transfer.</summary>
    </member>
    <member name="E:Xceed.Ftp.FtpClient.MultipleFileTransferError">
      <summary>Raised when an error occurs while transferring <b>multiple</b> files to or from the FTP server to determine what action should be taken.</summary>
    </member>
    <member name="E:Xceed.Ftp.FtpClient.ParsingListingLine">
      <summary>Raised when a listing line is received from the FTP server.</summary>
    </member>
    <member name="E:Xceed.Ftp.FtpClient.ReceivingFile">
      <summary>Raised for each file being received from the FTP server.</summary>
    </member>
    <member name="E:Xceed.Ftp.FtpClient.ReplyReceived">
      <summary>Raised once for each reply received from the FTP server. If a reply contains multiple lines, they will be received as a group.</summary>
    </member>
    <member name="E:Xceed.Ftp.FtpClient.SendingFile">
      <summary>Raised for each file being sent to the FTP server.</summary>
    </member>
    <member name="E:Xceed.Ftp.FtpClient.StateChanged">
      <summary>Raised when the  of the FTP client changes.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpConnection.#ctor(System.String,System.Int32,System.String,System.String)">
      <summary>Initializes a new instance of the FtpConnection class specifying the  and <see cref="P:Xceed.Ftp.FtpConnection.Port" /> of the FTP
server, as well as the <see cref="P:Xceed.Ftp.FtpConnection.UserName" /> and <see cref="P:Xceed.Ftp.FtpConnection.Password" /> used to connect.</summary>
      <param name="hostName">The hostname of the FTP server to which to establish a connection.</param>
      <param name="port">The port of the FTP server to which to establish a connection.</param>
      <param name="userName">The username used to connect to the FTP server.</param>
      <param name="password">The password used to connect to the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpConnection.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the FtpConnection class specifying the  of the FTP server, as well as the
<see cref="P:Xceed.Ftp.FtpConnection.UserName" /> and <see cref="P:Xceed.Ftp.FtpConnection.Password" /> used to connect.</summary>
      <param name="hostName">The hostname of the FTP server to which to establish a connection.</param>
      <param name="userName">The username used to connect to the FTP server.</param>
      <param name="password">The password used to connect to the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpConnection.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the FtpConnection class specifying the  and <see cref="P:Xceed.Ftp.FtpConnection.Port" /> of the FTP
server.</summary>
      <param name="hostName">The hostname of the FTP server to which to establish a connection.</param>
      <param name="port">The port of the FTP server to which to establish a connection.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpConnection.#ctor(System.String)">
      <summary>Initializes a new instance of the FtpConnection class specifying the  of the FTP server.</summary>
      <param name="hostName">The hostname of the FTP server to which to establish a connection.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpConnection.#ctor(System.Net.IPEndPoint,System.String,System.String)">
      <summary>Initializes a new instance of the FtpConnection class specifying the IP address and port of the FTP server, as well as the 
and <see cref="P:Xceed.Ftp.FtpConnection.Password" /> used to connect.</summary>
      <param name="serverAddress">The IP address and port of the FTP server to which to establish a connection.</param>
      <param name="userName">The username used to connect to the FTP server.</param>
      <param name="password">The password used to connect to the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpConnection.#ctor(System.Net.IPEndPoint)">
      <summary>Initializes a new instance of the FtpConnection class specifying the IP address and port of the FTP server.</summary>
      <param name="serverAddress">The IP address and port of the FTP server to which to establish a connection.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpConnection.#ctor(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean)">
      <summary>Initializes a new instance of the FtpConnection class specifying the  and <see cref="P:Xceed.Ftp.FtpConnection.Port" /> of the FTP
server, various SSL parameters, as well as the <see cref="P:Xceed.Ftp.FtpConnection.UserName" /> and <see cref="P:Xceed.Ftp.FtpConnection.Password" /> used to connect. <b>Note: This
method is not available in Xceed FTP for .NET Compact Framework because this product does not support Secure FTP.</b></summary>
      <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if <paramref name="implicitAuthentication" /> is true; otherwise, 21 is used.</param>
      <param name="userName">The username used to connect to the FTP server.</param>
      <param name="password">The password used to connect to the FTP server.</param>
      <param name="authenticationMethod">The authentication method to use when connecting to the FTP server.</param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
      <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null.</param>
      <param name="dataChannelProtection">The  used during the communication. Ignored if <paramref name="implicitAuthentication" /> is true.</param>
      <param name="implicitAuthentication">If true, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the SSL
handshake.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpConnection.#ctor(System.String,System.Int32,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean)">
      <summary>Initializes a new instance of the FtpConnection class specifying the  and <see cref="P:Xceed.Ftp.FtpConnection.Port" /> of the FTP
server as well as various SSL parameters. Login is anonymous. <b>Note: This method is not available in Xceed FTP for .NET Compact Framework because this
product does not support Secure FTP.</b></summary>
      <param name="hostName">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if <paramref name="implicitAuthentication" /> is true; otherwise, 21 is used.</param>
      <param name="authenticationMethod">The authentication method to use when connecting to the FTP server.</param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
      <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null.</param>
      <param name="dataChannelProtection">The  used during the communication. Ignored if <paramref name="implicitAuthentication" /> is true.</param>
      <param name="implicitAuthentication">If true, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the SSL
handshake.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpConnection.CloseConnections">
      <summary>Close any pending connections.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpConnection.Finalize">
      <summary>Allows the FtpConnection object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpConnection.TestConnection">
      <summary>Tests if a connection with the specified FTP server is possible before the FtpConnection instance is passed to  or <see cref="T:Xceed.Ftp.FtpFolder" />
objects.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpConnection.Dispose">
      <summary>Release all cached connections.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.ClearCommandChannel">
      <summary>Gets or sets a value indicating whether to clear the command channel after login to facilitate firewall NAT when using a secure data channel.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.DefaultRepresentationType">
      <summary>Gets or sets the <b>default</b> value indicating how the data is transferred to and from the FTP server.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.Encoding">
      <summary>Gets or sets the  that is used to encode commands sent to the server, and decode replies and folder listings received from the server.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.FxpPassiveTransfer">
      <summary>Gets or sets a Boolean value indicating if FXP file transfers use the passive method or not to initiate the
data connection.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.FxpTransferPolicy">
      <summary>Gets or sets a FxpTransferPolicy value that indicates if <see cref="c3daf3df-1662-4ec2-aee9-cf54c2cd342d">FXP file transfers</see> are allowed and what kind of transfers can be made.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.HostName">
      <summary>Gets the hostname of the FTP server to which a connection has been established.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.KeepAliveInterval">
      <summary>Gets or sets the interval, in seconds, at which a NOOP command is sent on the command channel while idle or during a file transfer.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.ListingMethod">
      <summary>Gets or sets the ListingMethod that will be used to retrieve folder contents from the FTP server.</summary>
      <exception caption="" cref="System.NotSupportedException">If the listing method is set after connections have been made to the FTP server.</exception>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.ListingParsers">
      <summary>Gets a collection of  objects that are used to parse the lines returned by calls to various methods.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.LocalAddress">
      <summary>Gets or sets the client-side IP address and port.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.LocalDataAddress">
      <summary>Gets or sets the IP address and port of the client-side data connection to use in <b>subsequent</b> data connections. If
 is false, this property represents the address of the client-side listening socket waiting for the server’s data
connection request.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.PassiveTransfer">
      <summary>Gets or sets a boolean value indicating whether the data connection should be established by the FTP server rather than by the client-side.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.Password">
      <summary>Gets the password used to connect to the FTP server.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.Port">
      <summary>Gets the port of the FTP server to which a connection has been established.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.PreAllocateStorage">
      <summary>Gets or sets a boolean value indicating if the FTP server must reserve enough space <b>before</b> a file is sent.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.Proxy">
      <summary>Gets or sets the active proxy client for connecting to the FTP server.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.SendTypeCommand">
      <summary>Gets or sets a boolean value indicating if the TYPE command should be sent before initiating a file transfer.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.ServerAddress">
      <summary>Gets the IP address and port of the FTP server to which a connection has been established.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.ServerFolderSeparator">
      <summary>Gets or sets the FTP server's folder separator character.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.SynchronizingObject">
      <summary>Gets or sets the object used to automatically redirect events on the main UI thread.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.Timeout">
      <summary>Gets or sets a value, in seconds, indicating after what period of time an FTP operation should timeout.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.TraceWriter">
      <summary>Gets or sets the  which will trace the communications between the client-side and the FTP server.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.TransferMode">
      <summary>Gets or sets the transfer mode used to send and receive data to and from an FTP server.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.UseRemoteAddress">
      <summary>Gets or sets a value indicating whether to use the remote address.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpConnection.UserName">
      <summary>Gets the username used to connect to the FTP server.</summary>
    </member>
    <member name="E:Xceed.Ftp.FtpConnection.CertificateReceived">
      <summary>Raised when an FTP server's certificate has been received and verified. <b>Note: This event is not available in Xceed FTP for .NET Compact Framework because
this product does not support Secure FTP.</b></summary>
    </member>
    <member name="E:Xceed.Ftp.FtpConnection.CertificateRequired">
      <summary>Raised when a client certificate is required by the FTP server, or the one provided (if e.Certificate is not a null reference (<b>Nothing</b> in Visual Basic)) was rejected.</summary>
    </member>
    <member name="E:Xceed.Ftp.FtpConnection.ParsingListingLine">
      <summary>Raised when a listing line is received from the FTP server.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpDosListingParser.ParseLine(System.String)">
      <summary>Parses the specified listing line received from the FTP server.</summary>
      <returns>A reference to an  object containing the information that was parsed from the listing line received from the FTP server. Can be
<see cref="P:Xceed.Ftp.FtpItemInfo.Empty" /> to indicate that the line was recognized but more information is required (for example, VMS listings are on 2 lines). Can be
a null reference (<b>Nothing</b> in Visual Basic) to indicate that the listing line was not recognized as a valid Windows or DOS listing line.</returns>
      <param name="line">The listing line received from the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpException.#ctor(System.String)">
      <summary>Initializes a new instance of the FtpException class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the FtpException class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFile.#ctor(Xceed.Ftp.FtpConnection,System.String)">
      <summary>Initializes a new instance of the FtpFile class specifying the  object that represents the connection with an FTP server as well as
the fully qualified name of an underlying physical file.</summary>
      <param name="connection">A reference to an  object that represents the connection with an FTP server.</param>
      <param name="fullName">The fully qualified name of the file which may or may not physically exist. <b>Some FTP servers may be case-sensitive!</b></param>
    </member>
    <member name="M:Xceed.Ftp.FtpFile.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
      <summary>Creates the physical file.</summary>
      <param name="session">A reference to a  object which is responsible for raising all events that occur during the process.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFile.DoCreateWrite(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare,System.IO.FileOptions)">
      <summary>Creates the file and opens it for writing.</summary>
      <returns>A  object that can be used to write data to the file.</returns>
      <param name="session">A reference to a  object which is responsible for raising all events that occur during the process.</param>
      <param name="share">A  constant that determines how the file will be shared by different processes.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFile.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
      <summary>Permanently deletes the physical item.</summary>
      <param name="session">A reference to a  object which is responsible for raising all events that occur during the process.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFile.DoOpenRead(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare,System.IO.FileOptions)">
      <summary>Opens the file for reading.</summary>
      <returns>A  object that can be used to read data from the file.</returns>
      <param name="session">A reference to a  object which is responsible for raising all events that occur during the process.</param>
      <param name="share">A  constant that determines how the file will be shared by different processes.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFile.DoOpenWrite(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare,System.IO.FileOptions)">
      <summary>Opens the file for writing.</summary>
      <returns>A  object that can be used to write data to the file.</returns>
      <param name="session">A reference to a  object which is responsible for raising all events that occur during the process.</param>
      <param name="overwrite">true if existing data should be replaced; false if existing data should be preserved, appending new data at the end.</param>
      <param name="share">A  constant that determines how the file will be shared by different processes.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFile.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
      <summary>Re-reads the information from the physical file.</summary>
      <param name="session">A reference to a  object which is responsible for raising all events that occur during the process.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFile.IsPathRooted(System.String)">
      <summary>Returns a boolean value indicating if the path passed is rooted.</summary>
      <returns>true if the path is rooted (for example: "\\folder\file.txt"); false otherwise.</returns>
      <param name="path">The path to verify.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFile.IsSameAs(Xceed.FileSystem.FileSystemItem)">
      <summary>Gets a boolean value indicating if the source and target items represent the same physical entity.</summary>
      <returns>true if the source and target  objects represent the same physical entity; false otherwise.</returns>
      <param name="target">A  object representing the destination item.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFile.OpenRead(Xceed.Ftp.RepresentationType)">
      <summary>Opens the file for reading using the specified .</summary>
      <returns>A  object that can be used to read data from the file.</returns>
      <param name="representationType">A  value indicating how the data is transferred from the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFile.OpenRead(System.IO.FileShare,Xceed.Ftp.RepresentationType)">
      <summary>Opens the file for reading with the specified file sharing mode and .</summary>
      <returns>A  object that can be used to read data from the file.</returns>
      <param name="share">A  constant that determines how the file will be shared by different processes.</param>
      <param name="representationType">A  value indicating how the data is transferred from the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFile.OpenRead(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.Ftp.RepresentationType)">
      <summary>Opens the file for reading using the specified  and raises events during the process.</summary>
      <returns>A  object that can be used to read data from the file.</returns>
      <param name="events">A  object that will be used to raise events. Cannot be a null reference (<b>Nothing</b> in Visual Basic).</param>
      <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
      <param name="representationType">A  value indicating how the data is transferred from the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFile.OpenRead(Xceed.FileSystem.FileSystemEvents,System.Object,System.IO.FileShare,Xceed.Ftp.RepresentationType)">
      <summary>Opens the file for reading using the specified file sharing mode and  and raises events during the process.</summary>
      <returns>A  object that can be used to read data from the file.</returns>
      <param name="events">A  object that will be used to raise events. Cannot be a null reference (<b>Nothing</b> in Visual Basic).</param>
      <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
      <param name="share">A  constant that determines how the file will be shared by different processes.</param>
      <param name="representationType">A  value indicating how the data is transferred from the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFile.OpenWrite(System.Boolean,Xceed.Ftp.RepresentationType)">
      <summary>Opens the file for writing using the specified  and indicating if existing data should be replaced.</summary>
      <returns>A  object that can be used to write data to the file.</returns>
      <param name="overwrite">true if existing data should be replaced; false if existing data should be preserved, appending new data at the end.</param>
      <param name="representationType">A  value indicating how the data is transferred to the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFile.OpenWrite(System.Boolean,System.IO.FileShare,Xceed.Ftp.RepresentationType)">
      <summary>Opens the file for writing using the specified file sharing mode and  and indicating if existing data should be replaced.</summary>
      <returns>A  object that can be used to write data to the file.</returns>
      <param name="overwrite">true if existing data should be replaced; false if existing data should be preserved, appending new data at the end.</param>
      <param name="share">A  constant that determines how the file will be shared by different processes.</param>
      <param name="representationType">A  value indicating how the data is transferred to the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFile.OpenWrite(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean,Xceed.Ftp.RepresentationType)">
      <summary>Opens the file for writing using the specified  and indicating if existing data should be replaced, while raising events during
the process.</summary>
      <returns>A  object that can be used to write data to the file.</returns>
      <param name="events">A  object that will be used to raise events. Cannot be a null reference (<b>Nothing</b> in Visual Basic).</param>
      <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
      <param name="overwrite">true if existing data should be replaced; false if existing data should be preserved, appending new data at the end.</param>
      <param name="representationType">A  value indicating how the data is transferred to the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFile.OpenWrite(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean,System.IO.FileShare,Xceed.Ftp.RepresentationType)">
      <summary>Opens the file for writing using the specified file sharing mode, , and indicating if existing data should be replaced, while
raising events during the process.</summary>
      <returns>A  object that can be used to write data to the file.</returns>
      <param name="events">A  object that will be used to raise events. Cannot be a null reference (<b>Nothing</b> in Visual Basic).</param>
      <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
      <param name="overwrite">true if existing data should be replaced; false if existing data should be preserved, appending new data at the end.</param>
      <param name="share">A  constant that determines how the file will be shared by different processes.</param>
      <param name="representationType">A  value indicating how the data is transferred to the FTP server.</param>
    </member>
    <member name="P:Xceed.Ftp.FtpFile.BatchUpdateable">
      <summary>Returns null (Nothing in Visual Basic) since an  or an <see cref="T:Xceed.Ftp.FtpFolder" /> does not support the <see cref="T:Xceed.FileSystem.IBatchUpdateable" />
interface.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFile.Connection">
      <summary>Gets the  object that represents the connection with an FTP server</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFile.DoAttributes">
      <summary>Gets or sets the attributes of the item.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFile.DoCreationDateTime">
      <summary>Gets or sets the creation date and time of the file.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFile.DoExists">
      <summary>Gets a boolean value indicating if the file physically exists.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFile.DoFullName">
      <summary>Gets the full name of the file.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFile.DoHasAttributes">
      <summary>Gets a boolean value indicating if the file supports attributes.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFile.DoHasCreationDateTime">
      <summary>Gets a boolean value indicating if the file supports having a creation date and time.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFile.DoHasLastAccessDateTime">
      <summary>Gets a boolean value indicating if the file supports having a last access date and time.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFile.DoLastAccessDateTime">
      <summary>Gets or sets the last access date and time of the file.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFile.DoLastWriteDateTime">
      <summary>Gets or sets the modification date and time of the file.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFile.DoName">
      <summary>Gets or sets the short name of the file.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFile.DoParentFolder">
      <summary>Gets a reference to the parent folder of this file.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFile.DoRootFolder">
      <summary>Gets a reference to the root folder of this file.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFile.DoSize">
      <summary>Gets the size of the file in bytes.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFile.HostedFullName">
      <summary>Gets a human-readable full pathname starting with "ftp://hostname" representing the fully qualified path of all host files containing the item and the path of
the item itself.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpFolder.#ctor(Xceed.Ftp.FtpConnection)">
      <summary>Initializes a new instance of the FtpFolder class specifying the  object that represents the connection with an FTP server.</summary>
      <param name="connection">A reference to an  object that represents the connection with an FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFolder.#ctor(Xceed.Ftp.FtpConnection,System.String)">
      <summary>Initializes a new instance of the FtpFolder class specifying the  object that represents the connection with an FTP server as well
as the fully qualified name of an underlying physical folder.</summary>
      <param name="connection">A reference to an  object that represents the connection with an FTP server.</param>
      <param name="fullName">The fully qualified name of the file which may or may not physically exist. <b>Some FTP servers may be case-sensitive!</b></param>
    </member>
    <member name="M:Xceed.Ftp.FtpFolder.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
      <summary>Creates the physical folder.</summary>
      <param name="session">A reference to a  object which is responsible for raising all events that occur during the process.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFolder.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
      <summary>Permanently deletes the physical item.</summary>
      <param name="session">A reference to a  object which is responsible for raising all events that occur during the process.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFolder.DoGetChildItems(Xceed.FileSystem.FileSystemEventsSession)">
      <summary>Retrieves an array of  objects.</summary>
      <returns>An array of  objects representing the items ( files and folders ) contained within the folder.</returns>
      <param name="session">A reference to a  object which is responsible for raising all events that occur during the process.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFolder.DoGetFile(Xceed.FileSystem.FileSystemEventsSession,System.String)">
      <summary>Retrieves a reference to an  object.</summary>
      <returns>A reference to an  object regardless of if the file represented by the object exists or not.</returns>
      <param name="session">A reference to a  object which is responsible for raising all events that occur during the process.</param>
      <param name="fileName">The name of the file to retrieve.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFolder.DoGetFolder(Xceed.FileSystem.FileSystemEventsSession,System.String)">
      <summary>Retrieves a reference to an  object.</summary>
      <returns>A reference to an  object regardless of if the folder represented by the object exists or not.</returns>
      <param name="session">A reference to a  object which is responsible for raising all events that occur during the process.</param>
      <param name="folderName">The name of the folder to retrieve.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFolder.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
      <summary>For an FTP folder, we cannot force a refresh on every request as it would simply make useless round-trips to the FTP server. The whole refresh scheme is the
responsibility of the FtpConnection.</summary>
      <param name="session">A reference to a  object which is responsible for raising all events that occur during the process.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFolder.IsPathRooted(System.String)">
      <summary>Returns a boolean value indicating if the path passed is rooted.</summary>
      <returns>true if the path is rooted (for example: "\\folder"); false otherwise.</returns>
      <param name="path">The path to verify.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpFolder.IsSameAs(Xceed.FileSystem.FileSystemItem)">
      <summary>Gets a boolean value indicating if the source and target items represent the same physical entity.</summary>
      <returns>true if the source and target  objects represent the same physical entity; false otherwise.</returns>
      <param name="target">A  object representing the destination item.</param>
    </member>
    <member name="P:Xceed.Ftp.FtpFolder.BatchUpdateable">
      <summary>Returns null (Nothing in Visual Basic) since an  or an <see cref="T:Xceed.Ftp.FtpFolder" /> does not support the <see cref="T:Xceed.FileSystem.IBatchUpdateable" />
interface.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFolder.Connection">
      <summary>Gets the  object that represents the connection with an FTP server</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFolder.DoAttributes">
      <summary>Gets or sets the attributes of the item.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFolder.DoCreationDateTime">
      <summary>Gets or sets the creation date and time of the folder.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFolder.DoExists">
      <summary>Gets a boolean value indicating if the folder physically exists.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFolder.DoFullName">
      <summary>Gets the full name of the folder.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFolder.DoHasAttributes">
      <summary>Gets a boolean value indicating if the folder supports attributes.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFolder.DoHasCreationDateTime">
      <summary>Gets a boolean value indicating if the folder supports having a creation date and time.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFolder.DoHasLastAccessDateTime">
      <summary>Gets a boolean value indicating if the folder supports having a last access date and time.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFolder.DoIsRoot">
      <summary>Gets a boolean value indicating if the folder is a root folder.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFolder.DoLastAccessDateTime">
      <summary>Gets or sets the last access date and time of the folder.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFolder.DoLastWriteDateTime">
      <summary>Gets or sets the modification date and time of the folder.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFolder.DoName">
      <summary>Gets or sets the short name of the folder.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFolder.DoParentFolder">
      <summary>Gets a reference to the parent folder of this folder.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFolder.DoRootFolder">
      <summary>Gets a reference to the root folder of this folder.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpFolder.HostedFullName">
      <summary>Gets a human-readable full pathname starting with "ftp://hostname" representing the fully qualified path of all host files containing the item and the path of
the item itself.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpInternalException.#ctor">
      <summary>Initializes a new instance of the FtpInternalException class.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpInternalException.#ctor(System.String)">
      <summary>Initializes a new instance of the FtpInternalException class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpInternalException.#ctor(System.Exception)">
      <summary>Initializes a new instance of the FtpInternalException class with a reference to the inner exception that is the cause of this exception.</summary>
      <param name="inner">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpInternalException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the FtpInternalException class with a specified error message and a reference to the inner exception that is the cause of this
exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpInvalidStateException.#ctor">
      <summary>Initializes a new instance of the FtpInvalidStateException class.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpInvalidStateException.#ctor(System.String)">
      <summary>Initializes a new instance of the FtpInvalidStateException class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpIOException.#ctor(System.String)">
      <summary>Initializes a new instance of the FtpIOException class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpIOException.#ctor(System.Exception)">
      <summary>Initializes a new instance of the FtpIOException class with a reference to the inner exception that is the cause of this exception.</summary>
      <param name="inner">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpIOException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the FtpIOException class with a specified error message and a reference to the inner exception that is the cause of this
exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpItemInfo.#ctor">
      <summary>This constructor is reserved for internal use and is not intended to be used directly from your code. Your FtpListingParser should call
.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpItemInfo.DateTime">
      <summary>Gets or sets the date and time of the item, or DateTime.MinDate if the date is unknown or not applicable.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpItemInfo.Empty">
      <summary>Gets an empty FtpItemInfo object.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpItemInfo.IsEmpty">
      <summary>Gets a boolean value indicating if the FtpItemInfo object is uninitialized.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpItemInfo.Name">
      <summary>Gets or sets the name of the item.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpItemInfo.Size">
      <summary>Gets or sets the size of the item, or -1 if the size is unknown or not applicable.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpItemInfo.Type">
      <summary>Gets or sets the type of the item.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpItemInfoList.Add(Xceed.Ftp.FtpItemInfo)">
      <summary>Adds a  object to the list.</summary>
      <returns>The zero-based index at which the  object was added.</returns>
      <param name="value">The  object to add.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpItemInfoList.AddRange(Xceed.Ftp.FtpItemInfo[])">
      <summary>Adds the elements of a  array to the end of the FtpItemInfoList collection.</summary>
      <param name="values">An array of  objects representing the <see cref="T:Xceed.Ftp.FtpItemInfo" /> objects to add to the end of the FtpItemInfoList collection</param>
    </member>
    <member name="M:Xceed.Ftp.FtpItemInfoList.Clear">
      <summary>Removes all  objects from the list.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpItemInfoList.Contains(Xceed.Ftp.FtpItemInfo)">
      <summary>Retrieves a boolean value indicating if a specific  object exists in the list.</summary>
      <returns>true if the  object exists in the list; false otherwise.</returns>
      <param name="value">The  object to locate.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpItemInfoList.IndexOf(Xceed.Ftp.FtpItemInfo)">
      <summary>Searches for the specified  object and returns the zero-based index of the first occurrence within the list.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire list, if found; otherwise, returns -1.</returns>
      <param name="value">The  object to locate.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpItemInfoList.Insert(System.Int32,Xceed.Ftp.FtpItemInfo)">
      <summary>Inserts a  object into the list at the specified index</summary>
      <param name="index">The zero-based index at which to insert the  object.</param>
      <param name="value">The  object to insert.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpItemInfoList.OnValidate(System.Object)">
      <summary>Performs additional custom processes when validating a value.</summary>
      <param name="value">The object to validate.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpItemInfoList.Remove(Xceed.Ftp.FtpItemInfo)">
      <summary>Removes the  object from the list.</summary>
      <param name="value">The  object to remove.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpItemInfoList.RemoveAt(System.Int32)">
      <summary>Removes the  object from the list at the specified index.</summary>
      <param name="index">The zero-based index at which to remove the  object.</param>
    </member>
    <member name="P:Xceed.Ftp.FtpItemInfoList.IsFixedSize">
      <summary>Gets a value indicating whether the FtpItemInfoList has a fixed size.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpItemInfoList.IsReadOnly">
      <summary>Gets a boolean value indicating if the FtpItemInfoList is readonly.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpItemInfoList.Item(System.Int32)">
      <summary>Gets or sets the  object at the specified index.</summary>
      <param name="index">The zero-based index at which to get the  object.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpListingParser.CreateItem">
      <summary>Creates a new  object.</summary>
      <returns>A reference to a new  object.</returns>
    </member>
    <member name="M:Xceed.Ftp.FtpListingParser.ParseLine(System.String)">
      <summary>Parses the specified listing line received from the FTP server.</summary>
      <returns>A reference to an  object containing the information that was parsed from the listing line received from the FTP server. Can be
<see cref="P:Xceed.Ftp.FtpItemInfo.Empty" /> to indicate that the listing line was recognized but more information is required (for example, VMS listings are on 2 lines).</returns>
      <param name="line">The listing line received from the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpListingParserList.Add(Xceed.Ftp.FtpListingParser)">
      <summary>Adds a  object to the list.</summary>
      <returns>The zero-based index at which the  object was added.</returns>
      <param name="value">The  object to add.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpListingParserList.AddRange(Xceed.Ftp.FtpListingParser[])">
      <summary>Adds the elements of a  object array to the end of the FtpListingParserList collection.</summary>
      <param name="values">An array of  objects representing the <see cref="T:Xceed.Ftp.FtpListingParser" /> objects to add to the end of the FtpListingParserList
collection.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpListingParserList.Clear">
      <summary>Removes all  objects from the list.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpListingParserList.Contains(Xceed.Ftp.FtpListingParser)">
      <summary>Retrieves a boolean value indicating if a specific  object exists in the list.</summary>
      <returns>true if the  object exists in the list; false otherwise.</returns>
      <param name="value">The  object to locate.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpListingParserList.IndexOf(Xceed.Ftp.FtpListingParser)">
      <summary>Searches for the specified  object and returns the zero-based index of the first occurrence within the list.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire list, if found; otherwise, returns -1.</returns>
      <param name="value">The  object to locate.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpListingParserList.Insert(System.Int32,Xceed.Ftp.FtpListingParser)">
      <summary>Inserts a  object into the list at the specified index</summary>
      <param name="index">The zero-based index at which to insert the  object.</param>
      <param name="value">The  object to insert.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpListingParserList.OnParsingListingLine(Xceed.Ftp.FtpItemInfo,System.String,System.Boolean@)">
      <summary>Raises the  event.</summary>
      <param name="item">An  object containing the information relative to an item (file, folder or link) on an FTP server.</param>
      <param name="line">The line from which the  was created.</param>
      <param name="valid">true if the line represents a valid item; false otherwise.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpListingParserList.OnValidate(System.Object)">
      <summary>Performs additional custom processes when validating a value.</summary>
      <param name="value">The object to validate.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpListingParserList.ParseListing">
      <summary>Parses a raw (unprocessed) folder listing, querying if each FtpListingParser can retrieve relevant
information from each line.</summary>
      <returns>A  of <see cref="T:Xceed.Ftp.FtpItemInfo" /> objects each representing the listing information of an FTP item.</returns>
    </member>
    <member name="M:Xceed.Ftp.FtpListingParserList.Remove(Xceed.Ftp.FtpListingParser)">
      <summary>Removes the  object from the list.</summary>
      <param name="value">The  object to remove.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpListingParserList.RemoveAt(System.Int32)">
      <summary>Removes the  object from the list at the specified index.</summary>
      <param name="index">The zero-based index at which to remove the  object.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpListingParserList.ParseListing(System.String[])">
      <summary>Parses a raw (unprocessed) folder listing, querying if each FtpListingParser can retrieve relevant
information from each line.</summary>
      <returns>An FtpItemInfoList of <see cref="Xceed.Ftp.v5.6~Xceed.Ftp.FtpItemInfo.html">FtpItemInfo</see> objects,
each representing the listing information of an FTP item.</returns>
      <param name="lines">A string array that represents the raw (unprocessed) folder listing lines to parse.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpListingParserList.ParseListing(Xceed.Ftp.StringList)">
      <summary>Parses a raw (unprocessed) folder listing, querying if each FtpListingParser can retrieve relevant
information from each line.</summary>
      <returns>An FtpItemInfoList of <see cref="Xceed.Ftp.v5.6~Xceed.Ftp.FtpItemInfo.html">FtpItemInfo</see> objects,
each representing the listing information of an FTP item.</returns>
      <param name="lines">The raw (unprocessed) folder listing lines to parse.</param>
    </member>
    <member name="P:Xceed.Ftp.FtpListingParserList.IsFixedSize">
      <summary>Gets a value indicating whether the FtpListingParserList has a fixed size.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpListingParserList.IsReadOnly">
      <summary>Gets a boolean value indicating if the FtpListingParserList is readonly.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpListingParserList.Item(System.Int32)">
      <summary>Gets or sets the  object at the specified index.</summary>
      <param name="index">The zero-based index at which to get the  object.</param>
    </member>
    <member name="E:Xceed.Ftp.FtpListingParserList.ParsingListingLine">
      <summary>Raised for each folder listing line sent by the FTP server and allows you to manually parse the lines.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpMachineListingParser.#ctor">
      <summary>Initializes a new instance of the FtpMachineListingParser class.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpMachineListingParser.ParseLine(System.String)">
      <summary>Parses the specified listing line received from the FTP server.</summary>
      <exception caption="" cref="System.InvalidOperationException">If the 'Type' fact is not present in the listing line.</exception>
      <returns>A reference to a FtpItemInfo object containing the information that was parsed from the listing line
received from the FTP server. a null reference (<b>Nothing</b> in Visual Basic) if the listing has ended.</returns>
      <param name="line">The listing line received from the FTP server. Can be a null reference (<b>Nothing</b> in Visual Basic).</param>
    </member>
    <member name="M:Xceed.Ftp.FtpReply.ToString">
      <summary>Returns a string representing the reply received from the FTP server.</summary>
      <returns>A string representing the reply received from the FTP server. For example:
<pre><code>
230-The response `guest' is not valid.
230-Next time please use your e-mail address as password.
230 Guest login ok, access restrictions apply.
</code></pre></returns>
    </member>
    <member name="P:Xceed.Ftp.FtpReply.Lines">
      <summary>Gets the lines returned by the FTP server as a reply to a command.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpReply.Message">
      <summary>Gets the text following the last line of the full text returned by the FTP server <b>without</b> the reply code.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpReply.ReplyCode">
      <summary>Gets the reply code returned by the FTP server.</summary>
    </member>
    <member name="P:Xceed.Ftp.FtpReply.Type">
      <summary>Gets a value representing the type of reply received from the FTP server.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpReplyException.#ctor(Xceed.Ftp.FtpReply,System.String)">
      <summary>Initializes a new instance of the FtpReplyException class with a specified  and error message.</summary>
      <param name="reply">The  received from the FTP server.</param>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpReplyException.#ctor(Xceed.Ftp.FtpReply)">
      <summary>Initializes a new instance of the FtpReplyException class with a specified .</summary>
      <param name="reply">The  received from the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpReplyException.ToString">
      <summary>Returns a string representation of the current exception including the reply that was received from the FTP server.</summary>
      <returns>A string representation of the current exception including the reply that was received from the FTP server.</returns>
    </member>
    <member name="P:Xceed.Ftp.FtpReplyException.Reply">
      <summary>Gets the  received from the FTP server.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpTimeoutException.#ctor">
      <summary>Initializes a new instance of the FtpTimeoutException class.</summary>
    </member>
    <member name="M:Xceed.Ftp.FtpTimeoutException.#ctor(System.String)">
      <summary>Initializes a new instance of the FtpTimeoutException class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpUnixListingParser.ParseLine(System.String)">
      <summary>Parses the specified listing line received from the FTP server.</summary>
      <returns>A reference to an  object containing the information that was parsed from the listing line received from the FTP server. Can be
<see cref="P:Xceed.Ftp.FtpItemInfo.Empty" /> to indicate that the line was recognized but more information is required (for example, VMS listings are on 2 lines). Can be
a null reference (<b>Nothing</b> in Visual Basic) to indicate that the listing line was not recognized as a valid UNIX listing line.</returns>
      <param name="line">The listing line received from the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.FtpVmsListingParser.ParseLine(System.String)">
      <summary>Parses the specified listing line received from the FTP server.</summary>
      <returns>A reference to an  object containing the information that was parsed from the listing line received from the FTP server. Can be
<see cref="P:Xceed.Ftp.FtpItemInfo.Empty" /> to indicate that the line was recognized but more information is required (for example, VMS listings are on 2 lines). Can be
a null reference (<b>Nothing</b> in Visual Basic) to indicate that the listing line was not recognized as a valid VMS listing line.</returns>
      <param name="line">The listing line received from the FTP server.</param>
    </member>
    <member name="M:Xceed.Ftp.HttpProxyClient.#ctor(System.String)">
      <summary>Creates a new HttpProxyClient for connecting to the specified HTTP proxy server hostname. If no port number is specified in the hostName string, port 80 is
used.</summary>
      <param name="hostName">The hostname of the HTTP proxy server to connect to.</param>
    </member>
    <member name="M:Xceed.Ftp.HttpProxyClient.#ctor(System.String,System.String,System.String)">
      <summary>Creates a new HttpProxyClient for connecting to the specified HTTP proxy server hostname, using the specified userName and password credentials. If no port
number is specified in the hostName string, port 80 is used.</summary>
      <param name="hostName">The hostname of the HTTP proxy server to connect to.</param>
      <param name="userName">The username to use to log into the HTTP proxy server.</param>
      <param name="password">The password to use to log into the HTTP proxy server.</param>
    </member>
    <member name="M:Xceed.Ftp.HttpProxyClient.#ctor(System.String,System.Int32)">
      <summary>Creates a new HttpProxyClient for connecting to the specified HTTP proxy server hostname and port number.</summary>
      <param name="hostName">The hostname of the HTTP proxy server to connect to.</param>
      <param name="port">The port on the HTTP proxy server to connect to.</param>
    </member>
    <member name="M:Xceed.Ftp.HttpProxyClient.#ctor(System.String,System.Int32,System.String,System.String)">
      <summary>Creates a new HttpProxyClient for connecting to the specified HTTP proxy server hostname and port number, using the specified userName and password
credentials.</summary>
      <param name="hostName">The hostname of the HTTP proxy server to connect to.</param>
      <param name="port">The port on the HTTP proxy server to connect to.</param>
      <param name="userName">The username used to log into the HTTP proxy server.</param>
      <param name="password">The password used to log into the HTTP proxy server.</param>
    </member>
    <member name="M:Xceed.Ftp.HttpProxyClient.#ctor(System.Net.IPEndPoint)">
      <summary>Creates a new HttpProxyClient for connecting to the specified HTTP proxy server address.</summary>
      <param name="address">The HTTP proxy server address to connect to.</param>
    </member>
    <member name="M:Xceed.Ftp.HttpProxyClient.#ctor(System.Net.IPEndPoint,System.String,System.String)">
      <summary>Creates a new HttpProxyClient for connecting to the specified HTTP proxy server hostname, using the specified userName and password credentials.</summary>
      <param name="address">The HTTP proxy server address to connect to.</param>
      <param name="userName">The username used to log into the HTTP proxy server.</param>
      <param name="password">The password used to log into the HTTP proxy server.</param>
    </member>
    <member name="M:Xceed.Ftp.HttpReply.ToString">
      <summary>Returns a string representation of the reply received from the HTTP proxy server.</summary>
      <returns>A string that represents the reply received from the HTTP proxy server</returns>
    </member>
    <member name="P:Xceed.Ftp.HttpReply.Content">
      <summary>Gets the content of the HTTP response's body.</summary>
    </member>
    <member name="P:Xceed.Ftp.HttpReply.ContentLength">
      <summary>Gets the size of the HTTP response's body.</summary>
    </member>
    <member name="P:Xceed.Ftp.HttpReply.ContentType">
      <summary>Gets the media type of the HTTP response's body.</summary>
    </member>
    <member name="P:Xceed.Ftp.HttpReply.Lines">
      <summary>Gets the lines returned by the HTTP proxy server without the response's body.</summary>
    </member>
    <member name="P:Xceed.Ftp.HttpReply.ReasonPhrase">
      <summary>Gets the reason associated with the reply code returned by the server.</summary>
    </member>
    <member name="P:Xceed.Ftp.HttpReply.ReplyCode">
      <summary>Gets the reply code returned by the server.</summary>
    </member>
    <member name="P:Xceed.Ftp.HttpReply.Type">
      <summary>Gets a value representing the type of reply received from the HTTP proxy server.</summary>
    </member>
    <member name="M:Xceed.Ftp.HttpReplyException.#ctor(Xceed.Ftp.HttpReply,System.String)">
      <summary>Initializes a new instance of the HttpReplyException class with a specified  and error message.</summary>
      <param name="reply">The  received from the HTTP proxy.</param>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Xceed.Ftp.HttpReplyException.#ctor(Xceed.Ftp.HttpReply)">
      <summary>Initializes a new instance of the HttpReplyException class with a specified .</summary>
      <param name="reply">The  received from the HTTP proxy.</param>
    </member>
    <member name="M:Xceed.Ftp.HttpReplyException.ToString">
      <summary>Returns a string representation of the current exception including the reply that was received from the HTTP proxy.</summary>
      <returns>A string representation of the current exception including the reply that was received from the HTTP proxy.</returns>
    </member>
    <member name="P:Xceed.Ftp.HttpReplyException.Reply">
      <summary>Gets the  received from the HTTP proxy.</summary>
    </member>
    <member name="P:Xceed.Ftp.Licenser.LicenseKey">
      <summary>Gets or sets the license key used to license this product.</summary>
    </member>
    <member name="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.Action">
      <summary>Gets or sets a value indicating the action to take for the file failed to be transferred during a multiple-file transfer.</summary>
    </member>
    <member name="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.Exception">
      <summary>Gets the exception that was thrown while attempting to transfer a file during a multiple-file transfer.</summary>
    </member>
    <member name="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.LocalItemName">
      <summary>Gets the local path and name of the item that failed to be transferred during a multiple-file transfer.</summary>
    </member>
    <member name="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.RemoteItemName">
      <summary>Gets the remote name of the item that failed to be transferred during a multiple-file transfer.</summary>
    </member>
    <member name="P:Xceed.Ftp.MultipleFileTransferErrorEventArgs.RemoteItemType">
      <summary>Gets or sets the type of the remote item which failed to be transferred during a multiple-file transfer.</summary>
    </member>
    <member name="P:Xceed.Ftp.ParsingListingLineEventArgs.Item">
      <summary>Gets an FtpItemInfo object representing the listing information of an FTP item.</summary>
    </member>
    <member name="P:Xceed.Ftp.ParsingListingLineEventArgs.Line">
      <summary>Gets the listing line which was returned by the FTP server and used to create the Item.</summary>
    </member>
    <member name="P:Xceed.Ftp.ParsingListingLineEventArgs.Valid">
      <summary>Gets or sets a boolean value indicating if the listing line returned by the FTP server was valid.</summary>
    </member>
    <member name="P:Xceed.Ftp.ProxyClient.Address">
      <summary>Gets the address of the proxy server this proxy client connects to.</summary>
    </member>
    <member name="P:Xceed.Ftp.ProxyClient.HostName">
      <summary>Gets the hostname or IP address of the proxy server this proxy client connects to.</summary>
    </member>
    <member name="P:Xceed.Ftp.ProxyClient.Port">
      <summary>Gets the port number of the proxy server this proxy client connects to.</summary>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.Delete(System.String,System.Boolean,System.String[])">
      <summary>Deletes the specified files from the specified FTP server, specifying whether this is done recursively.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="recursive">Boolean value indicating whether files contained within sub-folders should be deleted from the FTP host.</param>
      <param name="filesToDelete">A list of strings representing the files to delete. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.Delete(System.String,System.Int32,System.Boolean,System.String[])">
      <summary>Deletes the specified files from the specified FTP server, specifying a port and whether this is done recursively.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port number on the FTP server to use.</param>
      <param name="recursive">Boolean value indicating whether files contained within sub-folders should be deleted from the FTP host.</param>
      <param name="filesToDelete">A list of strings representing the files to delete. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.Delete(System.String,System.Int32,System.String,System.String,System.Boolean,System.String[])">
      <summary>Deletes the specified files from the specified FTP server, specifying a port, a username/password, and whether this is done recursively.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port number on the FTP server to use.</param>
      <param name="username">The username used to connect to the FTP server.</param>
      <param name="password">The password used to connect to the FTP server.</param>
      <param name="recursive">Boolean value indicating whether files contained within sub-folders should be deleted from the FTP host.</param>
      <param name="filesToDelete">A list of strings representing the files to delete. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.Delete(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.Boolean,Xceed.Ftp.ProxyClient,System.Int32,System.Boolean,Xceed.Ftp.RepresentationType,System.IO.TextWriter,System.ComponentModel.ISynchronizeInvoke,Xceed.Ftp.QuickFtp.CertificateReceivedCallback,Xceed.Ftp.QuickFtp.CertificateRequiredCallback,System.Object,System.String[])">
      <summary>Deletes the specified files from the specified FTP server, specifying a port, a username/password, an authentication method, verification flags, a certificate,
data channel protection, whether the operation is recursive and/or passive, whether authentication is implicit, a proxy, a time-out, default representation
type, a synchronizing object, and delegates for notifications.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port number on the FTP server to use.</param>
      <param name="username">The username used to connect to the FTP server.</param>
      <param name="password">The password used to connect to the FTP server.</param>
      <param name="authenticationMethod">The authentication method used to connect to the FTP server. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="dataChannelProtection">The  used during the communication. Ignored if <paramref name="implicitAuthentication" /> is <b>true</b>. <b>Not applicable to the Compact
Framework version.</b></param>
      <param name="implicitAuthentication">If <b>true</b>, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the
SSL handshake. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="recursive">Boolean value indicating whether files contained within sub-folders should be deleted from the FTP host.</param>
      <param name="proxy">The active proxy client for connecting to the FTP server.</param>
      <param name="timeout">The period of time, in seconds, after which an FTP operation should timeout.</param>
      <param name="passiveTransfer">Boolean value indicating whether the data connection should be established by the FTP server rather than by the client-side.</param>
      <param name="defaultRepresentationType">The <b>default</b> value indicating how the data is transferred to and from the FTP server.</param>
      <param name="traceWriter">The  which will trace the communications between the client-side and the FTP server.</param>
      <param name="synchronizingObject">The object used to automatically redirect events on the main UI thread. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="certificateReceivedCallback">Delegate for CertificateReceived notification. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="certificateRequiredCallback">Delegate for CertificateRequired notification. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="userParams">Opaque data that will be passed back to the event handler when an event is raised.</param>
      <param name="filesToDelete">A list of strings representing the files to delete. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.Delete(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.Boolean,Xceed.Ftp.ProxyClient,System.Int32,System.Boolean,Xceed.Ftp.RepresentationType,System.IO.TextWriter,System.ComponentModel.ISynchronizeInvoke,Xceed.Ftp.QuickFtp.CertificateReceivedCallback,Xceed.Ftp.QuickFtp.CertificateRequiredCallback,System.Object,Xceed.Ftp.TransferMode,System.String[])">
      <summary>Deletes the specified files from the specified FTP server, specifying a port, a username/password, an authentication method, verification flags, transfer mode,
a certificate, data channel protection, whether the operation is recursive and/or passive, whether authentication is implicit, a proxy, a time-out, default
representation type, a synchronizing object, and delegates for notifications.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port number on the FTP server to use.</param>
      <param name="username">The username used to connect to the FTP server.</param>
      <param name="password">The password used to connect to the FTP server.</param>
      <param name="authenticationMethod">The authentication method used to connect to the FTP server. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="dataChannelProtection">The  used during the communication. Ignored if <paramref name="implicitAuthentication" /> is <b>true</b>. <b>Not applicable to the Compact
Framework version.</b></param>
      <param name="implicitAuthentication">If <b>true</b>, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the
SSL handshake. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="recursive">Boolean value indicating whether files contained within sub-folders should be deleted from the FTP host.</param>
      <param name="proxy">The active proxy client for connecting to the FTP server.</param>
      <param name="timeout">The period of time, in seconds, after which an FTP operation should timeout.</param>
      <param name="passiveTransfer">Boolean value indicating whether the data connection should be established by the FTP server rather than by the client-side.</param>
      <param name="defaultRepresentationType">The <b>default</b> value indicating how the data is transferred to and from the FTP server.</param>
      <param name="traceWriter">The  which will trace the communications between the client-side and the FTP server.</param>
      <param name="synchronizingObject">The object used to automatically redirect events on the main UI thread. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="certificateReceivedCallback">Delegate for CertificateReceived notification. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="certificateRequiredCallback">Delegate for CertificateRequired notification. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="userParams">Opaque data that will be passed back to the event handler when an event is raised.</param>
      <param name="transferMode">
        <para>The transfer mode used to send data to and from an FTP server.</para>
      </param>
      <param name="filesToDelete">A list of strings representing the files to delete. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.GetFtpContents(System.String,System.String,System.Boolean,System.String[])">
      <summary>Gets a listing of the provided remote folder, specifying filters and whether the operation is recursive.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="remoteFolderToList">The path to the remote folder to list, for example, \ftproot\test.</param>
      <param name="recursive">Boolean value indicating whether files contained within sub-folders should be listed from the FTP host.</param>
      <param name="filters">The filters to apply for the GetFtpContents.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.GetFtpContents(System.String,System.Int32,System.String,System.Boolean,System.String[])">
      <summary>Gets a listing of the provided remote folder, specifying a port, filters, and whether the operation is recursive.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to.</param>
      <param name="remoteFolderToList">The path to the remote folder to list, for example, \ftproot\test.</param>
      <param name="recursive">Boolean value indicating if files contained within sub-folders should be listed from the FTP host.</param>
      <param name="filters">The filters to apply for the GetFtpContents.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.GetFtpContents(System.String,System.Int32,System.String,System.String,System.String,System.Boolean,System.String[])">
      <summary>Gets a listing of the provided remote folder, specifying a port, a username/password, filters, and whether the operation is recursive.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to.</param>
      <param name="username">The username used to connect to the FTP server.</param>
      <param name="password">The password used to connect to the FTP server.</param>
      <param name="remoteFolderToList">The path to the remote folder to list, for example, \ftproot\test.</param>
      <param name="recursive">Boolean value indicating if files contained within sub-folders should be listed from the FTP host.</param>
      <param name="filters">The filters to apply for the GetFtpContents.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.GetFtpContents(System.String,System.Int32,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.String,System.Boolean,System.String[])">
      <summary>Gets a listing of the provided remote folder, specifying a port, an authentication method, a certificate, data channel protection, filters, and whether
authentication is implicit and whether the operation is recursive.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if implicitAuthentication is <b>true</b>; otherwise, 21 is used.</param>
      <param name="authenticationMethod">The authentication method to use when connecting to the FTP server.</param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
      <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null.</param>
      <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true.</param>
      <param name="implicitAuthentication">If <b>true</b>, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the
SSL handshake.</param>
      <param name="remoteFolderToList">The path to the remote folder to list, for example, \ftproot\test.</param>
      <param name="recursive">Boolean value indicating if files contained within sub-folders should be listed from the FTP host.</param>
      <param name="filters">The filters to apply for the GetFtpContents.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.GetFtpContents(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,Xceed.Ftp.ProxyClient,System.Int32,System.Boolean,Xceed.Ftp.RepresentationType,System.IO.TextWriter,System.String,System.Boolean,System.ComponentModel.ISynchronizeInvoke,Xceed.Ftp.QuickFtp.CertificateReceivedCallback,Xceed.Ftp.QuickFtp.CertificateRequiredCallback,System.String[])">
      <summary>Gets a listing of the provided remote folder, specifying a port, a username/password, an authentication method, whether authentication is implicit,
verification flags, a certificate, data channel protection, a proxy, a time-out, default representation type, whether files are listed recursively and/or
passively, a trace writer, a synchronizing object, delegates for notifications, and filters.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if implicitAuthentication is <b>true</b>; otherwise, 21 is used.</param>
      <param name="username">The username used to connect to the FTP server.</param>
      <param name="password">The password used to connect to the FTP server.</param>
      <param name="authenticationMethod">The authentication method to use when connecting to the FTP server. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="implicitAuthentication">If <b>true</b>, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the
SSL handshake. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="proxy">The active proxy client for connecting to the FTP server.</param>
      <param name="timeout">period of time, in seconds, after which an FTP operation should timeout.</param>
      <param name="passiveTransfer">Boolean value indicating whether the data connection should be established by the FTP server rather than by the client-side.</param>
      <param name="defaultRepresentationType">The <b>default</b> value indicating how the data is transferred to and from the FTP server.</param>
      <param name="traceWriter">The  which will trace the communications between the client-side and the FTP server.</param>
      <param name="remoteFolderToList">The path to the remote folder to list. i.e.: \ftproot\test</param>
      <param name="recursive">Boolean value indicating if files contained within sub-folders should be got from the ftp host</param>
      <param name="synchronizingObject">The object used to automatically redirect events on the main UI thread. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="certificateReceivedCallback">Delegate for CertificateReceived notification. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="certificateRequiredCallback">Delegate for CertificateRequired notification. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="filters">The filters to apply for the GetFtpContents.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.GetFtpContents(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,Xceed.Ftp.ProxyClient,System.Int32,System.Boolean,Xceed.Ftp.RepresentationType,System.IO.TextWriter,System.String,System.Boolean,System.ComponentModel.ISynchronizeInvoke,Xceed.Ftp.QuickFtp.CertificateReceivedCallback,Xceed.Ftp.QuickFtp.CertificateRequiredCallback,Xceed.Ftp.TransferMode,System.String[])">
      <summary>Gets a listing of the provided remote folder, specifying a port, a username/password, an authentication method, whether authentication is implicit,
verification flags, a certificate, data channel protection, a proxy, a time-out, default representation type, whether files are listed recursively and/or
passively, a trace writer, the transfer mode, a synchronizing object, delegates for notifications, and filters.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if implicitAuthentication is <b>true</b>; otherwise, 21 is used.</param>
      <param name="username">The username used to connect to the FTP server.</param>
      <param name="password">The password used to connect to the FTP server.</param>
      <param name="authenticationMethod">The authentication method to use when connecting to the FTP server. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="implicitAuthentication">If <b>true</b>, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the
SSL handshake. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="proxy">The active proxy client for connecting to the FTP server.</param>
      <param name="timeout">period of time, in seconds, after which an FTP operation should timeout.</param>
      <param name="passiveTransfer">Boolean value indicating whether the data connection should be established by the FTP server rather than by the client-side.</param>
      <param name="defaultRepresentationType">The <b>default</b> value indicating how the data is transferred to and from the FTP server.</param>
      <param name="traceWriter">The  which will trace the communications between the client-side and the FTP server.</param>
      <param name="remoteFolderToList">The path to the remote folder to list. i.e.: \ftproot\test</param>
      <param name="recursive">Boolean value indicating if files contained within sub-folders should be got from the ftp host</param>
      <param name="synchronizingObject">Boolean value indicating if files contained within sub-folders should be got from the ftp host</param>
      <param name="certificateReceivedCallback">Delegate for CertificateReceived notification. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="certificateRequiredCallback">Delegate for CertificateRequired notification. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="transferMode">
        <para>The transfer mode used to send data to and from an FTP server.</para>
      </param>
      <param name="filters">The filters to apply for the GetFtpContents.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.Receive(System.String,System.String,System.String[])">
      <summary>Receives a list of files, specifying the hostname of the FTP server and the local destination folder into which files will be placed.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="localDestinationFolder">The local destination folder into which the files will be placed.</param>
      <param name="filesToReceive">A list of strings representing the files to be gotten. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.Receive(System.String,System.Int32,System.String,System.String[])">
      <summary>Receives a list of files from an FTP server to a local folder, specifying a port number.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port number on the FTP server to use.</param>
      <param name="localDestinationFolder">The local destination folder into which the files will be placed.</param>
      <param name="filesToReceive">A list of strings representing the files to be gotten. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.Receive(System.String,System.Int32,System.String,System.String,System.String,System.String[])">
      <summary>Receives a list of files from an FTP server to a local folder, specifying a port number, and a username and password.</summary>
      <param name="hostname">The hostname of the FTP server to connect to.</param>
      <param name="port">The port number on the FTP server to use. An IP address can also be used.</param>
      <param name="username">The username used to connect to the FTP server.</param>
      <param name="password">The password used to connect to the FTP server.</param>
      <param name="localDestinationFolder">The local destination folder into which the files will be placed.</param>
      <param name="filesToReceive">A list of strings representing the files to be gotten. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.Receive(System.String,System.Int32,System.String,System.String,System.String,Xceed.Ftp.TransferMode,System.String[])">
      <summary>Receives a list of files from an FTP server to a local folder, specifying a port number, transfer mode, and a username and password.</summary>
      <param name="hostname">The hostname of the FTP server to connect to.</param>
      <param name="port">The port number on the FTP server to use. An IP address can also be used.</param>
      <param name="username">The username used to connect to the FTP server.</param>
      <param name="password">The password used to connect to the FTP server.</param>
      <param name="localDestinationFolder">The local destination folder into which the files will be placed.</param>
      <param name="transferMode">
        <para>The transfer mode used to send data to and from an FTP server.</para>
      </param>
      <param name="filesToReceive">A list of strings representing the files to be gotten. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.Receive(System.String,System.Int32,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.String,System.String[])">
      <summary>Receives a list of files from an FTP server to a local folder, specifying a port number, an authentication method, whether authentication is implicit,
verification flags, a client certificate, and data channel protection.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if <paramref name="implicitAuthentication" /> is <b>true</b>; otherwise, 21 is used.</param>
      <param name="authenticationMethod">The authentication method used to connect to the FTP server.</param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
      <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null.</param>
      <param name="dataChannelProtection">The  used during the communication. Ignored if <paramref name="implicitAuthentication" /> is <b>true</b>.</param>
      <param name="implicitAuthentication">If <b>true</b>, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the
SSL handshake.</param>
      <param name="localDestinationFolder">A string representing the local destination folder into which the files will be placed.</param>
      <param name="filesToReceive">A list of strings representing the files to be gotten. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.Receive(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.ComponentModel.ISynchronizeInvoke,Xceed.Ftp.QuickFtp.CertificateReceivedCallback,Xceed.Ftp.QuickFtp.CertificateRequiredCallback,Xceed.Ftp.QuickFtp.ByteProgressionCallback,Xceed.Ftp.QuickFtp.ItemProgressionCallback,System.Object,System.String[])">
      <summary>Receives a list of files from an FTP server, specifying a port, a username/password, an authentication method, whether authentication is implicit verification
flags, a certificate, data channel protection, whether existing files will be replaced, directory structure will be preserved, transfer will be recursive, and
delegates for notifications.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if <paramref name="implicitAuthentication" /> is <b>true</b>; otherwise, 21 is used.</param>
      <param name="username">The username used to connect to the FTP server.</param>
      <param name="password">The password used to connect to the FTP server.</param>
      <param name="authenticationMethod">The authentication method to use when connecting to the FTP server.</param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
      <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null.</param>
      <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true.</param>
      <param name="implicitAuthentication">If <b>true</b>, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the
SSL handshake.</param>
      <param name="localDestinationFolder">The local destination folder into which the files will be placed.</param>
      <param name="replaceExistingFiles">true if existing items in the destination should be replaced; false otherwise.</param>
      <param name="recursive">Boolean value indicating if files contained within sub-folders should be gotten from the ftp host.</param>
      <param name="preservePaths">Boolean value indicating if the directory structure should be preserved in the destination folder.</param>
      <param name="synchronizingObject">The object used to automatically redirect events on the main UI thread; null if not required.</param>
      <param name="certificateReceivedCallback">Delegate for CertificateReceived notification.</param>
      <param name="certificateRequiredCallback">Delegate for CertificateRequired notification.</param>
      <param name="byteProgressionCallback">Delegate for ByteProgression notification.</param>
      <param name="itemProgressionCallback">Delegate for ItemProgression notification.</param>
      <param name="userParams">Opaque data that will be passed back to the event handler when an event is raised.</param>
      <param name="filesToReceive">A list of strings representing the files to be gotten. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.Receive(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,Xceed.Ftp.ProxyClient,System.Int32,System.Boolean,Xceed.Ftp.RepresentationType,System.IO.TextWriter,System.ComponentModel.ISynchronizeInvoke,Xceed.Ftp.QuickFtp.CertificateReceivedCallback,Xceed.Ftp.QuickFtp.CertificateRequiredCallback,Xceed.Ftp.QuickFtp.ByteProgressionCallback,Xceed.Ftp.QuickFtp.ItemProgressionCallback,System.Object,System.String[])">
      <summary>Receives a list of files from an FTP server to a local folder, specifying a port, a username and password, an authentication method, whether authentication is
implicit, verification flags, a certificate, whether existing files will be replaced, directory structure will be preserved, transfer will be passive and/or
recursive, a proxy, a time-out, default representation type, delegates for notifications, etc.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if <paramref name="implicitAuthentication" /> is <b>true</b>; otherwise, 21 is used (<b>not
applicable to the Compact Framework version</b>).</param>
      <param name="username">The username used to connect to the FTP server.</param>
      <param name="password">The password used to connect to the FTP server.</param>
      <param name="authenticationMethod">The authentication method to use when connecting to the FTP server. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="implicitAuthentication">If <b>true</b>, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the
SSL handshake. <b>Not applicable to the Compact Framework version</b>.</param>
      <param name="localDestinationFolder">The local destination folder into which the files will be placed.</param>
      <param name="replaceExistingFiles">true if existing items in the destination should be replaced; false otherwise.</param>
      <param name="recursive">Boolean value indicating if files contained within sub-folders should be gotten from the ftp host.</param>
      <param name="preservePaths">Boolean value indicating if the directory structure should be preserved in the destination folder.</param>
      <param name="proxy">The active proxy client for connecting to the FTP server.</param>
      <param name="timeout">The period of time, in seconds, after which an FTP operation should timeout.</param>
      <param name="passiveTransfer">Boolean value indicating whether the data connection should be established by the FTP server rather than by the client-side.</param>
      <param name="defaultRepresentationType">The <b>default</b> value indicating how the data is transferred to and from the FTP server.</param>
      <param name="traceWriter">The  which will trace the communications between the client-side and the FTP server.</param>
      <param name="synchronizingObject">The object used to automatically redirect events on the main UI thread. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="certificateReceivedCallback">Delegate for CertificateReceived notification. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="certificateRequiredCallback">Delegate for CertificateRequired notification. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="byteProgressionCallback">Delegate for ByteProgression notification.</param>
      <param name="itemProgressionCallback">Delegate for ItemProgression notification.</param>
      <param name="userParams">Opaque data that will be passed back to the event handler when an event is raised.</param>
      <param name="filesToReceive">A list of strings representing the files to be gotten. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.Receive(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,Xceed.Ftp.ProxyClient,System.Int32,System.Boolean,Xceed.Ftp.RepresentationType,System.IO.TextWriter,System.ComponentModel.ISynchronizeInvoke,Xceed.Ftp.QuickFtp.CertificateReceivedCallback,Xceed.Ftp.QuickFtp.CertificateRequiredCallback,Xceed.Ftp.QuickFtp.ByteProgressionCallback,Xceed.Ftp.QuickFtp.ItemProgressionCallback,System.Object,Xceed.Ftp.TransferMode,System.String[])">
      <summary>Receives a list of files from an FTP server to a local folder, specifying a port, a username and password, an authentication method, whether authentication is
implicit, verification flags, a certificate, whether existing files will be replaced, directory structure will be preserved, transfer will be passive and/or
recursive, a proxy, a time-out, transfer mode, default representation type, delegates for notifications, etc.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if <paramref name="implicitAuthentication" /> is <b>true</b>; otherwise, 21 is used (<b>not
applicable to the Compact Framework version</b>).</param>
      <param name="username">The username used to connect to the FTP server.</param>
      <param name="password">The password used to connect to the FTP server.</param>
      <param name="authenticationMethod">The authentication method to use when connecting to the FTP server. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="implicitAuthentication">If <b>true</b>, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the
SSL handshake. <b>Not applicable to the Compact Framework version</b>.</param>
      <param name="localDestinationFolder">The local destination folder into which the files will be placed.</param>
      <param name="replaceExistingFiles">true if existing items in the destination should be replaced; false otherwise.</param>
      <param name="recursive">Boolean value indicating if files contained within sub-folders should be gotten from the ftp host.</param>
      <param name="preservePaths">Boolean value indicating if the directory structure should be preserved in the destination folder.</param>
      <param name="proxy">The active proxy client for connecting to the FTP server.</param>
      <param name="timeout">The period of time, in seconds, after which an FTP operation should timeout.</param>
      <param name="passiveTransfer">Boolean value indicating whether the data connection should be established by the FTP server rather than by the client-side.</param>
      <param name="defaultRepresentationType">The <b>default</b> value indicating how the data is transferred to and from the FTP server.</param>
      <param name="traceWriter">The  which will trace the communications between the client-side and the FTP server.</param>
      <param name="synchronizingObject">The object used to automatically redirect events on the main UI thread. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="certificateReceivedCallback">Delegate for CertificateReceived notification. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="certificateRequiredCallback">Delegate for CertificateRequired notification. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="byteProgressionCallback">Delegate for ByteProgression notification.</param>
      <param name="itemProgressionCallback">Delegate for ItemProgression notification.</param>
      <param name="userParams">Opaque data that will be passed back to the event handler when an event is raised.</param>
      <param name="transferMode">
        <para>The transfer mode used to send data to and from an FTP server.</para>
      </param>
      <param name="filesToReceive">A list of strings representing the files to be gotten. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.Send(System.String,System.String,System.String[])">
      <summary>Sends a list of files to a remote folder on an FTP server.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="remoteDestinationFolder">The remote destination folder into which the files will be placed.</param>
      <param name="filesToSend">A list of strings representing the files to be transferred. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a
\.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.Send(System.String,System.Int32,System.String,System.String[])">
      <summary>Sends a list of files to a remote folder on an FTP server, specifying a port number.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to.</param>
      <param name="remoteDestinationFolder">The remote destination folder into which the files will be placed.</param>
      <param name="filesToSend">A list of strings representing the files to be transferred. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a
\.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.Send(System.String,System.Int32,System.String,System.String,System.String,System.String[])">
      <summary>Sends a list of files to a remote folder on an FTP server, specifying a port number and a username and password.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to.</param>
      <param name="username">The username used to connect to the FTP server.</param>
      <param name="password">The password used to connect to the FTP server.</param>
      <param name="remoteDestinationFolder">The remote destination folder into which the files will be placed.</param>
      <param name="filesToSend">A list of strings representing the files to be transferred. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a
\.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.Send(System.String,System.Int32,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.String,System.String[])">
      <summary>Sends a list of files to a remote folder on an FTP server, specifying a port number, an authentication method, whether authentication is implicit, verification
flags, a certificate, and data channel protection.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if <paramref name="implicitAuthentication" /> is <b>true</b>; otherwise, 21 is used.</param>
      <param name="authenticationMethod">The authentication method to use when connecting to the FTP server.</param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate.</param>
      <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null.</param>
      <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true.</param>
      <param name="implicitAuthentication">If <b>true</b>, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the
SSL handshake.</param>
      <param name="remoteDestinationFolder">The remote destination folder into which the files will be placed.</param>
      <param name="filesToSend">A list of strings representing the files to be transferred. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a
\.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.Send(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.ComponentModel.ISynchronizeInvoke,Xceed.Ftp.QuickFtp.CertificateReceivedCallback,Xceed.Ftp.QuickFtp.CertificateRequiredCallback,Xceed.Ftp.QuickFtp.ByteProgressionCallback,Xceed.Ftp.QuickFtp.ItemProgressionCallback,System.Object,System.String[])">
      <summary>Sends a list of files to a remote folder on an FTP server, specifying a port, a username/password, an authentication method, whether authentication is
implicit, verification flags, a certificate, data channel protection, whether existing files are replaced, files are sent recursively, and paths are preserved
at destination, delegates for notifications, and a synchronizing object.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if implicitAuthentication is true; otherwise, 21 is used.</param>
      <param name="username">The username used to connect to the FTP server.</param>
      <param name="password">The password used to connect to the FTP server.</param>
      <param name="authenticationMethod">The authentication method to use when connecting to the FTP server. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is true. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="implicitAuthentication">If true, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the SSL
handshake. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="remoteDestinationFolder">The path of the remote folder where the file must be copied into</param>
      <param name="replaceExistingFiles">true if existing items in the destination should be replaced; false otherwise.</param>
      <param name="recursive">Boolean value indicating if files contained within sub-folders should be got from the ftp host</param>
      <param name="preservePaths">Boolean value indicating if the directory structure should be preserved in the destination folder</param>
      <param name="synchronizingObject">The object used to automatically redirect events on the main UI thread; null if not required. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="certificateReceivedCallback">Delegate for CertificateReceived notification. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="certificateRequiredCallback">Delegate for CertificateRequired notification. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="byteProgressionCallback">Delegate for ByteProgression notification.</param>
      <param name="itemProgressionCallback">Delegate for ItemProgression notification.</param>
      <param name="userParams">Opaque data that will be passed back to the event handler when an event is raised.</param>
      <param name="filesToSend">A list of strings representing the files to be put. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.Send(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,Xceed.Ftp.ProxyClient,System.Int32,System.Boolean,Xceed.Ftp.RepresentationType,System.IO.TextWriter,System.ComponentModel.ISynchronizeInvoke,Xceed.Ftp.QuickFtp.CertificateReceivedCallback,Xceed.Ftp.QuickFtp.CertificateRequiredCallback,Xceed.Ftp.QuickFtp.ByteProgressionCallback,Xceed.Ftp.QuickFtp.ItemProgressionCallback,System.Object,System.String[])">
      <summary>Sends a list of files to a remote folder on an FTP server, specifying a port, username and password, an authentication method, whether authentication is
implicit, verification flags, a certificate, data channel protection, whether existing files are replaced, files are sent recursively and/or passively, and
paths are preserved at destination, a proxy, a time-out, default representation type, delegates for notifications, a synchronizing object, etc.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if implicitAuthentication is true; otherwise, 21 is used.</param>
      <param name="username">The username used to connect to the FTP server.</param>
      <param name="password">The password used to connect to the FTP server.</param>
      <param name="authenticationMethod">The authentication method to use when connecting to the FTP server. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is <b>true</b>. <b>Not applicable to the Compact Framework
version.</b></param>
      <param name="implicitAuthentication">If true, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the SSL
handshake. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="remoteDestinationFolder">The path of the remote folder where the file must be copied into</param>
      <param name="replaceExistingFiles">
        <para>
          <strong>true</strong> if existing files are to be replaced; <strong>false</strong> otherwise.</para>
      </param>
      <param name="recursive">Boolean value indicating if files contained within sub-folders should be gotten from the ftp host.</param>
      <param name="preservePaths">Boolean value indicating if the directory structure should be preserved in the destination folder.</param>
      <param name="proxy">The active proxy client for connecting to the FTP server.</param>
      <param name="timeout">The period of time, in seconds, after which an FTP operation should timeout.</param>
      <param name="passiveTransfer">Boolean value indicating whether the data connection should be established by the FTP server rather than by the client-side.</param>
      <param name="defaultRepresentationType">The <b>default</b> value indicating how the data is transferred to and from the FTP server.</param>
      <param name="traceWriter">The  which will trace the communications between the client-side and the FTP server.</param>
      <param name="synchronizingObject">The object used to automatically redirect events on the main UI thread; null if not required. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="certificateReceivedCallback">Delegate for CertificateReceived notification. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="certificateRequiredCallback">Delegate for CertificateRequired notification. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="byteProgressionCallback">Delegate for ByteProgression notification.</param>
      <param name="itemProgressionCallback">Delegate for ItemProgression notification.</param>
      <param name="userParams">Opaque data that will be passed back to the event handler when an event is raised.</param>
      <param name="filesToSend">A list of strings representing the files to be put. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtp.Send(System.String,System.Int32,System.String,System.String,Xceed.Ftp.AuthenticationMethod,Xceed.Ftp.VerificationFlags,Xceed.Ftp.Certificate,Xceed.Ftp.DataChannelProtection,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,Xceed.Ftp.ProxyClient,System.Int32,System.Boolean,Xceed.Ftp.RepresentationType,System.IO.TextWriter,System.ComponentModel.ISynchronizeInvoke,Xceed.Ftp.QuickFtp.CertificateReceivedCallback,Xceed.Ftp.QuickFtp.CertificateRequiredCallback,Xceed.Ftp.QuickFtp.ByteProgressionCallback,Xceed.Ftp.QuickFtp.ItemProgressionCallback,System.Object,Xceed.Ftp.TransferMode,System.String[])">
      <summary>Sends a list of files to a remote folder on an FTP server, specifying a port, username and password, an authentication method, whether authentication is
implicit, verification flags, a certificate, data channel protection, whether existing files are replaced, files are sent recursively and/or passively, and
paths are preserved at destination, a proxy, a time-out, default representation type, transfer mode, delegates for notifications, a synchronizing object, etc.</summary>
      <param name="hostname">The hostname of the FTP server to connect to. An IP address can also be used.</param>
      <param name="port">The port of the FTP server to which to connect to. If 0 is passed, 990 is used if implicitAuthentication is true; otherwise, 21 is used.</param>
      <param name="username">The username used to connect to the FTP server.</param>
      <param name="password">The password used to connect to the FTP server.</param>
      <param name="authenticationMethod">The authentication method to use when connecting to the FTP server. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="verificationFlags">The verification flags used to verify the FTP server's certificate. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="clientCertificate">The certificate used when connecting to the FTP server. Can be null. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="dataChannelProtection">The DataChannelProtection used during the communication. Ignored if implicitAuthentication is <b>true</b>. <b>Not applicable to the Compact Framework
version.</b></param>
      <param name="implicitAuthentication">If true, the SSL handshake occurs at the very beginning of the connection; otherwise, the AUTH command is sent after the Welcome message to initiate the SSL
handshake. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="remoteDestinationFolder">The path of the remote folder where the file must be copied into</param>
      <param name="replaceExistingFiles">
        <para>
          <strong>true</strong> if existing files are to be replaced; <strong>false</strong> otherwise.</para>
      </param>
      <param name="recursive">Boolean value indicating if files contained within sub-folders should be gotten from the ftp host.</param>
      <param name="preservePaths">Boolean value indicating if the directory structure should be preserved in the destination folder.</param>
      <param name="proxy">The active proxy client for connecting to the FTP server.</param>
      <param name="timeout">The period of time, in seconds, after which an FTP operation should timeout.</param>
      <param name="passiveTransfer">Boolean value indicating whether the data connection should be established by the FTP server rather than by the client-side.</param>
      <param name="defaultRepresentationType">The <b>default</b> value indicating how the data is transferred to and from the FTP server.</param>
      <param name="traceWriter">The  which will trace the communications between the client-side and the FTP server.</param>
      <param name="synchronizingObject">The object used to automatically redirect events on the main UI thread; null if not required. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="certificateReceivedCallback">Delegate for CertificateReceived notification. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="certificateRequiredCallback">Delegate for CertificateRequired notification. <b>Not applicable to the Compact Framework version.</b></param>
      <param name="byteProgressionCallback">Delegate for ByteProgression notification.</param>
      <param name="itemProgressionCallback">Delegate for ItemProgression notification.</param>
      <param name="userParams">Opaque data that will be passed back to the event handler when an event is raised.</param>
      <param name="transferMode">
        <para>The transfer mode used to send data to and from an FTP server.</para>
      </param>
      <param name="filesToSend">A list of strings representing the files to be put. File paths may not start with a \ or a /. If a path represents a folder, it must end with a / or a \.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtpException.#ctor(System.String)">
      <summary>Initializes a new instance of the QuickFtpException class with the specified message text.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Xceed.Ftp.QuickFtpException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the QuickFtpException class with specified message text and inner exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that initially caused the current exception to be thrown.</param>
    </member>
    <member name="P:Xceed.Ftp.ReplyReceivedEventArgs.Reply">
      <summary>Gets the reply that was received from the FTP server.</summary>
    </member>
    <member name="M:Xceed.Ftp.StringList.Add(System.String)">
      <summary>Adds a string to the list.</summary>
      <returns>The zero-based index at which the string was added.</returns>
      <param name="value">The string to add.</param>
    </member>
    <member name="M:Xceed.Ftp.StringList.AddRange(System.String[])">
      <summary>Adds the elements of a string array to the end of the StringList collection.</summary>
      <param name="values">An array of strings representing the strings to add to the end of the StringList collection</param>
    </member>
    <member name="M:Xceed.Ftp.StringList.Clear">
      <summary>Removes all strings from the list.</summary>
    </member>
    <member name="M:Xceed.Ftp.StringList.Contains(System.String)">
      <summary>Retrieves a boolean value indicating if a specific string exists in the list.</summary>
      <returns>true if the string exists in the list; false otherwise.</returns>
      <param name="value">The string to locate.</param>
    </member>
    <member name="M:Xceed.Ftp.StringList.IndexOf(System.String)">
      <summary>Searches for the specified string and returns the zero-based index of the first occurrence within the list.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire list, if found; otherwise, returns -1.</returns>
      <param name="value">The string to locate.</param>
    </member>
    <member name="M:Xceed.Ftp.StringList.Insert(System.Int32,System.String)">
      <summary>Inserts a string into the list at the specified index</summary>
      <param name="index">The zero-based index at which to insert the string.</param>
      <param name="value">The string to insert.</param>
    </member>
    <member name="M:Xceed.Ftp.StringList.OnValidate(System.Object)">
      <summary>Performs additional custom processes when validating a value.</summary>
      <param name="value">The object to validate.</param>
    </member>
    <member name="M:Xceed.Ftp.StringList.Remove(System.String)">
      <summary>Removes the string from the list.</summary>
      <param name="value">The string to remove.</param>
    </member>
    <member name="M:Xceed.Ftp.StringList.RemoveAt(System.Int32)">
      <summary>Removes the string from the list at the specified index.</summary>
      <param name="index">The zero-based index at which to remove the string.</param>
    </member>
    <member name="M:Xceed.Ftp.StringList.ToString">
      <summary>Returns a string representing the entire contents the string list. Each item in the string list is separated by a carriage-return/line-feed (CRLF).</summary>
      <returns>A string representing the entire contents the string list. Each item in the string list is separated by a carriage-return/line-feed (CRLF).</returns>
    </member>
    <member name="P:Xceed.Ftp.StringList.IsFixedSize">
      <summary>Gets a value indicating whether the StringList has a fixed size.</summary>
    </member>
    <member name="P:Xceed.Ftp.StringList.IsReadOnly">
      <summary>Gets a boolean value indicating if the StringList is readonly.</summary>
    </member>
    <member name="P:Xceed.Ftp.StringList.Item(System.Int32)">
      <summary>Gets or sets the string at the specified index.</summary>
      <param name="index">The zero-based index at which to get the string.</param>
    </member>
    <member name="P:Xceed.Ftp.TransferringFileEventArgs.LocalFilename">
      <summary>Gets the path and filename of the local file.</summary>
    </member>
    <member name="P:Xceed.Ftp.TransferringFileEventArgs.RemoteFilename">
      <summary>Gets the filename of the remote file.</summary>
    </member>
    <member name="T:Xceed.Ftp.CertificateReceivedEventHandler">
      <summary>Represents that method that will handle the  event.</summary>
    </member>
    <member name="T:Xceed.Ftp.CertificateRequiredEventHandler">
      <summary>Represents that method that will handle the  event.</summary>
    </member>
    <member name="T:Xceed.Ftp.CommandSentEventHandler">
      <summary>Represents the method that will handle the  event.</summary>
    </member>
    <member name="T:Xceed.Ftp.FileTransferStatusEventHandler">
      <summary>Represents the method that will handle the  event.</summary>
    </member>
    <member name="T:Xceed.Ftp.MultipleFileTransferErrorEventHandler">
      <summary>Represents the method that will handle the  event.</summary>
    </member>
    <member name="T:Xceed.Ftp.ParsingListingLineEventHandler">
      <summary>Represents the method that will handle the  event.</summary>
    </member>
    <member name="T:Xceed.Ftp.QuickFtp.ByteProgressionCallback">
      <summary>Delegate for ByteProgression notification.</summary>
    </member>
    <member name="T:Xceed.Ftp.QuickFtp.CertificateReceivedCallback">
      <summary>Delegate for CertificateReceived notification.</summary>
    </member>
    <member name="T:Xceed.Ftp.QuickFtp.CertificateRequiredCallback">
      <summary>Delegate for CertificateRequired notification.</summary>
    </member>
    <member name="T:Xceed.Ftp.QuickFtp.ItemProgressionCallback">
      <summary>Delegate for ItemProgression notification.</summary>
    </member>
    <member name="T:Xceed.Ftp.ReplyReceivedEventHandler">
      <summary>Represents the method that will handle the  event.</summary>
    </member>
    <member name="T:Xceed.Ftp.TransferringFileEventHandler">
      <summary>Represents the method that will handle the  and <see cref="E:Xceed.Ftp.FtpClient.ReceivingFile" /> events.</summary>
    </member>
  </members>
</doc>