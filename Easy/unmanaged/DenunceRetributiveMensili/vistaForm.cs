
/*
Easy
Copyright (C) 2024 Università degli Studi di Catania (www.unict.it)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DenunceRetributiveMensili{//DenunceRetributiveMensili//
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class vistaForm : DataSet {
        
        private AziendaDataTable tableAzienda;
        
        private CollaboratoreDataTable tableCollaboratore;
        
        private EmensDataTable tableEmens;
        
        private sedeinpsDataTable tablesedeinps;
        
        private emenstiporapportoDataTable tableemenstiporapporto;
        
        private altraformaassicurativaDataTable tablealtraformaassicurativa;
        
        private attivitaprevidenzialeinpsDataTable tableattivitaprevidenzialeinps;
        
        private DataRelation relationAziendaCollaboratore;
        
        public vistaForm() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected vistaForm(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Azienda"] != null)) {
                    this.Tables.Add(new AziendaDataTable(ds.Tables["Azienda"]));
                }
                if ((ds.Tables["Collaboratore"] != null)) {
                    this.Tables.Add(new CollaboratoreDataTable(ds.Tables["Collaboratore"]));
                }
                if ((ds.Tables["Emens"] != null)) {
                    this.Tables.Add(new EmensDataTable(ds.Tables["Emens"]));
                }
                if ((ds.Tables["sedeinps"] != null)) {
                    this.Tables.Add(new sedeinpsDataTable(ds.Tables["sedeinps"]));
                }
                if ((ds.Tables["emenstiporapporto"] != null)) {
                    this.Tables.Add(new emenstiporapportoDataTable(ds.Tables["emenstiporapporto"]));
                }
                if ((ds.Tables["altraformaassicurativa"] != null)) {
                    this.Tables.Add(new altraformaassicurativaDataTable(ds.Tables["altraformaassicurativa"]));
                }
                if ((ds.Tables["attivitaprevidenzialeinps"] != null)) {
                    this.Tables.Add(new attivitaprevidenzialeinpsDataTable(ds.Tables["attivitaprevidenzialeinps"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AziendaDataTable Azienda {
            get {
                return this.tableAzienda;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CollaboratoreDataTable Collaboratore {
            get {
                return this.tableCollaboratore;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmensDataTable Emens {
            get {
                return this.tableEmens;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sedeinpsDataTable sedeinps {
            get {
                return this.tablesedeinps;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public emenstiporapportoDataTable emenstiporapporto {
            get {
                return this.tableemenstiporapporto;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public altraformaassicurativaDataTable altraformaassicurativa {
            get {
                return this.tablealtraformaassicurativa;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public attivitaprevidenzialeinpsDataTable attivitaprevidenzialeinps {
            get {
                return this.tableattivitaprevidenzialeinps;
            }
        }
        
        public override DataSet Clone() {
            vistaForm cln = ((vistaForm)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Azienda"] != null)) {
                this.Tables.Add(new AziendaDataTable(ds.Tables["Azienda"]));
            }
            if ((ds.Tables["Collaboratore"] != null)) {
                this.Tables.Add(new CollaboratoreDataTable(ds.Tables["Collaboratore"]));
            }
            if ((ds.Tables["Emens"] != null)) {
                this.Tables.Add(new EmensDataTable(ds.Tables["Emens"]));
            }
            if ((ds.Tables["sedeinps"] != null)) {
                this.Tables.Add(new sedeinpsDataTable(ds.Tables["sedeinps"]));
            }
            if ((ds.Tables["emenstiporapporto"] != null)) {
                this.Tables.Add(new emenstiporapportoDataTable(ds.Tables["emenstiporapporto"]));
            }
            if ((ds.Tables["altraformaassicurativa"] != null)) {
                this.Tables.Add(new altraformaassicurativaDataTable(ds.Tables["altraformaassicurativa"]));
            }
            if ((ds.Tables["attivitaprevidenzialeinps"] != null)) {
                this.Tables.Add(new attivitaprevidenzialeinpsDataTable(ds.Tables["attivitaprevidenzialeinps"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAzienda = ((AziendaDataTable)(this.Tables["Azienda"]));
            if ((this.tableAzienda != null)) {
                this.tableAzienda.InitVars();
            }
            this.tableCollaboratore = ((CollaboratoreDataTable)(this.Tables["Collaboratore"]));
            if ((this.tableCollaboratore != null)) {
                this.tableCollaboratore.InitVars();
            }
            this.tableEmens = ((EmensDataTable)(this.Tables["Emens"]));
            if ((this.tableEmens != null)) {
                this.tableEmens.InitVars();
            }
            this.tablesedeinps = ((sedeinpsDataTable)(this.Tables["sedeinps"]));
            if ((this.tablesedeinps != null)) {
                this.tablesedeinps.InitVars();
            }
            this.tableemenstiporapporto = ((emenstiporapportoDataTable)(this.Tables["emenstiporapporto"]));
            if ((this.tableemenstiporapporto != null)) {
                this.tableemenstiporapporto.InitVars();
            }
            this.tablealtraformaassicurativa = ((altraformaassicurativaDataTable)(this.Tables["altraformaassicurativa"]));
            if ((this.tablealtraformaassicurativa != null)) {
                this.tablealtraformaassicurativa.InitVars();
            }
            this.tableattivitaprevidenzialeinps = ((attivitaprevidenzialeinpsDataTable)(this.Tables["attivitaprevidenzialeinps"]));
            if ((this.tableattivitaprevidenzialeinps != null)) {
                this.tableattivitaprevidenzialeinps.InitVars();
            }
            this.relationAziendaCollaboratore = this.Relations["AziendaCollaboratore"];
        }
        
        private void InitClass() {
            this.DataSetName = "vistaForm";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/vistaForm.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAzienda = new AziendaDataTable();
            this.Tables.Add(this.tableAzienda);
            this.tableCollaboratore = new CollaboratoreDataTable();
            this.Tables.Add(this.tableCollaboratore);
            this.tableEmens = new EmensDataTable();
            this.Tables.Add(this.tableEmens);
            this.tablesedeinps = new sedeinpsDataTable();
            this.Tables.Add(this.tablesedeinps);
            this.tableemenstiporapporto = new emenstiporapportoDataTable();
            this.Tables.Add(this.tableemenstiporapporto);
            this.tablealtraformaassicurativa = new altraformaassicurativaDataTable();
            this.Tables.Add(this.tablealtraformaassicurativa);
            this.tableattivitaprevidenzialeinps = new attivitaprevidenzialeinpsDataTable();
            this.Tables.Add(this.tableattivitaprevidenzialeinps);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("AziendaCollaboratore", new DataColumn[] {
                        this.tableAzienda.AnnoMeseDenunciaColumn,
                        this.tableAzienda.CFAziendaColumn}, new DataColumn[] {
                        this.tableCollaboratore.AnnoMeseDenunciaColumn,
                        this.tableCollaboratore.CFAziendaColumn});
            this.tableCollaboratore.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationAziendaCollaboratore = new DataRelation("AziendaCollaboratore", new DataColumn[] {
                        this.tableAzienda.AnnoMeseDenunciaColumn,
                        this.tableAzienda.CFAziendaColumn}, new DataColumn[] {
                        this.tableCollaboratore.AnnoMeseDenunciaColumn,
                        this.tableCollaboratore.CFAziendaColumn}, false);
            this.Relations.Add(this.relationAziendaCollaboratore);
        }
        
        private bool ShouldSerializeAzienda() {
            return false;
        }
        
        private bool ShouldSerializeCollaboratore() {
            return false;
        }
        
        private bool ShouldSerializeEmens() {
            return false;
        }
        
        private bool ShouldSerializesedeinps() {
            return false;
        }
        
        private bool ShouldSerializeemenstiporapporto() {
            return false;
        }
        
        private bool ShouldSerializealtraformaassicurativa() {
            return false;
        }
        
        private bool ShouldSerializeattivitaprevidenzialeinps() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void AziendaRowChangeEventHandler(object sender, AziendaRowChangeEvent e);
        
        public delegate void CollaboratoreRowChangeEventHandler(object sender, CollaboratoreRowChangeEvent e);
        
        public delegate void EmensRowChangeEventHandler(object sender, EmensRowChangeEvent e);
        
        public delegate void sedeinpsRowChangeEventHandler(object sender, sedeinpsRowChangeEvent e);
        
        public delegate void emenstiporapportoRowChangeEventHandler(object sender, emenstiporapportoRowChangeEvent e);
        
        public delegate void altraformaassicurativaRowChangeEventHandler(object sender, altraformaassicurativaRowChangeEvent e);
        
        public delegate void attivitaprevidenzialeinpsRowChangeEventHandler(object sender, attivitaprevidenzialeinpsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AziendaDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAnnoMeseDenuncia;
            
            private DataColumn columnCFAzienda;
            
            private DataColumn columnRagSocAzienda;
            
            private DataColumn columnCAP;
            
            private DataColumn columnISTAT;
            
            internal AziendaDataTable() : 
                    base("Azienda") {
                this.InitClass();
            }
            
            internal AziendaDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AnnoMeseDenunciaColumn {
                get {
                    return this.columnAnnoMeseDenuncia;
                }
            }
            
            internal DataColumn CFAziendaColumn {
                get {
                    return this.columnCFAzienda;
                }
            }
            
            internal DataColumn RagSocAziendaColumn {
                get {
                    return this.columnRagSocAzienda;
                }
            }
            
            internal DataColumn CAPColumn {
                get {
                    return this.columnCAP;
                }
            }
            
            internal DataColumn ISTATColumn {
                get {
                    return this.columnISTAT;
                }
            }
            
            public AziendaRow this[int index] {
                get {
                    return ((AziendaRow)(this.Rows[index]));
                }
            }
            
            public event AziendaRowChangeEventHandler AziendaRowChanged;
            
            public event AziendaRowChangeEventHandler AziendaRowChanging;
            
            public event AziendaRowChangeEventHandler AziendaRowDeleted;
            
            public event AziendaRowChangeEventHandler AziendaRowDeleting;
            
            public void AddAziendaRow(AziendaRow row) {
                this.Rows.Add(row);
            }
            
            public AziendaRow AddAziendaRow(string AnnoMeseDenuncia, string CFAzienda, string RagSocAzienda, string CAP, string ISTAT) {
                AziendaRow rowAziendaRow = ((AziendaRow)(this.NewRow()));
                rowAziendaRow.ItemArray = new object[] {
                        AnnoMeseDenuncia,
                        CFAzienda,
                        RagSocAzienda,
                        CAP,
                        ISTAT};
                this.Rows.Add(rowAziendaRow);
                return rowAziendaRow;
            }
            
            public AziendaRow FindByAnnoMeseDenunciaCFAzienda(string AnnoMeseDenuncia, string CFAzienda) {
                return ((AziendaRow)(this.Rows.Find(new object[] {
                            AnnoMeseDenuncia,
                            CFAzienda})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AziendaDataTable cln = ((AziendaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AziendaDataTable();
            }
            
            internal void InitVars() {
                this.columnAnnoMeseDenuncia = this.Columns["AnnoMeseDenuncia"];
                this.columnCFAzienda = this.Columns["CFAzienda"];
                this.columnRagSocAzienda = this.Columns["RagSocAzienda"];
                this.columnCAP = this.Columns["CAP"];
                this.columnISTAT = this.Columns["ISTAT"];
            }
            
            private void InitClass() {
                this.columnAnnoMeseDenuncia = new DataColumn("AnnoMeseDenuncia", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAnnoMeseDenuncia);
                this.columnCFAzienda = new DataColumn("CFAzienda", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCFAzienda);
                this.columnRagSocAzienda = new DataColumn("RagSocAzienda", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRagSocAzienda);
                this.columnCAP = new DataColumn("CAP", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCAP);
                this.columnISTAT = new DataColumn("ISTAT", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnISTAT);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey2", new DataColumn[] {
                                this.columnAnnoMeseDenuncia,
                                this.columnCFAzienda}, true));
                this.columnAnnoMeseDenuncia.AllowDBNull = false;
                this.columnCFAzienda.AllowDBNull = false;
                this.columnRagSocAzienda.AllowDBNull = false;
            }
            
            public AziendaRow NewAziendaRow() {
                return ((AziendaRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AziendaRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AziendaRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AziendaRowChanged != null)) {
                    this.AziendaRowChanged(this, new AziendaRowChangeEvent(((AziendaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AziendaRowChanging != null)) {
                    this.AziendaRowChanging(this, new AziendaRowChangeEvent(((AziendaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AziendaRowDeleted != null)) {
                    this.AziendaRowDeleted(this, new AziendaRowChangeEvent(((AziendaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AziendaRowDeleting != null)) {
                    this.AziendaRowDeleting(this, new AziendaRowChangeEvent(((AziendaRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAziendaRow(AziendaRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AziendaRow : DataRow {
            
            private AziendaDataTable tableAzienda;
            
            internal AziendaRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAzienda = ((AziendaDataTable)(this.Table));
            }
            
            public string AnnoMeseDenuncia {
                get {
                    return ((string)(this[this.tableAzienda.AnnoMeseDenunciaColumn]));
                }
                set {
                    this[this.tableAzienda.AnnoMeseDenunciaColumn] = value;
                }
            }
            
            public string CFAzienda {
                get {
                    return ((string)(this[this.tableAzienda.CFAziendaColumn]));
                }
                set {
                    this[this.tableAzienda.CFAziendaColumn] = value;
                }
            }
            
            public string RagSocAzienda {
                get {
                    return ((string)(this[this.tableAzienda.RagSocAziendaColumn]));
                }
                set {
                    this[this.tableAzienda.RagSocAziendaColumn] = value;
                }
            }
            
            public string CAP {
                get {
                    try {
                        return ((string)(this[this.tableAzienda.CAPColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAzienda.CAPColumn] = value;
                }
            }
            
            public string ISTAT {
                get {
                    try {
                        return ((string)(this[this.tableAzienda.ISTATColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAzienda.ISTATColumn] = value;
                }
            }
            
            public bool IsCAPNull() {
                return this.IsNull(this.tableAzienda.CAPColumn);
            }
            
            public void SetCAPNull() {
                this[this.tableAzienda.CAPColumn] = System.Convert.DBNull;
            }
            
            public bool IsISTATNull() {
                return this.IsNull(this.tableAzienda.ISTATColumn);
            }
            
            public void SetISTATNull() {
                this[this.tableAzienda.ISTATColumn] = System.Convert.DBNull;
            }
            
            public CollaboratoreRow[] GetCollaboratoreRows() {
                return ((CollaboratoreRow[])(this.GetChildRows(this.Table.ChildRelations["AziendaCollaboratore"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AziendaRowChangeEvent : EventArgs {
            
            private AziendaRow eventRow;
            
            private DataRowAction eventAction;
            
            public AziendaRowChangeEvent(AziendaRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AziendaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CollaboratoreDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCFCollaboratore;
            
            private DataColumn columnCognome;
            
            private DataColumn columnNome;
            
            private DataColumn columnTipoRapporto;
            
            private DataColumn columnCodiceAttivita;
            
            private DataColumn columnImponibile;
            
            private DataColumn columnAliquota;
            
            private DataColumn columnAltraAss;
            
            private DataColumn columnDal;
            
            private DataColumn columnAl;
            
            private DataColumn columnCodCalamita;
            
            private DataColumn columnCodCertificazione;
            
            private DataColumn columnAnnoMeseDenuncia;
            
            private DataColumn columnCFAzienda;
            
            internal CollaboratoreDataTable() : 
                    base("Collaboratore") {
                this.InitClass();
            }
            
            internal CollaboratoreDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CFCollaboratoreColumn {
                get {
                    return this.columnCFCollaboratore;
                }
            }
            
            internal DataColumn CognomeColumn {
                get {
                    return this.columnCognome;
                }
            }
            
            internal DataColumn NomeColumn {
                get {
                    return this.columnNome;
                }
            }
            
            internal DataColumn TipoRapportoColumn {
                get {
                    return this.columnTipoRapporto;
                }
            }
            
            internal DataColumn CodiceAttivitaColumn {
                get {
                    return this.columnCodiceAttivita;
                }
            }
            
            internal DataColumn ImponibileColumn {
                get {
                    return this.columnImponibile;
                }
            }
            
            internal DataColumn AliquotaColumn {
                get {
                    return this.columnAliquota;
                }
            }
            
            internal DataColumn AltraAssColumn {
                get {
                    return this.columnAltraAss;
                }
            }
            
            internal DataColumn DalColumn {
                get {
                    return this.columnDal;
                }
            }
            
            internal DataColumn AlColumn {
                get {
                    return this.columnAl;
                }
            }
            
            internal DataColumn CodCalamitaColumn {
                get {
                    return this.columnCodCalamita;
                }
            }
            
            internal DataColumn CodCertificazioneColumn {
                get {
                    return this.columnCodCertificazione;
                }
            }
            
            internal DataColumn AnnoMeseDenunciaColumn {
                get {
                    return this.columnAnnoMeseDenuncia;
                }
            }
            
            internal DataColumn CFAziendaColumn {
                get {
                    return this.columnCFAzienda;
                }
            }
            
            public CollaboratoreRow this[int index] {
                get {
                    return ((CollaboratoreRow)(this.Rows[index]));
                }
            }
            
            public event CollaboratoreRowChangeEventHandler CollaboratoreRowChanged;
            
            public event CollaboratoreRowChangeEventHandler CollaboratoreRowChanging;
            
            public event CollaboratoreRowChangeEventHandler CollaboratoreRowDeleted;
            
            public event CollaboratoreRowChangeEventHandler CollaboratoreRowDeleting;
            
            public void AddCollaboratoreRow(CollaboratoreRow row) {
                this.Rows.Add(row);
            }
            
            public CollaboratoreRow AddCollaboratoreRow(string CFCollaboratore, string Cognome, string Nome, string TipoRapporto, string CodiceAttivita, string Imponibile, string Aliquota, string AltraAss, string Dal, string Al, string CodCalamita, string CodCertificazione, string AnnoMeseDenuncia, string CFAzienda) {
                CollaboratoreRow rowCollaboratoreRow = ((CollaboratoreRow)(this.NewRow()));
                rowCollaboratoreRow.ItemArray = new object[] {
                        CFCollaboratore,
                        Cognome,
                        Nome,
                        TipoRapporto,
                        CodiceAttivita,
                        Imponibile,
                        Aliquota,
                        AltraAss,
                        Dal,
                        Al,
                        CodCalamita,
                        CodCertificazione,
                        AnnoMeseDenuncia,
                        CFAzienda};
                this.Rows.Add(rowCollaboratoreRow);
                return rowCollaboratoreRow;
            }
            
            public CollaboratoreRow FindByCFCollaboratoreAnnoMeseDenunciaCFAziendaTipoRapportoAliquota(string CFCollaboratore, string AnnoMeseDenuncia, string CFAzienda, string TipoRapporto, string Aliquota) {
                return ((CollaboratoreRow)(this.Rows.Find(new object[] {
                            CFCollaboratore,
                            AnnoMeseDenuncia,
                            CFAzienda,
                            TipoRapporto,
                            Aliquota})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CollaboratoreDataTable cln = ((CollaboratoreDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CollaboratoreDataTable();
            }
            
            internal void InitVars() {
                this.columnCFCollaboratore = this.Columns["CFCollaboratore"];
                this.columnCognome = this.Columns["Cognome"];
                this.columnNome = this.Columns["Nome"];
                this.columnTipoRapporto = this.Columns["TipoRapporto"];
                this.columnCodiceAttivita = this.Columns["CodiceAttivita"];
                this.columnImponibile = this.Columns["Imponibile"];
                this.columnAliquota = this.Columns["Aliquota"];
                this.columnAltraAss = this.Columns["AltraAss"];
                this.columnDal = this.Columns["Dal"];
                this.columnAl = this.Columns["Al"];
                this.columnCodCalamita = this.Columns["CodCalamita"];
                this.columnCodCertificazione = this.Columns["CodCertificazione"];
                this.columnAnnoMeseDenuncia = this.Columns["AnnoMeseDenuncia"];
                this.columnCFAzienda = this.Columns["CFAzienda"];
            }
            
            private void InitClass() {
                this.columnCFCollaboratore = new DataColumn("CFCollaboratore", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCFCollaboratore);
                this.columnCognome = new DataColumn("Cognome", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCognome);
                this.columnNome = new DataColumn("Nome", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNome);
                this.columnTipoRapporto = new DataColumn("TipoRapporto", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTipoRapporto);
                this.columnCodiceAttivita = new DataColumn("CodiceAttivita", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodiceAttivita);
                this.columnImponibile = new DataColumn("Imponibile", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnImponibile);
                this.columnAliquota = new DataColumn("Aliquota", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAliquota);
                this.columnAltraAss = new DataColumn("AltraAss", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAltraAss);
                this.columnDal = new DataColumn("Dal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDal);
                this.columnAl = new DataColumn("Al", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAl);
                this.columnCodCalamita = new DataColumn("CodCalamita", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodCalamita);
                this.columnCodCertificazione = new DataColumn("CodCertificazione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodCertificazione);
                this.columnAnnoMeseDenuncia = new DataColumn("AnnoMeseDenuncia", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAnnoMeseDenuncia);
                this.columnCFAzienda = new DataColumn("CFAzienda", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCFAzienda);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey1", new DataColumn[] {
                                this.columnCFCollaboratore,
                                this.columnAnnoMeseDenuncia,
                                this.columnCFAzienda,
                                this.columnTipoRapporto,
                                this.columnAliquota}, true));
                this.columnCFCollaboratore.AllowDBNull = false;
                this.columnTipoRapporto.AllowDBNull = false;
                this.columnAliquota.AllowDBNull = false;
                this.columnAnnoMeseDenuncia.AllowDBNull = false;
                this.columnCFAzienda.AllowDBNull = false;
            }
            
            public CollaboratoreRow NewCollaboratoreRow() {
                return ((CollaboratoreRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CollaboratoreRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CollaboratoreRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CollaboratoreRowChanged != null)) {
                    this.CollaboratoreRowChanged(this, new CollaboratoreRowChangeEvent(((CollaboratoreRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CollaboratoreRowChanging != null)) {
                    this.CollaboratoreRowChanging(this, new CollaboratoreRowChangeEvent(((CollaboratoreRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CollaboratoreRowDeleted != null)) {
                    this.CollaboratoreRowDeleted(this, new CollaboratoreRowChangeEvent(((CollaboratoreRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CollaboratoreRowDeleting != null)) {
                    this.CollaboratoreRowDeleting(this, new CollaboratoreRowChangeEvent(((CollaboratoreRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCollaboratoreRow(CollaboratoreRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CollaboratoreRow : DataRow {
            
            private CollaboratoreDataTable tableCollaboratore;
            
            internal CollaboratoreRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCollaboratore = ((CollaboratoreDataTable)(this.Table));
            }
            
            public string CFCollaboratore {
                get {
                    return ((string)(this[this.tableCollaboratore.CFCollaboratoreColumn]));
                }
                set {
                    this[this.tableCollaboratore.CFCollaboratoreColumn] = value;
                }
            }
            
            public string Cognome {
                get {
                    try {
                        return ((string)(this[this.tableCollaboratore.CognomeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollaboratore.CognomeColumn] = value;
                }
            }
            
            public string Nome {
                get {
                    try {
                        return ((string)(this[this.tableCollaboratore.NomeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollaboratore.NomeColumn] = value;
                }
            }
            
            public string TipoRapporto {
                get {
                    return ((string)(this[this.tableCollaboratore.TipoRapportoColumn]));
                }
                set {
                    this[this.tableCollaboratore.TipoRapportoColumn] = value;
                }
            }
            
            public string CodiceAttivita {
                get {
                    try {
                        return ((string)(this[this.tableCollaboratore.CodiceAttivitaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollaboratore.CodiceAttivitaColumn] = value;
                }
            }
            
            public string Imponibile {
                get {
                    try {
                        return ((string)(this[this.tableCollaboratore.ImponibileColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollaboratore.ImponibileColumn] = value;
                }
            }
            
            public string Aliquota {
                get {
                    return ((string)(this[this.tableCollaboratore.AliquotaColumn]));
                }
                set {
                    this[this.tableCollaboratore.AliquotaColumn] = value;
                }
            }
            
            public string AltraAss {
                get {
                    try {
                        return ((string)(this[this.tableCollaboratore.AltraAssColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollaboratore.AltraAssColumn] = value;
                }
            }
            
            public string Dal {
                get {
                    try {
                        return ((string)(this[this.tableCollaboratore.DalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollaboratore.DalColumn] = value;
                }
            }
            
            public string Al {
                get {
                    try {
                        return ((string)(this[this.tableCollaboratore.AlColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollaboratore.AlColumn] = value;
                }
            }
            
            public string CodCalamita {
                get {
                    try {
                        return ((string)(this[this.tableCollaboratore.CodCalamitaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollaboratore.CodCalamitaColumn] = value;
                }
            }
            
            public string CodCertificazione {
                get {
                    try {
                        return ((string)(this[this.tableCollaboratore.CodCertificazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollaboratore.CodCertificazioneColumn] = value;
                }
            }
            
            public string AnnoMeseDenuncia {
                get {
                    return ((string)(this[this.tableCollaboratore.AnnoMeseDenunciaColumn]));
                }
                set {
                    this[this.tableCollaboratore.AnnoMeseDenunciaColumn] = value;
                }
            }
            
            public string CFAzienda {
                get {
                    return ((string)(this[this.tableCollaboratore.CFAziendaColumn]));
                }
                set {
                    this[this.tableCollaboratore.CFAziendaColumn] = value;
                }
            }
            
            public AziendaRow AziendaRowParent {
                get {
                    return ((AziendaRow)(this.GetParentRow(this.Table.ParentRelations["AziendaCollaboratore"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AziendaCollaboratore"]);
                }
            }
            
            public bool IsCognomeNull() {
                return this.IsNull(this.tableCollaboratore.CognomeColumn);
            }
            
            public void SetCognomeNull() {
                this[this.tableCollaboratore.CognomeColumn] = System.Convert.DBNull;
            }
            
            public bool IsNomeNull() {
                return this.IsNull(this.tableCollaboratore.NomeColumn);
            }
            
            public void SetNomeNull() {
                this[this.tableCollaboratore.NomeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodiceAttivitaNull() {
                return this.IsNull(this.tableCollaboratore.CodiceAttivitaColumn);
            }
            
            public void SetCodiceAttivitaNull() {
                this[this.tableCollaboratore.CodiceAttivitaColumn] = System.Convert.DBNull;
            }
            
            public bool IsImponibileNull() {
                return this.IsNull(this.tableCollaboratore.ImponibileColumn);
            }
            
            public void SetImponibileNull() {
                this[this.tableCollaboratore.ImponibileColumn] = System.Convert.DBNull;
            }
            
            public bool IsAltraAssNull() {
                return this.IsNull(this.tableCollaboratore.AltraAssColumn);
            }
            
            public void SetAltraAssNull() {
                this[this.tableCollaboratore.AltraAssColumn] = System.Convert.DBNull;
            }
            
            public bool IsDalNull() {
                return this.IsNull(this.tableCollaboratore.DalColumn);
            }
            
            public void SetDalNull() {
                this[this.tableCollaboratore.DalColumn] = System.Convert.DBNull;
            }
            
            public bool IsAlNull() {
                return this.IsNull(this.tableCollaboratore.AlColumn);
            }
            
            public void SetAlNull() {
                this[this.tableCollaboratore.AlColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodCalamitaNull() {
                return this.IsNull(this.tableCollaboratore.CodCalamitaColumn);
            }
            
            public void SetCodCalamitaNull() {
                this[this.tableCollaboratore.CodCalamitaColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodCertificazioneNull() {
                return this.IsNull(this.tableCollaboratore.CodCertificazioneColumn);
            }
            
            public void SetCodCertificazioneNull() {
                this[this.tableCollaboratore.CodCertificazioneColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CollaboratoreRowChangeEvent : EventArgs {
            
            private CollaboratoreRow eventRow;
            
            private DataRowAction eventAction;
            
            public CollaboratoreRowChangeEvent(CollaboratoreRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CollaboratoreRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EmensDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAnnoMeseDenuncia;
            
            private DataColumn columnCFAzienda;
            
            private DataColumn columnCFCollaboratore;
            
            private DataColumn columnCognome;
            
            private DataColumn columnNome;
            
            private DataColumn columnTipoRapporto;
            
            private DataColumn columnCodiceAttivita;
            
            private DataColumn columnImponibile;
            
            private DataColumn columnAliquota;
            
            private DataColumn columnAltraAss;
            
            private DataColumn columnDal;
            
            private DataColumn columnAl;
            
            private DataColumn columnCodCalamita;
            
            private DataColumn columnCodCertificazione;
            
            internal EmensDataTable() : 
                    base("Emens") {
                this.InitClass();
            }
            
            internal EmensDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AnnoMeseDenunciaColumn {
                get {
                    return this.columnAnnoMeseDenuncia;
                }
            }
            
            internal DataColumn CFAziendaColumn {
                get {
                    return this.columnCFAzienda;
                }
            }
            
            internal DataColumn CFCollaboratoreColumn {
                get {
                    return this.columnCFCollaboratore;
                }
            }
            
            internal DataColumn CognomeColumn {
                get {
                    return this.columnCognome;
                }
            }
            
            internal DataColumn NomeColumn {
                get {
                    return this.columnNome;
                }
            }
            
            internal DataColumn TipoRapportoColumn {
                get {
                    return this.columnTipoRapporto;
                }
            }
            
            internal DataColumn CodiceAttivitaColumn {
                get {
                    return this.columnCodiceAttivita;
                }
            }
            
            internal DataColumn ImponibileColumn {
                get {
                    return this.columnImponibile;
                }
            }
            
            internal DataColumn AliquotaColumn {
                get {
                    return this.columnAliquota;
                }
            }
            
            internal DataColumn AltraAssColumn {
                get {
                    return this.columnAltraAss;
                }
            }
            
            internal DataColumn DalColumn {
                get {
                    return this.columnDal;
                }
            }
            
            internal DataColumn AlColumn {
                get {
                    return this.columnAl;
                }
            }
            
            internal DataColumn CodCalamitaColumn {
                get {
                    return this.columnCodCalamita;
                }
            }
            
            internal DataColumn CodCertificazioneColumn {
                get {
                    return this.columnCodCertificazione;
                }
            }
            
            public EmensRow this[int index] {
                get {
                    return ((EmensRow)(this.Rows[index]));
                }
            }
            
            public event EmensRowChangeEventHandler EmensRowChanged;
            
            public event EmensRowChangeEventHandler EmensRowChanging;
            
            public event EmensRowChangeEventHandler EmensRowDeleted;
            
            public event EmensRowChangeEventHandler EmensRowDeleting;
            
            public void AddEmensRow(EmensRow row) {
                this.Rows.Add(row);
            }
            
            public EmensRow AddEmensRow(string AnnoMeseDenuncia, string CFAzienda, string CFCollaboratore, string Cognome, string Nome, string TipoRapporto, string CodiceAttivita, string Imponibile, string Aliquota, string AltraAss, string Dal, string Al, string CodCalamita, string CodCertificazione) {
                EmensRow rowEmensRow = ((EmensRow)(this.NewRow()));
                rowEmensRow.ItemArray = new object[] {
                        AnnoMeseDenuncia,
                        CFAzienda,
                        CFCollaboratore,
                        Cognome,
                        Nome,
                        TipoRapporto,
                        CodiceAttivita,
                        Imponibile,
                        Aliquota,
                        AltraAss,
                        Dal,
                        Al,
                        CodCalamita,
                        CodCertificazione};
                this.Rows.Add(rowEmensRow);
                return rowEmensRow;
            }
            
            public EmensRow FindByAnnoMeseDenunciaCFAziendaCFCollaboratoreTipoRapportoAliquota(string AnnoMeseDenuncia, string CFAzienda, string CFCollaboratore, string TipoRapporto, string Aliquota) {
                return ((EmensRow)(this.Rows.Find(new object[] {
                            AnnoMeseDenuncia,
                            CFAzienda,
                            CFCollaboratore,
                            TipoRapporto,
                            Aliquota})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                EmensDataTable cln = ((EmensDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new EmensDataTable();
            }
            
            internal void InitVars() {
                this.columnAnnoMeseDenuncia = this.Columns["AnnoMeseDenuncia"];
                this.columnCFAzienda = this.Columns["CFAzienda"];
                this.columnCFCollaboratore = this.Columns["CFCollaboratore"];
                this.columnCognome = this.Columns["Cognome"];
                this.columnNome = this.Columns["Nome"];
                this.columnTipoRapporto = this.Columns["TipoRapporto"];
                this.columnCodiceAttivita = this.Columns["CodiceAttivita"];
                this.columnImponibile = this.Columns["Imponibile"];
                this.columnAliquota = this.Columns["Aliquota"];
                this.columnAltraAss = this.Columns["AltraAss"];
                this.columnDal = this.Columns["Dal"];
                this.columnAl = this.Columns["Al"];
                this.columnCodCalamita = this.Columns["CodCalamita"];
                this.columnCodCertificazione = this.Columns["CodCertificazione"];
            }
            
            private void InitClass() {
                this.columnAnnoMeseDenuncia = new DataColumn("AnnoMeseDenuncia", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAnnoMeseDenuncia);
                this.columnCFAzienda = new DataColumn("CFAzienda", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCFAzienda);
                this.columnCFCollaboratore = new DataColumn("CFCollaboratore", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCFCollaboratore);
                this.columnCognome = new DataColumn("Cognome", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCognome);
                this.columnNome = new DataColumn("Nome", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNome);
                this.columnTipoRapporto = new DataColumn("TipoRapporto", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTipoRapporto);
                this.columnCodiceAttivita = new DataColumn("CodiceAttivita", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodiceAttivita);
                this.columnImponibile = new DataColumn("Imponibile", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnImponibile);
                this.columnAliquota = new DataColumn("Aliquota", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAliquota);
                this.columnAltraAss = new DataColumn("AltraAss", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAltraAss);
                this.columnDal = new DataColumn("Dal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDal);
                this.columnAl = new DataColumn("Al", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAl);
                this.columnCodCalamita = new DataColumn("CodCalamita", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodCalamita);
                this.columnCodCertificazione = new DataColumn("CodCertificazione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodCertificazione);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey3", new DataColumn[] {
                                this.columnAnnoMeseDenuncia,
                                this.columnCFAzienda,
                                this.columnCFCollaboratore,
                                this.columnTipoRapporto,
                                this.columnAliquota}, true));
                this.columnAnnoMeseDenuncia.AllowDBNull = false;
                this.columnCFAzienda.AllowDBNull = false;
                this.columnCFCollaboratore.AllowDBNull = false;
                this.columnTipoRapporto.AllowDBNull = false;
                this.columnAliquota.AllowDBNull = false;
            }
            
            public EmensRow NewEmensRow() {
                return ((EmensRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new EmensRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EmensRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmensRowChanged != null)) {
                    this.EmensRowChanged(this, new EmensRowChangeEvent(((EmensRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmensRowChanging != null)) {
                    this.EmensRowChanging(this, new EmensRowChangeEvent(((EmensRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmensRowDeleted != null)) {
                    this.EmensRowDeleted(this, new EmensRowChangeEvent(((EmensRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmensRowDeleting != null)) {
                    this.EmensRowDeleting(this, new EmensRowChangeEvent(((EmensRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEmensRow(EmensRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EmensRow : DataRow {
            
            private EmensDataTable tableEmens;
            
            internal EmensRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmens = ((EmensDataTable)(this.Table));
            }
            
            public string AnnoMeseDenuncia {
                get {
                    return ((string)(this[this.tableEmens.AnnoMeseDenunciaColumn]));
                }
                set {
                    this[this.tableEmens.AnnoMeseDenunciaColumn] = value;
                }
            }
            
            public string CFAzienda {
                get {
                    return ((string)(this[this.tableEmens.CFAziendaColumn]));
                }
                set {
                    this[this.tableEmens.CFAziendaColumn] = value;
                }
            }
            
            public string CFCollaboratore {
                get {
                    return ((string)(this[this.tableEmens.CFCollaboratoreColumn]));
                }
                set {
                    this[this.tableEmens.CFCollaboratoreColumn] = value;
                }
            }
            
            public string Cognome {
                get {
                    try {
                        return ((string)(this[this.tableEmens.CognomeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmens.CognomeColumn] = value;
                }
            }
            
            public string Nome {
                get {
                    try {
                        return ((string)(this[this.tableEmens.NomeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmens.NomeColumn] = value;
                }
            }
            
            public string TipoRapporto {
                get {
                    return ((string)(this[this.tableEmens.TipoRapportoColumn]));
                }
                set {
                    this[this.tableEmens.TipoRapportoColumn] = value;
                }
            }
            
            public string CodiceAttivita {
                get {
                    try {
                        return ((string)(this[this.tableEmens.CodiceAttivitaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmens.CodiceAttivitaColumn] = value;
                }
            }
            
            public string Imponibile {
                get {
                    try {
                        return ((string)(this[this.tableEmens.ImponibileColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmens.ImponibileColumn] = value;
                }
            }
            
            public string Aliquota {
                get {
                    return ((string)(this[this.tableEmens.AliquotaColumn]));
                }
                set {
                    this[this.tableEmens.AliquotaColumn] = value;
                }
            }
            
            public string AltraAss {
                get {
                    try {
                        return ((string)(this[this.tableEmens.AltraAssColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmens.AltraAssColumn] = value;
                }
            }
            
            public string Dal {
                get {
                    try {
                        return ((string)(this[this.tableEmens.DalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmens.DalColumn] = value;
                }
            }
            
            public string Al {
                get {
                    try {
                        return ((string)(this[this.tableEmens.AlColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmens.AlColumn] = value;
                }
            }
            
            public string CodCalamita {
                get {
                    try {
                        return ((string)(this[this.tableEmens.CodCalamitaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmens.CodCalamitaColumn] = value;
                }
            }
            
            public string CodCertificazione {
                get {
                    try {
                        return ((string)(this[this.tableEmens.CodCertificazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmens.CodCertificazioneColumn] = value;
                }
            }
            
            public bool IsCognomeNull() {
                return this.IsNull(this.tableEmens.CognomeColumn);
            }
            
            public void SetCognomeNull() {
                this[this.tableEmens.CognomeColumn] = System.Convert.DBNull;
            }
            
            public bool IsNomeNull() {
                return this.IsNull(this.tableEmens.NomeColumn);
            }
            
            public void SetNomeNull() {
                this[this.tableEmens.NomeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodiceAttivitaNull() {
                return this.IsNull(this.tableEmens.CodiceAttivitaColumn);
            }
            
            public void SetCodiceAttivitaNull() {
                this[this.tableEmens.CodiceAttivitaColumn] = System.Convert.DBNull;
            }
            
            public bool IsImponibileNull() {
                return this.IsNull(this.tableEmens.ImponibileColumn);
            }
            
            public void SetImponibileNull() {
                this[this.tableEmens.ImponibileColumn] = System.Convert.DBNull;
            }
            
            public bool IsAltraAssNull() {
                return this.IsNull(this.tableEmens.AltraAssColumn);
            }
            
            public void SetAltraAssNull() {
                this[this.tableEmens.AltraAssColumn] = System.Convert.DBNull;
            }
            
            public bool IsDalNull() {
                return this.IsNull(this.tableEmens.DalColumn);
            }
            
            public void SetDalNull() {
                this[this.tableEmens.DalColumn] = System.Convert.DBNull;
            }
            
            public bool IsAlNull() {
                return this.IsNull(this.tableEmens.AlColumn);
            }
            
            public void SetAlNull() {
                this[this.tableEmens.AlColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodCalamitaNull() {
                return this.IsNull(this.tableEmens.CodCalamitaColumn);
            }
            
            public void SetCodCalamitaNull() {
                this[this.tableEmens.CodCalamitaColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodCertificazioneNull() {
                return this.IsNull(this.tableEmens.CodCertificazioneColumn);
            }
            
            public void SetCodCertificazioneNull() {
                this[this.tableEmens.CodCertificazioneColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EmensRowChangeEvent : EventArgs {
            
            private EmensRow eventRow;
            
            private DataRowAction eventAction;
            
            public EmensRowChangeEvent(EmensRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EmensRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sedeinpsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columncodicesede;
            
            private DataColumn columndenominazione;
            
            private DataColumn columnccp;
            
            internal sedeinpsDataTable() : 
                    base("sedeinps") {
                this.InitClass();
            }
            
            internal sedeinpsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn codicesedeColumn {
                get {
                    return this.columncodicesede;
                }
            }
            
            internal DataColumn denominazioneColumn {
                get {
                    return this.columndenominazione;
                }
            }
            
            internal DataColumn ccpColumn {
                get {
                    return this.columnccp;
                }
            }
            
            public sedeinpsRow this[int index] {
                get {
                    return ((sedeinpsRow)(this.Rows[index]));
                }
            }
            
            public event sedeinpsRowChangeEventHandler sedeinpsRowChanged;
            
            public event sedeinpsRowChangeEventHandler sedeinpsRowChanging;
            
            public event sedeinpsRowChangeEventHandler sedeinpsRowDeleted;
            
            public event sedeinpsRowChangeEventHandler sedeinpsRowDeleting;
            
            public void AddsedeinpsRow(sedeinpsRow row) {
                this.Rows.Add(row);
            }
            
            public sedeinpsRow AddsedeinpsRow(string codicesede, string denominazione, string ccp) {
                sedeinpsRow rowsedeinpsRow = ((sedeinpsRow)(this.NewRow()));
                rowsedeinpsRow.ItemArray = new object[] {
                        codicesede,
                        denominazione,
                        ccp};
                this.Rows.Add(rowsedeinpsRow);
                return rowsedeinpsRow;
            }
            
            public sedeinpsRow FindBycodicesede(string codicesede) {
                return ((sedeinpsRow)(this.Rows.Find(new object[] {
                            codicesede})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                sedeinpsDataTable cln = ((sedeinpsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new sedeinpsDataTable();
            }
            
            internal void InitVars() {
                this.columncodicesede = this.Columns["codicesede"];
                this.columndenominazione = this.Columns["denominazione"];
                this.columnccp = this.Columns["ccp"];
            }
            
            private void InitClass() {
                this.columncodicesede = new DataColumn("codicesede", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncodicesede);
                this.columndenominazione = new DataColumn("denominazione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndenominazione);
                this.columnccp = new DataColumn("ccp", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnccp);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey4", new DataColumn[] {
                                this.columncodicesede}, true));
                this.columncodicesede.AllowDBNull = false;
                this.columncodicesede.Unique = true;
            }
            
            public sedeinpsRow NewsedeinpsRow() {
                return ((sedeinpsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new sedeinpsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(sedeinpsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sedeinpsRowChanged != null)) {
                    this.sedeinpsRowChanged(this, new sedeinpsRowChangeEvent(((sedeinpsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sedeinpsRowChanging != null)) {
                    this.sedeinpsRowChanging(this, new sedeinpsRowChangeEvent(((sedeinpsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sedeinpsRowDeleted != null)) {
                    this.sedeinpsRowDeleted(this, new sedeinpsRowChangeEvent(((sedeinpsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sedeinpsRowDeleting != null)) {
                    this.sedeinpsRowDeleting(this, new sedeinpsRowChangeEvent(((sedeinpsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovesedeinpsRow(sedeinpsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sedeinpsRow : DataRow {
            
            private sedeinpsDataTable tablesedeinps;
            
            internal sedeinpsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablesedeinps = ((sedeinpsDataTable)(this.Table));
            }
            
            public string codicesede {
                get {
                    return ((string)(this[this.tablesedeinps.codicesedeColumn]));
                }
                set {
                    this[this.tablesedeinps.codicesedeColumn] = value;
                }
            }
            
            public string denominazione {
                get {
                    try {
                        return ((string)(this[this.tablesedeinps.denominazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesedeinps.denominazioneColumn] = value;
                }
            }
            
            public string ccp {
                get {
                    try {
                        return ((string)(this[this.tablesedeinps.ccpColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesedeinps.ccpColumn] = value;
                }
            }
            
            public bool IsdenominazioneNull() {
                return this.IsNull(this.tablesedeinps.denominazioneColumn);
            }
            
            public void SetdenominazioneNull() {
                this[this.tablesedeinps.denominazioneColumn] = System.Convert.DBNull;
            }
            
            public bool IsccpNull() {
                return this.IsNull(this.tablesedeinps.ccpColumn);
            }
            
            public void SetccpNull() {
                this[this.tablesedeinps.ccpColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sedeinpsRowChangeEvent : EventArgs {
            
            private sedeinpsRow eventRow;
            
            private DataRowAction eventAction;
            
            public sedeinpsRowChangeEvent(sedeinpsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public sedeinpsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class emenstiporapportoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnesercizio;
            
            private DataColumn columncodicerapporto;
            
            private DataColumn columndescrizione;
            
            private DataColumn columnnote;
            
            internal emenstiporapportoDataTable() : 
                    base("emenstiporapporto") {
                this.InitClass();
            }
            
            internal emenstiporapportoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn esercizioColumn {
                get {
                    return this.columnesercizio;
                }
            }
            
            internal DataColumn codicerapportoColumn {
                get {
                    return this.columncodicerapporto;
                }
            }
            
            internal DataColumn descrizioneColumn {
                get {
                    return this.columndescrizione;
                }
            }
            
            internal DataColumn noteColumn {
                get {
                    return this.columnnote;
                }
            }
            
            public emenstiporapportoRow this[int index] {
                get {
                    return ((emenstiporapportoRow)(this.Rows[index]));
                }
            }
            
            public event emenstiporapportoRowChangeEventHandler emenstiporapportoRowChanged;
            
            public event emenstiporapportoRowChangeEventHandler emenstiporapportoRowChanging;
            
            public event emenstiporapportoRowChangeEventHandler emenstiporapportoRowDeleted;
            
            public event emenstiporapportoRowChangeEventHandler emenstiporapportoRowDeleting;
            
            public void AddemenstiporapportoRow(emenstiporapportoRow row) {
                this.Rows.Add(row);
            }
            
            public emenstiporapportoRow AddemenstiporapportoRow(int esercizio, string codicerapporto, string descrizione, string note) {
                emenstiporapportoRow rowemenstiporapportoRow = ((emenstiporapportoRow)(this.NewRow()));
                rowemenstiporapportoRow.ItemArray = new object[] {
                        esercizio,
                        codicerapporto,
                        descrizione,
                        note};
                this.Rows.Add(rowemenstiporapportoRow);
                return rowemenstiporapportoRow;
            }
            
            public emenstiporapportoRow FindByeserciziocodicerapporto(int esercizio, string codicerapporto) {
                return ((emenstiporapportoRow)(this.Rows.Find(new object[] {
                            esercizio,
                            codicerapporto})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                emenstiporapportoDataTable cln = ((emenstiporapportoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new emenstiporapportoDataTable();
            }
            
            internal void InitVars() {
                this.columnesercizio = this.Columns["esercizio"];
                this.columncodicerapporto = this.Columns["codicerapporto"];
                this.columndescrizione = this.Columns["descrizione"];
                this.columnnote = this.Columns["note"];
            }
            
            private void InitClass() {
                this.columnesercizio = new DataColumn("esercizio", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnesercizio);
                this.columncodicerapporto = new DataColumn("codicerapporto", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncodicerapporto);
                this.columndescrizione = new DataColumn("descrizione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescrizione);
                this.columnnote = new DataColumn("note", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnote);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey5", new DataColumn[] {
                                this.columnesercizio,
                                this.columncodicerapporto}, true));
                this.columnesercizio.AllowDBNull = false;
                this.columncodicerapporto.AllowDBNull = false;
            }
            
            public emenstiporapportoRow NewemenstiporapportoRow() {
                return ((emenstiporapportoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new emenstiporapportoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(emenstiporapportoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.emenstiporapportoRowChanged != null)) {
                    this.emenstiporapportoRowChanged(this, new emenstiporapportoRowChangeEvent(((emenstiporapportoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.emenstiporapportoRowChanging != null)) {
                    this.emenstiporapportoRowChanging(this, new emenstiporapportoRowChangeEvent(((emenstiporapportoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.emenstiporapportoRowDeleted != null)) {
                    this.emenstiporapportoRowDeleted(this, new emenstiporapportoRowChangeEvent(((emenstiporapportoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.emenstiporapportoRowDeleting != null)) {
                    this.emenstiporapportoRowDeleting(this, new emenstiporapportoRowChangeEvent(((emenstiporapportoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveemenstiporapportoRow(emenstiporapportoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class emenstiporapportoRow : DataRow {
            
            private emenstiporapportoDataTable tableemenstiporapporto;
            
            internal emenstiporapportoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableemenstiporapporto = ((emenstiporapportoDataTable)(this.Table));
            }
            
            public int esercizio {
                get {
                    return ((int)(this[this.tableemenstiporapporto.esercizioColumn]));
                }
                set {
                    this[this.tableemenstiporapporto.esercizioColumn] = value;
                }
            }
            
            public string codicerapporto {
                get {
                    return ((string)(this[this.tableemenstiporapporto.codicerapportoColumn]));
                }
                set {
                    this[this.tableemenstiporapporto.codicerapportoColumn] = value;
                }
            }
            
            public string descrizione {
                get {
                    try {
                        return ((string)(this[this.tableemenstiporapporto.descrizioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemenstiporapporto.descrizioneColumn] = value;
                }
            }
            
            public string note {
                get {
                    try {
                        return ((string)(this[this.tableemenstiporapporto.noteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableemenstiporapporto.noteColumn] = value;
                }
            }
            
            public bool IsdescrizioneNull() {
                return this.IsNull(this.tableemenstiporapporto.descrizioneColumn);
            }
            
            public void SetdescrizioneNull() {
                this[this.tableemenstiporapporto.descrizioneColumn] = System.Convert.DBNull;
            }
            
            public bool IsnoteNull() {
                return this.IsNull(this.tableemenstiporapporto.noteColumn);
            }
            
            public void SetnoteNull() {
                this[this.tableemenstiporapporto.noteColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class emenstiporapportoRowChangeEvent : EventArgs {
            
            private emenstiporapportoRow eventRow;
            
            private DataRowAction eventAction;
            
            public emenstiporapportoRowChangeEvent(emenstiporapportoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public emenstiporapportoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class altraformaassicurativaDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columncodiceforma;
            
            private DataColumn columnesercizio;
            
            private DataColumn columndescrizione;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            internal altraformaassicurativaDataTable() : 
                    base("altraformaassicurativa") {
                this.InitClass();
            }
            
            internal altraformaassicurativaDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn codiceformaColumn {
                get {
                    return this.columncodiceforma;
                }
            }
            
            internal DataColumn esercizioColumn {
                get {
                    return this.columnesercizio;
                }
            }
            
            internal DataColumn descrizioneColumn {
                get {
                    return this.columndescrizione;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            public altraformaassicurativaRow this[int index] {
                get {
                    return ((altraformaassicurativaRow)(this.Rows[index]));
                }
            }
            
            public event altraformaassicurativaRowChangeEventHandler altraformaassicurativaRowChanged;
            
            public event altraformaassicurativaRowChangeEventHandler altraformaassicurativaRowChanging;
            
            public event altraformaassicurativaRowChangeEventHandler altraformaassicurativaRowDeleted;
            
            public event altraformaassicurativaRowChangeEventHandler altraformaassicurativaRowDeleting;
            
            public void AddaltraformaassicurativaRow(altraformaassicurativaRow row) {
                this.Rows.Add(row);
            }
            
            public altraformaassicurativaRow AddaltraformaassicurativaRow(string codiceforma, int esercizio, string descrizione, System.DateTime lastmodtimestamp, string lastmoduser) {
                altraformaassicurativaRow rowaltraformaassicurativaRow = ((altraformaassicurativaRow)(this.NewRow()));
                rowaltraformaassicurativaRow.ItemArray = new object[] {
                        codiceforma,
                        esercizio,
                        descrizione,
                        lastmodtimestamp,
                        lastmoduser};
                this.Rows.Add(rowaltraformaassicurativaRow);
                return rowaltraformaassicurativaRow;
            }
            
            public altraformaassicurativaRow FindBycodiceformaesercizio(string codiceforma, int esercizio) {
                return ((altraformaassicurativaRow)(this.Rows.Find(new object[] {
                            codiceforma,
                            esercizio})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                altraformaassicurativaDataTable cln = ((altraformaassicurativaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new altraformaassicurativaDataTable();
            }
            
            internal void InitVars() {
                this.columncodiceforma = this.Columns["codiceforma"];
                this.columnesercizio = this.Columns["esercizio"];
                this.columndescrizione = this.Columns["descrizione"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
            }
            
            private void InitClass() {
                this.columncodiceforma = new DataColumn("codiceforma", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncodiceforma);
                this.columnesercizio = new DataColumn("esercizio", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnesercizio);
                this.columndescrizione = new DataColumn("descrizione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescrizione);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey6", new DataColumn[] {
                                this.columncodiceforma,
                                this.columnesercizio}, true));
                this.columncodiceforma.AllowDBNull = false;
                this.columnesercizio.AllowDBNull = false;
                this.columndescrizione.AllowDBNull = false;
            }
            
            public altraformaassicurativaRow NewaltraformaassicurativaRow() {
                return ((altraformaassicurativaRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new altraformaassicurativaRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(altraformaassicurativaRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.altraformaassicurativaRowChanged != null)) {
                    this.altraformaassicurativaRowChanged(this, new altraformaassicurativaRowChangeEvent(((altraformaassicurativaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.altraformaassicurativaRowChanging != null)) {
                    this.altraformaassicurativaRowChanging(this, new altraformaassicurativaRowChangeEvent(((altraformaassicurativaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.altraformaassicurativaRowDeleted != null)) {
                    this.altraformaassicurativaRowDeleted(this, new altraformaassicurativaRowChangeEvent(((altraformaassicurativaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.altraformaassicurativaRowDeleting != null)) {
                    this.altraformaassicurativaRowDeleting(this, new altraformaassicurativaRowChangeEvent(((altraformaassicurativaRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovealtraformaassicurativaRow(altraformaassicurativaRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class altraformaassicurativaRow : DataRow {
            
            private altraformaassicurativaDataTable tablealtraformaassicurativa;
            
            internal altraformaassicurativaRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablealtraformaassicurativa = ((altraformaassicurativaDataTable)(this.Table));
            }
            
            public string codiceforma {
                get {
                    return ((string)(this[this.tablealtraformaassicurativa.codiceformaColumn]));
                }
                set {
                    this[this.tablealtraformaassicurativa.codiceformaColumn] = value;
                }
            }
            
            public int esercizio {
                get {
                    return ((int)(this[this.tablealtraformaassicurativa.esercizioColumn]));
                }
                set {
                    this[this.tablealtraformaassicurativa.esercizioColumn] = value;
                }
            }
            
            public string descrizione {
                get {
                    return ((string)(this[this.tablealtraformaassicurativa.descrizioneColumn]));
                }
                set {
                    this[this.tablealtraformaassicurativa.descrizioneColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablealtraformaassicurativa.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablealtraformaassicurativa.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablealtraformaassicurativa.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablealtraformaassicurativa.lastmoduserColumn] = value;
                }
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablealtraformaassicurativa.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablealtraformaassicurativa.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablealtraformaassicurativa.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablealtraformaassicurativa.lastmoduserColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class altraformaassicurativaRowChangeEvent : EventArgs {
            
            private altraformaassicurativaRow eventRow;
            
            private DataRowAction eventAction;
            
            public altraformaassicurativaRowChangeEvent(altraformaassicurativaRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public altraformaassicurativaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class attivitaprevidenzialeinpsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columncodiceattivita;
            
            private DataColumn columnesercizio;
            
            private DataColumn columndescrizione;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            internal attivitaprevidenzialeinpsDataTable() : 
                    base("attivitaprevidenzialeinps") {
                this.InitClass();
            }
            
            internal attivitaprevidenzialeinpsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn codiceattivitaColumn {
                get {
                    return this.columncodiceattivita;
                }
            }
            
            internal DataColumn esercizioColumn {
                get {
                    return this.columnesercizio;
                }
            }
            
            internal DataColumn descrizioneColumn {
                get {
                    return this.columndescrizione;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            public attivitaprevidenzialeinpsRow this[int index] {
                get {
                    return ((attivitaprevidenzialeinpsRow)(this.Rows[index]));
                }
            }
            
            public event attivitaprevidenzialeinpsRowChangeEventHandler attivitaprevidenzialeinpsRowChanged;
            
            public event attivitaprevidenzialeinpsRowChangeEventHandler attivitaprevidenzialeinpsRowChanging;
            
            public event attivitaprevidenzialeinpsRowChangeEventHandler attivitaprevidenzialeinpsRowDeleted;
            
            public event attivitaprevidenzialeinpsRowChangeEventHandler attivitaprevidenzialeinpsRowDeleting;
            
            public void AddattivitaprevidenzialeinpsRow(attivitaprevidenzialeinpsRow row) {
                this.Rows.Add(row);
            }
            
            public attivitaprevidenzialeinpsRow AddattivitaprevidenzialeinpsRow(string codiceattivita, int esercizio, string descrizione, System.DateTime lastmodtimestamp, string lastmoduser) {
                attivitaprevidenzialeinpsRow rowattivitaprevidenzialeinpsRow = ((attivitaprevidenzialeinpsRow)(this.NewRow()));
                rowattivitaprevidenzialeinpsRow.ItemArray = new object[] {
                        codiceattivita,
                        esercizio,
                        descrizione,
                        lastmodtimestamp,
                        lastmoduser};
                this.Rows.Add(rowattivitaprevidenzialeinpsRow);
                return rowattivitaprevidenzialeinpsRow;
            }
            
            public attivitaprevidenzialeinpsRow FindBycodiceattivitaesercizio(string codiceattivita, int esercizio) {
                return ((attivitaprevidenzialeinpsRow)(this.Rows.Find(new object[] {
                            codiceattivita,
                            esercizio})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                attivitaprevidenzialeinpsDataTable cln = ((attivitaprevidenzialeinpsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new attivitaprevidenzialeinpsDataTable();
            }
            
            internal void InitVars() {
                this.columncodiceattivita = this.Columns["codiceattivita"];
                this.columnesercizio = this.Columns["esercizio"];
                this.columndescrizione = this.Columns["descrizione"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
            }
            
            private void InitClass() {
                this.columncodiceattivita = new DataColumn("codiceattivita", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncodiceattivita);
                this.columnesercizio = new DataColumn("esercizio", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnesercizio);
                this.columndescrizione = new DataColumn("descrizione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescrizione);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey7", new DataColumn[] {
                                this.columncodiceattivita,
                                this.columnesercizio}, true));
                this.columncodiceattivita.AllowDBNull = false;
                this.columnesercizio.AllowDBNull = false;
            }
            
            public attivitaprevidenzialeinpsRow NewattivitaprevidenzialeinpsRow() {
                return ((attivitaprevidenzialeinpsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new attivitaprevidenzialeinpsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(attivitaprevidenzialeinpsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.attivitaprevidenzialeinpsRowChanged != null)) {
                    this.attivitaprevidenzialeinpsRowChanged(this, new attivitaprevidenzialeinpsRowChangeEvent(((attivitaprevidenzialeinpsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.attivitaprevidenzialeinpsRowChanging != null)) {
                    this.attivitaprevidenzialeinpsRowChanging(this, new attivitaprevidenzialeinpsRowChangeEvent(((attivitaprevidenzialeinpsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.attivitaprevidenzialeinpsRowDeleted != null)) {
                    this.attivitaprevidenzialeinpsRowDeleted(this, new attivitaprevidenzialeinpsRowChangeEvent(((attivitaprevidenzialeinpsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.attivitaprevidenzialeinpsRowDeleting != null)) {
                    this.attivitaprevidenzialeinpsRowDeleting(this, new attivitaprevidenzialeinpsRowChangeEvent(((attivitaprevidenzialeinpsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveattivitaprevidenzialeinpsRow(attivitaprevidenzialeinpsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class attivitaprevidenzialeinpsRow : DataRow {
            
            private attivitaprevidenzialeinpsDataTable tableattivitaprevidenzialeinps;
            
            internal attivitaprevidenzialeinpsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableattivitaprevidenzialeinps = ((attivitaprevidenzialeinpsDataTable)(this.Table));
            }
            
            public string codiceattivita {
                get {
                    return ((string)(this[this.tableattivitaprevidenzialeinps.codiceattivitaColumn]));
                }
                set {
                    this[this.tableattivitaprevidenzialeinps.codiceattivitaColumn] = value;
                }
            }
            
            public int esercizio {
                get {
                    return ((int)(this[this.tableattivitaprevidenzialeinps.esercizioColumn]));
                }
                set {
                    this[this.tableattivitaprevidenzialeinps.esercizioColumn] = value;
                }
            }
            
            public string descrizione {
                get {
                    try {
                        return ((string)(this[this.tableattivitaprevidenzialeinps.descrizioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableattivitaprevidenzialeinps.descrizioneColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableattivitaprevidenzialeinps.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableattivitaprevidenzialeinps.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tableattivitaprevidenzialeinps.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableattivitaprevidenzialeinps.lastmoduserColumn] = value;
                }
            }
            
            public bool IsdescrizioneNull() {
                return this.IsNull(this.tableattivitaprevidenzialeinps.descrizioneColumn);
            }
            
            public void SetdescrizioneNull() {
                this[this.tableattivitaprevidenzialeinps.descrizioneColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tableattivitaprevidenzialeinps.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tableattivitaprevidenzialeinps.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tableattivitaprevidenzialeinps.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tableattivitaprevidenzialeinps.lastmoduserColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class attivitaprevidenzialeinpsRowChangeEvent : EventArgs {
            
            private attivitaprevidenzialeinpsRow eventRow;
            
            private DataRowAction eventAction;
            
            public attivitaprevidenzialeinpsRowChangeEvent(attivitaprevidenzialeinpsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public attivitaprevidenzialeinpsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
