
/*
Easy
Copyright (C) 2024 Università degli Studi di Catania (www.unict.it)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.2.0.0. www.xsd2code.com
//    {"TargetFramework":"Net45","NameSpace":"Valtellinese","Properties":{"AutomaticProperties":true},"XmlAttribute":{"Enabled":true},"ClassParams":{},"Serialization":{"ShouldSerialize":{},"XmlSerializerEvent":{},"XmlOutput":{},"JsonOutput":{},"Enabled":true},"Miscellaneous":{"EnableDebug":true}}
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace Valtellinese {
	using System;
	using System.Diagnostics;
	using System.Xml.Serialization;
	using System.Runtime.Serialization;
	using System.Collections;
	using System.Xml.Schema;
	using System.ComponentModel;
	using System.Xml;
	using System.IO;
	using System.Text;
	using System.Collections.Generic;


	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	[XmlRootAttribute(Namespace = "urn:pmpay", IsNullable = false)]
	public partial class PAGAMENTO_REQUEST {
		private static XmlSerializer _serializer;

		public headerPagamento headerPagamento { get; set; }
		public anagraficaPagamento anagraficaPagamento { get; set; }
		[XmlElement("pagamento")]
		public List<pagamento> pagamento { get; set; }

		public PAGAMENTO_REQUEST() {
			pagamento = new List<pagamento>();
			anagraficaPagamento = new anagraficaPagamento();
			headerPagamento = new headerPagamento();
		}

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(PAGAMENTO_REQUEST));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize PAGAMENTO_REQUEST object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes PAGAMENTO_REQUEST object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output PAGAMENTO_REQUEST object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out PAGAMENTO_REQUEST obj, out Exception exception) {
			exception = null;
			obj = default(PAGAMENTO_REQUEST);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out PAGAMENTO_REQUEST obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static PAGAMENTO_REQUEST Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((PAGAMENTO_REQUEST)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static PAGAMENTO_REQUEST Deserialize(Stream s) {
			return ((PAGAMENTO_REQUEST)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current PAGAMENTO_REQUEST object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an PAGAMENTO_REQUEST object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output PAGAMENTO_REQUEST object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out PAGAMENTO_REQUEST obj, out Exception exception) {
			exception = null;
			obj = default(PAGAMENTO_REQUEST);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out PAGAMENTO_REQUEST obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static PAGAMENTO_REQUEST LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	public partial class headerPagamento {
		private static XmlSerializer _serializer;

		public string ID_CLIENT { get; set; }
		public string TOKEN { get; set; }
		public System.DateTime DATA_RICHIESTA { get; set; }
		public string ID_RICHIESTA { get; set; }
		public string CODICE_AZIENDA { get; set; }
		public string CODICE_FISCALE { get; set; }
		public string TIPO_CLIENT { get; set; }
		public string URL_OK { get; set; }
		public string URL_KO { get; set; }
		public string URL_CANCEL { get; set; }
		public string URL_S2S { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(headerPagamento));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize headerPagamento object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes headerPagamento object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output headerPagamento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out headerPagamento obj, out Exception exception) {
			exception = null;
			obj = default(headerPagamento);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out headerPagamento obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static headerPagamento Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((headerPagamento)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static headerPagamento Deserialize(Stream s) {
			return ((headerPagamento)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current headerPagamento object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an headerPagamento object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output headerPagamento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out headerPagamento obj, out Exception exception) {
			exception = null;
			obj = default(headerPagamento);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out headerPagamento obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static headerPagamento LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	public partial class pagamento {
		private static XmlSerializer _serializer;

		public string RIF_PRATICA { get; set; }
		public string CAUSALE_PAGAMENTO { get; set; }
		public string SERVIZIO_PAGAMENTO { get; set; }
		public string DIVISA { get; set; }
		public decimal IMPORTO_TOTALE { get; set; }
		[XmlElement(DataType = "date")]
		public System.DateTime DATA_PAGAMENTO { get; set; }
		public pagamentoDATI_BOLLO DATI_BOLLO { get; set; }

		public pagamento() {
			DATI_BOLLO = new pagamentoDATI_BOLLO();
		}

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(pagamento));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize pagamento object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes pagamento object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output pagamento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out pagamento obj, out Exception exception) {
			exception = null;
			obj = default(pagamento);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out pagamento obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static pagamento Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((pagamento)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static pagamento Deserialize(Stream s) {
			return ((pagamento)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current pagamento object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an pagamento object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output pagamento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out pagamento obj, out Exception exception) {
			exception = null;
			obj = default(pagamento);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out pagamento obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static pagamento LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(AnonymousType = true, Namespace = "urn:pmpay")]
	public partial class pagamentoDATI_BOLLO {
		private static XmlSerializer _serializer;

		public pagamentoDATI_BOLLOTIPO_BOLLO TIPO_BOLLO { get; set; }
		public string IMPRONTA { get; set; }
		public string PROVINCIA_RESIDENZA { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(pagamentoDATI_BOLLO));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize pagamentoDATI_BOLLO object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes pagamentoDATI_BOLLO object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output pagamentoDATI_BOLLO object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out pagamentoDATI_BOLLO obj, out Exception exception) {
			exception = null;
			obj = default(pagamentoDATI_BOLLO);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out pagamentoDATI_BOLLO obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static pagamentoDATI_BOLLO Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((pagamentoDATI_BOLLO)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static pagamentoDATI_BOLLO Deserialize(Stream s) {
			return ((pagamentoDATI_BOLLO)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current pagamentoDATI_BOLLO object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an pagamentoDATI_BOLLO object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output pagamentoDATI_BOLLO object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out pagamentoDATI_BOLLO obj, out Exception exception) {
			exception = null;
			obj = default(pagamentoDATI_BOLLO);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out pagamentoDATI_BOLLO obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static pagamentoDATI_BOLLO LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[XmlTypeAttribute(AnonymousType = true, Namespace = "urn:pmpay")]
	public enum pagamentoDATI_BOLLOTIPO_BOLLO {
		[XmlEnumAttribute("01")]
		[EnumMember(Value="01")]
		Item01,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	public partial class anagraficaPagamento {
		private static XmlSerializer _serializer;
		[XmlElement("COGNOME")]
		[XmlElement("DENOMINAZIONE")]
		[XmlElement("NOME")]
		[XmlChoiceIdentifierAttribute("ItemsElementName")]
		public string[] Items { get; set; }
		[XmlElement("ItemsElementName")]
		[XmlIgnore]
		public ItemsChoiceType[] ItemsElementName { get; set; }
		public string INDIRIZZO { get; set; }
		public string CITTA { get; set; }
		public string CAP { get; set; }
		public string PROVINCIA { get; set; }
		public string MAIL { get; set; }
		public string RIF_TELEFONICO { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(anagraficaPagamento));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize anagraficaPagamento object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes anagraficaPagamento object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output anagraficaPagamento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out anagraficaPagamento obj, out Exception exception) {
			exception = null;
			obj = default(anagraficaPagamento);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out anagraficaPagamento obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static anagraficaPagamento Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((anagraficaPagamento)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static anagraficaPagamento Deserialize(Stream s) {
			return ((anagraficaPagamento)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current anagraficaPagamento object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an anagraficaPagamento object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output anagraficaPagamento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out anagraficaPagamento obj, out Exception exception) {
			exception = null;
			obj = default(anagraficaPagamento);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out anagraficaPagamento obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static anagraficaPagamento LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[XmlTypeAttribute(Namespace = "urn:pmpay", IncludeInSchema = false)]
	public enum ItemsChoiceType {
		COGNOME,
		DENOMINAZIONE,
		NOME,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	[XmlRootAttribute(Namespace = "urn:pmpay", IsNullable = false)]
	public partial class PAGAMENTO_RESPONSE {
		private static XmlSerializer _serializer;

		public System.DateTime DATA_RICHIESTA { get; set; }
		public string ID_RICHIESTA { get; set; }
		public string CODICE_AZIENDA { get; set; }
		public string URL_TO_CALL { get; set; }
		[XmlElement(DataType = "integer")]
		public string CODICE_ERRORE { get; set; }
		public string DESCRIZIONE_ERRORE { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(PAGAMENTO_RESPONSE));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize PAGAMENTO_RESPONSE object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes PAGAMENTO_RESPONSE object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output PAGAMENTO_RESPONSE object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out PAGAMENTO_RESPONSE obj, out Exception exception) {
			exception = null;
			obj = default(PAGAMENTO_RESPONSE);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out PAGAMENTO_RESPONSE obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static PAGAMENTO_RESPONSE Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((PAGAMENTO_RESPONSE)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static PAGAMENTO_RESPONSE Deserialize(Stream s) {
			return ((PAGAMENTO_RESPONSE)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current PAGAMENTO_RESPONSE object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an PAGAMENTO_RESPONSE object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output PAGAMENTO_RESPONSE object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out PAGAMENTO_RESPONSE obj, out Exception exception) {
			exception = null;
			obj = default(PAGAMENTO_RESPONSE);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out PAGAMENTO_RESPONSE obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static PAGAMENTO_RESPONSE LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	[XmlRootAttribute(Namespace = "urn:pmpay", IsNullable = false)]
	public partial class RICHIEDI_RT_REQUEST {
		private static XmlSerializer _serializer;

		public headerRichiestaRT headerRichiestaRT { get; set; }
		public richiestaRT richiestaRT { get; set; }

		public RICHIEDI_RT_REQUEST() {
			richiestaRT = new richiestaRT();
			headerRichiestaRT = new headerRichiestaRT();
		}

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(RICHIEDI_RT_REQUEST));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize RICHIEDI_RT_REQUEST object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes RICHIEDI_RT_REQUEST object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output RICHIEDI_RT_REQUEST object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out RICHIEDI_RT_REQUEST obj, out Exception exception) {
			exception = null;
			obj = default(RICHIEDI_RT_REQUEST);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out RICHIEDI_RT_REQUEST obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static RICHIEDI_RT_REQUEST Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((RICHIEDI_RT_REQUEST)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static RICHIEDI_RT_REQUEST Deserialize(Stream s) {
			return ((RICHIEDI_RT_REQUEST)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current RICHIEDI_RT_REQUEST object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an RICHIEDI_RT_REQUEST object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output RICHIEDI_RT_REQUEST object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out RICHIEDI_RT_REQUEST obj, out Exception exception) {
			exception = null;
			obj = default(RICHIEDI_RT_REQUEST);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out RICHIEDI_RT_REQUEST obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static RICHIEDI_RT_REQUEST LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	public partial class headerRichiestaRT {
		private static XmlSerializer _serializer;

		public string ID_CLIENT { get; set; }
		public string TOKEN { get; set; }
		public System.DateTime DATA_RICHIESTA { get; set; }
		public string ID_RICHIESTA { get; set; }
		public string CODICE_AZIENDA { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(headerRichiestaRT));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize headerRichiestaRT object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes headerRichiestaRT object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output headerRichiestaRT object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out headerRichiestaRT obj, out Exception exception) {
			exception = null;
			obj = default(headerRichiestaRT);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out headerRichiestaRT obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static headerRichiestaRT Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((headerRichiestaRT)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static headerRichiestaRT Deserialize(Stream s) {
			return ((headerRichiestaRT)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current headerRichiestaRT object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an headerRichiestaRT object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output headerRichiestaRT object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out headerRichiestaRT obj, out Exception exception) {
			exception = null;
			obj = default(headerRichiestaRT);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out headerRichiestaRT obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static headerRichiestaRT LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	public partial class richiestaRT {
		private static XmlSerializer _serializer;

		public string RIF_INTERNO { get; set; }
		public string IUV { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(richiestaRT));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize richiestaRT object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes richiestaRT object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output richiestaRT object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out richiestaRT obj, out Exception exception) {
			exception = null;
			obj = default(richiestaRT);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out richiestaRT obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static richiestaRT Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((richiestaRT)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static richiestaRT Deserialize(Stream s) {
			return ((richiestaRT)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current richiestaRT object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an richiestaRT object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output richiestaRT object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out richiestaRT obj, out Exception exception) {
			exception = null;
			obj = default(richiestaRT);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out richiestaRT obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static richiestaRT LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	[XmlRootAttribute(Namespace = "urn:pmpay", IsNullable = false)]
	public partial class RICHIEDI_RT_RESPONSE {
		private static XmlSerializer _serializer;

		public System.DateTime DATA_RICHIESTA { get; set; }
		public string ID_RICHIESTA { get; set; }
		public string CODICE_AZIENDA { get; set; }
		public string STREAM_RT { get; set; }
		[XmlElement(DataType = "integer")]
		public string CODICE_ERRORE { get; set; }
		public string DESCRIZIONE_ERRORE { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(RICHIEDI_RT_RESPONSE));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize RICHIEDI_RT_RESPONSE object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes RICHIEDI_RT_RESPONSE object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output RICHIEDI_RT_RESPONSE object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out RICHIEDI_RT_RESPONSE obj, out Exception exception) {
			exception = null;
			obj = default(RICHIEDI_RT_RESPONSE);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out RICHIEDI_RT_RESPONSE obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static RICHIEDI_RT_RESPONSE Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((RICHIEDI_RT_RESPONSE)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static RICHIEDI_RT_RESPONSE Deserialize(Stream s) {
			return ((RICHIEDI_RT_RESPONSE)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current RICHIEDI_RT_RESPONSE object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an RICHIEDI_RT_RESPONSE object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output RICHIEDI_RT_RESPONSE object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out RICHIEDI_RT_RESPONSE obj, out Exception exception) {
			exception = null;
			obj = default(RICHIEDI_RT_RESPONSE);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out RICHIEDI_RT_RESPONSE obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static RICHIEDI_RT_RESPONSE LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	[XmlRootAttribute(Namespace = "urn:pmpay", IsNullable = false)]
	public partial class RICHIEDI_BOLLO_REQUEST {
		private static XmlSerializer _serializer;

		public headerRichiestaBOLLO headerRichiestaBOLLO { get; set; }
		public richiestaBOLLO richiestaBOLLO { get; set; }

		public RICHIEDI_BOLLO_REQUEST() {
			richiestaBOLLO = new richiestaBOLLO();
			headerRichiestaBOLLO = new headerRichiestaBOLLO();
		}

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(RICHIEDI_BOLLO_REQUEST));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize RICHIEDI_BOLLO_REQUEST object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes RICHIEDI_BOLLO_REQUEST object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output RICHIEDI_BOLLO_REQUEST object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out RICHIEDI_BOLLO_REQUEST obj, out Exception exception) {
			exception = null;
			obj = default(RICHIEDI_BOLLO_REQUEST);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out RICHIEDI_BOLLO_REQUEST obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static RICHIEDI_BOLLO_REQUEST Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((RICHIEDI_BOLLO_REQUEST)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static RICHIEDI_BOLLO_REQUEST Deserialize(Stream s) {
			return ((RICHIEDI_BOLLO_REQUEST)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current RICHIEDI_BOLLO_REQUEST object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an RICHIEDI_BOLLO_REQUEST object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output RICHIEDI_BOLLO_REQUEST object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out RICHIEDI_BOLLO_REQUEST obj, out Exception exception) {
			exception = null;
			obj = default(RICHIEDI_BOLLO_REQUEST);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out RICHIEDI_BOLLO_REQUEST obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static RICHIEDI_BOLLO_REQUEST LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	public partial class headerRichiestaBOLLO {
		private static XmlSerializer _serializer;

		public string ID_CLIENT { get; set; }
		public string TOKEN { get; set; }
		public System.DateTime DATA_RICHIESTA { get; set; }
		public string ID_RICHIESTA { get; set; }
		public string CODICE_AZIENDA { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(headerRichiestaBOLLO));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize headerRichiestaBOLLO object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes headerRichiestaBOLLO object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output headerRichiestaBOLLO object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out headerRichiestaBOLLO obj, out Exception exception) {
			exception = null;
			obj = default(headerRichiestaBOLLO);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out headerRichiestaBOLLO obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static headerRichiestaBOLLO Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((headerRichiestaBOLLO)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static headerRichiestaBOLLO Deserialize(Stream s) {
			return ((headerRichiestaBOLLO)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current headerRichiestaBOLLO object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an headerRichiestaBOLLO object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output headerRichiestaBOLLO object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out headerRichiestaBOLLO obj, out Exception exception) {
			exception = null;
			obj = default(headerRichiestaBOLLO);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out headerRichiestaBOLLO obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static headerRichiestaBOLLO LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	public partial class richiestaBOLLO {
		private static XmlSerializer _serializer;

		public string IMPRONTA { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(richiestaBOLLO));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize richiestaBOLLO object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes richiestaBOLLO object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output richiestaBOLLO object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out richiestaBOLLO obj, out Exception exception) {
			exception = null;
			obj = default(richiestaBOLLO);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out richiestaBOLLO obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static richiestaBOLLO Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((richiestaBOLLO)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static richiestaBOLLO Deserialize(Stream s) {
			return ((richiestaBOLLO)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current richiestaBOLLO object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an richiestaBOLLO object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output richiestaBOLLO object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out richiestaBOLLO obj, out Exception exception) {
			exception = null;
			obj = default(richiestaBOLLO);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out richiestaBOLLO obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static richiestaBOLLO LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	[XmlRootAttribute(Namespace = "urn:pmpay", IsNullable = false)]
	public partial class RICHIEDI_BOLLO_RESPONSE {
		private static XmlSerializer _serializer;

		public System.DateTime DATA_RICHIESTA { get; set; }
		public string ID_RICHIESTA { get; set; }
		public string CODICE_AZIENDA { get; set; }
		public string STREAM_BOLLO { get; set; }
		[XmlElement(DataType = "integer")]
		public string CODICE_ERRORE { get; set; }
		public string DESCRIZIONE_ERRORE { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(RICHIEDI_BOLLO_RESPONSE));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize RICHIEDI_BOLLO_RESPONSE object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes RICHIEDI_BOLLO_RESPONSE object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output RICHIEDI_BOLLO_RESPONSE object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out RICHIEDI_BOLLO_RESPONSE obj, out Exception exception) {
			exception = null;
			obj = default(RICHIEDI_BOLLO_RESPONSE);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out RICHIEDI_BOLLO_RESPONSE obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static RICHIEDI_BOLLO_RESPONSE Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((RICHIEDI_BOLLO_RESPONSE)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static RICHIEDI_BOLLO_RESPONSE Deserialize(Stream s) {
			return ((RICHIEDI_BOLLO_RESPONSE)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current RICHIEDI_BOLLO_RESPONSE object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an RICHIEDI_BOLLO_RESPONSE object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output RICHIEDI_BOLLO_RESPONSE object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out RICHIEDI_BOLLO_RESPONSE obj, out Exception exception) {
			exception = null;
			obj = default(RICHIEDI_BOLLO_RESPONSE);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out RICHIEDI_BOLLO_RESPONSE obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static RICHIEDI_BOLLO_RESPONSE LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	[XmlRootAttribute(Namespace = "urn:pmpay", IsNullable = false)]
	public partial class PAGAMENTOESISTENTE_REQUEST {
		private static XmlSerializer _serializer;

		public headerPagamentoEsistente headerPagamento { get; set; }
		[XmlElement("pagamentoEsistente")]
		public List<pagamentoEsistente> pagamentoEsistente { get; set; }

		public PAGAMENTOESISTENTE_REQUEST() {
			pagamentoEsistente = new List<pagamentoEsistente>();
			headerPagamento = new headerPagamentoEsistente();
		}

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(PAGAMENTOESISTENTE_REQUEST));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize PAGAMENTOESISTENTE_REQUEST object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes PAGAMENTOESISTENTE_REQUEST object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output PAGAMENTOESISTENTE_REQUEST object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out PAGAMENTOESISTENTE_REQUEST obj, out Exception exception) {
			exception = null;
			obj = default(PAGAMENTOESISTENTE_REQUEST);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out PAGAMENTOESISTENTE_REQUEST obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static PAGAMENTOESISTENTE_REQUEST Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((PAGAMENTOESISTENTE_REQUEST)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static PAGAMENTOESISTENTE_REQUEST Deserialize(Stream s) {
			return ((PAGAMENTOESISTENTE_REQUEST)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current PAGAMENTOESISTENTE_REQUEST object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an PAGAMENTOESISTENTE_REQUEST object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output PAGAMENTOESISTENTE_REQUEST object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out PAGAMENTOESISTENTE_REQUEST obj, out Exception exception) {
			exception = null;
			obj = default(PAGAMENTOESISTENTE_REQUEST);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out PAGAMENTOESISTENTE_REQUEST obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static PAGAMENTOESISTENTE_REQUEST LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	public partial class headerPagamentoEsistente {
		private static XmlSerializer _serializer;

		public string ID_CLIENT { get; set; }
		public string TOKEN { get; set; }
		public System.DateTime DATA_RICHIESTA { get; set; }
		public string ID_RICHIESTA { get; set; }
		public string CODICE_AZIENDA { get; set; }
		public string CODICE_FISCALE { get; set; }
		public string TIPO_CLIENT { get; set; }
		public string URL_OK { get; set; }
		public string URL_KO { get; set; }
		public string URL_CANCEL { get; set; }
		public string URL_S2S { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(headerPagamentoEsistente));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize headerPagamentoEsistente object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes headerPagamentoEsistente object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output headerPagamentoEsistente object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out headerPagamentoEsistente obj, out Exception exception) {
			exception = null;
			obj = default(headerPagamentoEsistente);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out headerPagamentoEsistente obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static headerPagamentoEsistente Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((headerPagamentoEsistente)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static headerPagamentoEsistente Deserialize(Stream s) {
			return ((headerPagamentoEsistente)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current headerPagamentoEsistente object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an headerPagamentoEsistente object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output headerPagamentoEsistente object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out headerPagamentoEsistente obj, out Exception exception) {
			exception = null;
			obj = default(headerPagamentoEsistente);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out headerPagamentoEsistente obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static headerPagamentoEsistente LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	public partial class pagamentoEsistente {
		private static XmlSerializer _serializer;
		[XmlElement("ID_DEBITO")]
		[XmlElement("RIF_PRATICA")]
		[XmlChoiceIdentifierAttribute("ItemElementName")]
		public string Item { get; set; }
		[XmlIgnore]
		public ItemChoiceType ItemElementName { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(pagamentoEsistente));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize pagamentoEsistente object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes pagamentoEsistente object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output pagamentoEsistente object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out pagamentoEsistente obj, out Exception exception) {
			exception = null;
			obj = default(pagamentoEsistente);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out pagamentoEsistente obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static pagamentoEsistente Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((pagamentoEsistente)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static pagamentoEsistente Deserialize(Stream s) {
			return ((pagamentoEsistente)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current pagamentoEsistente object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an pagamentoEsistente object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output pagamentoEsistente object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out pagamentoEsistente obj, out Exception exception) {
			exception = null;
			obj = default(pagamentoEsistente);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out pagamentoEsistente obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static pagamentoEsistente LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[XmlTypeAttribute(Namespace = "urn:pmpay", IncludeInSchema = false)]
	public enum ItemChoiceType {
		ID_DEBITO,
		RIF_PRATICA,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	[XmlRootAttribute(Namespace = "urn:pmpay", IsNullable = false)]
	public partial class REGISTRAPAGAMENTO_REQUEST {
		private static XmlSerializer _serializer;

		public headerRegistraPagamento headerRegistraPagamento { get; set; }
		[XmlElement("annullaPagamento", typeof(annullaPagamento))]
		[XmlElement("modificaPagamento", typeof(modificaPagamento))]
		[XmlElement("pagamentoEsterno", typeof(pagamentoEsterno))]
		[XmlElement("registraPagamento", typeof(registraPagamento))]
		public object Item { get; set; }

		public REGISTRAPAGAMENTO_REQUEST() {
			headerRegistraPagamento = new headerRegistraPagamento();
		}

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(REGISTRAPAGAMENTO_REQUEST));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize REGISTRAPAGAMENTO_REQUEST object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes REGISTRAPAGAMENTO_REQUEST object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output REGISTRAPAGAMENTO_REQUEST object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out REGISTRAPAGAMENTO_REQUEST obj, out Exception exception) {
			exception = null;
			obj = default(REGISTRAPAGAMENTO_REQUEST);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out REGISTRAPAGAMENTO_REQUEST obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static REGISTRAPAGAMENTO_REQUEST Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((REGISTRAPAGAMENTO_REQUEST)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static REGISTRAPAGAMENTO_REQUEST Deserialize(Stream s) {
			return ((REGISTRAPAGAMENTO_REQUEST)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current REGISTRAPAGAMENTO_REQUEST object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an REGISTRAPAGAMENTO_REQUEST object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output REGISTRAPAGAMENTO_REQUEST object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out REGISTRAPAGAMENTO_REQUEST obj, out Exception exception) {
			exception = null;
			obj = default(REGISTRAPAGAMENTO_REQUEST);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out REGISTRAPAGAMENTO_REQUEST obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static REGISTRAPAGAMENTO_REQUEST LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	public partial class headerRegistraPagamento {
		private static XmlSerializer _serializer;

		public string ID_CLIENT { get; set; }
		public string TOKEN { get; set; }
		public System.DateTime DATA_RICHIESTA { get; set; }
		public string ID_RICHIESTA { get; set; }
		public string CODICE_AZIENDA { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(headerRegistraPagamento));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize headerRegistraPagamento object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes headerRegistraPagamento object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output headerRegistraPagamento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out headerRegistraPagamento obj, out Exception exception) {
			exception = null;
			obj = default(headerRegistraPagamento);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out headerRegistraPagamento obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static headerRegistraPagamento Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((headerRegistraPagamento)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static headerRegistraPagamento Deserialize(Stream s) {
			return ((headerRegistraPagamento)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current headerRegistraPagamento object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an headerRegistraPagamento object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output headerRegistraPagamento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out headerRegistraPagamento obj, out Exception exception) {
			exception = null;
			obj = default(headerRegistraPagamento);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out headerRegistraPagamento obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static headerRegistraPagamento LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	public partial class annullaPagamento {
		private static XmlSerializer _serializer;
		[XmlElement("ID_DEBITO")]
		[XmlElement("IUV")]
		[XmlChoiceIdentifierAttribute("ItemElementName")]
		public string Item { get; set; }
		[XmlIgnore]
		public ItemChoiceType1 ItemElementName { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(annullaPagamento));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize annullaPagamento object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes annullaPagamento object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output annullaPagamento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out annullaPagamento obj, out Exception exception) {
			exception = null;
			obj = default(annullaPagamento);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out annullaPagamento obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static annullaPagamento Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((annullaPagamento)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static annullaPagamento Deserialize(Stream s) {
			return ((annullaPagamento)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current annullaPagamento object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an annullaPagamento object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output annullaPagamento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out annullaPagamento obj, out Exception exception) {
			exception = null;
			obj = default(annullaPagamento);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out annullaPagamento obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static annullaPagamento LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[XmlTypeAttribute(Namespace = "urn:pmpay", IncludeInSchema = false)]
	public enum ItemChoiceType1 {
		ID_DEBITO,
		IUV,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	public partial class modificaPagamento {
		private static XmlSerializer _serializer;
		[XmlElement("ID_DEBITO")]
		[XmlElement("IUV")]
		[XmlChoiceIdentifierAttribute("ItemElementName")]
		public string Item { get; set; }
		[XmlIgnore]
		public ItemChoiceType3 ItemElementName { get; set; }
		public string CAUSALE_PAGAMENTO { get; set; }
		public decimal IMPORTO_TOTALE { get; set; }
		[XmlElement(DataType = "date")]
		public System.DateTime DATA_SCADENZA { get; set; }
		[XmlElement(DataType = "date")]
		public System.DateTime DATA_INIZIO_VALIDITA { get; set; }
		[XmlElement(DataType = "date")]
		public System.DateTime DATA_FINE_VALIDITA { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(modificaPagamento));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize modificaPagamento object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes modificaPagamento object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output modificaPagamento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out modificaPagamento obj, out Exception exception) {
			exception = null;
			obj = default(modificaPagamento);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out modificaPagamento obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static modificaPagamento Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((modificaPagamento)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static modificaPagamento Deserialize(Stream s) {
			return ((modificaPagamento)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current modificaPagamento object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an modificaPagamento object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output modificaPagamento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out modificaPagamento obj, out Exception exception) {
			exception = null;
			obj = default(modificaPagamento);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out modificaPagamento obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static modificaPagamento LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[XmlTypeAttribute(Namespace = "urn:pmpay", IncludeInSchema = false)]
	public enum ItemChoiceType3 {
		ID_DEBITO,
		IUV,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	public partial class pagamentoEsterno {
		private static XmlSerializer _serializer;
		[XmlElement("ID_DEBITO")]
		[XmlElement("IUV")]
		[XmlChoiceIdentifierAttribute("ItemElementName")]
		public string Item { get; set; }
		[XmlIgnore]
		public ItemChoiceType2 ItemElementName { get; set; }
		[XmlElement(DataType = "date")]
		public System.DateTime DATA_PAGAMENTO { get; set; }
		public string NOTE_PAGAMENTO { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(pagamentoEsterno));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize pagamentoEsterno object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes pagamentoEsterno object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output pagamentoEsterno object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out pagamentoEsterno obj, out Exception exception) {
			exception = null;
			obj = default(pagamentoEsterno);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out pagamentoEsterno obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static pagamentoEsterno Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((pagamentoEsterno)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static pagamentoEsterno Deserialize(Stream s) {
			return ((pagamentoEsterno)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current pagamentoEsterno object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an pagamentoEsterno object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output pagamentoEsterno object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out pagamentoEsterno obj, out Exception exception) {
			exception = null;
			obj = default(pagamentoEsterno);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out pagamentoEsterno obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static pagamentoEsterno LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[XmlTypeAttribute(Namespace = "urn:pmpay", IncludeInSchema = false)]
	public enum ItemChoiceType2 {
		ID_DEBITO,
		IUV,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	public partial class registraPagamento {
		private static XmlSerializer _serializer;

		public string ID_DEBITO { get; set; }
		public string RIF_PRATICA { get; set; }
		public string CAUSALE_PAGAMENTO { get; set; }
		public string SERVIZIO_PAGAMENTO { get; set; }
		public string CODICE_FISCALE { get; set; }
		public registraPagamentoDIVISA DIVISA { get; set; }
		public decimal IMPORTO_TOTALE { get; set; }
		[XmlElement(DataType = "date")]
		public System.DateTime DATA_SCADENZA { get; set; }
		public registraPagamentoDATI_BOLLO DATI_BOLLO { get; set; }
		public anagraficaPagamento ANAGRAFICA { get; set; }
		[XmlElement(DataType = "date")]
		public System.DateTime DATA_INIZIO_VALIDITA { get; set; }
		[XmlElement(DataType = "date")]
		public System.DateTime DATA_FINE_VALIDITA { get; set; }

		public registraPagamento() {
			ANAGRAFICA = new anagraficaPagamento();
			DATI_BOLLO = new registraPagamentoDATI_BOLLO();
		}

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(registraPagamento));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize registraPagamento object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes registraPagamento object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output registraPagamento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out registraPagamento obj, out Exception exception) {
			exception = null;
			obj = default(registraPagamento);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out registraPagamento obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static registraPagamento Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((registraPagamento)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static registraPagamento Deserialize(Stream s) {
			return ((registraPagamento)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current registraPagamento object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an registraPagamento object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output registraPagamento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out registraPagamento obj, out Exception exception) {
			exception = null;
			obj = default(registraPagamento);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out registraPagamento obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static registraPagamento LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[XmlTypeAttribute(AnonymousType = true, Namespace = "urn:pmpay")]
	public enum registraPagamentoDIVISA {
		EUR,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(AnonymousType = true, Namespace = "urn:pmpay")]
	public partial class registraPagamentoDATI_BOLLO {
		private static XmlSerializer _serializer;

		public registraPagamentoDATI_BOLLOTIPO_BOLLO TIPO_BOLLO { get; set; }
		public string IMPRONTA { get; set; }
		public string PROVINCIA_RESIDENZA { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(registraPagamentoDATI_BOLLO));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize registraPagamentoDATI_BOLLO object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes registraPagamentoDATI_BOLLO object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output registraPagamentoDATI_BOLLO object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out registraPagamentoDATI_BOLLO obj, out Exception exception) {
			exception = null;
			obj = default(registraPagamentoDATI_BOLLO);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out registraPagamentoDATI_BOLLO obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static registraPagamentoDATI_BOLLO Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((registraPagamentoDATI_BOLLO)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static registraPagamentoDATI_BOLLO Deserialize(Stream s) {
			return ((registraPagamentoDATI_BOLLO)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current registraPagamentoDATI_BOLLO object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an registraPagamentoDATI_BOLLO object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output registraPagamentoDATI_BOLLO object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out registraPagamentoDATI_BOLLO obj, out Exception exception) {
			exception = null;
			obj = default(registraPagamentoDATI_BOLLO);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out registraPagamentoDATI_BOLLO obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static registraPagamentoDATI_BOLLO LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[XmlTypeAttribute(AnonymousType = true, Namespace = "urn:pmpay")]
	public enum registraPagamentoDATI_BOLLOTIPO_BOLLO {
		[XmlEnumAttribute("01")]
		[EnumMember(Value="01")]
		Item01,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	[XmlRootAttribute(Namespace = "urn:pmpay", IsNullable = false)]
	public partial class REGISTRAPAGAMENTO_RESPONSE {
		private static XmlSerializer _serializer;

		public System.DateTime DATA_RICHIESTA { get; set; }
		public string ID_RICHIESTA { get; set; }
		public string CODICE_AZIENDA { get; set; }
		public REGISTRAPAGAMENTO_RESPONSEESITO ESITO { get; set; }
		[XmlElement(DataType = "integer")]
		public string CODICE_ERRORE { get; set; }
		public string DESCRIZIONE_ERRORE { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(REGISTRAPAGAMENTO_RESPONSE));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize REGISTRAPAGAMENTO_RESPONSE object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes REGISTRAPAGAMENTO_RESPONSE object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output REGISTRAPAGAMENTO_RESPONSE object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out REGISTRAPAGAMENTO_RESPONSE obj, out Exception exception) {
			exception = null;
			obj = default(REGISTRAPAGAMENTO_RESPONSE);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out REGISTRAPAGAMENTO_RESPONSE obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static REGISTRAPAGAMENTO_RESPONSE Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((REGISTRAPAGAMENTO_RESPONSE)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static REGISTRAPAGAMENTO_RESPONSE Deserialize(Stream s) {
			return ((REGISTRAPAGAMENTO_RESPONSE)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current REGISTRAPAGAMENTO_RESPONSE object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an REGISTRAPAGAMENTO_RESPONSE object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output REGISTRAPAGAMENTO_RESPONSE object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out REGISTRAPAGAMENTO_RESPONSE obj, out Exception exception) {
			exception = null;
			obj = default(REGISTRAPAGAMENTO_RESPONSE);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out REGISTRAPAGAMENTO_RESPONSE obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static REGISTRAPAGAMENTO_RESPONSE LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[XmlTypeAttribute(AnonymousType = true, Namespace = "urn:pmpay")]
	public enum REGISTRAPAGAMENTO_RESPONSEESITO {
		OK,
		KO,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	[XmlRootAttribute(Namespace = "urn:pmpay", IsNullable = false)]
	public partial class RICHIEDI_ANNULLOTECNICO_REQUEST {
		private static XmlSerializer _serializer;

		public headerRichiestaANNULLOTECNICO headerRichiestaANNULLOTECNICO { get; set; }
		public richiestaANNULLOTECNICO richiestaANNULLOTECNICO { get; set; }

		public RICHIEDI_ANNULLOTECNICO_REQUEST() {
			richiestaANNULLOTECNICO = new richiestaANNULLOTECNICO();
			headerRichiestaANNULLOTECNICO = new headerRichiestaANNULLOTECNICO();
		}

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(RICHIEDI_ANNULLOTECNICO_REQUEST));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize RICHIEDI_ANNULLOTECNICO_REQUEST object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes RICHIEDI_ANNULLOTECNICO_REQUEST object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output RICHIEDI_ANNULLOTECNICO_REQUEST object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out RICHIEDI_ANNULLOTECNICO_REQUEST obj, out Exception exception) {
			exception = null;
			obj = default(RICHIEDI_ANNULLOTECNICO_REQUEST);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out RICHIEDI_ANNULLOTECNICO_REQUEST obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static RICHIEDI_ANNULLOTECNICO_REQUEST Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((RICHIEDI_ANNULLOTECNICO_REQUEST)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static RICHIEDI_ANNULLOTECNICO_REQUEST Deserialize(Stream s) {
			return ((RICHIEDI_ANNULLOTECNICO_REQUEST)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current RICHIEDI_ANNULLOTECNICO_REQUEST object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an RICHIEDI_ANNULLOTECNICO_REQUEST object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output RICHIEDI_ANNULLOTECNICO_REQUEST object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out RICHIEDI_ANNULLOTECNICO_REQUEST obj, out Exception exception) {
			exception = null;
			obj = default(RICHIEDI_ANNULLOTECNICO_REQUEST);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out RICHIEDI_ANNULLOTECNICO_REQUEST obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static RICHIEDI_ANNULLOTECNICO_REQUEST LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	public partial class headerRichiestaANNULLOTECNICO {
		private static XmlSerializer _serializer;

		public string ID_CLIENT { get; set; }
		public string TOKEN { get; set; }
		public System.DateTime DATA_RICHIESTA { get; set; }
		public string ID_RICHIESTA { get; set; }
		public string CODICE_AZIENDA { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(headerRichiestaANNULLOTECNICO));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize headerRichiestaANNULLOTECNICO object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes headerRichiestaANNULLOTECNICO object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output headerRichiestaANNULLOTECNICO object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out headerRichiestaANNULLOTECNICO obj, out Exception exception) {
			exception = null;
			obj = default(headerRichiestaANNULLOTECNICO);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out headerRichiestaANNULLOTECNICO obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static headerRichiestaANNULLOTECNICO Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((headerRichiestaANNULLOTECNICO)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static headerRichiestaANNULLOTECNICO Deserialize(Stream s) {
			return ((headerRichiestaANNULLOTECNICO)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current headerRichiestaANNULLOTECNICO object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an headerRichiestaANNULLOTECNICO object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output headerRichiestaANNULLOTECNICO object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out headerRichiestaANNULLOTECNICO obj, out Exception exception) {
			exception = null;
			obj = default(headerRichiestaANNULLOTECNICO);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out headerRichiestaANNULLOTECNICO obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static headerRichiestaANNULLOTECNICO LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	public partial class richiestaANNULLOTECNICO {
		private static XmlSerializer _serializer;

		public string RIF_INTERNO { get; set; }
		public string IUV { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(richiestaANNULLOTECNICO));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize richiestaANNULLOTECNICO object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes richiestaANNULLOTECNICO object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output richiestaANNULLOTECNICO object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out richiestaANNULLOTECNICO obj, out Exception exception) {
			exception = null;
			obj = default(richiestaANNULLOTECNICO);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out richiestaANNULLOTECNICO obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static richiestaANNULLOTECNICO Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((richiestaANNULLOTECNICO)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static richiestaANNULLOTECNICO Deserialize(Stream s) {
			return ((richiestaANNULLOTECNICO)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current richiestaANNULLOTECNICO object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an richiestaANNULLOTECNICO object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output richiestaANNULLOTECNICO object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out richiestaANNULLOTECNICO obj, out Exception exception) {
			exception = null;
			obj = default(richiestaANNULLOTECNICO);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out richiestaANNULLOTECNICO obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static richiestaANNULLOTECNICO LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
	[Serializable]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[XmlTypeAttribute(Namespace = "urn:pmpay")]
	[XmlRootAttribute(Namespace = "urn:pmpay", IsNullable = false)]
	public partial class RICHIEDI_ANNULLOTECNICO_RESPONSE {
		private static XmlSerializer _serializer;

		public System.DateTime DATA_RICHIESTA { get; set; }
		public string ID_RICHIESTA { get; set; }
		public string CODICE_AZIENDA { get; set; }
		public string STREAM_ANNULLOTECNICO { get; set; }
		[XmlElement(DataType = "integer")]
		public string CODICE_ERRORE { get; set; }
		public string DESCRIZIONE_ERRORE { get; set; }

		private static XmlSerializer SerializerXML {
			get {
				if ((_serializer == null)) {
					_serializer = new XmlSerializerFactory().CreateSerializer(typeof(RICHIEDI_ANNULLOTECNICO_RESPONSE));
				}
				return _serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serialize RICHIEDI_ANNULLOTECNICO_RESPONSE object
		/// </summary>
		/// <returns>XML value</returns>
		public virtual string Serialize() {
			StreamReader streamReader = null;
			MemoryStream memoryStream = null;
			try {
				memoryStream = new MemoryStream();
				System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
				System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
				SerializerXML.Serialize(xmlWriter, this);
				memoryStream.Seek(0, SeekOrigin.Begin);
				streamReader = new StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes RICHIEDI_ANNULLOTECNICO_RESPONSE object
		/// </summary>
		/// <param name="input">string workflow markup to deserialize</param>
		/// <param name="obj">Output RICHIEDI_ANNULLOTECNICO_RESPONSE object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string input, out RICHIEDI_ANNULLOTECNICO_RESPONSE obj, out Exception exception) {
			exception = null;
			obj = default(RICHIEDI_ANNULLOTECNICO_RESPONSE);
			try {
				obj = Deserialize(input);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string input, out RICHIEDI_ANNULLOTECNICO_RESPONSE obj) {
			Exception exception = null;
			return Deserialize(input, out obj, out exception);
		}

		public static RICHIEDI_ANNULLOTECNICO_RESPONSE Deserialize(string input) {
			StringReader stringReader = null;
			try {
				stringReader = new StringReader(input);
				return ((RICHIEDI_ANNULLOTECNICO_RESPONSE)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		public static RICHIEDI_ANNULLOTECNICO_RESPONSE Deserialize(Stream s) {
			return ((RICHIEDI_ANNULLOTECNICO_RESPONSE)(SerializerXML.Deserialize(s)));
		}
		#endregion

		/// <summary>
		/// Serializes current RICHIEDI_ANNULLOTECNICO_RESPONSE object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			StreamWriter streamWriter = null;
			try {
				string dataString = Serialize();
				FileInfo outputFile = new FileInfo(fileName);
				streamWriter = outputFile.CreateText();
				streamWriter.WriteLine(dataString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an RICHIEDI_ANNULLOTECNICO_RESPONSE object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output RICHIEDI_ANNULLOTECNICO_RESPONSE object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out RICHIEDI_ANNULLOTECNICO_RESPONSE obj, out Exception exception) {
			exception = null;
			obj = default(RICHIEDI_ANNULLOTECNICO_RESPONSE);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out RICHIEDI_ANNULLOTECNICO_RESPONSE obj) {
			Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static RICHIEDI_ANNULLOTECNICO_RESPONSE LoadFromFile(string fileName) {
			FileStream file = null;
			StreamReader sr = null;
			try {
				file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new StreamReader(file);
				string dataString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(dataString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
	}
}
#pragma warning restore
