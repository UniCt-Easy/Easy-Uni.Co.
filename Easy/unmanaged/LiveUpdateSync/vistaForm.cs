
/*
Easy
Copyright (C) 2022 Università degli Studi di Catania (www.unict.it)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2300
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace LiveUpdateSync {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class vistaForm : DataSet {
        
        private syncDataTable tablesync;
        
        private masterDataTable tablemaster;
        
        public vistaForm() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected vistaForm(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["sync"] != null)) {
                    this.Tables.Add(new syncDataTable(ds.Tables["sync"]));
                }
                if ((ds.Tables["master"] != null)) {
                    this.Tables.Add(new masterDataTable(ds.Tables["master"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public syncDataTable sync {
            get {
                return this.tablesync;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public masterDataTable master {
            get {
                return this.tablemaster;
            }
        }
        
        public override DataSet Clone() {
            vistaForm cln = ((vistaForm)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["sync"] != null)) {
                this.Tables.Add(new syncDataTable(ds.Tables["sync"]));
            }
            if ((ds.Tables["master"] != null)) {
                this.Tables.Add(new masterDataTable(ds.Tables["master"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablesync = ((syncDataTable)(this.Tables["sync"]));
            if ((this.tablesync != null)) {
                this.tablesync.InitVars();
            }
            this.tablemaster = ((masterDataTable)(this.Tables["master"]));
            if ((this.tablemaster != null)) {
                this.tablemaster.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "vistaForm";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/vista.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablesync = new syncDataTable();
            this.Tables.Add(this.tablesync);
            this.tablemaster = new masterDataTable();
            this.Tables.Add(this.tablemaster);
        }
        
        private bool ShouldSerializesync() {
            return false;
        }
        
        private bool ShouldSerializemaster() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void syncRowChangeEventHandler(object sender, syncRowChangeEvent e);
        
        public delegate void masterRowChangeEventHandler(object sender, masterRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class syncDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnid;
            
            private DataColumn columnindirizzo;
            
            private DataColumn columnport;
            
            private DataColumn columndescrizione;
            
            private DataColumn columnuser;
            
            private DataColumn columnpwd;
            
            internal syncDataTable() : 
                    base("sync") {
                this.InitClass();
            }
            
            internal syncDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            internal DataColumn indirizzoColumn {
                get {
                    return this.columnindirizzo;
                }
            }
            
            internal DataColumn portColumn {
                get {
                    return this.columnport;
                }
            }
            
            internal DataColumn descrizioneColumn {
                get {
                    return this.columndescrizione;
                }
            }
            
            internal DataColumn userColumn {
                get {
                    return this.columnuser;
                }
            }
            
            internal DataColumn pwdColumn {
                get {
                    return this.columnpwd;
                }
            }
            
            public syncRow this[int index] {
                get {
                    return ((syncRow)(this.Rows[index]));
                }
            }
            
            public event syncRowChangeEventHandler syncRowChanged;
            
            public event syncRowChangeEventHandler syncRowChanging;
            
            public event syncRowChangeEventHandler syncRowDeleted;
            
            public event syncRowChangeEventHandler syncRowDeleting;
            
            public void AddsyncRow(syncRow row) {
                this.Rows.Add(row);
            }
            
            public syncRow AddsyncRow(int id, string indirizzo, string port, string descrizione, string user, string pwd) {
                syncRow rowsyncRow = ((syncRow)(this.NewRow()));
                rowsyncRow.ItemArray = new object[] {
                        id,
                        indirizzo,
                        port,
                        descrizione,
                        user,
                        pwd};
                this.Rows.Add(rowsyncRow);
                return rowsyncRow;
            }
            
            public syncRow FindByid(int id) {
                return ((syncRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                syncDataTable cln = ((syncDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new syncDataTable();
            }
            
            internal void InitVars() {
                this.columnid = this.Columns["id"];
                this.columnindirizzo = this.Columns["indirizzo"];
                this.columnport = this.Columns["port"];
                this.columndescrizione = this.Columns["descrizione"];
                this.columnuser = this.Columns["user"];
                this.columnpwd = this.Columns["pwd"];
            }
            
            private void InitClass() {
                this.columnid = new DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnid);
                this.columnindirizzo = new DataColumn("indirizzo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnindirizzo);
                this.columnport = new DataColumn("port", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnport);
                this.columndescrizione = new DataColumn("descrizione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescrizione);
                this.columnuser = new DataColumn("user", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuser);
                this.columnpwd = new DataColumn("pwd", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpwd);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey1", new DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
            }
            
            public syncRow NewsyncRow() {
                return ((syncRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new syncRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(syncRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.syncRowChanged != null)) {
                    this.syncRowChanged(this, new syncRowChangeEvent(((syncRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.syncRowChanging != null)) {
                    this.syncRowChanging(this, new syncRowChangeEvent(((syncRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.syncRowDeleted != null)) {
                    this.syncRowDeleted(this, new syncRowChangeEvent(((syncRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.syncRowDeleting != null)) {
                    this.syncRowDeleting(this, new syncRowChangeEvent(((syncRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovesyncRow(syncRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class syncRow : DataRow {
            
            private syncDataTable tablesync;
            
            internal syncRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablesync = ((syncDataTable)(this.Table));
            }
            
            public int id {
                get {
                    return ((int)(this[this.tablesync.idColumn]));
                }
                set {
                    this[this.tablesync.idColumn] = value;
                }
            }
            
            public string indirizzo {
                get {
                    try {
                        return ((string)(this[this.tablesync.indirizzoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesync.indirizzoColumn] = value;
                }
            }
            
            public string port {
                get {
                    try {
                        return ((string)(this[this.tablesync.portColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesync.portColumn] = value;
                }
            }
            
            public string descrizione {
                get {
                    try {
                        return ((string)(this[this.tablesync.descrizioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesync.descrizioneColumn] = value;
                }
            }
            
            public string user {
                get {
                    try {
                        return ((string)(this[this.tablesync.userColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesync.userColumn] = value;
                }
            }
            
            public string pwd {
                get {
                    try {
                        return ((string)(this[this.tablesync.pwdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesync.pwdColumn] = value;
                }
            }
            
            public bool IsindirizzoNull() {
                return this.IsNull(this.tablesync.indirizzoColumn);
            }
            
            public void SetindirizzoNull() {
                this[this.tablesync.indirizzoColumn] = System.Convert.DBNull;
            }
            
            public bool IsportNull() {
                return this.IsNull(this.tablesync.portColumn);
            }
            
            public void SetportNull() {
                this[this.tablesync.portColumn] = System.Convert.DBNull;
            }
            
            public bool IsdescrizioneNull() {
                return this.IsNull(this.tablesync.descrizioneColumn);
            }
            
            public void SetdescrizioneNull() {
                this[this.tablesync.descrizioneColumn] = System.Convert.DBNull;
            }
            
            public bool IsuserNull() {
                return this.IsNull(this.tablesync.userColumn);
            }
            
            public void SetuserNull() {
                this[this.tablesync.userColumn] = System.Convert.DBNull;
            }
            
            public bool IspwdNull() {
                return this.IsNull(this.tablesync.pwdColumn);
            }
            
            public void SetpwdNull() {
                this[this.tablesync.pwdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class syncRowChangeEvent : EventArgs {
            
            private syncRow eventRow;
            
            private DataRowAction eventAction;
            
            public syncRowChangeEvent(syncRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public syncRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class masterDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnindirizzo;
            
            private DataColumn columnuser;
            
            private DataColumn columnpwd;
            
            private DataColumn columnflaglocale;
            
            internal masterDataTable() : 
                    base("master") {
                this.InitClass();
            }
            
            internal masterDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn indirizzoColumn {
                get {
                    return this.columnindirizzo;
                }
            }
            
            internal DataColumn userColumn {
                get {
                    return this.columnuser;
                }
            }
            
            internal DataColumn pwdColumn {
                get {
                    return this.columnpwd;
                }
            }
            
            internal DataColumn flaglocaleColumn {
                get {
                    return this.columnflaglocale;
                }
            }
            
            public masterRow this[int index] {
                get {
                    return ((masterRow)(this.Rows[index]));
                }
            }
            
            public event masterRowChangeEventHandler masterRowChanged;
            
            public event masterRowChangeEventHandler masterRowChanging;
            
            public event masterRowChangeEventHandler masterRowDeleted;
            
            public event masterRowChangeEventHandler masterRowDeleting;
            
            public void AddmasterRow(masterRow row) {
                this.Rows.Add(row);
            }
            
            public masterRow AddmasterRow(string indirizzo, string user, string pwd, string flaglocale) {
                masterRow rowmasterRow = ((masterRow)(this.NewRow()));
                rowmasterRow.ItemArray = new object[] {
                        indirizzo,
                        user,
                        pwd,
                        flaglocale};
                this.Rows.Add(rowmasterRow);
                return rowmasterRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                masterDataTable cln = ((masterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new masterDataTable();
            }
            
            internal void InitVars() {
                this.columnindirizzo = this.Columns["indirizzo"];
                this.columnuser = this.Columns["user"];
                this.columnpwd = this.Columns["pwd"];
                this.columnflaglocale = this.Columns["flaglocale"];
            }
            
            private void InitClass() {
                this.columnindirizzo = new DataColumn("indirizzo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnindirizzo);
                this.columnuser = new DataColumn("user", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuser);
                this.columnpwd = new DataColumn("pwd", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpwd);
                this.columnflaglocale = new DataColumn("flaglocale", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnflaglocale);
            }
            
            public masterRow NewmasterRow() {
                return ((masterRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new masterRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(masterRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.masterRowChanged != null)) {
                    this.masterRowChanged(this, new masterRowChangeEvent(((masterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.masterRowChanging != null)) {
                    this.masterRowChanging(this, new masterRowChangeEvent(((masterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.masterRowDeleted != null)) {
                    this.masterRowDeleted(this, new masterRowChangeEvent(((masterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.masterRowDeleting != null)) {
                    this.masterRowDeleting(this, new masterRowChangeEvent(((masterRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovemasterRow(masterRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class masterRow : DataRow {
            
            private masterDataTable tablemaster;
            
            internal masterRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablemaster = ((masterDataTable)(this.Table));
            }
            
            public string indirizzo {
                get {
                    try {
                        return ((string)(this[this.tablemaster.indirizzoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemaster.indirizzoColumn] = value;
                }
            }
            
            public string user {
                get {
                    try {
                        return ((string)(this[this.tablemaster.userColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemaster.userColumn] = value;
                }
            }
            
            public string pwd {
                get {
                    try {
                        return ((string)(this[this.tablemaster.pwdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemaster.pwdColumn] = value;
                }
            }
            
            public string flaglocale {
                get {
                    try {
                        return ((string)(this[this.tablemaster.flaglocaleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemaster.flaglocaleColumn] = value;
                }
            }
            
            public bool IsindirizzoNull() {
                return this.IsNull(this.tablemaster.indirizzoColumn);
            }
            
            public void SetindirizzoNull() {
                this[this.tablemaster.indirizzoColumn] = System.Convert.DBNull;
            }
            
            public bool IsuserNull() {
                return this.IsNull(this.tablemaster.userColumn);
            }
            
            public void SetuserNull() {
                this[this.tablemaster.userColumn] = System.Convert.DBNull;
            }
            
            public bool IspwdNull() {
                return this.IsNull(this.tablemaster.pwdColumn);
            }
            
            public void SetpwdNull() {
                this[this.tablemaster.pwdColumn] = System.Convert.DBNull;
            }
            
            public bool IsflaglocaleNull() {
                return this.IsNull(this.tablemaster.flaglocaleColumn);
            }
            
            public void SetflaglocaleNull() {
                this[this.tablemaster.flaglocaleColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class masterRowChangeEvent : EventArgs {
            
            private masterRow eventRow;
            
            private DataRowAction eventAction;
            
            public masterRowChangeEvent(masterRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public masterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
