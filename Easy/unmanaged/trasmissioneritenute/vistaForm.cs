
/*
Easy
Copyright (C) 2022 Università degli Studi di Catania (www.unict.it)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace trasmissioneritenute{//trasmissioneritenute//
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class vistaForm : DataSet {
        
        private trasmissioneritenuteDataTable tabletrasmissioneritenute;
        
        private ritenuteapplicateviewDataTable tableritenuteapplicateview;
        
        private DataRelation relationtrasmissioneritenuteritenuteapplicateview;
        
        public vistaForm() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected vistaForm(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["trasmissioneritenute"] != null)) {
                    this.Tables.Add(new trasmissioneritenuteDataTable(ds.Tables["trasmissioneritenute"]));
                }
                if ((ds.Tables["ritenuteapplicateview"] != null)) {
                    this.Tables.Add(new ritenuteapplicateviewDataTable(ds.Tables["ritenuteapplicateview"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public trasmissioneritenuteDataTable trasmissioneritenute {
            get {
                return this.tabletrasmissioneritenute;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ritenuteapplicateviewDataTable ritenuteapplicateview {
            get {
                return this.tableritenuteapplicateview;
            }
        }
        
        public override DataSet Clone() {
            vistaForm cln = ((vistaForm)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["trasmissioneritenute"] != null)) {
                this.Tables.Add(new trasmissioneritenuteDataTable(ds.Tables["trasmissioneritenute"]));
            }
            if ((ds.Tables["ritenuteapplicateview"] != null)) {
                this.Tables.Add(new ritenuteapplicateviewDataTable(ds.Tables["ritenuteapplicateview"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabletrasmissioneritenute = ((trasmissioneritenuteDataTable)(this.Tables["trasmissioneritenute"]));
            if ((this.tabletrasmissioneritenute != null)) {
                this.tabletrasmissioneritenute.InitVars();
            }
            this.tableritenuteapplicateview = ((ritenuteapplicateviewDataTable)(this.Tables["ritenuteapplicateview"]));
            if ((this.tableritenuteapplicateview != null)) {
                this.tableritenuteapplicateview.InitVars();
            }
            this.relationtrasmissioneritenuteritenuteapplicateview = this.Relations["trasmissioneritenuteritenuteapplicateview"];
        }
        
        private void InitClass() {
            this.DataSetName = "vistaForm";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/vistaForm.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabletrasmissioneritenute = new trasmissioneritenuteDataTable();
            this.Tables.Add(this.tabletrasmissioneritenute);
            this.tableritenuteapplicateview = new ritenuteapplicateviewDataTable();
            this.Tables.Add(this.tableritenuteapplicateview);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("trasmissioneritenuteritenuteapplicateview", new DataColumn[] {
                        this.tabletrasmissioneritenute.idtrasmissioneritenuteColumn}, new DataColumn[] {
                        this.tableritenuteapplicateview.idtrasmissioneritenuteColumn});
            this.tableritenuteapplicateview.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationtrasmissioneritenuteritenuteapplicateview = new DataRelation("trasmissioneritenuteritenuteapplicateview", new DataColumn[] {
                        this.tabletrasmissioneritenute.idtrasmissioneritenuteColumn}, new DataColumn[] {
                        this.tableritenuteapplicateview.idtrasmissioneritenuteColumn}, false);
            this.Relations.Add(this.relationtrasmissioneritenuteritenuteapplicateview);
        }
        
        private bool ShouldSerializetrasmissioneritenute() {
            return false;
        }
        
        private bool ShouldSerializeritenuteapplicateview() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void trasmissioneritenuteRowChangeEventHandler(object sender, trasmissioneritenuteRowChangeEvent e);
        
        public delegate void ritenuteapplicateviewRowChangeEventHandler(object sender, ritenuteapplicateviewRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class trasmissioneritenuteDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidtrasmissioneritenute;
            
            private DataColumn columnflagconferma;
            
            private DataColumn columneserciziocompetenza;
            
            private DataColumn columncreateuser;
            
            private DataColumn columncreatetimestamp;
            
            private DataColumn columnlastmoduser;
            
            private DataColumn columnlastmodtimestamp;
            
            internal trasmissioneritenuteDataTable() : 
                    base("trasmissioneritenute") {
                this.InitClass();
            }
            
            internal trasmissioneritenuteDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idtrasmissioneritenuteColumn {
                get {
                    return this.columnidtrasmissioneritenute;
                }
            }
            
            internal DataColumn flagconfermaColumn {
                get {
                    return this.columnflagconferma;
                }
            }
            
            internal DataColumn eserciziocompetenzaColumn {
                get {
                    return this.columneserciziocompetenza;
                }
            }
            
            internal DataColumn createuserColumn {
                get {
                    return this.columncreateuser;
                }
            }
            
            internal DataColumn createtimestampColumn {
                get {
                    return this.columncreatetimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            public trasmissioneritenuteRow this[int index] {
                get {
                    return ((trasmissioneritenuteRow)(this.Rows[index]));
                }
            }
            
            public event trasmissioneritenuteRowChangeEventHandler trasmissioneritenuteRowChanged;
            
            public event trasmissioneritenuteRowChangeEventHandler trasmissioneritenuteRowChanging;
            
            public event trasmissioneritenuteRowChangeEventHandler trasmissioneritenuteRowDeleted;
            
            public event trasmissioneritenuteRowChangeEventHandler trasmissioneritenuteRowDeleting;
            
            public void AddtrasmissioneritenuteRow(trasmissioneritenuteRow row) {
                this.Rows.Add(row);
            }
            
            public trasmissioneritenuteRow AddtrasmissioneritenuteRow(int idtrasmissioneritenute, string flagconferma, int eserciziocompetenza, string createuser, System.DateTime createtimestamp, string lastmoduser, System.DateTime lastmodtimestamp) {
                trasmissioneritenuteRow rowtrasmissioneritenuteRow = ((trasmissioneritenuteRow)(this.NewRow()));
                rowtrasmissioneritenuteRow.ItemArray = new object[] {
                        idtrasmissioneritenute,
                        flagconferma,
                        eserciziocompetenza,
                        createuser,
                        createtimestamp,
                        lastmoduser,
                        lastmodtimestamp};
                this.Rows.Add(rowtrasmissioneritenuteRow);
                return rowtrasmissioneritenuteRow;
            }
            
            public trasmissioneritenuteRow FindByidtrasmissioneritenute(int idtrasmissioneritenute) {
                return ((trasmissioneritenuteRow)(this.Rows.Find(new object[] {
                            idtrasmissioneritenute})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                trasmissioneritenuteDataTable cln = ((trasmissioneritenuteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new trasmissioneritenuteDataTable();
            }
            
            internal void InitVars() {
                this.columnidtrasmissioneritenute = this.Columns["idtrasmissioneritenute"];
                this.columnflagconferma = this.Columns["flagconferma"];
                this.columneserciziocompetenza = this.Columns["eserciziocompetenza"];
                this.columncreateuser = this.Columns["createuser"];
                this.columncreatetimestamp = this.Columns["createtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
            }
            
            private void InitClass() {
                this.columnidtrasmissioneritenute = new DataColumn("idtrasmissioneritenute", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidtrasmissioneritenute);
                this.columnflagconferma = new DataColumn("flagconferma", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnflagconferma);
                this.columneserciziocompetenza = new DataColumn("eserciziocompetenza", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columneserciziocompetenza);
                this.columncreateuser = new DataColumn("createuser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncreateuser);
                this.columncreatetimestamp = new DataColumn("createtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncreatetimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey1", new DataColumn[] {
                                this.columnidtrasmissioneritenute}, true));
                this.columnidtrasmissioneritenute.AllowDBNull = false;
                this.columnidtrasmissioneritenute.Unique = true;
                this.columnflagconferma.AllowDBNull = false;
                this.columncreateuser.AllowDBNull = false;
                this.columncreatetimestamp.AllowDBNull = false;
                this.columnlastmoduser.AllowDBNull = false;
                this.columnlastmodtimestamp.AllowDBNull = false;
            }
            
            public trasmissioneritenuteRow NewtrasmissioneritenuteRow() {
                return ((trasmissioneritenuteRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new trasmissioneritenuteRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(trasmissioneritenuteRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.trasmissioneritenuteRowChanged != null)) {
                    this.trasmissioneritenuteRowChanged(this, new trasmissioneritenuteRowChangeEvent(((trasmissioneritenuteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.trasmissioneritenuteRowChanging != null)) {
                    this.trasmissioneritenuteRowChanging(this, new trasmissioneritenuteRowChangeEvent(((trasmissioneritenuteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.trasmissioneritenuteRowDeleted != null)) {
                    this.trasmissioneritenuteRowDeleted(this, new trasmissioneritenuteRowChangeEvent(((trasmissioneritenuteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.trasmissioneritenuteRowDeleting != null)) {
                    this.trasmissioneritenuteRowDeleting(this, new trasmissioneritenuteRowChangeEvent(((trasmissioneritenuteRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetrasmissioneritenuteRow(trasmissioneritenuteRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class trasmissioneritenuteRow : DataRow {
            
            private trasmissioneritenuteDataTable tabletrasmissioneritenute;
            
            internal trasmissioneritenuteRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletrasmissioneritenute = ((trasmissioneritenuteDataTable)(this.Table));
            }
            
            public int idtrasmissioneritenute {
                get {
                    return ((int)(this[this.tabletrasmissioneritenute.idtrasmissioneritenuteColumn]));
                }
                set {
                    this[this.tabletrasmissioneritenute.idtrasmissioneritenuteColumn] = value;
                }
            }
            
            public string flagconferma {
                get {
                    return ((string)(this[this.tabletrasmissioneritenute.flagconfermaColumn]));
                }
                set {
                    this[this.tabletrasmissioneritenute.flagconfermaColumn] = value;
                }
            }
            
            public int eserciziocompetenza {
                get {
                    try {
                        return ((int)(this[this.tabletrasmissioneritenute.eserciziocompetenzaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletrasmissioneritenute.eserciziocompetenzaColumn] = value;
                }
            }
            
            public string createuser {
                get {
                    return ((string)(this[this.tabletrasmissioneritenute.createuserColumn]));
                }
                set {
                    this[this.tabletrasmissioneritenute.createuserColumn] = value;
                }
            }
            
            public System.DateTime createtimestamp {
                get {
                    return ((System.DateTime)(this[this.tabletrasmissioneritenute.createtimestampColumn]));
                }
                set {
                    this[this.tabletrasmissioneritenute.createtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    return ((string)(this[this.tabletrasmissioneritenute.lastmoduserColumn]));
                }
                set {
                    this[this.tabletrasmissioneritenute.lastmoduserColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    return ((System.DateTime)(this[this.tabletrasmissioneritenute.lastmodtimestampColumn]));
                }
                set {
                    this[this.tabletrasmissioneritenute.lastmodtimestampColumn] = value;
                }
            }
            
            public bool IseserciziocompetenzaNull() {
                return this.IsNull(this.tabletrasmissioneritenute.eserciziocompetenzaColumn);
            }
            
            public void SeteserciziocompetenzaNull() {
                this[this.tabletrasmissioneritenute.eserciziocompetenzaColumn] = System.Convert.DBNull;
            }
            
            public ritenuteapplicateviewRow[] GetritenuteapplicateviewRows() {
                return ((ritenuteapplicateviewRow[])(this.GetChildRows(this.Table.ChildRelations["trasmissioneritenuteritenuteapplicateview"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class trasmissioneritenuteRowChangeEvent : EventArgs {
            
            private trasmissioneritenuteRow eventRow;
            
            private DataRowAction eventAction;
            
            public trasmissioneritenuteRowChangeEvent(trasmissioneritenuteRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public trasmissioneritenuteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ritenuteapplicateviewDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidspesa;
            
            private DataColumn columncodiceritenuta;
            
            private DataColumn columncodicefiscale;
            
            private DataColumn columnindirizzo;
            
            private DataColumn columncodicepostale;
            
            private DataColumn columncomune;
            
            private DataColumn columnprovincia;
            
            private DataColumn columnnazione;
            
            private DataColumn columnlocalita;
            
            private DataColumn columncodicefase;
            
            private DataColumn columnfase;
            
            private DataColumn columnesercmovimento;
            
            private DataColumn columnnummovimento;
            
            private DataColumn columncodicecreddeb;
            
            private DataColumn columndenominazione;
            
            private DataColumn columndescspesa;
            
            private DataColumn columndatacontabile;
            
            private DataColumn columncodiceprestazione;
            
            private DataColumn columntipoprestazione;
            
            private DataColumn columnflagmodello;
            
            private DataColumn columndatainizioprestazione;
            
            private DataColumn columndatafineprestazione;
            
            private DataColumn columndescrizione;
            
            private DataColumn columntiporitenuta;
            
            private DataColumn columnimponibile;
            
            private DataColumn columnimponibileoriginale;
            
            private DataColumn columnaliquotadipendente;
            
            private DataColumn columnquotanumdipendente;
            
            private DataColumn columnquotadendipendente;
            
            private DataColumn columnritdipendente;
            
            private DataColumn columnaliquotaamministrazione;
            
            private DataColumn columnquotanumamministrazione;
            
            private DataColumn columnquotadenamministrazione;
            
            private DataColumn columnritamministrazione;
            
            private DataColumn columndatacompetenza;
            
            private DataColumn columndataliquidazione;
            
            private DataColumn columnesercliquidazione;
            
            private DataColumn columnnumliquidazione;
            
            private DataColumn columnnoupdate;
            
            private DataColumn columnnodelete;
            
            private DataColumn columncreateuser;
            
            private DataColumn columncreatetimestamp;
            
            private DataColumn columnlastmoduser;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnidtrasmissioneritenute;
            
            private DataColumn columnesercdocpagamento;
            
            private DataColumn columnnumdocpagamento;
            
            private DataColumn columndatacontabilemandato;
            
            internal ritenuteapplicateviewDataTable() : 
                    base("ritenuteapplicateview") {
                this.InitClass();
            }
            
            internal ritenuteapplicateviewDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idspesaColumn {
                get {
                    return this.columnidspesa;
                }
            }
            
            internal DataColumn codiceritenutaColumn {
                get {
                    return this.columncodiceritenuta;
                }
            }
            
            internal DataColumn codicefiscaleColumn {
                get {
                    return this.columncodicefiscale;
                }
            }
            
            internal DataColumn indirizzoColumn {
                get {
                    return this.columnindirizzo;
                }
            }
            
            internal DataColumn codicepostaleColumn {
                get {
                    return this.columncodicepostale;
                }
            }
            
            internal DataColumn comuneColumn {
                get {
                    return this.columncomune;
                }
            }
            
            internal DataColumn provinciaColumn {
                get {
                    return this.columnprovincia;
                }
            }
            
            internal DataColumn nazioneColumn {
                get {
                    return this.columnnazione;
                }
            }
            
            internal DataColumn localitaColumn {
                get {
                    return this.columnlocalita;
                }
            }
            
            internal DataColumn codicefaseColumn {
                get {
                    return this.columncodicefase;
                }
            }
            
            internal DataColumn faseColumn {
                get {
                    return this.columnfase;
                }
            }
            
            internal DataColumn esercmovimentoColumn {
                get {
                    return this.columnesercmovimento;
                }
            }
            
            internal DataColumn nummovimentoColumn {
                get {
                    return this.columnnummovimento;
                }
            }
            
            internal DataColumn codicecreddebColumn {
                get {
                    return this.columncodicecreddeb;
                }
            }
            
            internal DataColumn denominazioneColumn {
                get {
                    return this.columndenominazione;
                }
            }
            
            internal DataColumn descspesaColumn {
                get {
                    return this.columndescspesa;
                }
            }
            
            internal DataColumn datacontabileColumn {
                get {
                    return this.columndatacontabile;
                }
            }
            
            internal DataColumn codiceprestazioneColumn {
                get {
                    return this.columncodiceprestazione;
                }
            }
            
            internal DataColumn tipoprestazioneColumn {
                get {
                    return this.columntipoprestazione;
                }
            }
            
            internal DataColumn flagmodelloColumn {
                get {
                    return this.columnflagmodello;
                }
            }
            
            internal DataColumn datainizioprestazioneColumn {
                get {
                    return this.columndatainizioprestazione;
                }
            }
            
            internal DataColumn datafineprestazioneColumn {
                get {
                    return this.columndatafineprestazione;
                }
            }
            
            internal DataColumn descrizioneColumn {
                get {
                    return this.columndescrizione;
                }
            }
            
            internal DataColumn tiporitenutaColumn {
                get {
                    return this.columntiporitenuta;
                }
            }
            
            internal DataColumn imponibileColumn {
                get {
                    return this.columnimponibile;
                }
            }
            
            internal DataColumn imponibileoriginaleColumn {
                get {
                    return this.columnimponibileoriginale;
                }
            }
            
            internal DataColumn aliquotadipendenteColumn {
                get {
                    return this.columnaliquotadipendente;
                }
            }
            
            internal DataColumn quotanumdipendenteColumn {
                get {
                    return this.columnquotanumdipendente;
                }
            }
            
            internal DataColumn quotadendipendenteColumn {
                get {
                    return this.columnquotadendipendente;
                }
            }
            
            internal DataColumn ritdipendenteColumn {
                get {
                    return this.columnritdipendente;
                }
            }
            
            internal DataColumn aliquotaamministrazioneColumn {
                get {
                    return this.columnaliquotaamministrazione;
                }
            }
            
            internal DataColumn quotanumamministrazioneColumn {
                get {
                    return this.columnquotanumamministrazione;
                }
            }
            
            internal DataColumn quotadenamministrazioneColumn {
                get {
                    return this.columnquotadenamministrazione;
                }
            }
            
            internal DataColumn ritamministrazioneColumn {
                get {
                    return this.columnritamministrazione;
                }
            }
            
            internal DataColumn datacompetenzaColumn {
                get {
                    return this.columndatacompetenza;
                }
            }
            
            internal DataColumn dataliquidazioneColumn {
                get {
                    return this.columndataliquidazione;
                }
            }
            
            internal DataColumn esercliquidazioneColumn {
                get {
                    return this.columnesercliquidazione;
                }
            }
            
            internal DataColumn numliquidazioneColumn {
                get {
                    return this.columnnumliquidazione;
                }
            }
            
            internal DataColumn noupdateColumn {
                get {
                    return this.columnnoupdate;
                }
            }
            
            internal DataColumn nodeleteColumn {
                get {
                    return this.columnnodelete;
                }
            }
            
            internal DataColumn createuserColumn {
                get {
                    return this.columncreateuser;
                }
            }
            
            internal DataColumn createtimestampColumn {
                get {
                    return this.columncreatetimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn idtrasmissioneritenuteColumn {
                get {
                    return this.columnidtrasmissioneritenute;
                }
            }
            
            internal DataColumn esercdocpagamentoColumn {
                get {
                    return this.columnesercdocpagamento;
                }
            }
            
            internal DataColumn numdocpagamentoColumn {
                get {
                    return this.columnnumdocpagamento;
                }
            }
            
            internal DataColumn datacontabilemandatoColumn {
                get {
                    return this.columndatacontabilemandato;
                }
            }
            
            public ritenuteapplicateviewRow this[int index] {
                get {
                    return ((ritenuteapplicateviewRow)(this.Rows[index]));
                }
            }
            
            public event ritenuteapplicateviewRowChangeEventHandler ritenuteapplicateviewRowChanged;
            
            public event ritenuteapplicateviewRowChangeEventHandler ritenuteapplicateviewRowChanging;
            
            public event ritenuteapplicateviewRowChangeEventHandler ritenuteapplicateviewRowDeleted;
            
            public event ritenuteapplicateviewRowChangeEventHandler ritenuteapplicateviewRowDeleting;
            
            public void AddritenuteapplicateviewRow(ritenuteapplicateviewRow row) {
                this.Rows.Add(row);
            }
            
            public ritenuteapplicateviewRow AddritenuteapplicateviewRow(
                        string idspesa, 
                        string codiceritenuta, 
                        string codicefiscale, 
                        string indirizzo, 
                        string codicepostale, 
                        string comune, 
                        string provincia, 
                        string nazione, 
                        string localita, 
                        string codicefase, 
                        string fase, 
                        short esercmovimento, 
                        int nummovimento, 
                        int codicecreddeb, 
                        string denominazione, 
                        string descspesa, 
                        System.DateTime datacontabile, 
                        string codiceprestazione, 
                        string tipoprestazione, 
                        string flagmodello, 
                        System.DateTime datainizioprestazione, 
                        System.DateTime datafineprestazione, 
                        string descrizione, 
                        string tiporitenuta, 
                        System.Decimal imponibile, 
                        System.Decimal imponibileoriginale, 
                        System.Double aliquotadipendente, 
                        System.Double quotanumdipendente, 
                        System.Double quotadendipendente, 
                        System.Decimal ritdipendente, 
                        System.Double aliquotaamministrazione, 
                        System.Double quotanumamministrazione, 
                        System.Double quotadenamministrazione, 
                        System.Decimal ritamministrazione, 
                        System.DateTime datacompetenza, 
                        System.DateTime dataliquidazione, 
                        short esercliquidazione, 
                        int numliquidazione, 
                        short noupdate, 
                        short nodelete, 
                        string createuser, 
                        System.DateTime createtimestamp, 
                        string lastmoduser, 
                        System.DateTime lastmodtimestamp, 
                        trasmissioneritenuteRow parenttrasmissioneritenuteRowBytrasmissioneritenuteritenuteapplicateview, 
                        int esercdocpagamento, 
                        int numdocpagamento, 
                        System.DateTime datacontabilemandato) {
                ritenuteapplicateviewRow rowritenuteapplicateviewRow = ((ritenuteapplicateviewRow)(this.NewRow()));
                rowritenuteapplicateviewRow.ItemArray = new object[] {
                        idspesa,
                        codiceritenuta,
                        codicefiscale,
                        indirizzo,
                        codicepostale,
                        comune,
                        provincia,
                        nazione,
                        localita,
                        codicefase,
                        fase,
                        esercmovimento,
                        nummovimento,
                        codicecreddeb,
                        denominazione,
                        descspesa,
                        datacontabile,
                        codiceprestazione,
                        tipoprestazione,
                        flagmodello,
                        datainizioprestazione,
                        datafineprestazione,
                        descrizione,
                        tiporitenuta,
                        imponibile,
                        imponibileoriginale,
                        aliquotadipendente,
                        quotanumdipendente,
                        quotadendipendente,
                        ritdipendente,
                        aliquotaamministrazione,
                        quotanumamministrazione,
                        quotadenamministrazione,
                        ritamministrazione,
                        datacompetenza,
                        dataliquidazione,
                        esercliquidazione,
                        numliquidazione,
                        noupdate,
                        nodelete,
                        createuser,
                        createtimestamp,
                        lastmoduser,
                        lastmodtimestamp,
                        parenttrasmissioneritenuteRowBytrasmissioneritenuteritenuteapplicateview[0],
                        esercdocpagamento,
                        numdocpagamento,
                        datacontabilemandato};
                this.Rows.Add(rowritenuteapplicateviewRow);
                return rowritenuteapplicateviewRow;
            }
            
            public ritenuteapplicateviewRow FindByidspesacodiceritenuta(string idspesa, string codiceritenuta) {
                return ((ritenuteapplicateviewRow)(this.Rows.Find(new object[] {
                            idspesa,
                            codiceritenuta})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ritenuteapplicateviewDataTable cln = ((ritenuteapplicateviewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ritenuteapplicateviewDataTable();
            }
            
            internal void InitVars() {
                this.columnidspesa = this.Columns["idspesa"];
                this.columncodiceritenuta = this.Columns["codiceritenuta"];
                this.columncodicefiscale = this.Columns["codicefiscale"];
                this.columnindirizzo = this.Columns["indirizzo"];
                this.columncodicepostale = this.Columns["codicepostale"];
                this.columncomune = this.Columns["comune"];
                this.columnprovincia = this.Columns["provincia"];
                this.columnnazione = this.Columns["nazione"];
                this.columnlocalita = this.Columns["localita"];
                this.columncodicefase = this.Columns["codicefase"];
                this.columnfase = this.Columns["fase"];
                this.columnesercmovimento = this.Columns["esercmovimento"];
                this.columnnummovimento = this.Columns["nummovimento"];
                this.columncodicecreddeb = this.Columns["codicecreddeb"];
                this.columndenominazione = this.Columns["denominazione"];
                this.columndescspesa = this.Columns["descspesa"];
                this.columndatacontabile = this.Columns["datacontabile"];
                this.columncodiceprestazione = this.Columns["codiceprestazione"];
                this.columntipoprestazione = this.Columns["tipoprestazione"];
                this.columnflagmodello = this.Columns["flagmodello"];
                this.columndatainizioprestazione = this.Columns["datainizioprestazione"];
                this.columndatafineprestazione = this.Columns["datafineprestazione"];
                this.columndescrizione = this.Columns["descrizione"];
                this.columntiporitenuta = this.Columns["tiporitenuta"];
                this.columnimponibile = this.Columns["imponibile"];
                this.columnimponibileoriginale = this.Columns["imponibileoriginale"];
                this.columnaliquotadipendente = this.Columns["aliquotadipendente"];
                this.columnquotanumdipendente = this.Columns["quotanumdipendente"];
                this.columnquotadendipendente = this.Columns["quotadendipendente"];
                this.columnritdipendente = this.Columns["ritdipendente"];
                this.columnaliquotaamministrazione = this.Columns["aliquotaamministrazione"];
                this.columnquotanumamministrazione = this.Columns["quotanumamministrazione"];
                this.columnquotadenamministrazione = this.Columns["quotadenamministrazione"];
                this.columnritamministrazione = this.Columns["ritamministrazione"];
                this.columndatacompetenza = this.Columns["datacompetenza"];
                this.columndataliquidazione = this.Columns["dataliquidazione"];
                this.columnesercliquidazione = this.Columns["esercliquidazione"];
                this.columnnumliquidazione = this.Columns["numliquidazione"];
                this.columnnoupdate = this.Columns["noupdate"];
                this.columnnodelete = this.Columns["nodelete"];
                this.columncreateuser = this.Columns["createuser"];
                this.columncreatetimestamp = this.Columns["createtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnidtrasmissioneritenute = this.Columns["idtrasmissioneritenute"];
                this.columnesercdocpagamento = this.Columns["esercdocpagamento"];
                this.columnnumdocpagamento = this.Columns["numdocpagamento"];
                this.columndatacontabilemandato = this.Columns["datacontabilemandato"];
            }
            
            private void InitClass() {
                this.columnidspesa = new DataColumn("idspesa", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidspesa);
                this.columncodiceritenuta = new DataColumn("codiceritenuta", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncodiceritenuta);
                this.columncodicefiscale = new DataColumn("codicefiscale", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncodicefiscale);
                this.columnindirizzo = new DataColumn("indirizzo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnindirizzo);
                this.columncodicepostale = new DataColumn("codicepostale", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncodicepostale);
                this.columncomune = new DataColumn("comune", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncomune);
                this.columnprovincia = new DataColumn("provincia", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprovincia);
                this.columnnazione = new DataColumn("nazione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnazione);
                this.columnlocalita = new DataColumn("localita", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlocalita);
                this.columncodicefase = new DataColumn("codicefase", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncodicefase);
                this.columnfase = new DataColumn("fase", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfase);
                this.columnesercmovimento = new DataColumn("esercmovimento", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnesercmovimento);
                this.columnnummovimento = new DataColumn("nummovimento", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnummovimento);
                this.columncodicecreddeb = new DataColumn("codicecreddeb", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncodicecreddeb);
                this.columndenominazione = new DataColumn("denominazione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndenominazione);
                this.columndescspesa = new DataColumn("descspesa", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescspesa);
                this.columndatacontabile = new DataColumn("datacontabile", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndatacontabile);
                this.columncodiceprestazione = new DataColumn("codiceprestazione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncodiceprestazione);
                this.columntipoprestazione = new DataColumn("tipoprestazione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntipoprestazione);
                this.columnflagmodello = new DataColumn("flagmodello", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnflagmodello);
                this.columndatainizioprestazione = new DataColumn("datainizioprestazione", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndatainizioprestazione);
                this.columndatafineprestazione = new DataColumn("datafineprestazione", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndatafineprestazione);
                this.columndescrizione = new DataColumn("descrizione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescrizione);
                this.columntiporitenuta = new DataColumn("tiporitenuta", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntiporitenuta);
                this.columnimponibile = new DataColumn("imponibile", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnimponibile);
                this.columnimponibileoriginale = new DataColumn("imponibileoriginale", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnimponibileoriginale);
                this.columnaliquotadipendente = new DataColumn("aliquotadipendente", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnaliquotadipendente);
                this.columnquotanumdipendente = new DataColumn("quotanumdipendente", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnquotanumdipendente);
                this.columnquotadendipendente = new DataColumn("quotadendipendente", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnquotadendipendente);
                this.columnritdipendente = new DataColumn("ritdipendente", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnritdipendente);
                this.columnaliquotaamministrazione = new DataColumn("aliquotaamministrazione", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnaliquotaamministrazione);
                this.columnquotanumamministrazione = new DataColumn("quotanumamministrazione", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnquotanumamministrazione);
                this.columnquotadenamministrazione = new DataColumn("quotadenamministrazione", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnquotadenamministrazione);
                this.columnritamministrazione = new DataColumn("ritamministrazione", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnritamministrazione);
                this.columndatacompetenza = new DataColumn("datacompetenza", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndatacompetenza);
                this.columndataliquidazione = new DataColumn("dataliquidazione", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndataliquidazione);
                this.columnesercliquidazione = new DataColumn("esercliquidazione", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnesercliquidazione);
                this.columnnumliquidazione = new DataColumn("numliquidazione", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnumliquidazione);
                this.columnnoupdate = new DataColumn("noupdate", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnoupdate);
                this.columnnodelete = new DataColumn("nodelete", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnodelete);
                this.columncreateuser = new DataColumn("createuser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncreateuser);
                this.columncreatetimestamp = new DataColumn("createtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncreatetimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnidtrasmissioneritenute = new DataColumn("idtrasmissioneritenute", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidtrasmissioneritenute);
                this.columnesercdocpagamento = new DataColumn("esercdocpagamento", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnesercdocpagamento);
                this.columnnumdocpagamento = new DataColumn("numdocpagamento", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnumdocpagamento);
                this.columndatacontabilemandato = new DataColumn("datacontabilemandato", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndatacontabilemandato);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey2", new DataColumn[] {
                                this.columnidspesa,
                                this.columncodiceritenuta}, true));
                this.columnidspesa.AllowDBNull = false;
                this.columncodiceritenuta.AllowDBNull = false;
                this.columncodicefase.AllowDBNull = false;
                this.columnfase.AllowDBNull = false;
                this.columnesercmovimento.AllowDBNull = false;
                this.columnnummovimento.AllowDBNull = false;
                this.columndenominazione.AllowDBNull = false;
                this.columndescspesa.AllowDBNull = false;
                this.columndatacontabile.AllowDBNull = false;
                this.columndescrizione.AllowDBNull = false;
                this.columncreateuser.AllowDBNull = false;
                this.columncreatetimestamp.AllowDBNull = false;
                this.columnlastmoduser.AllowDBNull = false;
                this.columnlastmodtimestamp.AllowDBNull = false;
            }
            
            public ritenuteapplicateviewRow NewritenuteapplicateviewRow() {
                return ((ritenuteapplicateviewRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ritenuteapplicateviewRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ritenuteapplicateviewRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ritenuteapplicateviewRowChanged != null)) {
                    this.ritenuteapplicateviewRowChanged(this, new ritenuteapplicateviewRowChangeEvent(((ritenuteapplicateviewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ritenuteapplicateviewRowChanging != null)) {
                    this.ritenuteapplicateviewRowChanging(this, new ritenuteapplicateviewRowChangeEvent(((ritenuteapplicateviewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ritenuteapplicateviewRowDeleted != null)) {
                    this.ritenuteapplicateviewRowDeleted(this, new ritenuteapplicateviewRowChangeEvent(((ritenuteapplicateviewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ritenuteapplicateviewRowDeleting != null)) {
                    this.ritenuteapplicateviewRowDeleting(this, new ritenuteapplicateviewRowChangeEvent(((ritenuteapplicateviewRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveritenuteapplicateviewRow(ritenuteapplicateviewRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ritenuteapplicateviewRow : DataRow {
            
            private ritenuteapplicateviewDataTable tableritenuteapplicateview;
            
            internal ritenuteapplicateviewRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableritenuteapplicateview = ((ritenuteapplicateviewDataTable)(this.Table));
            }
            
            public string idspesa {
                get {
                    return ((string)(this[this.tableritenuteapplicateview.idspesaColumn]));
                }
                set {
                    this[this.tableritenuteapplicateview.idspesaColumn] = value;
                }
            }
            
            public string codiceritenuta {
                get {
                    return ((string)(this[this.tableritenuteapplicateview.codiceritenutaColumn]));
                }
                set {
                    this[this.tableritenuteapplicateview.codiceritenutaColumn] = value;
                }
            }
            
            public string codicefiscale {
                get {
                    try {
                        return ((string)(this[this.tableritenuteapplicateview.codicefiscaleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.codicefiscaleColumn] = value;
                }
            }
            
            public string indirizzo {
                get {
                    try {
                        return ((string)(this[this.tableritenuteapplicateview.indirizzoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.indirizzoColumn] = value;
                }
            }
            
            public string codicepostale {
                get {
                    try {
                        return ((string)(this[this.tableritenuteapplicateview.codicepostaleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.codicepostaleColumn] = value;
                }
            }
            
            public string comune {
                get {
                    try {
                        return ((string)(this[this.tableritenuteapplicateview.comuneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.comuneColumn] = value;
                }
            }
            
            public string provincia {
                get {
                    try {
                        return ((string)(this[this.tableritenuteapplicateview.provinciaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.provinciaColumn] = value;
                }
            }
            
            public string nazione {
                get {
                    try {
                        return ((string)(this[this.tableritenuteapplicateview.nazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.nazioneColumn] = value;
                }
            }
            
            public string localita {
                get {
                    try {
                        return ((string)(this[this.tableritenuteapplicateview.localitaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.localitaColumn] = value;
                }
            }
            
            public string codicefase {
                get {
                    return ((string)(this[this.tableritenuteapplicateview.codicefaseColumn]));
                }
                set {
                    this[this.tableritenuteapplicateview.codicefaseColumn] = value;
                }
            }
            
            public string fase {
                get {
                    return ((string)(this[this.tableritenuteapplicateview.faseColumn]));
                }
                set {
                    this[this.tableritenuteapplicateview.faseColumn] = value;
                }
            }
            
            public short esercmovimento {
                get {
                    return ((short)(this[this.tableritenuteapplicateview.esercmovimentoColumn]));
                }
                set {
                    this[this.tableritenuteapplicateview.esercmovimentoColumn] = value;
                }
            }
            
            public int nummovimento {
                get {
                    return ((int)(this[this.tableritenuteapplicateview.nummovimentoColumn]));
                }
                set {
                    this[this.tableritenuteapplicateview.nummovimentoColumn] = value;
                }
            }
            
            public int codicecreddeb {
                get {
                    try {
                        return ((int)(this[this.tableritenuteapplicateview.codicecreddebColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.codicecreddebColumn] = value;
                }
            }
            
            public string denominazione {
                get {
                    return ((string)(this[this.tableritenuteapplicateview.denominazioneColumn]));
                }
                set {
                    this[this.tableritenuteapplicateview.denominazioneColumn] = value;
                }
            }
            
            public string descspesa {
                get {
                    return ((string)(this[this.tableritenuteapplicateview.descspesaColumn]));
                }
                set {
                    this[this.tableritenuteapplicateview.descspesaColumn] = value;
                }
            }
            
            public System.DateTime datacontabile {
                get {
                    return ((System.DateTime)(this[this.tableritenuteapplicateview.datacontabileColumn]));
                }
                set {
                    this[this.tableritenuteapplicateview.datacontabileColumn] = value;
                }
            }
            
            public string codiceprestazione {
                get {
                    try {
                        return ((string)(this[this.tableritenuteapplicateview.codiceprestazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.codiceprestazioneColumn] = value;
                }
            }
            
            public string tipoprestazione {
                get {
                    try {
                        return ((string)(this[this.tableritenuteapplicateview.tipoprestazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.tipoprestazioneColumn] = value;
                }
            }
            
            public string flagmodello {
                get {
                    try {
                        return ((string)(this[this.tableritenuteapplicateview.flagmodelloColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.flagmodelloColumn] = value;
                }
            }
            
            public System.DateTime datainizioprestazione {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableritenuteapplicateview.datainizioprestazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.datainizioprestazioneColumn] = value;
                }
            }
            
            public System.DateTime datafineprestazione {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableritenuteapplicateview.datafineprestazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.datafineprestazioneColumn] = value;
                }
            }
            
            public string descrizione {
                get {
                    return ((string)(this[this.tableritenuteapplicateview.descrizioneColumn]));
                }
                set {
                    this[this.tableritenuteapplicateview.descrizioneColumn] = value;
                }
            }
            
            public string tiporitenuta {
                get {
                    try {
                        return ((string)(this[this.tableritenuteapplicateview.tiporitenutaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.tiporitenutaColumn] = value;
                }
            }
            
            public System.Decimal imponibile {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableritenuteapplicateview.imponibileColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.imponibileColumn] = value;
                }
            }
            
            public System.Decimal imponibileoriginale {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableritenuteapplicateview.imponibileoriginaleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.imponibileoriginaleColumn] = value;
                }
            }
            
            public System.Double aliquotadipendente {
                get {
                    try {
                        return ((System.Double)(this[this.tableritenuteapplicateview.aliquotadipendenteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.aliquotadipendenteColumn] = value;
                }
            }
            
            public System.Double quotanumdipendente {
                get {
                    try {
                        return ((System.Double)(this[this.tableritenuteapplicateview.quotanumdipendenteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.quotanumdipendenteColumn] = value;
                }
            }
            
            public System.Double quotadendipendente {
                get {
                    try {
                        return ((System.Double)(this[this.tableritenuteapplicateview.quotadendipendenteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.quotadendipendenteColumn] = value;
                }
            }
            
            public System.Decimal ritdipendente {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableritenuteapplicateview.ritdipendenteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.ritdipendenteColumn] = value;
                }
            }
            
            public System.Double aliquotaamministrazione {
                get {
                    try {
                        return ((System.Double)(this[this.tableritenuteapplicateview.aliquotaamministrazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.aliquotaamministrazioneColumn] = value;
                }
            }
            
            public System.Double quotanumamministrazione {
                get {
                    try {
                        return ((System.Double)(this[this.tableritenuteapplicateview.quotanumamministrazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.quotanumamministrazioneColumn] = value;
                }
            }
            
            public System.Double quotadenamministrazione {
                get {
                    try {
                        return ((System.Double)(this[this.tableritenuteapplicateview.quotadenamministrazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.quotadenamministrazioneColumn] = value;
                }
            }
            
            public System.Decimal ritamministrazione {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableritenuteapplicateview.ritamministrazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.ritamministrazioneColumn] = value;
                }
            }
            
            public System.DateTime datacompetenza {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableritenuteapplicateview.datacompetenzaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.datacompetenzaColumn] = value;
                }
            }
            
            public System.DateTime dataliquidazione {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableritenuteapplicateview.dataliquidazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.dataliquidazioneColumn] = value;
                }
            }
            
            public short esercliquidazione {
                get {
                    try {
                        return ((short)(this[this.tableritenuteapplicateview.esercliquidazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.esercliquidazioneColumn] = value;
                }
            }
            
            public int numliquidazione {
                get {
                    try {
                        return ((int)(this[this.tableritenuteapplicateview.numliquidazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.numliquidazioneColumn] = value;
                }
            }
            
            public short noupdate {
                get {
                    try {
                        return ((short)(this[this.tableritenuteapplicateview.noupdateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.noupdateColumn] = value;
                }
            }
            
            public short nodelete {
                get {
                    try {
                        return ((short)(this[this.tableritenuteapplicateview.nodeleteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.nodeleteColumn] = value;
                }
            }
            
            public string createuser {
                get {
                    return ((string)(this[this.tableritenuteapplicateview.createuserColumn]));
                }
                set {
                    this[this.tableritenuteapplicateview.createuserColumn] = value;
                }
            }
            
            public System.DateTime createtimestamp {
                get {
                    return ((System.DateTime)(this[this.tableritenuteapplicateview.createtimestampColumn]));
                }
                set {
                    this[this.tableritenuteapplicateview.createtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    return ((string)(this[this.tableritenuteapplicateview.lastmoduserColumn]));
                }
                set {
                    this[this.tableritenuteapplicateview.lastmoduserColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    return ((System.DateTime)(this[this.tableritenuteapplicateview.lastmodtimestampColumn]));
                }
                set {
                    this[this.tableritenuteapplicateview.lastmodtimestampColumn] = value;
                }
            }
            
            public int idtrasmissioneritenute {
                get {
                    try {
                        return ((int)(this[this.tableritenuteapplicateview.idtrasmissioneritenuteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.idtrasmissioneritenuteColumn] = value;
                }
            }
            
            public int esercdocpagamento {
                get {
                    try {
                        return ((int)(this[this.tableritenuteapplicateview.esercdocpagamentoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.esercdocpagamentoColumn] = value;
                }
            }
            
            public int numdocpagamento {
                get {
                    try {
                        return ((int)(this[this.tableritenuteapplicateview.numdocpagamentoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.numdocpagamentoColumn] = value;
                }
            }
            
            public System.DateTime datacontabilemandato {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableritenuteapplicateview.datacontabilemandatoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableritenuteapplicateview.datacontabilemandatoColumn] = value;
                }
            }
            
            public trasmissioneritenuteRow trasmissioneritenuteRow {
                get {
                    return ((trasmissioneritenuteRow)(this.GetParentRow(this.Table.ParentRelations["trasmissioneritenuteritenuteapplicateview"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["trasmissioneritenuteritenuteapplicateview"]);
                }
            }
            
            public bool IscodicefiscaleNull() {
                return this.IsNull(this.tableritenuteapplicateview.codicefiscaleColumn);
            }
            
            public void SetcodicefiscaleNull() {
                this[this.tableritenuteapplicateview.codicefiscaleColumn] = System.Convert.DBNull;
            }
            
            public bool IsindirizzoNull() {
                return this.IsNull(this.tableritenuteapplicateview.indirizzoColumn);
            }
            
            public void SetindirizzoNull() {
                this[this.tableritenuteapplicateview.indirizzoColumn] = System.Convert.DBNull;
            }
            
            public bool IscodicepostaleNull() {
                return this.IsNull(this.tableritenuteapplicateview.codicepostaleColumn);
            }
            
            public void SetcodicepostaleNull() {
                this[this.tableritenuteapplicateview.codicepostaleColumn] = System.Convert.DBNull;
            }
            
            public bool IscomuneNull() {
                return this.IsNull(this.tableritenuteapplicateview.comuneColumn);
            }
            
            public void SetcomuneNull() {
                this[this.tableritenuteapplicateview.comuneColumn] = System.Convert.DBNull;
            }
            
            public bool IsprovinciaNull() {
                return this.IsNull(this.tableritenuteapplicateview.provinciaColumn);
            }
            
            public void SetprovinciaNull() {
                this[this.tableritenuteapplicateview.provinciaColumn] = System.Convert.DBNull;
            }
            
            public bool IsnazioneNull() {
                return this.IsNull(this.tableritenuteapplicateview.nazioneColumn);
            }
            
            public void SetnazioneNull() {
                this[this.tableritenuteapplicateview.nazioneColumn] = System.Convert.DBNull;
            }
            
            public bool IslocalitaNull() {
                return this.IsNull(this.tableritenuteapplicateview.localitaColumn);
            }
            
            public void SetlocalitaNull() {
                this[this.tableritenuteapplicateview.localitaColumn] = System.Convert.DBNull;
            }
            
            public bool IscodicecreddebNull() {
                return this.IsNull(this.tableritenuteapplicateview.codicecreddebColumn);
            }
            
            public void SetcodicecreddebNull() {
                this[this.tableritenuteapplicateview.codicecreddebColumn] = System.Convert.DBNull;
            }
            
            public bool IscodiceprestazioneNull() {
                return this.IsNull(this.tableritenuteapplicateview.codiceprestazioneColumn);
            }
            
            public void SetcodiceprestazioneNull() {
                this[this.tableritenuteapplicateview.codiceprestazioneColumn] = System.Convert.DBNull;
            }
            
            public bool IstipoprestazioneNull() {
                return this.IsNull(this.tableritenuteapplicateview.tipoprestazioneColumn);
            }
            
            public void SettipoprestazioneNull() {
                this[this.tableritenuteapplicateview.tipoprestazioneColumn] = System.Convert.DBNull;
            }
            
            public bool IsflagmodelloNull() {
                return this.IsNull(this.tableritenuteapplicateview.flagmodelloColumn);
            }
            
            public void SetflagmodelloNull() {
                this[this.tableritenuteapplicateview.flagmodelloColumn] = System.Convert.DBNull;
            }
            
            public bool IsdatainizioprestazioneNull() {
                return this.IsNull(this.tableritenuteapplicateview.datainizioprestazioneColumn);
            }
            
            public void SetdatainizioprestazioneNull() {
                this[this.tableritenuteapplicateview.datainizioprestazioneColumn] = System.Convert.DBNull;
            }
            
            public bool IsdatafineprestazioneNull() {
                return this.IsNull(this.tableritenuteapplicateview.datafineprestazioneColumn);
            }
            
            public void SetdatafineprestazioneNull() {
                this[this.tableritenuteapplicateview.datafineprestazioneColumn] = System.Convert.DBNull;
            }
            
            public bool IstiporitenutaNull() {
                return this.IsNull(this.tableritenuteapplicateview.tiporitenutaColumn);
            }
            
            public void SettiporitenutaNull() {
                this[this.tableritenuteapplicateview.tiporitenutaColumn] = System.Convert.DBNull;
            }
            
            public bool IsimponibileNull() {
                return this.IsNull(this.tableritenuteapplicateview.imponibileColumn);
            }
            
            public void SetimponibileNull() {
                this[this.tableritenuteapplicateview.imponibileColumn] = System.Convert.DBNull;
            }
            
            public bool IsimponibileoriginaleNull() {
                return this.IsNull(this.tableritenuteapplicateview.imponibileoriginaleColumn);
            }
            
            public void SetimponibileoriginaleNull() {
                this[this.tableritenuteapplicateview.imponibileoriginaleColumn] = System.Convert.DBNull;
            }
            
            public bool IsaliquotadipendenteNull() {
                return this.IsNull(this.tableritenuteapplicateview.aliquotadipendenteColumn);
            }
            
            public void SetaliquotadipendenteNull() {
                this[this.tableritenuteapplicateview.aliquotadipendenteColumn] = System.Convert.DBNull;
            }
            
            public bool IsquotanumdipendenteNull() {
                return this.IsNull(this.tableritenuteapplicateview.quotanumdipendenteColumn);
            }
            
            public void SetquotanumdipendenteNull() {
                this[this.tableritenuteapplicateview.quotanumdipendenteColumn] = System.Convert.DBNull;
            }
            
            public bool IsquotadendipendenteNull() {
                return this.IsNull(this.tableritenuteapplicateview.quotadendipendenteColumn);
            }
            
            public void SetquotadendipendenteNull() {
                this[this.tableritenuteapplicateview.quotadendipendenteColumn] = System.Convert.DBNull;
            }
            
            public bool IsritdipendenteNull() {
                return this.IsNull(this.tableritenuteapplicateview.ritdipendenteColumn);
            }
            
            public void SetritdipendenteNull() {
                this[this.tableritenuteapplicateview.ritdipendenteColumn] = System.Convert.DBNull;
            }
            
            public bool IsaliquotaamministrazioneNull() {
                return this.IsNull(this.tableritenuteapplicateview.aliquotaamministrazioneColumn);
            }
            
            public void SetaliquotaamministrazioneNull() {
                this[this.tableritenuteapplicateview.aliquotaamministrazioneColumn] = System.Convert.DBNull;
            }
            
            public bool IsquotanumamministrazioneNull() {
                return this.IsNull(this.tableritenuteapplicateview.quotanumamministrazioneColumn);
            }
            
            public void SetquotanumamministrazioneNull() {
                this[this.tableritenuteapplicateview.quotanumamministrazioneColumn] = System.Convert.DBNull;
            }
            
            public bool IsquotadenamministrazioneNull() {
                return this.IsNull(this.tableritenuteapplicateview.quotadenamministrazioneColumn);
            }
            
            public void SetquotadenamministrazioneNull() {
                this[this.tableritenuteapplicateview.quotadenamministrazioneColumn] = System.Convert.DBNull;
            }
            
            public bool IsritamministrazioneNull() {
                return this.IsNull(this.tableritenuteapplicateview.ritamministrazioneColumn);
            }
            
            public void SetritamministrazioneNull() {
                this[this.tableritenuteapplicateview.ritamministrazioneColumn] = System.Convert.DBNull;
            }
            
            public bool IsdatacompetenzaNull() {
                return this.IsNull(this.tableritenuteapplicateview.datacompetenzaColumn);
            }
            
            public void SetdatacompetenzaNull() {
                this[this.tableritenuteapplicateview.datacompetenzaColumn] = System.Convert.DBNull;
            }
            
            public bool IsdataliquidazioneNull() {
                return this.IsNull(this.tableritenuteapplicateview.dataliquidazioneColumn);
            }
            
            public void SetdataliquidazioneNull() {
                this[this.tableritenuteapplicateview.dataliquidazioneColumn] = System.Convert.DBNull;
            }
            
            public bool IsesercliquidazioneNull() {
                return this.IsNull(this.tableritenuteapplicateview.esercliquidazioneColumn);
            }
            
            public void SetesercliquidazioneNull() {
                this[this.tableritenuteapplicateview.esercliquidazioneColumn] = System.Convert.DBNull;
            }
            
            public bool IsnumliquidazioneNull() {
                return this.IsNull(this.tableritenuteapplicateview.numliquidazioneColumn);
            }
            
            public void SetnumliquidazioneNull() {
                this[this.tableritenuteapplicateview.numliquidazioneColumn] = System.Convert.DBNull;
            }
            
            public bool IsnoupdateNull() {
                return this.IsNull(this.tableritenuteapplicateview.noupdateColumn);
            }
            
            public void SetnoupdateNull() {
                this[this.tableritenuteapplicateview.noupdateColumn] = System.Convert.DBNull;
            }
            
            public bool IsnodeleteNull() {
                return this.IsNull(this.tableritenuteapplicateview.nodeleteColumn);
            }
            
            public void SetnodeleteNull() {
                this[this.tableritenuteapplicateview.nodeleteColumn] = System.Convert.DBNull;
            }
            
            public bool IsidtrasmissioneritenuteNull() {
                return this.IsNull(this.tableritenuteapplicateview.idtrasmissioneritenuteColumn);
            }
            
            public void SetidtrasmissioneritenuteNull() {
                this[this.tableritenuteapplicateview.idtrasmissioneritenuteColumn] = System.Convert.DBNull;
            }
            
            public bool IsesercdocpagamentoNull() {
                return this.IsNull(this.tableritenuteapplicateview.esercdocpagamentoColumn);
            }
            
            public void SetesercdocpagamentoNull() {
                this[this.tableritenuteapplicateview.esercdocpagamentoColumn] = System.Convert.DBNull;
            }
            
            public bool IsnumdocpagamentoNull() {
                return this.IsNull(this.tableritenuteapplicateview.numdocpagamentoColumn);
            }
            
            public void SetnumdocpagamentoNull() {
                this[this.tableritenuteapplicateview.numdocpagamentoColumn] = System.Convert.DBNull;
            }
            
            public bool IsdatacontabilemandatoNull() {
                return this.IsNull(this.tableritenuteapplicateview.datacontabilemandatoColumn);
            }
            
            public void SetdatacontabilemandatoNull() {
                this[this.tableritenuteapplicateview.datacontabilemandatoColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ritenuteapplicateviewRowChangeEvent : EventArgs {
            
            private ritenuteapplicateviewRow eventRow;
            
            private DataRowAction eventAction;
            
            public ritenuteapplicateviewRowChangeEvent(ritenuteapplicateviewRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ritenuteapplicateviewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
