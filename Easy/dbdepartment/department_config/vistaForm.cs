
/*
Easy
Copyright (C) 2021 Università degli Studi di Catania (www.unict.it)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace dbdepartment_config {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class vistaForm : DataSet {
        
        private dbdepartmentDataTable tabledbdepartment;
        
        private dbuserDataTable tabledbuser;
        
        private dbaccessDataTable tabledbaccess;
        
        private DataRelation relationdbdepartmentdbaccess;
        
        private DataRelation relationdbuserdbaccess;
        
        public vistaForm() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected vistaForm(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["dbdepartment"] != null)) {
                    this.Tables.Add(new dbdepartmentDataTable(ds.Tables["dbdepartment"]));
                }
                if ((ds.Tables["dbuser"] != null)) {
                    this.Tables.Add(new dbuserDataTable(ds.Tables["dbuser"]));
                }
                if ((ds.Tables["dbaccess"] != null)) {
                    this.Tables.Add(new dbaccessDataTable(ds.Tables["dbaccess"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dbdepartmentDataTable dbdepartment {
            get {
                return this.tabledbdepartment;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dbuserDataTable dbuser {
            get {
                return this.tabledbuser;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dbaccessDataTable dbaccess {
            get {
                return this.tabledbaccess;
            }
        }
        
        public override DataSet Clone() {
            vistaForm cln = ((vistaForm)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["dbdepartment"] != null)) {
                this.Tables.Add(new dbdepartmentDataTable(ds.Tables["dbdepartment"]));
            }
            if ((ds.Tables["dbuser"] != null)) {
                this.Tables.Add(new dbuserDataTable(ds.Tables["dbuser"]));
            }
            if ((ds.Tables["dbaccess"] != null)) {
                this.Tables.Add(new dbaccessDataTable(ds.Tables["dbaccess"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabledbdepartment = ((dbdepartmentDataTable)(this.Tables["dbdepartment"]));
            if ((this.tabledbdepartment != null)) {
                this.tabledbdepartment.InitVars();
            }
            this.tabledbuser = ((dbuserDataTable)(this.Tables["dbuser"]));
            if ((this.tabledbuser != null)) {
                this.tabledbuser.InitVars();
            }
            this.tabledbaccess = ((dbaccessDataTable)(this.Tables["dbaccess"]));
            if ((this.tabledbaccess != null)) {
                this.tabledbaccess.InitVars();
            }
            this.relationdbdepartmentdbaccess = this.Relations["dbdepartmentdbaccess"];
            this.relationdbuserdbaccess = this.Relations["dbuserdbaccess"];
        }
        
        private void InitClass() {
            this.DataSetName = "vistaForm";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/vistaForm.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabledbdepartment = new dbdepartmentDataTable();
            this.Tables.Add(this.tabledbdepartment);
            this.tabledbuser = new dbuserDataTable();
            this.Tables.Add(this.tabledbuser);
            this.tabledbaccess = new dbaccessDataTable();
            this.Tables.Add(this.tabledbaccess);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("dbdepartmentdbaccess", new DataColumn[] {
                        this.tabledbdepartment.iddbdepartmentColumn}, new DataColumn[] {
                        this.tabledbaccess.iddbdepartmentColumn});
            this.tabledbaccess.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("dbuserdbaccess", new DataColumn[] {
                        this.tabledbuser.loginColumn}, new DataColumn[] {
                        this.tabledbaccess.loginColumn});
            this.tabledbaccess.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationdbdepartmentdbaccess = new DataRelation("dbdepartmentdbaccess", new DataColumn[] {
                        this.tabledbdepartment.iddbdepartmentColumn}, new DataColumn[] {
                        this.tabledbaccess.iddbdepartmentColumn}, false);
            this.Relations.Add(this.relationdbdepartmentdbaccess);
            this.relationdbuserdbaccess = new DataRelation("dbuserdbaccess", new DataColumn[] {
                        this.tabledbuser.loginColumn}, new DataColumn[] {
                        this.tabledbaccess.loginColumn}, false);
            this.Relations.Add(this.relationdbuserdbaccess);
        }
        
        private bool ShouldSerializedbdepartment() {
            return false;
        }
        
        private bool ShouldSerializedbuser() {
            return false;
        }
        
        private bool ShouldSerializedbaccess() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void dbdepartmentRowChangeEventHandler(object sender, dbdepartmentRowChangeEvent e);
        
        public delegate void dbuserRowChangeEventHandler(object sender, dbuserRowChangeEvent e);
        
        public delegate void dbaccessRowChangeEventHandler(object sender, dbaccessRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class dbdepartmentDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columniddbdepartment;
            
            private DataColumn columndescription;
            
            private DataColumn columnlu;
            
            private DataColumn columnlt;
            
            private DataColumn column__password;
            
            internal dbdepartmentDataTable() : 
                    base("dbdepartment") {
                this.InitClass();
            }
            
            internal dbdepartmentDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn iddbdepartmentColumn {
                get {
                    return this.columniddbdepartment;
                }
            }
            
            internal DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            internal DataColumn luColumn {
                get {
                    return this.columnlu;
                }
            }
            
            internal DataColumn ltColumn {
                get {
                    return this.columnlt;
                }
            }
            
            internal DataColumn __passwordColumn {
                get {
                    return this.column__password;
                }
            }
            
            public dbdepartmentRow this[int index] {
                get {
                    return ((dbdepartmentRow)(this.Rows[index]));
                }
            }
            
            public event dbdepartmentRowChangeEventHandler dbdepartmentRowChanged;
            
            public event dbdepartmentRowChangeEventHandler dbdepartmentRowChanging;
            
            public event dbdepartmentRowChangeEventHandler dbdepartmentRowDeleted;
            
            public event dbdepartmentRowChangeEventHandler dbdepartmentRowDeleting;
            
            public void AdddbdepartmentRow(dbdepartmentRow row) {
                this.Rows.Add(row);
            }
            
            public dbdepartmentRow AdddbdepartmentRow(string iddbdepartment, string description, string lu, System.DateTime lt, string __password) {
                dbdepartmentRow rowdbdepartmentRow = ((dbdepartmentRow)(this.NewRow()));
                rowdbdepartmentRow.ItemArray = new object[] {
                        iddbdepartment,
                        description,
                        lu,
                        lt,
                        __password};
                this.Rows.Add(rowdbdepartmentRow);
                return rowdbdepartmentRow;
            }
            
            public dbdepartmentRow FindByiddbdepartment(string iddbdepartment) {
                return ((dbdepartmentRow)(this.Rows.Find(new object[] {
                            iddbdepartment})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                dbdepartmentDataTable cln = ((dbdepartmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new dbdepartmentDataTable();
            }
            
            internal void InitVars() {
                this.columniddbdepartment = this.Columns["iddbdepartment"];
                this.columndescription = this.Columns["description"];
                this.columnlu = this.Columns["lu"];
                this.columnlt = this.Columns["lt"];
                this.column__password = this.Columns["!password"];
            }
            
            private void InitClass() {
                this.columniddbdepartment = new DataColumn("iddbdepartment", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columniddbdepartment);
                this.columndescription = new DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescription);
                this.columnlu = new DataColumn("lu", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlu);
                this.columnlt = new DataColumn("lt", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlt);
                this.column__password = new DataColumn("!password", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column__password);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey2", new DataColumn[] {
                                this.columniddbdepartment}, true));
                this.columniddbdepartment.AllowDBNull = false;
                this.columniddbdepartment.Unique = true;
            }
            
            public dbdepartmentRow NewdbdepartmentRow() {
                return ((dbdepartmentRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new dbdepartmentRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(dbdepartmentRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dbdepartmentRowChanged != null)) {
                    this.dbdepartmentRowChanged(this, new dbdepartmentRowChangeEvent(((dbdepartmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dbdepartmentRowChanging != null)) {
                    this.dbdepartmentRowChanging(this, new dbdepartmentRowChangeEvent(((dbdepartmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dbdepartmentRowDeleted != null)) {
                    this.dbdepartmentRowDeleted(this, new dbdepartmentRowChangeEvent(((dbdepartmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dbdepartmentRowDeleting != null)) {
                    this.dbdepartmentRowDeleting(this, new dbdepartmentRowChangeEvent(((dbdepartmentRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovedbdepartmentRow(dbdepartmentRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class dbdepartmentRow : DataRow {
            
            private dbdepartmentDataTable tabledbdepartment;
            
            internal dbdepartmentRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabledbdepartment = ((dbdepartmentDataTable)(this.Table));
            }
            
            public string iddbdepartment {
                get {
                    return ((string)(this[this.tabledbdepartment.iddbdepartmentColumn]));
                }
                set {
                    this[this.tabledbdepartment.iddbdepartmentColumn] = value;
                }
            }
            
            public string description {
                get {
                    try {
                        return ((string)(this[this.tabledbdepartment.descriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabledbdepartment.descriptionColumn] = value;
                }
            }
            
            public string lu {
                get {
                    try {
                        return ((string)(this[this.tabledbdepartment.luColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabledbdepartment.luColumn] = value;
                }
            }
            
            public System.DateTime lt {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabledbdepartment.ltColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabledbdepartment.ltColumn] = value;
                }
            }
            
            public string __password {
                get {
                    try {
                        return ((string)(this[this.tabledbdepartment.__passwordColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabledbdepartment.__passwordColumn] = value;
                }
            }
            
            public bool IsdescriptionNull() {
                return this.IsNull(this.tabledbdepartment.descriptionColumn);
            }
            
            public void SetdescriptionNull() {
                this[this.tabledbdepartment.descriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsluNull() {
                return this.IsNull(this.tabledbdepartment.luColumn);
            }
            
            public void SetluNull() {
                this[this.tabledbdepartment.luColumn] = System.Convert.DBNull;
            }
            
            public bool IsltNull() {
                return this.IsNull(this.tabledbdepartment.ltColumn);
            }
            
            public void SetltNull() {
                this[this.tabledbdepartment.ltColumn] = System.Convert.DBNull;
            }
            
            public bool Is__passwordNull() {
                return this.IsNull(this.tabledbdepartment.__passwordColumn);
            }
            
            public void Set__passwordNull() {
                this[this.tabledbdepartment.__passwordColumn] = System.Convert.DBNull;
            }
            
            public dbaccessRow[] GetdbaccessRows() {
                return ((dbaccessRow[])(this.GetChildRows(this.Table.ChildRelations["dbdepartmentdbaccess"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class dbdepartmentRowChangeEvent : EventArgs {
            
            private dbdepartmentRow eventRow;
            
            private DataRowAction eventAction;
            
            public dbdepartmentRowChangeEvent(dbdepartmentRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public dbdepartmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class dbuserDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnlogin;
            
            private DataColumn columnsurname;
            
            private DataColumn columnforename;
            
            private DataColumn columnstart;
            
            private DataColumn columnstop;
            
            private DataColumn columnlu;
            
            private DataColumn columnlt;
            
            internal dbuserDataTable() : 
                    base("dbuser") {
                this.InitClass();
            }
            
            internal dbuserDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn loginColumn {
                get {
                    return this.columnlogin;
                }
            }
            
            internal DataColumn surnameColumn {
                get {
                    return this.columnsurname;
                }
            }
            
            internal DataColumn forenameColumn {
                get {
                    return this.columnforename;
                }
            }
            
            internal DataColumn startColumn {
                get {
                    return this.columnstart;
                }
            }
            
            internal DataColumn stopColumn {
                get {
                    return this.columnstop;
                }
            }
            
            internal DataColumn luColumn {
                get {
                    return this.columnlu;
                }
            }
            
            internal DataColumn ltColumn {
                get {
                    return this.columnlt;
                }
            }
            
            public dbuserRow this[int index] {
                get {
                    return ((dbuserRow)(this.Rows[index]));
                }
            }
            
            public event dbuserRowChangeEventHandler dbuserRowChanged;
            
            public event dbuserRowChangeEventHandler dbuserRowChanging;
            
            public event dbuserRowChangeEventHandler dbuserRowDeleted;
            
            public event dbuserRowChangeEventHandler dbuserRowDeleting;
            
            public void AdddbuserRow(dbuserRow row) {
                this.Rows.Add(row);
            }
            
            public dbuserRow AdddbuserRow(string login, string surname, string forename, System.DateTime start, System.DateTime stop, string lu, System.DateTime lt) {
                dbuserRow rowdbuserRow = ((dbuserRow)(this.NewRow()));
                rowdbuserRow.ItemArray = new object[] {
                        login,
                        surname,
                        forename,
                        start,
                        stop,
                        lu,
                        lt};
                this.Rows.Add(rowdbuserRow);
                return rowdbuserRow;
            }
            
            public dbuserRow FindBylogin(string login) {
                return ((dbuserRow)(this.Rows.Find(new object[] {
                            login})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                dbuserDataTable cln = ((dbuserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new dbuserDataTable();
            }
            
            internal void InitVars() {
                this.columnlogin = this.Columns["login"];
                this.columnsurname = this.Columns["surname"];
                this.columnforename = this.Columns["forename"];
                this.columnstart = this.Columns["start"];
                this.columnstop = this.Columns["stop"];
                this.columnlu = this.Columns["lu"];
                this.columnlt = this.Columns["lt"];
            }
            
            private void InitClass() {
                this.columnlogin = new DataColumn("login", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlogin);
                this.columnsurname = new DataColumn("surname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsurname);
                this.columnforename = new DataColumn("forename", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnforename);
                this.columnstart = new DataColumn("start", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstart);
                this.columnstop = new DataColumn("stop", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstop);
                this.columnlu = new DataColumn("lu", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlu);
                this.columnlt = new DataColumn("lt", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlt);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey3", new DataColumn[] {
                                this.columnlogin}, true));
                this.columnlogin.AllowDBNull = false;
                this.columnlogin.Unique = true;
            }
            
            public dbuserRow NewdbuserRow() {
                return ((dbuserRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new dbuserRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(dbuserRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dbuserRowChanged != null)) {
                    this.dbuserRowChanged(this, new dbuserRowChangeEvent(((dbuserRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dbuserRowChanging != null)) {
                    this.dbuserRowChanging(this, new dbuserRowChangeEvent(((dbuserRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dbuserRowDeleted != null)) {
                    this.dbuserRowDeleted(this, new dbuserRowChangeEvent(((dbuserRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dbuserRowDeleting != null)) {
                    this.dbuserRowDeleting(this, new dbuserRowChangeEvent(((dbuserRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovedbuserRow(dbuserRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class dbuserRow : DataRow {
            
            private dbuserDataTable tabledbuser;
            
            internal dbuserRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabledbuser = ((dbuserDataTable)(this.Table));
            }
            
            public string login {
                get {
                    return ((string)(this[this.tabledbuser.loginColumn]));
                }
                set {
                    this[this.tabledbuser.loginColumn] = value;
                }
            }
            
            public string surname {
                get {
                    try {
                        return ((string)(this[this.tabledbuser.surnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabledbuser.surnameColumn] = value;
                }
            }
            
            public string forename {
                get {
                    try {
                        return ((string)(this[this.tabledbuser.forenameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabledbuser.forenameColumn] = value;
                }
            }
            
            public System.DateTime start {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabledbuser.startColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabledbuser.startColumn] = value;
                }
            }
            
            public System.DateTime stop {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabledbuser.stopColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabledbuser.stopColumn] = value;
                }
            }
            
            public string lu {
                get {
                    try {
                        return ((string)(this[this.tabledbuser.luColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabledbuser.luColumn] = value;
                }
            }
            
            public System.DateTime lt {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabledbuser.ltColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabledbuser.ltColumn] = value;
                }
            }
            
            public bool IssurnameNull() {
                return this.IsNull(this.tabledbuser.surnameColumn);
            }
            
            public void SetsurnameNull() {
                this[this.tabledbuser.surnameColumn] = System.Convert.DBNull;
            }
            
            public bool IsforenameNull() {
                return this.IsNull(this.tabledbuser.forenameColumn);
            }
            
            public void SetforenameNull() {
                this[this.tabledbuser.forenameColumn] = System.Convert.DBNull;
            }
            
            public bool IsstartNull() {
                return this.IsNull(this.tabledbuser.startColumn);
            }
            
            public void SetstartNull() {
                this[this.tabledbuser.startColumn] = System.Convert.DBNull;
            }
            
            public bool IsstopNull() {
                return this.IsNull(this.tabledbuser.stopColumn);
            }
            
            public void SetstopNull() {
                this[this.tabledbuser.stopColumn] = System.Convert.DBNull;
            }
            
            public bool IsluNull() {
                return this.IsNull(this.tabledbuser.luColumn);
            }
            
            public void SetluNull() {
                this[this.tabledbuser.luColumn] = System.Convert.DBNull;
            }
            
            public bool IsltNull() {
                return this.IsNull(this.tabledbuser.ltColumn);
            }
            
            public void SetltNull() {
                this[this.tabledbuser.ltColumn] = System.Convert.DBNull;
            }
            
            public dbaccessRow[] GetdbaccessRows() {
                return ((dbaccessRow[])(this.GetChildRows(this.Table.ChildRelations["dbuserdbaccess"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class dbuserRowChangeEvent : EventArgs {
            
            private dbuserRow eventRow;
            
            private DataRowAction eventAction;
            
            public dbuserRowChangeEvent(dbuserRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public dbuserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class dbaccessDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnlogin;
            
            private DataColumn columniddbdepartment;
            
            private DataColumn columnalpha1;
            
            private DataColumn columnlu;
            
            private DataColumn columnlt;
            
            internal dbaccessDataTable() : 
                    base("dbaccess") {
                this.InitClass();
            }
            
            internal dbaccessDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn loginColumn {
                get {
                    return this.columnlogin;
                }
            }
            
            internal DataColumn iddbdepartmentColumn {
                get {
                    return this.columniddbdepartment;
                }
            }
            
            internal DataColumn alpha1Column {
                get {
                    return this.columnalpha1;
                }
            }
            
            internal DataColumn luColumn {
                get {
                    return this.columnlu;
                }
            }
            
            internal DataColumn ltColumn {
                get {
                    return this.columnlt;
                }
            }
            
            public dbaccessRow this[int index] {
                get {
                    return ((dbaccessRow)(this.Rows[index]));
                }
            }
            
            public event dbaccessRowChangeEventHandler dbaccessRowChanged;
            
            public event dbaccessRowChangeEventHandler dbaccessRowChanging;
            
            public event dbaccessRowChangeEventHandler dbaccessRowDeleted;
            
            public event dbaccessRowChangeEventHandler dbaccessRowDeleting;
            
            public void AdddbaccessRow(dbaccessRow row) {
                this.Rows.Add(row);
            }
            
            public dbaccessRow AdddbaccessRow(dbuserRow parentdbuserRowBydbuserdbaccess, dbdepartmentRow parentdbdepartmentRowBydbdepartmentdbaccess, string alpha1, string lu, System.DateTime lt) {
                dbaccessRow rowdbaccessRow = ((dbaccessRow)(this.NewRow()));
                rowdbaccessRow.ItemArray = new object[] {
                        parentdbuserRowBydbuserdbaccess[0],
                        parentdbdepartmentRowBydbdepartmentdbaccess[0],
                        alpha1,
                        lu,
                        lt};
                this.Rows.Add(rowdbaccessRow);
                return rowdbaccessRow;
            }
            
            public dbaccessRow FindByloginiddbdepartment(string login, string iddbdepartment) {
                return ((dbaccessRow)(this.Rows.Find(new object[] {
                            login,
                            iddbdepartment})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                dbaccessDataTable cln = ((dbaccessDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new dbaccessDataTable();
            }
            
            internal void InitVars() {
                this.columnlogin = this.Columns["login"];
                this.columniddbdepartment = this.Columns["iddbdepartment"];
                this.columnalpha1 = this.Columns["alpha1"];
                this.columnlu = this.Columns["lu"];
                this.columnlt = this.Columns["lt"];
            }
            
            private void InitClass() {
                this.columnlogin = new DataColumn("login", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlogin);
                this.columniddbdepartment = new DataColumn("iddbdepartment", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columniddbdepartment);
                this.columnalpha1 = new DataColumn("alpha1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnalpha1);
                this.columnlu = new DataColumn("lu", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlu);
                this.columnlt = new DataColumn("lt", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlt);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey1", new DataColumn[] {
                                this.columnlogin,
                                this.columniddbdepartment}, true));
                this.columnlogin.AllowDBNull = false;
                this.columniddbdepartment.AllowDBNull = false;
            }
            
            public dbaccessRow NewdbaccessRow() {
                return ((dbaccessRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new dbaccessRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(dbaccessRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dbaccessRowChanged != null)) {
                    this.dbaccessRowChanged(this, new dbaccessRowChangeEvent(((dbaccessRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dbaccessRowChanging != null)) {
                    this.dbaccessRowChanging(this, new dbaccessRowChangeEvent(((dbaccessRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dbaccessRowDeleted != null)) {
                    this.dbaccessRowDeleted(this, new dbaccessRowChangeEvent(((dbaccessRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dbaccessRowDeleting != null)) {
                    this.dbaccessRowDeleting(this, new dbaccessRowChangeEvent(((dbaccessRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovedbaccessRow(dbaccessRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class dbaccessRow : DataRow {
            
            private dbaccessDataTable tabledbaccess;
            
            internal dbaccessRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabledbaccess = ((dbaccessDataTable)(this.Table));
            }
            
            public string login {
                get {
                    return ((string)(this[this.tabledbaccess.loginColumn]));
                }
                set {
                    this[this.tabledbaccess.loginColumn] = value;
                }
            }
            
            public string iddbdepartment {
                get {
                    return ((string)(this[this.tabledbaccess.iddbdepartmentColumn]));
                }
                set {
                    this[this.tabledbaccess.iddbdepartmentColumn] = value;
                }
            }
            
            public string alpha1 {
                get {
                    try {
                        return ((string)(this[this.tabledbaccess.alpha1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabledbaccess.alpha1Column] = value;
                }
            }
            
            public string lu {
                get {
                    try {
                        return ((string)(this[this.tabledbaccess.luColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabledbaccess.luColumn] = value;
                }
            }
            
            public System.DateTime lt {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabledbaccess.ltColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tabledbaccess.ltColumn] = value;
                }
            }
            
            public dbdepartmentRow dbdepartmentRow {
                get {
                    return ((dbdepartmentRow)(this.GetParentRow(this.Table.ParentRelations["dbdepartmentdbaccess"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["dbdepartmentdbaccess"]);
                }
            }
            
            public dbuserRow dbuserRow {
                get {
                    return ((dbuserRow)(this.GetParentRow(this.Table.ParentRelations["dbuserdbaccess"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["dbuserdbaccess"]);
                }
            }
            
            public bool Isalpha1Null() {
                return this.IsNull(this.tabledbaccess.alpha1Column);
            }
            
            public void Setalpha1Null() {
                this[this.tabledbaccess.alpha1Column] = System.Convert.DBNull;
            }
            
            public bool IsluNull() {
                return this.IsNull(this.tabledbaccess.luColumn);
            }
            
            public void SetluNull() {
                this[this.tabledbaccess.luColumn] = System.Convert.DBNull;
            }
            
            public bool IsltNull() {
                return this.IsNull(this.tabledbaccess.ltColumn);
            }
            
            public void SetltNull() {
                this[this.tabledbaccess.ltColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class dbaccessRowChangeEvent : EventArgs {
            
            private dbaccessRow eventRow;
            
            private DataRowAction eventAction;
            
            public dbaccessRowChangeEvent(dbaccessRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public dbaccessRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
