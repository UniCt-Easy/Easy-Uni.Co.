
/*
Easy
Copyright (C) 2022 Universit‡ degli Studi di Catania (www.unict.it)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


/**
 * @module TreeNode
 * @description
 * Contains the strcuture to manage a node in a treeview structure
 */
(function () {


    var dataRowState = jsDataSet.dataRowState;
    var Deferred = appMeta.Deferred;
    /**
     *
     * It has all the properties of a jstree node. see the doc in the buildJsTreeProperties() function
     * @param {ObjectRow} dataRow
     * @returns {TreeNode}
     * @constructor
     */
    function TreeNode(dataRow) {

        if(!dataRow) return;

        /**
         * 
         * @type {ObjectRow}
         */
        this.dataRow = dataRow;
        this.toExplore = false; // mi dice se il nodo √® da esplorare, cio√® se dopo il click devo vedere se ha figli ulteriori

        // creo le propriet√† che permettono al TreeNode di essere aggiunto aljstree
        this.buildJsTreeProperties();

        return this;

    }

    TreeNode.prototype = {
        constructor: TreeNode,

        /**
         * @method tooltip
         * @public
         * @description SYNC
         * Gets the tooltip string
         * @returns {string}
         */
        tooltip:function () {
        },

        /**
         * @method canSelect
         * @public
         * @description SYNC
         * @returns {Deferred(boolean)}
         */
        canSelect:function () {
            return Deferred("TreeNode-canSelect").resolve(true);
        },

        /**
         *
         */
        nodeText:function () {
           return "";
        },

        rowExists:function(){
            if (!this.dataRow) return false;
            if (!this.dataRow.getRow) return false;
            if (this.dataRow.getRow().state === dataRowState.deleted || this.dataRow.getRow().state === dataRowState.detached ) return false;
            return true;
         },
        

        /**
         * @method buildJsTreeProperties
         * @private
         * @description SYNC
         * Builds the plain text obj, that represents the node in the jstree lib. "id" will be added after the creation
         */
        buildJsTreeProperties:function () {

            // rappresenta l'oggetto data per il nodo jsTree
            // Ogni elemento √® del tipo:
            /*{
                 id          : "string" // will be autogenerated if omitted
                 text        : "string" // node text
                 icon        : "string" // string for custom
                 state       : {
                 opened    : boolean  // is the node open
                 disabled  : boolean  // is the node disabled
                 selected  : boolean  // is the node selected
                 },
                 children    : []  // array of strings or objects
                 li_attr     : {}  // attributes for the generated LI node
                 a_attr      : {}  // attributes for the generated A node
             }
             */

            this.text   = "";

            this.state  =  {
                opened    : false,  // is the node open
                disabled  : false,  // is the node disabled
                selected  : false  // is the node selected
            };

            this.data = {
                /**
                 * ObjectRow
                 */
                row : this.dataRow
            }
        },

        /***
         * @method setJsTreeNodeId
         * @public
         * @description SYNC
         * Sets the id (it should be an autogenerated id in the function create_node) used by jstree lib to add node
         * @param {string} retNodeId
         */
        setJsTreeNodeId:function(retNodeId){
            this.id  = retNodeId;
        }
    };
    
    appMeta.TreeNode = TreeNode;

}());
