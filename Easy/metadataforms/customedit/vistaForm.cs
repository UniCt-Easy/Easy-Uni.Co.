/*
    Easy
    Copyright (C) 2020 Universit√† degli Studi di Catania (www.unict.it)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.510
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace customedit{//customedit//
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class vistaForm : DataSet {
        
        private customeditDataTable tablecustomedit;
        
        private customviewDataTable tablecustomview;
        
        private DataRelation relationcustomviewcustomedit;
        
        public vistaForm() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected vistaForm(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["customedit"] != null)) {
                    this.Tables.Add(new customeditDataTable(ds.Tables["customedit"]));
                }
                if ((ds.Tables["customview"] != null)) {
                    this.Tables.Add(new customviewDataTable(ds.Tables["customview"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public customeditDataTable customedit {
            get {
                return this.tablecustomedit;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public customviewDataTable customview {
            get {
                return this.tablecustomview;
            }
        }
        
        public override DataSet Clone() {
            vistaForm cln = ((vistaForm)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["customedit"] != null)) {
                this.Tables.Add(new customeditDataTable(ds.Tables["customedit"]));
            }
            if ((ds.Tables["customview"] != null)) {
                this.Tables.Add(new customviewDataTable(ds.Tables["customview"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablecustomedit = ((customeditDataTable)(this.Tables["customedit"]));
            if ((this.tablecustomedit != null)) {
                this.tablecustomedit.InitVars();
            }
            this.tablecustomview = ((customviewDataTable)(this.Tables["customview"]));
            if ((this.tablecustomview != null)) {
                this.tablecustomview.InitVars();
            }
            this.relationcustomviewcustomedit = this.Relations["customviewcustomedit"];
        }
        
        private void InitClass() {
            this.DataSetName = "vistaForm";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/vistaForm.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablecustomedit = new customeditDataTable();
            this.Tables.Add(this.tablecustomedit);
            this.tablecustomview = new customviewDataTable();
            this.Tables.Add(this.tablecustomview);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("customviewcustomedit", new DataColumn[] {
                        this.tablecustomview.viewnameColumn}, new DataColumn[] {
                        this.tablecustomedit.defaultlisttypeColumn});
            this.tablecustomedit.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationcustomviewcustomedit = new DataRelation("customviewcustomedit", new DataColumn[] {
                        this.tablecustomview.viewnameColumn}, new DataColumn[] {
                        this.tablecustomedit.defaultlisttypeColumn}, false);
            this.Relations.Add(this.relationcustomviewcustomedit);
        }
        
        private bool ShouldSerializecustomedit() {
            return false;
        }
        
        private bool ShouldSerializecustomview() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void customeditRowChangeEventHandler(object sender, customeditRowChangeEvent e);
        
        public delegate void customviewRowChangeEventHandler(object sender, customviewRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customeditDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnobjectname;
            
            private DataColumn columnedittype;
            
            private DataColumn columndllname;
            
            private DataColumn columncaption;
            
            private DataColumn columnlist;
            
            private DataColumn columnstartempty;
            
            private DataColumn columntree;
            
            private DataColumn columndefaultlisttype;
            
            private DataColumn columnsearchenabled;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            internal customeditDataTable() : 
                    base("customedit") {
                this.InitClass();
            }
            
            internal customeditDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn objectnameColumn {
                get {
                    return this.columnobjectname;
                }
            }
            
            internal DataColumn edittypeColumn {
                get {
                    return this.columnedittype;
                }
            }
            
            internal DataColumn dllnameColumn {
                get {
                    return this.columndllname;
                }
            }
            
            internal DataColumn captionColumn {
                get {
                    return this.columncaption;
                }
            }
            
            internal DataColumn listColumn {
                get {
                    return this.columnlist;
                }
            }
            
            internal DataColumn startemptyColumn {
                get {
                    return this.columnstartempty;
                }
            }
            
            internal DataColumn treeColumn {
                get {
                    return this.columntree;
                }
            }
            
            internal DataColumn defaultlisttypeColumn {
                get {
                    return this.columndefaultlisttype;
                }
            }
            
            internal DataColumn searchenabledColumn {
                get {
                    return this.columnsearchenabled;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            public customeditRow this[int index] {
                get {
                    return ((customeditRow)(this.Rows[index]));
                }
            }
            
            public event customeditRowChangeEventHandler customeditRowChanged;
            
            public event customeditRowChangeEventHandler customeditRowChanging;
            
            public event customeditRowChangeEventHandler customeditRowDeleted;
            
            public event customeditRowChangeEventHandler customeditRowDeleting;
            
            public void AddcustomeditRow(customeditRow row) {
                this.Rows.Add(row);
            }
            
            public customeditRow AddcustomeditRow(string objectname, string edittype, string dllname, string caption, string list, string startempty, string tree, customviewRow parentcustomviewRowBycustomviewcustomedit, string searchenabled, System.DateTime lastmodtimestamp, string lastmoduser) {
                customeditRow rowcustomeditRow = ((customeditRow)(this.NewRow()));
                rowcustomeditRow.ItemArray = new object[] {
                        objectname,
                        edittype,
                        dllname,
                        caption,
                        list,
                        startempty,
                        tree,
                        parentcustomviewRowBycustomviewcustomedit[1],
                        searchenabled,
                        lastmodtimestamp,
                        lastmoduser};
                this.Rows.Add(rowcustomeditRow);
                return rowcustomeditRow;
            }
            
            public customeditRow FindByobjectnameedittype(string objectname, string edittype) {
                return ((customeditRow)(this.Rows.Find(new object[] {
                            objectname,
                            edittype})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                customeditDataTable cln = ((customeditDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new customeditDataTable();
            }
            
            internal void InitVars() {
                this.columnobjectname = this.Columns["objectname"];
                this.columnedittype = this.Columns["edittype"];
                this.columndllname = this.Columns["dllname"];
                this.columncaption = this.Columns["caption"];
                this.columnlist = this.Columns["list"];
                this.columnstartempty = this.Columns["startempty"];
                this.columntree = this.Columns["tree"];
                this.columndefaultlisttype = this.Columns["defaultlisttype"];
                this.columnsearchenabled = this.Columns["searchenabled"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
            }
            
            private void InitClass() {
                this.columnobjectname = new DataColumn("objectname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnobjectname);
                this.columnedittype = new DataColumn("edittype", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnedittype);
                this.columndllname = new DataColumn("dllname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndllname);
                this.columncaption = new DataColumn("caption", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncaption);
                this.columnlist = new DataColumn("list", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlist);
                this.columnstartempty = new DataColumn("startempty", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstartempty);
                this.columntree = new DataColumn("tree", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntree);
                this.columndefaultlisttype = new DataColumn("defaultlisttype", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndefaultlisttype);
                this.columnsearchenabled = new DataColumn("searchenabled", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsearchenabled);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey1", new DataColumn[] {
                                this.columnobjectname,
                                this.columnedittype}, true));
                this.Constraints.Add(new UniqueConstraint("key1", new DataColumn[] {
                                this.columnobjectname}, false));
                this.columnobjectname.AllowDBNull = false;
                this.columnobjectname.Unique = true;
                this.columnedittype.AllowDBNull = false;
                this.columndllname.AllowDBNull = false;
                this.columncaption.AllowDBNull = false;
                this.columnlist.AllowDBNull = false;
                this.columnstartempty.AllowDBNull = false;
                this.columntree.AllowDBNull = false;
                this.columnsearchenabled.AllowDBNull = false;
            }
            
            public customeditRow NewcustomeditRow() {
                return ((customeditRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new customeditRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(customeditRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.customeditRowChanged != null)) {
                    this.customeditRowChanged(this, new customeditRowChangeEvent(((customeditRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.customeditRowChanging != null)) {
                    this.customeditRowChanging(this, new customeditRowChangeEvent(((customeditRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.customeditRowDeleted != null)) {
                    this.customeditRowDeleted(this, new customeditRowChangeEvent(((customeditRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.customeditRowDeleting != null)) {
                    this.customeditRowDeleting(this, new customeditRowChangeEvent(((customeditRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecustomeditRow(customeditRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customeditRow : DataRow {
            
            private customeditDataTable tablecustomedit;
            
            internal customeditRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecustomedit = ((customeditDataTable)(this.Table));
            }
            
            public string objectname {
                get {
                    return ((string)(this[this.tablecustomedit.objectnameColumn]));
                }
                set {
                    this[this.tablecustomedit.objectnameColumn] = value;
                }
            }
            
            public string edittype {
                get {
                    return ((string)(this[this.tablecustomedit.edittypeColumn]));
                }
                set {
                    this[this.tablecustomedit.edittypeColumn] = value;
                }
            }
            
            public string dllname {
                get {
                    return ((string)(this[this.tablecustomedit.dllnameColumn]));
                }
                set {
                    this[this.tablecustomedit.dllnameColumn] = value;
                }
            }
            
            public string caption {
                get {
                    return ((string)(this[this.tablecustomedit.captionColumn]));
                }
                set {
                    this[this.tablecustomedit.captionColumn] = value;
                }
            }
            
            public string list {
                get {
                    return ((string)(this[this.tablecustomedit.listColumn]));
                }
                set {
                    this[this.tablecustomedit.listColumn] = value;
                }
            }
            
            public string startempty {
                get {
                    return ((string)(this[this.tablecustomedit.startemptyColumn]));
                }
                set {
                    this[this.tablecustomedit.startemptyColumn] = value;
                }
            }
            
            public string tree {
                get {
                    return ((string)(this[this.tablecustomedit.treeColumn]));
                }
                set {
                    this[this.tablecustomedit.treeColumn] = value;
                }
            }
            
            public string defaultlisttype {
                get {
                    try {
                        return ((string)(this[this.tablecustomedit.defaultlisttypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomedit.defaultlisttypeColumn] = value;
                }
            }
            
            public string searchenabled {
                get {
                    return ((string)(this[this.tablecustomedit.searchenabledColumn]));
                }
                set {
                    this[this.tablecustomedit.searchenabledColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecustomedit.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomedit.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablecustomedit.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomedit.lastmoduserColumn] = value;
                }
            }
            
            public customviewRow customviewRow {
                get {
                    return ((customviewRow)(this.GetParentRow(this.Table.ParentRelations["customviewcustomedit"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["customviewcustomedit"]);
                }
            }
            
            public bool IsdefaultlisttypeNull() {
                return this.IsNull(this.tablecustomedit.defaultlisttypeColumn);
            }
            
            public void SetdefaultlisttypeNull() {
                this[this.tablecustomedit.defaultlisttypeColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablecustomedit.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablecustomedit.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablecustomedit.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablecustomedit.lastmoduserColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customeditRowChangeEvent : EventArgs {
            
            private customeditRow eventRow;
            
            private DataRowAction eventAction;
            
            public customeditRowChangeEvent(customeditRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public customeditRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnobjectname;
            
            private DataColumn columnviewname;
            
            private DataColumn columnheader;
            
            private DataColumn columnfooter;
            
            private DataColumn columntopmargin;
            
            private DataColumn columnbottommargin;
            
            private DataColumn columnrightmargin;
            
            private DataColumn columnleftmargin;
            
            private DataColumn columnlefttoright;
            
            private DataColumn columnhcenter;
            
            private DataColumn columnvcenter;
            
            private DataColumn columngridlines;
            
            private DataColumn columnrowheading;
            
            private DataColumn columncolheading;
            
            private DataColumn columnlandscape;
            
            private DataColumn columnscale;
            
            private DataColumn columnfittopage;
            
            private DataColumn columnvpages;
            
            private DataColumn columnhpages;
            
            private DataColumn columnisreal;
            
            private DataColumn columnissystem;
            
            private DataColumn columnstaticfilter;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            internal customviewDataTable() : 
                    base("customview") {
                this.InitClass();
            }
            
            internal customviewDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn objectnameColumn {
                get {
                    return this.columnobjectname;
                }
            }
            
            internal DataColumn viewnameColumn {
                get {
                    return this.columnviewname;
                }
            }
            
            internal DataColumn headerColumn {
                get {
                    return this.columnheader;
                }
            }
            
            internal DataColumn footerColumn {
                get {
                    return this.columnfooter;
                }
            }
            
            internal DataColumn topmarginColumn {
                get {
                    return this.columntopmargin;
                }
            }
            
            internal DataColumn bottommarginColumn {
                get {
                    return this.columnbottommargin;
                }
            }
            
            internal DataColumn rightmarginColumn {
                get {
                    return this.columnrightmargin;
                }
            }
            
            internal DataColumn leftmarginColumn {
                get {
                    return this.columnleftmargin;
                }
            }
            
            internal DataColumn lefttorightColumn {
                get {
                    return this.columnlefttoright;
                }
            }
            
            internal DataColumn hcenterColumn {
                get {
                    return this.columnhcenter;
                }
            }
            
            internal DataColumn vcenterColumn {
                get {
                    return this.columnvcenter;
                }
            }
            
            internal DataColumn gridlinesColumn {
                get {
                    return this.columngridlines;
                }
            }
            
            internal DataColumn rowheadingColumn {
                get {
                    return this.columnrowheading;
                }
            }
            
            internal DataColumn colheadingColumn {
                get {
                    return this.columncolheading;
                }
            }
            
            internal DataColumn landscapeColumn {
                get {
                    return this.columnlandscape;
                }
            }
            
            internal DataColumn scaleColumn {
                get {
                    return this.columnscale;
                }
            }
            
            internal DataColumn fittopageColumn {
                get {
                    return this.columnfittopage;
                }
            }
            
            internal DataColumn vpagesColumn {
                get {
                    return this.columnvpages;
                }
            }
            
            internal DataColumn hpagesColumn {
                get {
                    return this.columnhpages;
                }
            }
            
            internal DataColumn isrealColumn {
                get {
                    return this.columnisreal;
                }
            }
            
            internal DataColumn issystemColumn {
                get {
                    return this.columnissystem;
                }
            }
            
            internal DataColumn staticfilterColumn {
                get {
                    return this.columnstaticfilter;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            public customviewRow this[int index] {
                get {
                    return ((customviewRow)(this.Rows[index]));
                }
            }
            
            public event customviewRowChangeEventHandler customviewRowChanged;
            
            public event customviewRowChangeEventHandler customviewRowChanging;
            
            public event customviewRowChangeEventHandler customviewRowDeleted;
            
            public event customviewRowChangeEventHandler customviewRowDeleting;
            
            public void AddcustomviewRow(customviewRow row) {
                this.Rows.Add(row);
            }
            
            public customviewRow AddcustomviewRow(
                        string objectname, 
                        string viewname, 
                        string header, 
                        string footer, 
                        System.Double topmargin, 
                        System.Double bottommargin, 
                        System.Double rightmargin, 
                        System.Double leftmargin, 
                        short lefttoright, 
                        short hcenter, 
                        short vcenter, 
                        short gridlines, 
                        short rowheading, 
                        short colheading, 
                        short landscape, 
                        short scale, 
                        short fittopage, 
                        short vpages, 
                        short hpages, 
                        string isreal, 
                        string issystem, 
                        string staticfilter, 
                        System.DateTime lastmodtimestamp, 
                        string lastmoduser) {
                customviewRow rowcustomviewRow = ((customviewRow)(this.NewRow()));
                rowcustomviewRow.ItemArray = new object[] {
                        objectname,
                        viewname,
                        header,
                        footer,
                        topmargin,
                        bottommargin,
                        rightmargin,
                        leftmargin,
                        lefttoright,
                        hcenter,
                        vcenter,
                        gridlines,
                        rowheading,
                        colheading,
                        landscape,
                        scale,
                        fittopage,
                        vpages,
                        hpages,
                        isreal,
                        issystem,
                        staticfilter,
                        lastmodtimestamp,
                        lastmoduser};
                this.Rows.Add(rowcustomviewRow);
                return rowcustomviewRow;
            }
            
            public customviewRow FindByobjectnameviewname(string objectname, string viewname) {
                return ((customviewRow)(this.Rows.Find(new object[] {
                            objectname,
                            viewname})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                customviewDataTable cln = ((customviewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new customviewDataTable();
            }
            
            internal void InitVars() {
                this.columnobjectname = this.Columns["objectname"];
                this.columnviewname = this.Columns["viewname"];
                this.columnheader = this.Columns["header"];
                this.columnfooter = this.Columns["footer"];
                this.columntopmargin = this.Columns["topmargin"];
                this.columnbottommargin = this.Columns["bottommargin"];
                this.columnrightmargin = this.Columns["rightmargin"];
                this.columnleftmargin = this.Columns["leftmargin"];
                this.columnlefttoright = this.Columns["lefttoright"];
                this.columnhcenter = this.Columns["hcenter"];
                this.columnvcenter = this.Columns["vcenter"];
                this.columngridlines = this.Columns["gridlines"];
                this.columnrowheading = this.Columns["rowheading"];
                this.columncolheading = this.Columns["colheading"];
                this.columnlandscape = this.Columns["landscape"];
                this.columnscale = this.Columns["scale"];
                this.columnfittopage = this.Columns["fittopage"];
                this.columnvpages = this.Columns["vpages"];
                this.columnhpages = this.Columns["hpages"];
                this.columnisreal = this.Columns["isreal"];
                this.columnissystem = this.Columns["issystem"];
                this.columnstaticfilter = this.Columns["staticfilter"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
            }
            
            private void InitClass() {
                this.columnobjectname = new DataColumn("objectname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnobjectname);
                this.columnviewname = new DataColumn("viewname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnviewname);
                this.columnheader = new DataColumn("header", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnheader);
                this.columnfooter = new DataColumn("footer", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfooter);
                this.columntopmargin = new DataColumn("topmargin", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntopmargin);
                this.columnbottommargin = new DataColumn("bottommargin", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbottommargin);
                this.columnrightmargin = new DataColumn("rightmargin", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrightmargin);
                this.columnleftmargin = new DataColumn("leftmargin", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnleftmargin);
                this.columnlefttoright = new DataColumn("lefttoright", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlefttoright);
                this.columnhcenter = new DataColumn("hcenter", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnhcenter);
                this.columnvcenter = new DataColumn("vcenter", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvcenter);
                this.columngridlines = new DataColumn("gridlines", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columngridlines);
                this.columnrowheading = new DataColumn("rowheading", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrowheading);
                this.columncolheading = new DataColumn("colheading", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncolheading);
                this.columnlandscape = new DataColumn("landscape", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlandscape);
                this.columnscale = new DataColumn("scale", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnscale);
                this.columnfittopage = new DataColumn("fittopage", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfittopage);
                this.columnvpages = new DataColumn("vpages", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvpages);
                this.columnhpages = new DataColumn("hpages", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnhpages);
                this.columnisreal = new DataColumn("isreal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisreal);
                this.columnissystem = new DataColumn("issystem", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnissystem);
                this.columnstaticfilter = new DataColumn("staticfilter", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstaticfilter);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey2", new DataColumn[] {
                                this.columnobjectname,
                                this.columnviewname}, true));
                this.Constraints.Add(new UniqueConstraint("key3", new DataColumn[] {
                                this.columnviewname}, false));
                this.columnobjectname.AllowDBNull = false;
                this.columnviewname.AllowDBNull = false;
                this.columnviewname.Unique = true;
            }
            
            public customviewRow NewcustomviewRow() {
                return ((customviewRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new customviewRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(customviewRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.customviewRowChanged != null)) {
                    this.customviewRowChanged(this, new customviewRowChangeEvent(((customviewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.customviewRowChanging != null)) {
                    this.customviewRowChanging(this, new customviewRowChangeEvent(((customviewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.customviewRowDeleted != null)) {
                    this.customviewRowDeleted(this, new customviewRowChangeEvent(((customviewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.customviewRowDeleting != null)) {
                    this.customviewRowDeleting(this, new customviewRowChangeEvent(((customviewRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecustomviewRow(customviewRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewRow : DataRow {
            
            private customviewDataTable tablecustomview;
            
            internal customviewRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecustomview = ((customviewDataTable)(this.Table));
            }
            
            public string objectname {
                get {
                    return ((string)(this[this.tablecustomview.objectnameColumn]));
                }
                set {
                    this[this.tablecustomview.objectnameColumn] = value;
                }
            }
            
            public string viewname {
                get {
                    return ((string)(this[this.tablecustomview.viewnameColumn]));
                }
                set {
                    this[this.tablecustomview.viewnameColumn] = value;
                }
            }
            
            public string header {
                get {
                    try {
                        return ((string)(this[this.tablecustomview.headerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.headerColumn] = value;
                }
            }
            
            public string footer {
                get {
                    try {
                        return ((string)(this[this.tablecustomview.footerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.footerColumn] = value;
                }
            }
            
            public System.Double topmargin {
                get {
                    try {
                        return ((System.Double)(this[this.tablecustomview.topmarginColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.topmarginColumn] = value;
                }
            }
            
            public System.Double bottommargin {
                get {
                    try {
                        return ((System.Double)(this[this.tablecustomview.bottommarginColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.bottommarginColumn] = value;
                }
            }
            
            public System.Double rightmargin {
                get {
                    try {
                        return ((System.Double)(this[this.tablecustomview.rightmarginColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.rightmarginColumn] = value;
                }
            }
            
            public System.Double leftmargin {
                get {
                    try {
                        return ((System.Double)(this[this.tablecustomview.leftmarginColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.leftmarginColumn] = value;
                }
            }
            
            public short lefttoright {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.lefttorightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.lefttorightColumn] = value;
                }
            }
            
            public short hcenter {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.hcenterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.hcenterColumn] = value;
                }
            }
            
            public short vcenter {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.vcenterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.vcenterColumn] = value;
                }
            }
            
            public short gridlines {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.gridlinesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.gridlinesColumn] = value;
                }
            }
            
            public short rowheading {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.rowheadingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.rowheadingColumn] = value;
                }
            }
            
            public short colheading {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.colheadingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.colheadingColumn] = value;
                }
            }
            
            public short landscape {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.landscapeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.landscapeColumn] = value;
                }
            }
            
            public short scale {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.scaleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.scaleColumn] = value;
                }
            }
            
            public short fittopage {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.fittopageColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.fittopageColumn] = value;
                }
            }
            
            public short vpages {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.vpagesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.vpagesColumn] = value;
                }
            }
            
            public short hpages {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.hpagesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.hpagesColumn] = value;
                }
            }
            
            public string isreal {
                get {
                    try {
                        return ((string)(this[this.tablecustomview.isrealColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.isrealColumn] = value;
                }
            }
            
            public string issystem {
                get {
                    try {
                        return ((string)(this[this.tablecustomview.issystemColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.issystemColumn] = value;
                }
            }
            
            public string staticfilter {
                get {
                    try {
                        return ((string)(this[this.tablecustomview.staticfilterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.staticfilterColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecustomview.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablecustomview.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.lastmoduserColumn] = value;
                }
            }
            
            public bool IsheaderNull() {
                return this.IsNull(this.tablecustomview.headerColumn);
            }
            
            public void SetheaderNull() {
                this[this.tablecustomview.headerColumn] = System.Convert.DBNull;
            }
            
            public bool IsfooterNull() {
                return this.IsNull(this.tablecustomview.footerColumn);
            }
            
            public void SetfooterNull() {
                this[this.tablecustomview.footerColumn] = System.Convert.DBNull;
            }
            
            public bool IstopmarginNull() {
                return this.IsNull(this.tablecustomview.topmarginColumn);
            }
            
            public void SettopmarginNull() {
                this[this.tablecustomview.topmarginColumn] = System.Convert.DBNull;
            }
            
            public bool IsbottommarginNull() {
                return this.IsNull(this.tablecustomview.bottommarginColumn);
            }
            
            public void SetbottommarginNull() {
                this[this.tablecustomview.bottommarginColumn] = System.Convert.DBNull;
            }
            
            public bool IsrightmarginNull() {
                return this.IsNull(this.tablecustomview.rightmarginColumn);
            }
            
            public void SetrightmarginNull() {
                this[this.tablecustomview.rightmarginColumn] = System.Convert.DBNull;
            }
            
            public bool IsleftmarginNull() {
                return this.IsNull(this.tablecustomview.leftmarginColumn);
            }
            
            public void SetleftmarginNull() {
                this[this.tablecustomview.leftmarginColumn] = System.Convert.DBNull;
            }
            
            public bool IslefttorightNull() {
                return this.IsNull(this.tablecustomview.lefttorightColumn);
            }
            
            public void SetlefttorightNull() {
                this[this.tablecustomview.lefttorightColumn] = System.Convert.DBNull;
            }
            
            public bool IshcenterNull() {
                return this.IsNull(this.tablecustomview.hcenterColumn);
            }
            
            public void SethcenterNull() {
                this[this.tablecustomview.hcenterColumn] = System.Convert.DBNull;
            }
            
            public bool IsvcenterNull() {
                return this.IsNull(this.tablecustomview.vcenterColumn);
            }
            
            public void SetvcenterNull() {
                this[this.tablecustomview.vcenterColumn] = System.Convert.DBNull;
            }
            
            public bool IsgridlinesNull() {
                return this.IsNull(this.tablecustomview.gridlinesColumn);
            }
            
            public void SetgridlinesNull() {
                this[this.tablecustomview.gridlinesColumn] = System.Convert.DBNull;
            }
            
            public bool IsrowheadingNull() {
                return this.IsNull(this.tablecustomview.rowheadingColumn);
            }
            
            public void SetrowheadingNull() {
                this[this.tablecustomview.rowheadingColumn] = System.Convert.DBNull;
            }
            
            public bool IscolheadingNull() {
                return this.IsNull(this.tablecustomview.colheadingColumn);
            }
            
            public void SetcolheadingNull() {
                this[this.tablecustomview.colheadingColumn] = System.Convert.DBNull;
            }
            
            public bool IslandscapeNull() {
                return this.IsNull(this.tablecustomview.landscapeColumn);
            }
            
            public void SetlandscapeNull() {
                this[this.tablecustomview.landscapeColumn] = System.Convert.DBNull;
            }
            
            public bool IsscaleNull() {
                return this.IsNull(this.tablecustomview.scaleColumn);
            }
            
            public void SetscaleNull() {
                this[this.tablecustomview.scaleColumn] = System.Convert.DBNull;
            }
            
            public bool IsfittopageNull() {
                return this.IsNull(this.tablecustomview.fittopageColumn);
            }
            
            public void SetfittopageNull() {
                this[this.tablecustomview.fittopageColumn] = System.Convert.DBNull;
            }
            
            public bool IsvpagesNull() {
                return this.IsNull(this.tablecustomview.vpagesColumn);
            }
            
            public void SetvpagesNull() {
                this[this.tablecustomview.vpagesColumn] = System.Convert.DBNull;
            }
            
            public bool IshpagesNull() {
                return this.IsNull(this.tablecustomview.hpagesColumn);
            }
            
            public void SethpagesNull() {
                this[this.tablecustomview.hpagesColumn] = System.Convert.DBNull;
            }
            
            public bool IsisrealNull() {
                return this.IsNull(this.tablecustomview.isrealColumn);
            }
            
            public void SetisrealNull() {
                this[this.tablecustomview.isrealColumn] = System.Convert.DBNull;
            }
            
            public bool IsissystemNull() {
                return this.IsNull(this.tablecustomview.issystemColumn);
            }
            
            public void SetissystemNull() {
                this[this.tablecustomview.issystemColumn] = System.Convert.DBNull;
            }
            
            public bool IsstaticfilterNull() {
                return this.IsNull(this.tablecustomview.staticfilterColumn);
            }
            
            public void SetstaticfilterNull() {
                this[this.tablecustomview.staticfilterColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablecustomview.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablecustomview.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablecustomview.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablecustomview.lastmoduserColumn] = System.Convert.DBNull;
            }
            
            public customeditRow[] GetcustomeditRows() {
                return ((customeditRow[])(this.GetChildRows(this.Table.ChildRelations["customviewcustomedit"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewRowChangeEvent : EventArgs {
            
            private customviewRow eventRow;
            
            private DataRowAction eventAction;
            
            public customviewRowChangeEvent(customviewRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public customviewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
