
/*
Easy
Copyright (C) 2024 Università degli Studi di Catania (www.unict.it)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace customviewwhere{//customviewwhere//
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class vistaForm : DataSet {
        
        private customviewwhereDataTable tablecustomviewwhere;
        
        private customoperatorDataTable tablecustomoperator;
        
        private connectorDataTable tableconnector;
        
        private columntypesDataTable tablecolumntypes;
        
        private DataRelation relationcustomoperatorcustomviewwhere;
        
        private DataRelation relationconnectorcustomviewwhere;
        
        private DataRelation relationcustomviewwherecolumntypes;
        
        public vistaForm() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected vistaForm(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["customviewwhere"] != null)) {
                    this.Tables.Add(new customviewwhereDataTable(ds.Tables["customviewwhere"]));
                }
                if ((ds.Tables["customoperator"] != null)) {
                    this.Tables.Add(new customoperatorDataTable(ds.Tables["customoperator"]));
                }
                if ((ds.Tables["connector"] != null)) {
                    this.Tables.Add(new connectorDataTable(ds.Tables["connector"]));
                }
                if ((ds.Tables["columntypes"] != null)) {
                    this.Tables.Add(new columntypesDataTable(ds.Tables["columntypes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public customviewwhereDataTable customviewwhere {
            get {
                return this.tablecustomviewwhere;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public customoperatorDataTable customoperator {
            get {
                return this.tablecustomoperator;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public connectorDataTable connector {
            get {
                return this.tableconnector;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public columntypesDataTable columntypes {
            get {
                return this.tablecolumntypes;
            }
        }
        
        public override DataSet Clone() {
            vistaForm cln = ((vistaForm)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["customviewwhere"] != null)) {
                this.Tables.Add(new customviewwhereDataTable(ds.Tables["customviewwhere"]));
            }
            if ((ds.Tables["customoperator"] != null)) {
                this.Tables.Add(new customoperatorDataTable(ds.Tables["customoperator"]));
            }
            if ((ds.Tables["connector"] != null)) {
                this.Tables.Add(new connectorDataTable(ds.Tables["connector"]));
            }
            if ((ds.Tables["columntypes"] != null)) {
                this.Tables.Add(new columntypesDataTable(ds.Tables["columntypes"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablecustomviewwhere = ((customviewwhereDataTable)(this.Tables["customviewwhere"]));
            if ((this.tablecustomviewwhere != null)) {
                this.tablecustomviewwhere.InitVars();
            }
            this.tablecustomoperator = ((customoperatorDataTable)(this.Tables["customoperator"]));
            if ((this.tablecustomoperator != null)) {
                this.tablecustomoperator.InitVars();
            }
            this.tableconnector = ((connectorDataTable)(this.Tables["connector"]));
            if ((this.tableconnector != null)) {
                this.tableconnector.InitVars();
            }
            this.tablecolumntypes = ((columntypesDataTable)(this.Tables["columntypes"]));
            if ((this.tablecolumntypes != null)) {
                this.tablecolumntypes.InitVars();
            }
            this.relationcustomoperatorcustomviewwhere = this.Relations["customoperatorcustomviewwhere"];
            this.relationconnectorcustomviewwhere = this.Relations["connectorcustomviewwhere"];
            this.relationcustomviewwherecolumntypes = this.Relations["customviewwherecolumntypes"];
        }
        
        private void InitClass() {
            this.DataSetName = "vistaForm";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/vistaForm.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablecustomviewwhere = new customviewwhereDataTable();
            this.Tables.Add(this.tablecustomviewwhere);
            this.tablecustomoperator = new customoperatorDataTable();
            this.Tables.Add(this.tablecustomoperator);
            this.tableconnector = new connectorDataTable();
            this.Tables.Add(this.tableconnector);
            this.tablecolumntypes = new columntypesDataTable();
            this.Tables.Add(this.tablecolumntypes);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("customoperatorcustomviewwhere", new DataColumn[] {
                        this.tablecustomoperator.idoperatorColumn}, new DataColumn[] {
                        this.tablecustomviewwhere._operatorColumn});
            this.tablecustomviewwhere.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("connectorcustomviewwhere", new DataColumn[] {
                        this.tableconnector.idconnectorColumn}, new DataColumn[] {
                        this.tablecustomviewwhere.connectorColumn});
            this.tablecustomviewwhere.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            fkc = new ForeignKeyConstraint("customviewwherecolumntypes", new DataColumn[] {
                        this.tablecustomviewwhere.objectnameColumn}, new DataColumn[] {
                        this.tablecolumntypes.tablenameColumn});
            this.tablecolumntypes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            this.relationcustomoperatorcustomviewwhere = new DataRelation("customoperatorcustomviewwhere", new DataColumn[] {
                        this.tablecustomoperator.idoperatorColumn}, new DataColumn[] {
                        this.tablecustomviewwhere._operatorColumn}, false);
            this.Relations.Add(this.relationcustomoperatorcustomviewwhere);
            this.relationconnectorcustomviewwhere = new DataRelation("connectorcustomviewwhere", new DataColumn[] {
                        this.tableconnector.idconnectorColumn}, new DataColumn[] {
                        this.tablecustomviewwhere.connectorColumn}, false);
            this.Relations.Add(this.relationconnectorcustomviewwhere);
            this.relationcustomviewwherecolumntypes = new DataRelation("customviewwherecolumntypes", new DataColumn[] {
                        this.tablecustomviewwhere.objectnameColumn}, new DataColumn[] {
                        this.tablecolumntypes.tablenameColumn}, false);
            this.Relations.Add(this.relationcustomviewwherecolumntypes);
        }
        
        private bool ShouldSerializecustomviewwhere() {
            return false;
        }
        
        private bool ShouldSerializecustomoperator() {
            return false;
        }
        
        private bool ShouldSerializeconnector() {
            return false;
        }
        
        private bool ShouldSerializecolumntypes() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void customviewwhereRowChangeEventHandler(object sender, customviewwhereRowChangeEvent e);
        
        public delegate void customoperatorRowChangeEventHandler(object sender, customoperatorRowChangeEvent e);
        
        public delegate void connectorRowChangeEventHandler(object sender, connectorRowChangeEvent e);
        
        public delegate void columntypesRowChangeEventHandler(object sender, columntypesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewwhereDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnobjectname;
            
            private DataColumn columnviewname;
            
            private DataColumn columnperiodnumber;
            
            private DataColumn columnconnector;
            
            private DataColumn columncolumnname;
            
            private DataColumn column_operator;
            
            private DataColumn columnvalue;
            
            private DataColumn columnruntime;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            internal customviewwhereDataTable() : 
                    base("customviewwhere") {
                this.InitClass();
            }
            
            internal customviewwhereDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn objectnameColumn {
                get {
                    return this.columnobjectname;
                }
            }
            
            internal DataColumn viewnameColumn {
                get {
                    return this.columnviewname;
                }
            }
            
            internal DataColumn periodnumberColumn {
                get {
                    return this.columnperiodnumber;
                }
            }
            
            internal DataColumn connectorColumn {
                get {
                    return this.columnconnector;
                }
            }
            
            internal DataColumn columnnameColumn {
                get {
                    return this.columncolumnname;
                }
            }
            
            internal DataColumn _operatorColumn {
                get {
                    return this.column_operator;
                }
            }
            
            internal DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            internal DataColumn runtimeColumn {
                get {
                    return this.columnruntime;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            public customviewwhereRow this[int index] {
                get {
                    return ((customviewwhereRow)(this.Rows[index]));
                }
            }
            
            public event customviewwhereRowChangeEventHandler customviewwhereRowChanged;
            
            public event customviewwhereRowChangeEventHandler customviewwhereRowChanging;
            
            public event customviewwhereRowChangeEventHandler customviewwhereRowDeleted;
            
            public event customviewwhereRowChangeEventHandler customviewwhereRowDeleting;
            
            public void AddcustomviewwhereRow(customviewwhereRow row) {
                this.Rows.Add(row);
            }
            
            public customviewwhereRow AddcustomviewwhereRow(string objectname, string viewname, short periodnumber, connectorRow parentconnectorRowByconnectorcustomviewwhere, string columnname, customoperatorRow parentcustomoperatorRowBycustomoperatorcustomviewwhere, string value, int runtime, System.DateTime lastmodtimestamp, string lastmoduser) {
                customviewwhereRow rowcustomviewwhereRow = ((customviewwhereRow)(this.NewRow()));
                rowcustomviewwhereRow.ItemArray = new object[] {
                        objectname,
                        viewname,
                        periodnumber,
                        parentconnectorRowByconnectorcustomviewwhere[0],
                        columnname,
                        parentcustomoperatorRowBycustomoperatorcustomviewwhere[0],
                        value,
                        runtime,
                        lastmodtimestamp,
                        lastmoduser};
                this.Rows.Add(rowcustomviewwhereRow);
                return rowcustomviewwhereRow;
            }
            
            public customviewwhereRow FindByobjectnameviewnameperiodnumber(string objectname, string viewname, short periodnumber) {
                return ((customviewwhereRow)(this.Rows.Find(new object[] {
                            objectname,
                            viewname,
                            periodnumber})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                customviewwhereDataTable cln = ((customviewwhereDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new customviewwhereDataTable();
            }
            
            internal void InitVars() {
                this.columnobjectname = this.Columns["objectname"];
                this.columnviewname = this.Columns["viewname"];
                this.columnperiodnumber = this.Columns["periodnumber"];
                this.columnconnector = this.Columns["connector"];
                this.columncolumnname = this.Columns["columnname"];
                this.column_operator = this.Columns["operator"];
                this.columnvalue = this.Columns["value"];
                this.columnruntime = this.Columns["runtime"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
            }
            
            private void InitClass() {
                this.columnobjectname = new DataColumn("objectname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnobjectname);
                this.columnviewname = new DataColumn("viewname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnviewname);
                this.columnperiodnumber = new DataColumn("periodnumber", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnperiodnumber);
                this.columnconnector = new DataColumn("connector", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnconnector);
                this.columncolumnname = new DataColumn("columnname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncolumnname);
                this.column_operator = new DataColumn("operator", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column_operator);
                this.columnvalue = new DataColumn("value", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvalue);
                this.columnruntime = new DataColumn("runtime", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnruntime);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey1", new DataColumn[] {
                                this.columnobjectname,
                                this.columnviewname,
                                this.columnperiodnumber}, true));
                this.Constraints.Add(new UniqueConstraint("key2", new DataColumn[] {
                                this.columnobjectname}, false));
                this.columnobjectname.AllowDBNull = false;
                this.columnobjectname.Unique = true;
                this.columnviewname.AllowDBNull = false;
                this.columnperiodnumber.AllowDBNull = false;
            }
            
            public customviewwhereRow NewcustomviewwhereRow() {
                return ((customviewwhereRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new customviewwhereRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(customviewwhereRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.customviewwhereRowChanged != null)) {
                    this.customviewwhereRowChanged(this, new customviewwhereRowChangeEvent(((customviewwhereRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.customviewwhereRowChanging != null)) {
                    this.customviewwhereRowChanging(this, new customviewwhereRowChangeEvent(((customviewwhereRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.customviewwhereRowDeleted != null)) {
                    this.customviewwhereRowDeleted(this, new customviewwhereRowChangeEvent(((customviewwhereRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.customviewwhereRowDeleting != null)) {
                    this.customviewwhereRowDeleting(this, new customviewwhereRowChangeEvent(((customviewwhereRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecustomviewwhereRow(customviewwhereRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewwhereRow : DataRow {
            
            private customviewwhereDataTable tablecustomviewwhere;
            
            internal customviewwhereRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecustomviewwhere = ((customviewwhereDataTable)(this.Table));
            }
            
            public string objectname {
                get {
                    return ((string)(this[this.tablecustomviewwhere.objectnameColumn]));
                }
                set {
                    this[this.tablecustomviewwhere.objectnameColumn] = value;
                }
            }
            
            public string viewname {
                get {
                    return ((string)(this[this.tablecustomviewwhere.viewnameColumn]));
                }
                set {
                    this[this.tablecustomviewwhere.viewnameColumn] = value;
                }
            }
            
            public short periodnumber {
                get {
                    return ((short)(this[this.tablecustomviewwhere.periodnumberColumn]));
                }
                set {
                    this[this.tablecustomviewwhere.periodnumberColumn] = value;
                }
            }
            
            public int connector {
                get {
                    try {
                        return ((int)(this[this.tablecustomviewwhere.connectorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewwhere.connectorColumn] = value;
                }
            }
            
            public string columnname {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewwhere.columnnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewwhere.columnnameColumn] = value;
                }
            }
            
            public int _operator {
                get {
                    try {
                        return ((int)(this[this.tablecustomviewwhere._operatorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewwhere._operatorColumn] = value;
                }
            }
            
            public string value {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewwhere.valueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewwhere.valueColumn] = value;
                }
            }
            
            public int runtime {
                get {
                    try {
                        return ((int)(this[this.tablecustomviewwhere.runtimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewwhere.runtimeColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecustomviewwhere.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewwhere.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewwhere.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewwhere.lastmoduserColumn] = value;
                }
            }
            
            public customoperatorRow customoperatorRow {
                get {
                    return ((customoperatorRow)(this.GetParentRow(this.Table.ParentRelations["customoperatorcustomviewwhere"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["customoperatorcustomviewwhere"]);
                }
            }
            
            public connectorRow connectorRow {
                get {
                    return ((connectorRow)(this.GetParentRow(this.Table.ParentRelations["connectorcustomviewwhere"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["connectorcustomviewwhere"]);
                }
            }
            
            public bool IsconnectorNull() {
                return this.IsNull(this.tablecustomviewwhere.connectorColumn);
            }
            
            public void SetconnectorNull() {
                this[this.tablecustomviewwhere.connectorColumn] = System.Convert.DBNull;
            }
            
            public bool IscolumnnameNull() {
                return this.IsNull(this.tablecustomviewwhere.columnnameColumn);
            }
            
            public void SetcolumnnameNull() {
                this[this.tablecustomviewwhere.columnnameColumn] = System.Convert.DBNull;
            }
            
            public bool Is_operatorNull() {
                return this.IsNull(this.tablecustomviewwhere._operatorColumn);
            }
            
            public void Set_operatorNull() {
                this[this.tablecustomviewwhere._operatorColumn] = System.Convert.DBNull;
            }
            
            public bool IsvalueNull() {
                return this.IsNull(this.tablecustomviewwhere.valueColumn);
            }
            
            public void SetvalueNull() {
                this[this.tablecustomviewwhere.valueColumn] = System.Convert.DBNull;
            }
            
            public bool IsruntimeNull() {
                return this.IsNull(this.tablecustomviewwhere.runtimeColumn);
            }
            
            public void SetruntimeNull() {
                this[this.tablecustomviewwhere.runtimeColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablecustomviewwhere.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablecustomviewwhere.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablecustomviewwhere.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablecustomviewwhere.lastmoduserColumn] = System.Convert.DBNull;
            }
            
            public columntypesRow[] GetcolumntypesRows() {
                return ((columntypesRow[])(this.GetChildRows(this.Table.ChildRelations["customviewwherecolumntypes"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewwhereRowChangeEvent : EventArgs {
            
            private customviewwhereRow eventRow;
            
            private DataRowAction eventAction;
            
            public customviewwhereRowChangeEvent(customviewwhereRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public customviewwhereRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customoperatorDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidoperator;
            
            private DataColumn columnname;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            internal customoperatorDataTable() : 
                    base("customoperator") {
                this.InitClass();
            }
            
            internal customoperatorDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idoperatorColumn {
                get {
                    return this.columnidoperator;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            public customoperatorRow this[int index] {
                get {
                    return ((customoperatorRow)(this.Rows[index]));
                }
            }
            
            public event customoperatorRowChangeEventHandler customoperatorRowChanged;
            
            public event customoperatorRowChangeEventHandler customoperatorRowChanging;
            
            public event customoperatorRowChangeEventHandler customoperatorRowDeleted;
            
            public event customoperatorRowChangeEventHandler customoperatorRowDeleting;
            
            public void AddcustomoperatorRow(customoperatorRow row) {
                this.Rows.Add(row);
            }
            
            public customoperatorRow AddcustomoperatorRow(int idoperator, string name, System.DateTime lastmodtimestamp, string lastmoduser) {
                customoperatorRow rowcustomoperatorRow = ((customoperatorRow)(this.NewRow()));
                rowcustomoperatorRow.ItemArray = new object[] {
                        idoperator,
                        name,
                        lastmodtimestamp,
                        lastmoduser};
                this.Rows.Add(rowcustomoperatorRow);
                return rowcustomoperatorRow;
            }
            
            public customoperatorRow FindByidoperator(int idoperator) {
                return ((customoperatorRow)(this.Rows.Find(new object[] {
                            idoperator})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                customoperatorDataTable cln = ((customoperatorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new customoperatorDataTable();
            }
            
            internal void InitVars() {
                this.columnidoperator = this.Columns["idoperator"];
                this.columnname = this.Columns["name"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
            }
            
            private void InitClass() {
                this.columnidoperator = new DataColumn("idoperator", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidoperator);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey2", new DataColumn[] {
                                this.columnidoperator}, true));
                this.columnidoperator.AllowDBNull = false;
                this.columnidoperator.Unique = true;
            }
            
            public customoperatorRow NewcustomoperatorRow() {
                return ((customoperatorRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new customoperatorRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(customoperatorRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.customoperatorRowChanged != null)) {
                    this.customoperatorRowChanged(this, new customoperatorRowChangeEvent(((customoperatorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.customoperatorRowChanging != null)) {
                    this.customoperatorRowChanging(this, new customoperatorRowChangeEvent(((customoperatorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.customoperatorRowDeleted != null)) {
                    this.customoperatorRowDeleted(this, new customoperatorRowChangeEvent(((customoperatorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.customoperatorRowDeleting != null)) {
                    this.customoperatorRowDeleting(this, new customoperatorRowChangeEvent(((customoperatorRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecustomoperatorRow(customoperatorRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customoperatorRow : DataRow {
            
            private customoperatorDataTable tablecustomoperator;
            
            internal customoperatorRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecustomoperator = ((customoperatorDataTable)(this.Table));
            }
            
            public int idoperator {
                get {
                    return ((int)(this[this.tablecustomoperator.idoperatorColumn]));
                }
                set {
                    this[this.tablecustomoperator.idoperatorColumn] = value;
                }
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablecustomoperator.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomoperator.nameColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecustomoperator.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomoperator.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablecustomoperator.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomoperator.lastmoduserColumn] = value;
                }
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tablecustomoperator.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tablecustomoperator.nameColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablecustomoperator.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablecustomoperator.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablecustomoperator.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablecustomoperator.lastmoduserColumn] = System.Convert.DBNull;
            }
            
            public customviewwhereRow[] GetcustomviewwhereRows() {
                return ((customviewwhereRow[])(this.GetChildRows(this.Table.ChildRelations["customoperatorcustomviewwhere"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customoperatorRowChangeEvent : EventArgs {
            
            private customoperatorRow eventRow;
            
            private DataRowAction eventAction;
            
            public customoperatorRowChangeEvent(customoperatorRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public customoperatorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class connectorDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidconnector;
            
            private DataColumn columnname;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            internal connectorDataTable() : 
                    base("connector") {
                this.InitClass();
            }
            
            internal connectorDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idconnectorColumn {
                get {
                    return this.columnidconnector;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            public connectorRow this[int index] {
                get {
                    return ((connectorRow)(this.Rows[index]));
                }
            }
            
            public event connectorRowChangeEventHandler connectorRowChanged;
            
            public event connectorRowChangeEventHandler connectorRowChanging;
            
            public event connectorRowChangeEventHandler connectorRowDeleted;
            
            public event connectorRowChangeEventHandler connectorRowDeleting;
            
            public void AddconnectorRow(connectorRow row) {
                this.Rows.Add(row);
            }
            
            public connectorRow AddconnectorRow(int idconnector, string name, System.DateTime lastmodtimestamp, string lastmoduser) {
                connectorRow rowconnectorRow = ((connectorRow)(this.NewRow()));
                rowconnectorRow.ItemArray = new object[] {
                        idconnector,
                        name,
                        lastmodtimestamp,
                        lastmoduser};
                this.Rows.Add(rowconnectorRow);
                return rowconnectorRow;
            }
            
            public connectorRow FindByidconnector(int idconnector) {
                return ((connectorRow)(this.Rows.Find(new object[] {
                            idconnector})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                connectorDataTable cln = ((connectorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new connectorDataTable();
            }
            
            internal void InitVars() {
                this.columnidconnector = this.Columns["idconnector"];
                this.columnname = this.Columns["name"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
            }
            
            private void InitClass() {
                this.columnidconnector = new DataColumn("idconnector", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidconnector);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey3", new DataColumn[] {
                                this.columnidconnector}, true));
                this.columnidconnector.AllowDBNull = false;
                this.columnidconnector.Unique = true;
            }
            
            public connectorRow NewconnectorRow() {
                return ((connectorRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new connectorRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(connectorRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.connectorRowChanged != null)) {
                    this.connectorRowChanged(this, new connectorRowChangeEvent(((connectorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.connectorRowChanging != null)) {
                    this.connectorRowChanging(this, new connectorRowChangeEvent(((connectorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.connectorRowDeleted != null)) {
                    this.connectorRowDeleted(this, new connectorRowChangeEvent(((connectorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.connectorRowDeleting != null)) {
                    this.connectorRowDeleting(this, new connectorRowChangeEvent(((connectorRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveconnectorRow(connectorRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class connectorRow : DataRow {
            
            private connectorDataTable tableconnector;
            
            internal connectorRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableconnector = ((connectorDataTable)(this.Table));
            }
            
            public int idconnector {
                get {
                    return ((int)(this[this.tableconnector.idconnectorColumn]));
                }
                set {
                    this[this.tableconnector.idconnectorColumn] = value;
                }
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableconnector.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconnector.nameColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableconnector.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconnector.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tableconnector.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconnector.lastmoduserColumn] = value;
                }
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tableconnector.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tableconnector.nameColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tableconnector.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tableconnector.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tableconnector.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tableconnector.lastmoduserColumn] = System.Convert.DBNull;
            }
            
            public customviewwhereRow[] GetcustomviewwhereRows() {
                return ((customviewwhereRow[])(this.GetChildRows(this.Table.ChildRelations["connectorcustomviewwhere"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class connectorRowChangeEvent : EventArgs {
            
            private connectorRow eventRow;
            
            private DataRowAction eventAction;
            
            public connectorRowChangeEvent(connectorRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public connectorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class columntypesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntablename;
            
            private DataColumn columnfield;
            
            internal columntypesDataTable() : 
                    base("columntypes") {
                this.InitClass();
            }
            
            internal columntypesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn tablenameColumn {
                get {
                    return this.columntablename;
                }
            }
            
            internal DataColumn fieldColumn {
                get {
                    return this.columnfield;
                }
            }
            
            public columntypesRow this[int index] {
                get {
                    return ((columntypesRow)(this.Rows[index]));
                }
            }
            
            public event columntypesRowChangeEventHandler columntypesRowChanged;
            
            public event columntypesRowChangeEventHandler columntypesRowChanging;
            
            public event columntypesRowChangeEventHandler columntypesRowDeleted;
            
            public event columntypesRowChangeEventHandler columntypesRowDeleting;
            
            public void AddcolumntypesRow(columntypesRow row) {
                this.Rows.Add(row);
            }
            
            public columntypesRow AddcolumntypesRow(customviewwhereRow parentcustomviewwhereRowBycustomviewwherecolumntypes, string field) {
                columntypesRow rowcolumntypesRow = ((columntypesRow)(this.NewRow()));
                rowcolumntypesRow.ItemArray = new object[] {
                        parentcustomviewwhereRowBycustomviewwherecolumntypes[0],
                        field};
                this.Rows.Add(rowcolumntypesRow);
                return rowcolumntypesRow;
            }
            
            public columntypesRow FindBytablenamefield(string tablename, string field) {
                return ((columntypesRow)(this.Rows.Find(new object[] {
                            tablename,
                            field})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                columntypesDataTable cln = ((columntypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new columntypesDataTable();
            }
            
            internal void InitVars() {
                this.columntablename = this.Columns["tablename"];
                this.columnfield = this.Columns["field"];
            }
            
            private void InitClass() {
                this.columntablename = new DataColumn("tablename", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntablename);
                this.columnfield = new DataColumn("field", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfield);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey4", new DataColumn[] {
                                this.columntablename,
                                this.columnfield}, true));
                this.columntablename.AllowDBNull = false;
                this.columnfield.AllowDBNull = false;
            }
            
            public columntypesRow NewcolumntypesRow() {
                return ((columntypesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new columntypesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(columntypesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.columntypesRowChanged != null)) {
                    this.columntypesRowChanged(this, new columntypesRowChangeEvent(((columntypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.columntypesRowChanging != null)) {
                    this.columntypesRowChanging(this, new columntypesRowChangeEvent(((columntypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.columntypesRowDeleted != null)) {
                    this.columntypesRowDeleted(this, new columntypesRowChangeEvent(((columntypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.columntypesRowDeleting != null)) {
                    this.columntypesRowDeleting(this, new columntypesRowChangeEvent(((columntypesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecolumntypesRow(columntypesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class columntypesRow : DataRow {
            
            private columntypesDataTable tablecolumntypes;
            
            internal columntypesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecolumntypes = ((columntypesDataTable)(this.Table));
            }
            
            public string tablename {
                get {
                    return ((string)(this[this.tablecolumntypes.tablenameColumn]));
                }
                set {
                    this[this.tablecolumntypes.tablenameColumn] = value;
                }
            }
            
            public string field {
                get {
                    return ((string)(this[this.tablecolumntypes.fieldColumn]));
                }
                set {
                    this[this.tablecolumntypes.fieldColumn] = value;
                }
            }
            
            public customviewwhereRow customviewwhereRow {
                get {
                    return ((customviewwhereRow)(this.GetParentRow(this.Table.ParentRelations["customviewwherecolumntypes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["customviewwherecolumntypes"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class columntypesRowChangeEvent : EventArgs {
            
            private columntypesRow eventRow;
            
            private DataRowAction eventAction;
            
            public columntypesRowChangeEvent(columntypesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public columntypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
