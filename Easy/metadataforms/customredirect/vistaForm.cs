/*
    Easy
    Copyright (C) 2020 Universit√† degli Studi di Catania (www.unict.it)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.510
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace customredirect{//customredirect//
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class vistaForm : DataSet {
        
        private customredirectDataTable tablecustomredirect;
        
        private customobjectDataTable tablecustomobject;
        
        private customviewDataTable tablecustomview;
        
        private DataRelation relationcustomobjectcustomredirect;
        
        private DataRelation relationcustomobjectcustomview;
        
        public vistaForm() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected vistaForm(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["customredirect"] != null)) {
                    this.Tables.Add(new customredirectDataTable(ds.Tables["customredirect"]));
                }
                if ((ds.Tables["customobject"] != null)) {
                    this.Tables.Add(new customobjectDataTable(ds.Tables["customobject"]));
                }
                if ((ds.Tables["customview"] != null)) {
                    this.Tables.Add(new customviewDataTable(ds.Tables["customview"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public customredirectDataTable customredirect {
            get {
                return this.tablecustomredirect;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public customobjectDataTable customobject {
            get {
                return this.tablecustomobject;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public customviewDataTable customview {
            get {
                return this.tablecustomview;
            }
        }
        
        public override DataSet Clone() {
            vistaForm cln = ((vistaForm)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["customredirect"] != null)) {
                this.Tables.Add(new customredirectDataTable(ds.Tables["customredirect"]));
            }
            if ((ds.Tables["customobject"] != null)) {
                this.Tables.Add(new customobjectDataTable(ds.Tables["customobject"]));
            }
            if ((ds.Tables["customview"] != null)) {
                this.Tables.Add(new customviewDataTable(ds.Tables["customview"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablecustomredirect = ((customredirectDataTable)(this.Tables["customredirect"]));
            if ((this.tablecustomredirect != null)) {
                this.tablecustomredirect.InitVars();
            }
            this.tablecustomobject = ((customobjectDataTable)(this.Tables["customobject"]));
            if ((this.tablecustomobject != null)) {
                this.tablecustomobject.InitVars();
            }
            this.tablecustomview = ((customviewDataTable)(this.Tables["customview"]));
            if ((this.tablecustomview != null)) {
                this.tablecustomview.InitVars();
            }
            this.relationcustomobjectcustomredirect = this.Relations["customobjectcustomredirect"];
            this.relationcustomobjectcustomview = this.Relations["customobjectcustomview"];
        }
        
        private void InitClass() {
            this.DataSetName = "vistaForm";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/vistaForm.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablecustomredirect = new customredirectDataTable();
            this.Tables.Add(this.tablecustomredirect);
            this.tablecustomobject = new customobjectDataTable();
            this.Tables.Add(this.tablecustomobject);
            this.tablecustomview = new customviewDataTable();
            this.Tables.Add(this.tablecustomview);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("customobjectcustomredirect", new DataColumn[] {
                        this.tablecustomobject.objectnameColumn}, new DataColumn[] {
                        this.tablecustomredirect.objecttargetColumn});
            this.tablecustomredirect.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("customobjectcustomview", new DataColumn[] {
                        this.tablecustomobject.objectnameColumn}, new DataColumn[] {
                        this.tablecustomview.objectnameColumn});
            this.tablecustomview.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationcustomobjectcustomredirect = new DataRelation("customobjectcustomredirect", new DataColumn[] {
                        this.tablecustomobject.objectnameColumn}, new DataColumn[] {
                        this.tablecustomredirect.objecttargetColumn}, false);
            this.Relations.Add(this.relationcustomobjectcustomredirect);
            this.relationcustomobjectcustomview = new DataRelation("customobjectcustomview", new DataColumn[] {
                        this.tablecustomobject.objectnameColumn}, new DataColumn[] {
                        this.tablecustomview.objectnameColumn}, false);
            this.Relations.Add(this.relationcustomobjectcustomview);
        }
        
        private bool ShouldSerializecustomredirect() {
            return false;
        }
        
        private bool ShouldSerializecustomobject() {
            return false;
        }
        
        private bool ShouldSerializecustomview() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void customredirectRowChangeEventHandler(object sender, customredirectRowChangeEvent e);
        
        public delegate void customobjectRowChangeEventHandler(object sender, customobjectRowChangeEvent e);
        
        public delegate void customviewRowChangeEventHandler(object sender, customviewRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customredirectDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnobjectname;
            
            private DataColumn columnviewname;
            
            private DataColumn columnobjecttarget;
            
            private DataColumn columnviewtarget;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            internal customredirectDataTable() : 
                    base("customredirect") {
                this.InitClass();
            }
            
            internal customredirectDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn objectnameColumn {
                get {
                    return this.columnobjectname;
                }
            }
            
            internal DataColumn viewnameColumn {
                get {
                    return this.columnviewname;
                }
            }
            
            internal DataColumn objecttargetColumn {
                get {
                    return this.columnobjecttarget;
                }
            }
            
            internal DataColumn viewtargetColumn {
                get {
                    return this.columnviewtarget;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            public customredirectRow this[int index] {
                get {
                    return ((customredirectRow)(this.Rows[index]));
                }
            }
            
            public event customredirectRowChangeEventHandler customredirectRowChanged;
            
            public event customredirectRowChangeEventHandler customredirectRowChanging;
            
            public event customredirectRowChangeEventHandler customredirectRowDeleted;
            
            public event customredirectRowChangeEventHandler customredirectRowDeleting;
            
            public void AddcustomredirectRow(customredirectRow row) {
                this.Rows.Add(row);
            }
            
            public customredirectRow AddcustomredirectRow(string objectname, string viewname, customobjectRow parentcustomobjectRowBycustomobjectcustomredirect, string viewtarget, System.DateTime lastmodtimestamp, string lastmoduser) {
                customredirectRow rowcustomredirectRow = ((customredirectRow)(this.NewRow()));
                rowcustomredirectRow.ItemArray = new object[] {
                        objectname,
                        viewname,
                        parentcustomobjectRowBycustomobjectcustomredirect[0],
                        viewtarget,
                        lastmodtimestamp,
                        lastmoduser};
                this.Rows.Add(rowcustomredirectRow);
                return rowcustomredirectRow;
            }
            
            public customredirectRow FindByobjectnameviewname(string objectname, string viewname) {
                return ((customredirectRow)(this.Rows.Find(new object[] {
                            objectname,
                            viewname})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                customredirectDataTable cln = ((customredirectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new customredirectDataTable();
            }
            
            internal void InitVars() {
                this.columnobjectname = this.Columns["objectname"];
                this.columnviewname = this.Columns["viewname"];
                this.columnobjecttarget = this.Columns["objecttarget"];
                this.columnviewtarget = this.Columns["viewtarget"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
            }
            
            private void InitClass() {
                this.columnobjectname = new DataColumn("objectname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnobjectname);
                this.columnviewname = new DataColumn("viewname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnviewname);
                this.columnobjecttarget = new DataColumn("objecttarget", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnobjecttarget);
                this.columnviewtarget = new DataColumn("viewtarget", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnviewtarget);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey1", new DataColumn[] {
                                this.columnobjectname,
                                this.columnviewname}, true));
                this.columnobjectname.AllowDBNull = false;
                this.columnviewname.AllowDBNull = false;
                this.columnobjecttarget.AllowDBNull = false;
                this.columnviewtarget.AllowDBNull = false;
            }
            
            public customredirectRow NewcustomredirectRow() {
                return ((customredirectRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new customredirectRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(customredirectRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.customredirectRowChanged != null)) {
                    this.customredirectRowChanged(this, new customredirectRowChangeEvent(((customredirectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.customredirectRowChanging != null)) {
                    this.customredirectRowChanging(this, new customredirectRowChangeEvent(((customredirectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.customredirectRowDeleted != null)) {
                    this.customredirectRowDeleted(this, new customredirectRowChangeEvent(((customredirectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.customredirectRowDeleting != null)) {
                    this.customredirectRowDeleting(this, new customredirectRowChangeEvent(((customredirectRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecustomredirectRow(customredirectRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customredirectRow : DataRow {
            
            private customredirectDataTable tablecustomredirect;
            
            internal customredirectRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecustomredirect = ((customredirectDataTable)(this.Table));
            }
            
            public string objectname {
                get {
                    return ((string)(this[this.tablecustomredirect.objectnameColumn]));
                }
                set {
                    this[this.tablecustomredirect.objectnameColumn] = value;
                }
            }
            
            public string viewname {
                get {
                    return ((string)(this[this.tablecustomredirect.viewnameColumn]));
                }
                set {
                    this[this.tablecustomredirect.viewnameColumn] = value;
                }
            }
            
            public string objecttarget {
                get {
                    return ((string)(this[this.tablecustomredirect.objecttargetColumn]));
                }
                set {
                    this[this.tablecustomredirect.objecttargetColumn] = value;
                }
            }
            
            public string viewtarget {
                get {
                    return ((string)(this[this.tablecustomredirect.viewtargetColumn]));
                }
                set {
                    this[this.tablecustomredirect.viewtargetColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecustomredirect.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomredirect.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablecustomredirect.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomredirect.lastmoduserColumn] = value;
                }
            }
            
            public customobjectRow customobjectRow {
                get {
                    return ((customobjectRow)(this.GetParentRow(this.Table.ParentRelations["customobjectcustomredirect"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["customobjectcustomredirect"]);
                }
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablecustomredirect.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablecustomredirect.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablecustomredirect.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablecustomredirect.lastmoduserColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customredirectRowChangeEvent : EventArgs {
            
            private customredirectRow eventRow;
            
            private DataRowAction eventAction;
            
            public customredirectRowChangeEvent(customredirectRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public customredirectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customobjectDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnobjectname;
            
            private DataColumn columndescription;
            
            private DataColumn columnisreal;
            
            private DataColumn columnrealtable;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            internal customobjectDataTable() : 
                    base("customobject") {
                this.InitClass();
            }
            
            internal customobjectDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn objectnameColumn {
                get {
                    return this.columnobjectname;
                }
            }
            
            internal DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            internal DataColumn isrealColumn {
                get {
                    return this.columnisreal;
                }
            }
            
            internal DataColumn realtableColumn {
                get {
                    return this.columnrealtable;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            public customobjectRow this[int index] {
                get {
                    return ((customobjectRow)(this.Rows[index]));
                }
            }
            
            public event customobjectRowChangeEventHandler customobjectRowChanged;
            
            public event customobjectRowChangeEventHandler customobjectRowChanging;
            
            public event customobjectRowChangeEventHandler customobjectRowDeleted;
            
            public event customobjectRowChangeEventHandler customobjectRowDeleting;
            
            public void AddcustomobjectRow(customobjectRow row) {
                this.Rows.Add(row);
            }
            
            public customobjectRow AddcustomobjectRow(string objectname, string description, string isreal, string realtable, System.DateTime lastmodtimestamp, string lastmoduser) {
                customobjectRow rowcustomobjectRow = ((customobjectRow)(this.NewRow()));
                rowcustomobjectRow.ItemArray = new object[] {
                        objectname,
                        description,
                        isreal,
                        realtable,
                        lastmodtimestamp,
                        lastmoduser};
                this.Rows.Add(rowcustomobjectRow);
                return rowcustomobjectRow;
            }
            
            public customobjectRow FindByobjectname(string objectname) {
                return ((customobjectRow)(this.Rows.Find(new object[] {
                            objectname})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                customobjectDataTable cln = ((customobjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new customobjectDataTable();
            }
            
            internal void InitVars() {
                this.columnobjectname = this.Columns["objectname"];
                this.columndescription = this.Columns["description"];
                this.columnisreal = this.Columns["isreal"];
                this.columnrealtable = this.Columns["realtable"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
            }
            
            private void InitClass() {
                this.columnobjectname = new DataColumn("objectname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnobjectname);
                this.columndescription = new DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescription);
                this.columnisreal = new DataColumn("isreal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisreal);
                this.columnrealtable = new DataColumn("realtable", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrealtable);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey2", new DataColumn[] {
                                this.columnobjectname}, true));
                this.columnobjectname.AllowDBNull = false;
                this.columnobjectname.Unique = true;
                this.columnisreal.AllowDBNull = false;
            }
            
            public customobjectRow NewcustomobjectRow() {
                return ((customobjectRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new customobjectRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(customobjectRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.customobjectRowChanged != null)) {
                    this.customobjectRowChanged(this, new customobjectRowChangeEvent(((customobjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.customobjectRowChanging != null)) {
                    this.customobjectRowChanging(this, new customobjectRowChangeEvent(((customobjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.customobjectRowDeleted != null)) {
                    this.customobjectRowDeleted(this, new customobjectRowChangeEvent(((customobjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.customobjectRowDeleting != null)) {
                    this.customobjectRowDeleting(this, new customobjectRowChangeEvent(((customobjectRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecustomobjectRow(customobjectRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customobjectRow : DataRow {
            
            private customobjectDataTable tablecustomobject;
            
            internal customobjectRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecustomobject = ((customobjectDataTable)(this.Table));
            }
            
            public string objectname {
                get {
                    return ((string)(this[this.tablecustomobject.objectnameColumn]));
                }
                set {
                    this[this.tablecustomobject.objectnameColumn] = value;
                }
            }
            
            public string description {
                get {
                    try {
                        return ((string)(this[this.tablecustomobject.descriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomobject.descriptionColumn] = value;
                }
            }
            
            public string isreal {
                get {
                    return ((string)(this[this.tablecustomobject.isrealColumn]));
                }
                set {
                    this[this.tablecustomobject.isrealColumn] = value;
                }
            }
            
            public string realtable {
                get {
                    try {
                        return ((string)(this[this.tablecustomobject.realtableColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomobject.realtableColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecustomobject.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomobject.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablecustomobject.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomobject.lastmoduserColumn] = value;
                }
            }
            
            public bool IsdescriptionNull() {
                return this.IsNull(this.tablecustomobject.descriptionColumn);
            }
            
            public void SetdescriptionNull() {
                this[this.tablecustomobject.descriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsrealtableNull() {
                return this.IsNull(this.tablecustomobject.realtableColumn);
            }
            
            public void SetrealtableNull() {
                this[this.tablecustomobject.realtableColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablecustomobject.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablecustomobject.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablecustomobject.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablecustomobject.lastmoduserColumn] = System.Convert.DBNull;
            }
            
            public customredirectRow[] GetcustomredirectRows() {
                return ((customredirectRow[])(this.GetChildRows(this.Table.ChildRelations["customobjectcustomredirect"])));
            }
            
            public customviewRow[] GetcustomviewRows() {
                return ((customviewRow[])(this.GetChildRows(this.Table.ChildRelations["customobjectcustomview"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customobjectRowChangeEvent : EventArgs {
            
            private customobjectRow eventRow;
            
            private DataRowAction eventAction;
            
            public customobjectRowChangeEvent(customobjectRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public customobjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnobjectname;
            
            private DataColumn columnviewname;
            
            private DataColumn columnheader;
            
            private DataColumn columnfooter;
            
            private DataColumn columntopmargin;
            
            private DataColumn columnbottommargin;
            
            private DataColumn columnrightmargin;
            
            private DataColumn columnleftmargin;
            
            private DataColumn columnlefttoright;
            
            private DataColumn columnhcenter;
            
            private DataColumn columnvcenter;
            
            private DataColumn columngridlines;
            
            private DataColumn columnrowheading;
            
            private DataColumn columncolheading;
            
            private DataColumn columnlandscape;
            
            private DataColumn columnscale;
            
            private DataColumn columnfittopage;
            
            private DataColumn columnvpages;
            
            private DataColumn columnhpages;
            
            private DataColumn columnisreal;
            
            private DataColumn columnissystem;
            
            private DataColumn columnstaticfilter;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            internal customviewDataTable() : 
                    base("customview") {
                this.InitClass();
            }
            
            internal customviewDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn objectnameColumn {
                get {
                    return this.columnobjectname;
                }
            }
            
            internal DataColumn viewnameColumn {
                get {
                    return this.columnviewname;
                }
            }
            
            internal DataColumn headerColumn {
                get {
                    return this.columnheader;
                }
            }
            
            internal DataColumn footerColumn {
                get {
                    return this.columnfooter;
                }
            }
            
            internal DataColumn topmarginColumn {
                get {
                    return this.columntopmargin;
                }
            }
            
            internal DataColumn bottommarginColumn {
                get {
                    return this.columnbottommargin;
                }
            }
            
            internal DataColumn rightmarginColumn {
                get {
                    return this.columnrightmargin;
                }
            }
            
            internal DataColumn leftmarginColumn {
                get {
                    return this.columnleftmargin;
                }
            }
            
            internal DataColumn lefttorightColumn {
                get {
                    return this.columnlefttoright;
                }
            }
            
            internal DataColumn hcenterColumn {
                get {
                    return this.columnhcenter;
                }
            }
            
            internal DataColumn vcenterColumn {
                get {
                    return this.columnvcenter;
                }
            }
            
            internal DataColumn gridlinesColumn {
                get {
                    return this.columngridlines;
                }
            }
            
            internal DataColumn rowheadingColumn {
                get {
                    return this.columnrowheading;
                }
            }
            
            internal DataColumn colheadingColumn {
                get {
                    return this.columncolheading;
                }
            }
            
            internal DataColumn landscapeColumn {
                get {
                    return this.columnlandscape;
                }
            }
            
            internal DataColumn scaleColumn {
                get {
                    return this.columnscale;
                }
            }
            
            internal DataColumn fittopageColumn {
                get {
                    return this.columnfittopage;
                }
            }
            
            internal DataColumn vpagesColumn {
                get {
                    return this.columnvpages;
                }
            }
            
            internal DataColumn hpagesColumn {
                get {
                    return this.columnhpages;
                }
            }
            
            internal DataColumn isrealColumn {
                get {
                    return this.columnisreal;
                }
            }
            
            internal DataColumn issystemColumn {
                get {
                    return this.columnissystem;
                }
            }
            
            internal DataColumn staticfilterColumn {
                get {
                    return this.columnstaticfilter;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            public customviewRow this[int index] {
                get {
                    return ((customviewRow)(this.Rows[index]));
                }
            }
            
            public event customviewRowChangeEventHandler customviewRowChanged;
            
            public event customviewRowChangeEventHandler customviewRowChanging;
            
            public event customviewRowChangeEventHandler customviewRowDeleted;
            
            public event customviewRowChangeEventHandler customviewRowDeleting;
            
            public void AddcustomviewRow(customviewRow row) {
                this.Rows.Add(row);
            }
            
            public customviewRow AddcustomviewRow(
                        customobjectRow parentcustomobjectRowBycustomobjectcustomview, 
                        string viewname, 
                        string header, 
                        string footer, 
                        System.Double topmargin, 
                        System.Double bottommargin, 
                        System.Double rightmargin, 
                        System.Double leftmargin, 
                        short lefttoright, 
                        short hcenter, 
                        short vcenter, 
                        short gridlines, 
                        short rowheading, 
                        short colheading, 
                        short landscape, 
                        short scale, 
                        short fittopage, 
                        short vpages, 
                        short hpages, 
                        string isreal, 
                        string issystem, 
                        string staticfilter, 
                        System.DateTime lastmodtimestamp, 
                        string lastmoduser) {
                customviewRow rowcustomviewRow = ((customviewRow)(this.NewRow()));
                rowcustomviewRow.ItemArray = new object[] {
                        parentcustomobjectRowBycustomobjectcustomview[0],
                        viewname,
                        header,
                        footer,
                        topmargin,
                        bottommargin,
                        rightmargin,
                        leftmargin,
                        lefttoright,
                        hcenter,
                        vcenter,
                        gridlines,
                        rowheading,
                        colheading,
                        landscape,
                        scale,
                        fittopage,
                        vpages,
                        hpages,
                        isreal,
                        issystem,
                        staticfilter,
                        lastmodtimestamp,
                        lastmoduser};
                this.Rows.Add(rowcustomviewRow);
                return rowcustomviewRow;
            }
            
            public customviewRow FindByobjectnameviewname(string objectname, string viewname) {
                return ((customviewRow)(this.Rows.Find(new object[] {
                            objectname,
                            viewname})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                customviewDataTable cln = ((customviewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new customviewDataTable();
            }
            
            internal void InitVars() {
                this.columnobjectname = this.Columns["objectname"];
                this.columnviewname = this.Columns["viewname"];
                this.columnheader = this.Columns["header"];
                this.columnfooter = this.Columns["footer"];
                this.columntopmargin = this.Columns["topmargin"];
                this.columnbottommargin = this.Columns["bottommargin"];
                this.columnrightmargin = this.Columns["rightmargin"];
                this.columnleftmargin = this.Columns["leftmargin"];
                this.columnlefttoright = this.Columns["lefttoright"];
                this.columnhcenter = this.Columns["hcenter"];
                this.columnvcenter = this.Columns["vcenter"];
                this.columngridlines = this.Columns["gridlines"];
                this.columnrowheading = this.Columns["rowheading"];
                this.columncolheading = this.Columns["colheading"];
                this.columnlandscape = this.Columns["landscape"];
                this.columnscale = this.Columns["scale"];
                this.columnfittopage = this.Columns["fittopage"];
                this.columnvpages = this.Columns["vpages"];
                this.columnhpages = this.Columns["hpages"];
                this.columnisreal = this.Columns["isreal"];
                this.columnissystem = this.Columns["issystem"];
                this.columnstaticfilter = this.Columns["staticfilter"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
            }
            
            private void InitClass() {
                this.columnobjectname = new DataColumn("objectname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnobjectname);
                this.columnviewname = new DataColumn("viewname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnviewname);
                this.columnheader = new DataColumn("header", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnheader);
                this.columnfooter = new DataColumn("footer", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfooter);
                this.columntopmargin = new DataColumn("topmargin", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntopmargin);
                this.columnbottommargin = new DataColumn("bottommargin", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbottommargin);
                this.columnrightmargin = new DataColumn("rightmargin", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrightmargin);
                this.columnleftmargin = new DataColumn("leftmargin", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnleftmargin);
                this.columnlefttoright = new DataColumn("lefttoright", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlefttoright);
                this.columnhcenter = new DataColumn("hcenter", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnhcenter);
                this.columnvcenter = new DataColumn("vcenter", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvcenter);
                this.columngridlines = new DataColumn("gridlines", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columngridlines);
                this.columnrowheading = new DataColumn("rowheading", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrowheading);
                this.columncolheading = new DataColumn("colheading", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncolheading);
                this.columnlandscape = new DataColumn("landscape", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlandscape);
                this.columnscale = new DataColumn("scale", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnscale);
                this.columnfittopage = new DataColumn("fittopage", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfittopage);
                this.columnvpages = new DataColumn("vpages", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvpages);
                this.columnhpages = new DataColumn("hpages", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnhpages);
                this.columnisreal = new DataColumn("isreal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisreal);
                this.columnissystem = new DataColumn("issystem", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnissystem);
                this.columnstaticfilter = new DataColumn("staticfilter", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstaticfilter);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey3", new DataColumn[] {
                                this.columnobjectname,
                                this.columnviewname}, true));
                this.columnobjectname.AllowDBNull = false;
                this.columnviewname.AllowDBNull = false;
            }
            
            public customviewRow NewcustomviewRow() {
                return ((customviewRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new customviewRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(customviewRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.customviewRowChanged != null)) {
                    this.customviewRowChanged(this, new customviewRowChangeEvent(((customviewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.customviewRowChanging != null)) {
                    this.customviewRowChanging(this, new customviewRowChangeEvent(((customviewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.customviewRowDeleted != null)) {
                    this.customviewRowDeleted(this, new customviewRowChangeEvent(((customviewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.customviewRowDeleting != null)) {
                    this.customviewRowDeleting(this, new customviewRowChangeEvent(((customviewRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecustomviewRow(customviewRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewRow : DataRow {
            
            private customviewDataTable tablecustomview;
            
            internal customviewRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecustomview = ((customviewDataTable)(this.Table));
            }
            
            public string objectname {
                get {
                    return ((string)(this[this.tablecustomview.objectnameColumn]));
                }
                set {
                    this[this.tablecustomview.objectnameColumn] = value;
                }
            }
            
            public string viewname {
                get {
                    return ((string)(this[this.tablecustomview.viewnameColumn]));
                }
                set {
                    this[this.tablecustomview.viewnameColumn] = value;
                }
            }
            
            public string header {
                get {
                    try {
                        return ((string)(this[this.tablecustomview.headerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.headerColumn] = value;
                }
            }
            
            public string footer {
                get {
                    try {
                        return ((string)(this[this.tablecustomview.footerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.footerColumn] = value;
                }
            }
            
            public System.Double topmargin {
                get {
                    try {
                        return ((System.Double)(this[this.tablecustomview.topmarginColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.topmarginColumn] = value;
                }
            }
            
            public System.Double bottommargin {
                get {
                    try {
                        return ((System.Double)(this[this.tablecustomview.bottommarginColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.bottommarginColumn] = value;
                }
            }
            
            public System.Double rightmargin {
                get {
                    try {
                        return ((System.Double)(this[this.tablecustomview.rightmarginColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.rightmarginColumn] = value;
                }
            }
            
            public System.Double leftmargin {
                get {
                    try {
                        return ((System.Double)(this[this.tablecustomview.leftmarginColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.leftmarginColumn] = value;
                }
            }
            
            public short lefttoright {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.lefttorightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.lefttorightColumn] = value;
                }
            }
            
            public short hcenter {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.hcenterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.hcenterColumn] = value;
                }
            }
            
            public short vcenter {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.vcenterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.vcenterColumn] = value;
                }
            }
            
            public short gridlines {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.gridlinesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.gridlinesColumn] = value;
                }
            }
            
            public short rowheading {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.rowheadingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.rowheadingColumn] = value;
                }
            }
            
            public short colheading {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.colheadingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.colheadingColumn] = value;
                }
            }
            
            public short landscape {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.landscapeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.landscapeColumn] = value;
                }
            }
            
            public short scale {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.scaleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.scaleColumn] = value;
                }
            }
            
            public short fittopage {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.fittopageColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.fittopageColumn] = value;
                }
            }
            
            public short vpages {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.vpagesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.vpagesColumn] = value;
                }
            }
            
            public short hpages {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.hpagesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.hpagesColumn] = value;
                }
            }
            
            public string isreal {
                get {
                    try {
                        return ((string)(this[this.tablecustomview.isrealColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.isrealColumn] = value;
                }
            }
            
            public string issystem {
                get {
                    try {
                        return ((string)(this[this.tablecustomview.issystemColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.issystemColumn] = value;
                }
            }
            
            public string staticfilter {
                get {
                    try {
                        return ((string)(this[this.tablecustomview.staticfilterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.staticfilterColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecustomview.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablecustomview.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.lastmoduserColumn] = value;
                }
            }
            
            public customobjectRow customobjectRow {
                get {
                    return ((customobjectRow)(this.GetParentRow(this.Table.ParentRelations["customobjectcustomview"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["customobjectcustomview"]);
                }
            }
            
            public bool IsheaderNull() {
                return this.IsNull(this.tablecustomview.headerColumn);
            }
            
            public void SetheaderNull() {
                this[this.tablecustomview.headerColumn] = System.Convert.DBNull;
            }
            
            public bool IsfooterNull() {
                return this.IsNull(this.tablecustomview.footerColumn);
            }
            
            public void SetfooterNull() {
                this[this.tablecustomview.footerColumn] = System.Convert.DBNull;
            }
            
            public bool IstopmarginNull() {
                return this.IsNull(this.tablecustomview.topmarginColumn);
            }
            
            public void SettopmarginNull() {
                this[this.tablecustomview.topmarginColumn] = System.Convert.DBNull;
            }
            
            public bool IsbottommarginNull() {
                return this.IsNull(this.tablecustomview.bottommarginColumn);
            }
            
            public void SetbottommarginNull() {
                this[this.tablecustomview.bottommarginColumn] = System.Convert.DBNull;
            }
            
            public bool IsrightmarginNull() {
                return this.IsNull(this.tablecustomview.rightmarginColumn);
            }
            
            public void SetrightmarginNull() {
                this[this.tablecustomview.rightmarginColumn] = System.Convert.DBNull;
            }
            
            public bool IsleftmarginNull() {
                return this.IsNull(this.tablecustomview.leftmarginColumn);
            }
            
            public void SetleftmarginNull() {
                this[this.tablecustomview.leftmarginColumn] = System.Convert.DBNull;
            }
            
            public bool IslefttorightNull() {
                return this.IsNull(this.tablecustomview.lefttorightColumn);
            }
            
            public void SetlefttorightNull() {
                this[this.tablecustomview.lefttorightColumn] = System.Convert.DBNull;
            }
            
            public bool IshcenterNull() {
                return this.IsNull(this.tablecustomview.hcenterColumn);
            }
            
            public void SethcenterNull() {
                this[this.tablecustomview.hcenterColumn] = System.Convert.DBNull;
            }
            
            public bool IsvcenterNull() {
                return this.IsNull(this.tablecustomview.vcenterColumn);
            }
            
            public void SetvcenterNull() {
                this[this.tablecustomview.vcenterColumn] = System.Convert.DBNull;
            }
            
            public bool IsgridlinesNull() {
                return this.IsNull(this.tablecustomview.gridlinesColumn);
            }
            
            public void SetgridlinesNull() {
                this[this.tablecustomview.gridlinesColumn] = System.Convert.DBNull;
            }
            
            public bool IsrowheadingNull() {
                return this.IsNull(this.tablecustomview.rowheadingColumn);
            }
            
            public void SetrowheadingNull() {
                this[this.tablecustomview.rowheadingColumn] = System.Convert.DBNull;
            }
            
            public bool IscolheadingNull() {
                return this.IsNull(this.tablecustomview.colheadingColumn);
            }
            
            public void SetcolheadingNull() {
                this[this.tablecustomview.colheadingColumn] = System.Convert.DBNull;
            }
            
            public bool IslandscapeNull() {
                return this.IsNull(this.tablecustomview.landscapeColumn);
            }
            
            public void SetlandscapeNull() {
                this[this.tablecustomview.landscapeColumn] = System.Convert.DBNull;
            }
            
            public bool IsscaleNull() {
                return this.IsNull(this.tablecustomview.scaleColumn);
            }
            
            public void SetscaleNull() {
                this[this.tablecustomview.scaleColumn] = System.Convert.DBNull;
            }
            
            public bool IsfittopageNull() {
                return this.IsNull(this.tablecustomview.fittopageColumn);
            }
            
            public void SetfittopageNull() {
                this[this.tablecustomview.fittopageColumn] = System.Convert.DBNull;
            }
            
            public bool IsvpagesNull() {
                return this.IsNull(this.tablecustomview.vpagesColumn);
            }
            
            public void SetvpagesNull() {
                this[this.tablecustomview.vpagesColumn] = System.Convert.DBNull;
            }
            
            public bool IshpagesNull() {
                return this.IsNull(this.tablecustomview.hpagesColumn);
            }
            
            public void SethpagesNull() {
                this[this.tablecustomview.hpagesColumn] = System.Convert.DBNull;
            }
            
            public bool IsisrealNull() {
                return this.IsNull(this.tablecustomview.isrealColumn);
            }
            
            public void SetisrealNull() {
                this[this.tablecustomview.isrealColumn] = System.Convert.DBNull;
            }
            
            public bool IsissystemNull() {
                return this.IsNull(this.tablecustomview.issystemColumn);
            }
            
            public void SetissystemNull() {
                this[this.tablecustomview.issystemColumn] = System.Convert.DBNull;
            }
            
            public bool IsstaticfilterNull() {
                return this.IsNull(this.tablecustomview.staticfilterColumn);
            }
            
            public void SetstaticfilterNull() {
                this[this.tablecustomview.staticfilterColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablecustomview.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablecustomview.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablecustomview.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablecustomview.lastmoduserColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewRowChangeEvent : EventArgs {
            
            private customviewRow eventRow;
            
            private DataRowAction eventAction;
            
            public customviewRowChangeEvent(customviewRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public customviewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
