
/*
Easy
Copyright (C) 2022 Università degli Studi di Catania (www.unict.it)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.510
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace customviewcolumn{//customviewcolumn//
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class vistaForm : DataSet {
        
        private customviewcolumnDataTable tablecustomviewcolumn;
        
        private columntypesDataTable tablecolumntypes;
        
        private DataRelation relationcolumntypescustomviewcolumn;
        
        public vistaForm() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected vistaForm(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["customviewcolumn"] != null)) {
                    this.Tables.Add(new customviewcolumnDataTable(ds.Tables["customviewcolumn"]));
                }
                if ((ds.Tables["columntypes"] != null)) {
                    this.Tables.Add(new columntypesDataTable(ds.Tables["columntypes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public customviewcolumnDataTable customviewcolumn {
            get {
                return this.tablecustomviewcolumn;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public columntypesDataTable columntypes {
            get {
                return this.tablecolumntypes;
            }
        }
        
        public override DataSet Clone() {
            vistaForm cln = ((vistaForm)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["customviewcolumn"] != null)) {
                this.Tables.Add(new customviewcolumnDataTable(ds.Tables["customviewcolumn"]));
            }
            if ((ds.Tables["columntypes"] != null)) {
                this.Tables.Add(new columntypesDataTable(ds.Tables["columntypes"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablecustomviewcolumn = ((customviewcolumnDataTable)(this.Tables["customviewcolumn"]));
            if ((this.tablecustomviewcolumn != null)) {
                this.tablecustomviewcolumn.InitVars();
            }
            this.tablecolumntypes = ((columntypesDataTable)(this.Tables["columntypes"]));
            if ((this.tablecolumntypes != null)) {
                this.tablecolumntypes.InitVars();
            }
            this.relationcolumntypescustomviewcolumn = this.Relations["columntypescustomviewcolumn"];
        }
        
        private void InitClass() {
            this.DataSetName = "vistaForm";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/vistaForm.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablecustomviewcolumn = new customviewcolumnDataTable();
            this.Tables.Add(this.tablecustomviewcolumn);
            this.tablecolumntypes = new columntypesDataTable();
            this.Tables.Add(this.tablecolumntypes);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("columntypescustomviewcolumn", new DataColumn[] {
                        this.tablecolumntypes.fieldColumn}, new DataColumn[] {
                        this.tablecustomviewcolumn.colnameColumn});
            this.tablecustomviewcolumn.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationcolumntypescustomviewcolumn = new DataRelation("columntypescustomviewcolumn", new DataColumn[] {
                        this.tablecolumntypes.fieldColumn}, new DataColumn[] {
                        this.tablecustomviewcolumn.colnameColumn}, false);
            this.Relations.Add(this.relationcolumntypescustomviewcolumn);
        }
        
        private bool ShouldSerializecustomviewcolumn() {
            return false;
        }
        
        private bool ShouldSerializecolumntypes() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void customviewcolumnRowChangeEventHandler(object sender, customviewcolumnRowChangeEvent e);
        
        public delegate void columntypesRowChangeEventHandler(object sender, columntypesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewcolumnDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnobjectname;
            
            private DataColumn columnviewname;
            
            private DataColumn columncolnumber;
            
            private DataColumn columnheading;
            
            private DataColumn columncolwidth;
            
            private DataColumn columnvisible;
            
            private DataColumn columnfontname;
            
            private DataColumn columnfontsize;
            
            private DataColumn columnbold;
            
            private DataColumn columnitalic;
            
            private DataColumn columnunderline;
            
            private DataColumn columnstrikeout;
            
            private DataColumn columncolor;
            
            private DataColumn columnformat;
            
            private DataColumn columnisreal;
            
            private DataColumn columnexpression;
            
            private DataColumn columncolname;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            private DataColumn columnsystemtype;
            
            internal customviewcolumnDataTable() : 
                    base("customviewcolumn") {
                this.InitClass();
            }
            
            internal customviewcolumnDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn objectnameColumn {
                get {
                    return this.columnobjectname;
                }
            }
            
            internal DataColumn viewnameColumn {
                get {
                    return this.columnviewname;
                }
            }
            
            internal DataColumn colnumberColumn {
                get {
                    return this.columncolnumber;
                }
            }
            
            internal DataColumn headingColumn {
                get {
                    return this.columnheading;
                }
            }
            
            internal DataColumn colwidthColumn {
                get {
                    return this.columncolwidth;
                }
            }
            
            internal DataColumn visibleColumn {
                get {
                    return this.columnvisible;
                }
            }
            
            internal DataColumn fontnameColumn {
                get {
                    return this.columnfontname;
                }
            }
            
            internal DataColumn fontsizeColumn {
                get {
                    return this.columnfontsize;
                }
            }
            
            internal DataColumn boldColumn {
                get {
                    return this.columnbold;
                }
            }
            
            internal DataColumn italicColumn {
                get {
                    return this.columnitalic;
                }
            }
            
            internal DataColumn underlineColumn {
                get {
                    return this.columnunderline;
                }
            }
            
            internal DataColumn strikeoutColumn {
                get {
                    return this.columnstrikeout;
                }
            }
            
            internal DataColumn colorColumn {
                get {
                    return this.columncolor;
                }
            }
            
            internal DataColumn formatColumn {
                get {
                    return this.columnformat;
                }
            }
            
            internal DataColumn isrealColumn {
                get {
                    return this.columnisreal;
                }
            }
            
            internal DataColumn expressionColumn {
                get {
                    return this.columnexpression;
                }
            }
            
            internal DataColumn colnameColumn {
                get {
                    return this.columncolname;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            internal DataColumn systemtypeColumn {
                get {
                    return this.columnsystemtype;
                }
            }
            
            public customviewcolumnRow this[int index] {
                get {
                    return ((customviewcolumnRow)(this.Rows[index]));
                }
            }
            
            public event customviewcolumnRowChangeEventHandler customviewcolumnRowChanged;
            
            public event customviewcolumnRowChangeEventHandler customviewcolumnRowChanging;
            
            public event customviewcolumnRowChangeEventHandler customviewcolumnRowDeleted;
            
            public event customviewcolumnRowChangeEventHandler customviewcolumnRowDeleting;
            
            public void AddcustomviewcolumnRow(customviewcolumnRow row) {
                this.Rows.Add(row);
            }
            
            public customviewcolumnRow AddcustomviewcolumnRow(
                        string objectname, 
                        string viewname, 
                        short colnumber, 
                        string heading, 
                        int colwidth, 
                        short visible, 
                        string fontname, 
                        short fontsize, 
                        short bold, 
                        short italic, 
                        short underline, 
                        short strikeout, 
                        int color, 
                        string format, 
                        string isreal, 
                        string expression, 
                        columntypesRow parentcolumntypesRowBycolumntypescustomviewcolumn, 
                        System.DateTime lastmodtimestamp, 
                        string lastmoduser, 
                        string systemtype) {
                customviewcolumnRow rowcustomviewcolumnRow = ((customviewcolumnRow)(this.NewRow()));
                rowcustomviewcolumnRow.ItemArray = new object[] {
                        objectname,
                        viewname,
                        colnumber,
                        heading,
                        colwidth,
                        visible,
                        fontname,
                        fontsize,
                        bold,
                        italic,
                        underline,
                        strikeout,
                        color,
                        format,
                        isreal,
                        expression,
                        parentcolumntypesRowBycolumntypescustomviewcolumn[1],
                        lastmodtimestamp,
                        lastmoduser,
                        systemtype};
                this.Rows.Add(rowcustomviewcolumnRow);
                return rowcustomviewcolumnRow;
            }
            
            public customviewcolumnRow FindByobjectnameviewnamecolnumber(string objectname, string viewname, short colnumber) {
                return ((customviewcolumnRow)(this.Rows.Find(new object[] {
                            objectname,
                            viewname,
                            colnumber})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                customviewcolumnDataTable cln = ((customviewcolumnDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new customviewcolumnDataTable();
            }
            
            internal void InitVars() {
                this.columnobjectname = this.Columns["objectname"];
                this.columnviewname = this.Columns["viewname"];
                this.columncolnumber = this.Columns["colnumber"];
                this.columnheading = this.Columns["heading"];
                this.columncolwidth = this.Columns["colwidth"];
                this.columnvisible = this.Columns["visible"];
                this.columnfontname = this.Columns["fontname"];
                this.columnfontsize = this.Columns["fontsize"];
                this.columnbold = this.Columns["bold"];
                this.columnitalic = this.Columns["italic"];
                this.columnunderline = this.Columns["underline"];
                this.columnstrikeout = this.Columns["strikeout"];
                this.columncolor = this.Columns["color"];
                this.columnformat = this.Columns["format"];
                this.columnisreal = this.Columns["isreal"];
                this.columnexpression = this.Columns["expression"];
                this.columncolname = this.Columns["colname"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
                this.columnsystemtype = this.Columns["systemtype"];
            }
            
            private void InitClass() {
                this.columnobjectname = new DataColumn("objectname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnobjectname);
                this.columnviewname = new DataColumn("viewname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnviewname);
                this.columncolnumber = new DataColumn("colnumber", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncolnumber);
                this.columnheading = new DataColumn("heading", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnheading);
                this.columncolwidth = new DataColumn("colwidth", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncolwidth);
                this.columnvisible = new DataColumn("visible", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvisible);
                this.columnfontname = new DataColumn("fontname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfontname);
                this.columnfontsize = new DataColumn("fontsize", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfontsize);
                this.columnbold = new DataColumn("bold", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbold);
                this.columnitalic = new DataColumn("italic", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnitalic);
                this.columnunderline = new DataColumn("underline", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnunderline);
                this.columnstrikeout = new DataColumn("strikeout", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstrikeout);
                this.columncolor = new DataColumn("color", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncolor);
                this.columnformat = new DataColumn("format", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnformat);
                this.columnisreal = new DataColumn("isreal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisreal);
                this.columnexpression = new DataColumn("expression", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnexpression);
                this.columncolname = new DataColumn("colname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncolname);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.columnsystemtype = new DataColumn("systemtype", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsystemtype);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey1", new DataColumn[] {
                                this.columnobjectname,
                                this.columnviewname,
                                this.columncolnumber}, true));
                this.columnobjectname.AllowDBNull = false;
                this.columnviewname.AllowDBNull = false;
                this.columncolnumber.AllowDBNull = false;
            }
            
            public customviewcolumnRow NewcustomviewcolumnRow() {
                return ((customviewcolumnRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new customviewcolumnRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(customviewcolumnRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.customviewcolumnRowChanged != null)) {
                    this.customviewcolumnRowChanged(this, new customviewcolumnRowChangeEvent(((customviewcolumnRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.customviewcolumnRowChanging != null)) {
                    this.customviewcolumnRowChanging(this, new customviewcolumnRowChangeEvent(((customviewcolumnRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.customviewcolumnRowDeleted != null)) {
                    this.customviewcolumnRowDeleted(this, new customviewcolumnRowChangeEvent(((customviewcolumnRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.customviewcolumnRowDeleting != null)) {
                    this.customviewcolumnRowDeleting(this, new customviewcolumnRowChangeEvent(((customviewcolumnRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecustomviewcolumnRow(customviewcolumnRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewcolumnRow : DataRow {
            
            private customviewcolumnDataTable tablecustomviewcolumn;
            
            internal customviewcolumnRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecustomviewcolumn = ((customviewcolumnDataTable)(this.Table));
            }
            
            public string objectname {
                get {
                    return ((string)(this[this.tablecustomviewcolumn.objectnameColumn]));
                }
                set {
                    this[this.tablecustomviewcolumn.objectnameColumn] = value;
                }
            }
            
            public string viewname {
                get {
                    return ((string)(this[this.tablecustomviewcolumn.viewnameColumn]));
                }
                set {
                    this[this.tablecustomviewcolumn.viewnameColumn] = value;
                }
            }
            
            public short colnumber {
                get {
                    return ((short)(this[this.tablecustomviewcolumn.colnumberColumn]));
                }
                set {
                    this[this.tablecustomviewcolumn.colnumberColumn] = value;
                }
            }
            
            public string heading {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewcolumn.headingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.headingColumn] = value;
                }
            }
            
            public int colwidth {
                get {
                    try {
                        return ((int)(this[this.tablecustomviewcolumn.colwidthColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.colwidthColumn] = value;
                }
            }
            
            public short visible {
                get {
                    try {
                        return ((short)(this[this.tablecustomviewcolumn.visibleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.visibleColumn] = value;
                }
            }
            
            public string fontname {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewcolumn.fontnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.fontnameColumn] = value;
                }
            }
            
            public short fontsize {
                get {
                    try {
                        return ((short)(this[this.tablecustomviewcolumn.fontsizeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.fontsizeColumn] = value;
                }
            }
            
            public short bold {
                get {
                    try {
                        return ((short)(this[this.tablecustomviewcolumn.boldColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.boldColumn] = value;
                }
            }
            
            public short italic {
                get {
                    try {
                        return ((short)(this[this.tablecustomviewcolumn.italicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.italicColumn] = value;
                }
            }
            
            public short underline {
                get {
                    try {
                        return ((short)(this[this.tablecustomviewcolumn.underlineColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.underlineColumn] = value;
                }
            }
            
            public short strikeout {
                get {
                    try {
                        return ((short)(this[this.tablecustomviewcolumn.strikeoutColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.strikeoutColumn] = value;
                }
            }
            
            public int color {
                get {
                    try {
                        return ((int)(this[this.tablecustomviewcolumn.colorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.colorColumn] = value;
                }
            }
            
            public string format {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewcolumn.formatColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.formatColumn] = value;
                }
            }
            
            public string isreal {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewcolumn.isrealColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.isrealColumn] = value;
                }
            }
            
            public string expression {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewcolumn.expressionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.expressionColumn] = value;
                }
            }
            
            public string colname {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewcolumn.colnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.colnameColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecustomviewcolumn.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewcolumn.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.lastmoduserColumn] = value;
                }
            }
            
            public string systemtype {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewcolumn.systemtypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.systemtypeColumn] = value;
                }
            }
            
            public columntypesRow columntypesRow {
                get {
                    return ((columntypesRow)(this.GetParentRow(this.Table.ParentRelations["columntypescustomviewcolumn"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["columntypescustomviewcolumn"]);
                }
            }
            
            public bool IsheadingNull() {
                return this.IsNull(this.tablecustomviewcolumn.headingColumn);
            }
            
            public void SetheadingNull() {
                this[this.tablecustomviewcolumn.headingColumn] = System.Convert.DBNull;
            }
            
            public bool IscolwidthNull() {
                return this.IsNull(this.tablecustomviewcolumn.colwidthColumn);
            }
            
            public void SetcolwidthNull() {
                this[this.tablecustomviewcolumn.colwidthColumn] = System.Convert.DBNull;
            }
            
            public bool IsvisibleNull() {
                return this.IsNull(this.tablecustomviewcolumn.visibleColumn);
            }
            
            public void SetvisibleNull() {
                this[this.tablecustomviewcolumn.visibleColumn] = System.Convert.DBNull;
            }
            
            public bool IsfontnameNull() {
                return this.IsNull(this.tablecustomviewcolumn.fontnameColumn);
            }
            
            public void SetfontnameNull() {
                this[this.tablecustomviewcolumn.fontnameColumn] = System.Convert.DBNull;
            }
            
            public bool IsfontsizeNull() {
                return this.IsNull(this.tablecustomviewcolumn.fontsizeColumn);
            }
            
            public void SetfontsizeNull() {
                this[this.tablecustomviewcolumn.fontsizeColumn] = System.Convert.DBNull;
            }
            
            public bool IsboldNull() {
                return this.IsNull(this.tablecustomviewcolumn.boldColumn);
            }
            
            public void SetboldNull() {
                this[this.tablecustomviewcolumn.boldColumn] = System.Convert.DBNull;
            }
            
            public bool IsitalicNull() {
                return this.IsNull(this.tablecustomviewcolumn.italicColumn);
            }
            
            public void SetitalicNull() {
                this[this.tablecustomviewcolumn.italicColumn] = System.Convert.DBNull;
            }
            
            public bool IsunderlineNull() {
                return this.IsNull(this.tablecustomviewcolumn.underlineColumn);
            }
            
            public void SetunderlineNull() {
                this[this.tablecustomviewcolumn.underlineColumn] = System.Convert.DBNull;
            }
            
            public bool IsstrikeoutNull() {
                return this.IsNull(this.tablecustomviewcolumn.strikeoutColumn);
            }
            
            public void SetstrikeoutNull() {
                this[this.tablecustomviewcolumn.strikeoutColumn] = System.Convert.DBNull;
            }
            
            public bool IscolorNull() {
                return this.IsNull(this.tablecustomviewcolumn.colorColumn);
            }
            
            public void SetcolorNull() {
                this[this.tablecustomviewcolumn.colorColumn] = System.Convert.DBNull;
            }
            
            public bool IsformatNull() {
                return this.IsNull(this.tablecustomviewcolumn.formatColumn);
            }
            
            public void SetformatNull() {
                this[this.tablecustomviewcolumn.formatColumn] = System.Convert.DBNull;
            }
            
            public bool IsisrealNull() {
                return this.IsNull(this.tablecustomviewcolumn.isrealColumn);
            }
            
            public void SetisrealNull() {
                this[this.tablecustomviewcolumn.isrealColumn] = System.Convert.DBNull;
            }
            
            public bool IsexpressionNull() {
                return this.IsNull(this.tablecustomviewcolumn.expressionColumn);
            }
            
            public void SetexpressionNull() {
                this[this.tablecustomviewcolumn.expressionColumn] = System.Convert.DBNull;
            }
            
            public bool IscolnameNull() {
                return this.IsNull(this.tablecustomviewcolumn.colnameColumn);
            }
            
            public void SetcolnameNull() {
                this[this.tablecustomviewcolumn.colnameColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablecustomviewcolumn.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablecustomviewcolumn.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablecustomviewcolumn.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablecustomviewcolumn.lastmoduserColumn] = System.Convert.DBNull;
            }
            
            public bool IssystemtypeNull() {
                return this.IsNull(this.tablecustomviewcolumn.systemtypeColumn);
            }
            
            public void SetsystemtypeNull() {
                this[this.tablecustomviewcolumn.systemtypeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewcolumnRowChangeEvent : EventArgs {
            
            private customviewcolumnRow eventRow;
            
            private DataRowAction eventAction;
            
            public customviewcolumnRowChangeEvent(customviewcolumnRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public customviewcolumnRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class columntypesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntablename;
            
            private DataColumn columnfield;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            internal columntypesDataTable() : 
                    base("columntypes") {
                this.InitClass();
            }
            
            internal columntypesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn tablenameColumn {
                get {
                    return this.columntablename;
                }
            }
            
            internal DataColumn fieldColumn {
                get {
                    return this.columnfield;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            public columntypesRow this[int index] {
                get {
                    return ((columntypesRow)(this.Rows[index]));
                }
            }
            
            public event columntypesRowChangeEventHandler columntypesRowChanged;
            
            public event columntypesRowChangeEventHandler columntypesRowChanging;
            
            public event columntypesRowChangeEventHandler columntypesRowDeleted;
            
            public event columntypesRowChangeEventHandler columntypesRowDeleting;
            
            public void AddcolumntypesRow(columntypesRow row) {
                this.Rows.Add(row);
            }
            
            public columntypesRow AddcolumntypesRow(string tablename, string field, System.DateTime lastmodtimestamp, string lastmoduser) {
                columntypesRow rowcolumntypesRow = ((columntypesRow)(this.NewRow()));
                rowcolumntypesRow.ItemArray = new object[] {
                        tablename,
                        field,
                        lastmodtimestamp,
                        lastmoduser};
                this.Rows.Add(rowcolumntypesRow);
                return rowcolumntypesRow;
            }
            
            public columntypesRow FindBytablenamefield(string tablename, string field) {
                return ((columntypesRow)(this.Rows.Find(new object[] {
                            tablename,
                            field})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                columntypesDataTable cln = ((columntypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new columntypesDataTable();
            }
            
            internal void InitVars() {
                this.columntablename = this.Columns["tablename"];
                this.columnfield = this.Columns["field"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
            }
            
            private void InitClass() {
                this.columntablename = new DataColumn("tablename", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntablename);
                this.columnfield = new DataColumn("field", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfield);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey2", new DataColumn[] {
                                this.columntablename,
                                this.columnfield}, true));
                this.Constraints.Add(new UniqueConstraint("key1", new DataColumn[] {
                                this.columnfield}, false));
                this.columntablename.AllowDBNull = false;
                this.columnfield.AllowDBNull = false;
                this.columnfield.Unique = true;
            }
            
            public columntypesRow NewcolumntypesRow() {
                return ((columntypesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new columntypesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(columntypesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.columntypesRowChanged != null)) {
                    this.columntypesRowChanged(this, new columntypesRowChangeEvent(((columntypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.columntypesRowChanging != null)) {
                    this.columntypesRowChanging(this, new columntypesRowChangeEvent(((columntypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.columntypesRowDeleted != null)) {
                    this.columntypesRowDeleted(this, new columntypesRowChangeEvent(((columntypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.columntypesRowDeleting != null)) {
                    this.columntypesRowDeleting(this, new columntypesRowChangeEvent(((columntypesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecolumntypesRow(columntypesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class columntypesRow : DataRow {
            
            private columntypesDataTable tablecolumntypes;
            
            internal columntypesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecolumntypes = ((columntypesDataTable)(this.Table));
            }
            
            public string tablename {
                get {
                    return ((string)(this[this.tablecolumntypes.tablenameColumn]));
                }
                set {
                    this[this.tablecolumntypes.tablenameColumn] = value;
                }
            }
            
            public string field {
                get {
                    return ((string)(this[this.tablecolumntypes.fieldColumn]));
                }
                set {
                    this[this.tablecolumntypes.fieldColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecolumntypes.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecolumntypes.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablecolumntypes.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecolumntypes.lastmoduserColumn] = value;
                }
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablecolumntypes.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablecolumntypes.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablecolumntypes.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablecolumntypes.lastmoduserColumn] = System.Convert.DBNull;
            }
            
            public customviewcolumnRow[] GetcustomviewcolumnRows() {
                return ((customviewcolumnRow[])(this.GetChildRows(this.Table.ChildRelations["columntypescustomviewcolumn"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class columntypesRowChangeEvent : EventArgs {
            
            private columntypesRow eventRow;
            
            private DataRowAction eventAction;
            
            public columntypesRowChangeEvent(columntypesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public columntypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
