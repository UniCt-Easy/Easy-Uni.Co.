
/*
Easy
Copyright (C) 2021 Università degli Studi di Catania (www.unict.it)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace viewcolumn{//viewcolumn//
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class vistaForm : DataSet {
        
        private viewcolumnDataTable tableviewcolumn;
        
        private customobjectDataTable tablecustomobject;
        
        private columntypesDataTable tablecolumntypes;
        
        private columntypesprincipaleDataTable tablecolumntypesprincipale;
        
        private DataRelation relationcustomobjectcolumntypes;
        
        private DataRelation relationcustomobjectviewcolumn;
        
        private DataRelation relationcolumntypesviewcolumn;
        
        private DataRelation relationcolumntypesviewviewcolumn;
        
        public vistaForm() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected vistaForm(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["viewcolumn"] != null)) {
                    this.Tables.Add(new viewcolumnDataTable(ds.Tables["viewcolumn"]));
                }
                if ((ds.Tables["customobject"] != null)) {
                    this.Tables.Add(new customobjectDataTable(ds.Tables["customobject"]));
                }
                if ((ds.Tables["columntypes"] != null)) {
                    this.Tables.Add(new columntypesDataTable(ds.Tables["columntypes"]));
                }
                if ((ds.Tables["columntypesprincipale"] != null)) {
                    this.Tables.Add(new columntypesprincipaleDataTable(ds.Tables["columntypesprincipale"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public viewcolumnDataTable viewcolumn {
            get {
                return this.tableviewcolumn;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public customobjectDataTable customobject {
            get {
                return this.tablecustomobject;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public columntypesDataTable columntypes {
            get {
                return this.tablecolumntypes;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public columntypesprincipaleDataTable columntypesprincipale {
            get {
                return this.tablecolumntypesprincipale;
            }
        }
        
        public override DataSet Clone() {
            vistaForm cln = ((vistaForm)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["viewcolumn"] != null)) {
                this.Tables.Add(new viewcolumnDataTable(ds.Tables["viewcolumn"]));
            }
            if ((ds.Tables["customobject"] != null)) {
                this.Tables.Add(new customobjectDataTable(ds.Tables["customobject"]));
            }
            if ((ds.Tables["columntypes"] != null)) {
                this.Tables.Add(new columntypesDataTable(ds.Tables["columntypes"]));
            }
            if ((ds.Tables["columntypesprincipale"] != null)) {
                this.Tables.Add(new columntypesprincipaleDataTable(ds.Tables["columntypesprincipale"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableviewcolumn = ((viewcolumnDataTable)(this.Tables["viewcolumn"]));
            if ((this.tableviewcolumn != null)) {
                this.tableviewcolumn.InitVars();
            }
            this.tablecustomobject = ((customobjectDataTable)(this.Tables["customobject"]));
            if ((this.tablecustomobject != null)) {
                this.tablecustomobject.InitVars();
            }
            this.tablecolumntypes = ((columntypesDataTable)(this.Tables["columntypes"]));
            if ((this.tablecolumntypes != null)) {
                this.tablecolumntypes.InitVars();
            }
            this.tablecolumntypesprincipale = ((columntypesprincipaleDataTable)(this.Tables["columntypesprincipale"]));
            if ((this.tablecolumntypesprincipale != null)) {
                this.tablecolumntypesprincipale.InitVars();
            }
            this.relationcustomobjectcolumntypes = this.Relations["customobjectcolumntypes"];
            this.relationcustomobjectviewcolumn = this.Relations["customobjectviewcolumn"];
            this.relationcolumntypesviewcolumn = this.Relations["columntypesviewcolumn"];
            this.relationcolumntypesviewviewcolumn = this.Relations["columntypesviewviewcolumn"];
        }
        
        private void InitClass() {
            this.DataSetName = "vistaForm";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/vistaForm.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableviewcolumn = new viewcolumnDataTable();
            this.Tables.Add(this.tableviewcolumn);
            this.tablecustomobject = new customobjectDataTable();
            this.Tables.Add(this.tablecustomobject);
            this.tablecolumntypes = new columntypesDataTable();
            this.Tables.Add(this.tablecolumntypes);
            this.tablecolumntypesprincipale = new columntypesprincipaleDataTable();
            this.Tables.Add(this.tablecolumntypesprincipale);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("customobjectviewcolumn", new DataColumn[] {
                        this.tablecustomobject.objectnameColumn}, new DataColumn[] {
                        this.tableviewcolumn.realtableColumn});
            this.tableviewcolumn.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("columntypesviewcolumn", new DataColumn[] {
                        this.tablecolumntypes.tablenameColumn,
                        this.tablecolumntypes.fieldColumn}, new DataColumn[] {
                        this.tableviewcolumn.realtableColumn,
                        this.tableviewcolumn.realcolumnColumn});
            this.tableviewcolumn.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("columntypesviewviewcolumn", new DataColumn[] {
                        this.tablecolumntypesprincipale.fieldColumn}, new DataColumn[] {
                        this.tableviewcolumn.colnameColumn});
            this.tableviewcolumn.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("customobjectcolumntypes", new DataColumn[] {
                        this.tablecustomobject.objectnameColumn}, new DataColumn[] {
                        this.tablecolumntypes.tablenameColumn});
            this.tablecolumntypes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationcustomobjectcolumntypes = new DataRelation("customobjectcolumntypes", new DataColumn[] {
                        this.tablecustomobject.objectnameColumn}, new DataColumn[] {
                        this.tablecolumntypes.tablenameColumn}, false);
            this.Relations.Add(this.relationcustomobjectcolumntypes);
            this.relationcustomobjectviewcolumn = new DataRelation("customobjectviewcolumn", new DataColumn[] {
                        this.tablecustomobject.objectnameColumn}, new DataColumn[] {
                        this.tableviewcolumn.realtableColumn}, false);
            this.Relations.Add(this.relationcustomobjectviewcolumn);
            this.relationcolumntypesviewcolumn = new DataRelation("columntypesviewcolumn", new DataColumn[] {
                        this.tablecolumntypes.tablenameColumn,
                        this.tablecolumntypes.fieldColumn}, new DataColumn[] {
                        this.tableviewcolumn.realtableColumn,
                        this.tableviewcolumn.realcolumnColumn}, false);
            this.Relations.Add(this.relationcolumntypesviewcolumn);
            this.relationcolumntypesviewviewcolumn = new DataRelation("columntypesviewviewcolumn", new DataColumn[] {
                        this.tablecolumntypesprincipale.fieldColumn}, new DataColumn[] {
                        this.tableviewcolumn.colnameColumn}, false);
            this.Relations.Add(this.relationcolumntypesviewviewcolumn);
        }
        
        private bool ShouldSerializeviewcolumn() {
            return false;
        }
        
        private bool ShouldSerializecustomobject() {
            return false;
        }
        
        private bool ShouldSerializecolumntypes() {
            return false;
        }
        
        private bool ShouldSerializecolumntypesprincipale() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void viewcolumnRowChangeEventHandler(object sender, viewcolumnRowChangeEvent e);
        
        public delegate void customobjectRowChangeEventHandler(object sender, customobjectRowChangeEvent e);
        
        public delegate void columntypesRowChangeEventHandler(object sender, columntypesRowChangeEvent e);
        
        public delegate void columntypesprincipaleRowChangeEventHandler(object sender, columntypesprincipaleRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class viewcolumnDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnobjectname;
            
            private DataColumn columncolname;
            
            private DataColumn columnrealtable;
            
            private DataColumn columnrealcolumn;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            internal viewcolumnDataTable() : 
                    base("viewcolumn") {
                this.InitClass();
            }
            
            internal viewcolumnDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn objectnameColumn {
                get {
                    return this.columnobjectname;
                }
            }
            
            internal DataColumn colnameColumn {
                get {
                    return this.columncolname;
                }
            }
            
            internal DataColumn realtableColumn {
                get {
                    return this.columnrealtable;
                }
            }
            
            internal DataColumn realcolumnColumn {
                get {
                    return this.columnrealcolumn;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            public viewcolumnRow this[int index] {
                get {
                    return ((viewcolumnRow)(this.Rows[index]));
                }
            }
            
            public event viewcolumnRowChangeEventHandler viewcolumnRowChanged;
            
            public event viewcolumnRowChangeEventHandler viewcolumnRowChanging;
            
            public event viewcolumnRowChangeEventHandler viewcolumnRowDeleted;
            
            public event viewcolumnRowChangeEventHandler viewcolumnRowDeleting;
            
            public void AddviewcolumnRow(viewcolumnRow row) {
                this.Rows.Add(row);
            }
            
            public viewcolumnRow AddviewcolumnRow(string objectname, columntypesprincipaleRow parentcolumntypesprincipaleRowBycolumntypesviewviewcolumn, customobjectRow parentcustomobjectRowBycustomobjectviewcolumn, string realcolumn, System.DateTime lastmodtimestamp, string lastmoduser) {
                viewcolumnRow rowviewcolumnRow = ((viewcolumnRow)(this.NewRow()));
                rowviewcolumnRow.ItemArray = new object[] {
                        objectname,
                        parentcolumntypesprincipaleRowBycolumntypesviewviewcolumn[1],
                        parentcustomobjectRowBycustomobjectviewcolumn[0],
                        realcolumn,
                        lastmodtimestamp,
                        lastmoduser};
                this.Rows.Add(rowviewcolumnRow);
                return rowviewcolumnRow;
            }
            
            public viewcolumnRow FindByobjectnamecolname(string objectname, string colname) {
                return ((viewcolumnRow)(this.Rows.Find(new object[] {
                            objectname,
                            colname})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                viewcolumnDataTable cln = ((viewcolumnDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new viewcolumnDataTable();
            }
            
            internal void InitVars() {
                this.columnobjectname = this.Columns["objectname"];
                this.columncolname = this.Columns["colname"];
                this.columnrealtable = this.Columns["realtable"];
                this.columnrealcolumn = this.Columns["realcolumn"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
            }
            
            private void InitClass() {
                this.columnobjectname = new DataColumn("objectname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnobjectname);
                this.columncolname = new DataColumn("colname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncolname);
                this.columnrealtable = new DataColumn("realtable", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrealtable);
                this.columnrealcolumn = new DataColumn("realcolumn", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrealcolumn);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey1", new DataColumn[] {
                                this.columnobjectname,
                                this.columncolname}, true));
                this.Constraints.Add(new UniqueConstraint("vistaFormKey3", new DataColumn[] {
                                this.columnobjectname}, false));
                this.columnobjectname.AllowDBNull = false;
                this.columnobjectname.Unique = true;
                this.columncolname.AllowDBNull = false;
                this.columnrealtable.AllowDBNull = false;
                this.columnrealcolumn.AllowDBNull = false;
            }
            
            public viewcolumnRow NewviewcolumnRow() {
                return ((viewcolumnRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new viewcolumnRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(viewcolumnRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.viewcolumnRowChanged != null)) {
                    this.viewcolumnRowChanged(this, new viewcolumnRowChangeEvent(((viewcolumnRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.viewcolumnRowChanging != null)) {
                    this.viewcolumnRowChanging(this, new viewcolumnRowChangeEvent(((viewcolumnRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.viewcolumnRowDeleted != null)) {
                    this.viewcolumnRowDeleted(this, new viewcolumnRowChangeEvent(((viewcolumnRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.viewcolumnRowDeleting != null)) {
                    this.viewcolumnRowDeleting(this, new viewcolumnRowChangeEvent(((viewcolumnRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveviewcolumnRow(viewcolumnRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class viewcolumnRow : DataRow {
            
            private viewcolumnDataTable tableviewcolumn;
            
            internal viewcolumnRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableviewcolumn = ((viewcolumnDataTable)(this.Table));
            }
            
            public string objectname {
                get {
                    return ((string)(this[this.tableviewcolumn.objectnameColumn]));
                }
                set {
                    this[this.tableviewcolumn.objectnameColumn] = value;
                }
            }
            
            public string colname {
                get {
                    return ((string)(this[this.tableviewcolumn.colnameColumn]));
                }
                set {
                    this[this.tableviewcolumn.colnameColumn] = value;
                }
            }
            
            public string realtable {
                get {
                    return ((string)(this[this.tableviewcolumn.realtableColumn]));
                }
                set {
                    this[this.tableviewcolumn.realtableColumn] = value;
                }
            }
            
            public string realcolumn {
                get {
                    return ((string)(this[this.tableviewcolumn.realcolumnColumn]));
                }
                set {
                    this[this.tableviewcolumn.realcolumnColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableviewcolumn.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewcolumn.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tableviewcolumn.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewcolumn.lastmoduserColumn] = value;
                }
            }
            
            public customobjectRow customobjectRow {
                get {
                    return ((customobjectRow)(this.GetParentRow(this.Table.ParentRelations["customobjectviewcolumn"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["customobjectviewcolumn"]);
                }
            }
            
            public columntypesRow columntypesRowParent {
                get {
                    return ((columntypesRow)(this.GetParentRow(this.Table.ParentRelations["columntypesviewcolumn"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["columntypesviewcolumn"]);
                }
            }
            
            public columntypesprincipaleRow columntypesprincipaleRow {
                get {
                    return ((columntypesprincipaleRow)(this.GetParentRow(this.Table.ParentRelations["columntypesviewviewcolumn"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["columntypesviewviewcolumn"]);
                }
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tableviewcolumn.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tableviewcolumn.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tableviewcolumn.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tableviewcolumn.lastmoduserColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class viewcolumnRowChangeEvent : EventArgs {
            
            private viewcolumnRow eventRow;
            
            private DataRowAction eventAction;
            
            public viewcolumnRowChangeEvent(viewcolumnRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public viewcolumnRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customobjectDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnobjectname;
            
            private DataColumn columndescription;
            
            private DataColumn columnisreal;
            
            private DataColumn columnrealtable;
            
            private DataColumn columnlastmoduser;
            
            private DataColumn columnlastmodtimestamp;
            
            internal customobjectDataTable() : 
                    base("customobject") {
                this.InitClass();
            }
            
            internal customobjectDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn objectnameColumn {
                get {
                    return this.columnobjectname;
                }
            }
            
            internal DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            internal DataColumn isrealColumn {
                get {
                    return this.columnisreal;
                }
            }
            
            internal DataColumn realtableColumn {
                get {
                    return this.columnrealtable;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            public customobjectRow this[int index] {
                get {
                    return ((customobjectRow)(this.Rows[index]));
                }
            }
            
            public event customobjectRowChangeEventHandler customobjectRowChanged;
            
            public event customobjectRowChangeEventHandler customobjectRowChanging;
            
            public event customobjectRowChangeEventHandler customobjectRowDeleted;
            
            public event customobjectRowChangeEventHandler customobjectRowDeleting;
            
            public void AddcustomobjectRow(customobjectRow row) {
                this.Rows.Add(row);
            }
            
            public customobjectRow AddcustomobjectRow(string objectname, string description, string isreal, string realtable, string lastmoduser, System.DateTime lastmodtimestamp) {
                customobjectRow rowcustomobjectRow = ((customobjectRow)(this.NewRow()));
                rowcustomobjectRow.ItemArray = new object[] {
                        objectname,
                        description,
                        isreal,
                        realtable,
                        lastmoduser,
                        lastmodtimestamp};
                this.Rows.Add(rowcustomobjectRow);
                return rowcustomobjectRow;
            }
            
            public customobjectRow FindByobjectname(string objectname) {
                return ((customobjectRow)(this.Rows.Find(new object[] {
                            objectname})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                customobjectDataTable cln = ((customobjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new customobjectDataTable();
            }
            
            internal void InitVars() {
                this.columnobjectname = this.Columns["objectname"];
                this.columndescription = this.Columns["description"];
                this.columnisreal = this.Columns["isreal"];
                this.columnrealtable = this.Columns["realtable"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
            }
            
            private void InitClass() {
                this.columnobjectname = new DataColumn("objectname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnobjectname);
                this.columndescription = new DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescription);
                this.columnisreal = new DataColumn("isreal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisreal);
                this.columnrealtable = new DataColumn("realtable", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrealtable);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey2", new DataColumn[] {
                                this.columnobjectname}, true));
                this.columnobjectname.AllowDBNull = false;
                this.columnobjectname.Unique = true;
                this.columnisreal.AllowDBNull = false;
            }
            
            public customobjectRow NewcustomobjectRow() {
                return ((customobjectRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new customobjectRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(customobjectRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.customobjectRowChanged != null)) {
                    this.customobjectRowChanged(this, new customobjectRowChangeEvent(((customobjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.customobjectRowChanging != null)) {
                    this.customobjectRowChanging(this, new customobjectRowChangeEvent(((customobjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.customobjectRowDeleted != null)) {
                    this.customobjectRowDeleted(this, new customobjectRowChangeEvent(((customobjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.customobjectRowDeleting != null)) {
                    this.customobjectRowDeleting(this, new customobjectRowChangeEvent(((customobjectRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecustomobjectRow(customobjectRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customobjectRow : DataRow {
            
            private customobjectDataTable tablecustomobject;
            
            internal customobjectRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecustomobject = ((customobjectDataTable)(this.Table));
            }
            
            public string objectname {
                get {
                    return ((string)(this[this.tablecustomobject.objectnameColumn]));
                }
                set {
                    this[this.tablecustomobject.objectnameColumn] = value;
                }
            }
            
            public string description {
                get {
                    try {
                        return ((string)(this[this.tablecustomobject.descriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomobject.descriptionColumn] = value;
                }
            }
            
            public string isreal {
                get {
                    return ((string)(this[this.tablecustomobject.isrealColumn]));
                }
                set {
                    this[this.tablecustomobject.isrealColumn] = value;
                }
            }
            
            public string realtable {
                get {
                    try {
                        return ((string)(this[this.tablecustomobject.realtableColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomobject.realtableColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablecustomobject.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomobject.lastmoduserColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecustomobject.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomobject.lastmodtimestampColumn] = value;
                }
            }
            
            public bool IsdescriptionNull() {
                return this.IsNull(this.tablecustomobject.descriptionColumn);
            }
            
            public void SetdescriptionNull() {
                this[this.tablecustomobject.descriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsrealtableNull() {
                return this.IsNull(this.tablecustomobject.realtableColumn);
            }
            
            public void SetrealtableNull() {
                this[this.tablecustomobject.realtableColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablecustomobject.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablecustomobject.lastmoduserColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablecustomobject.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablecustomobject.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public columntypesRow[] GetcolumntypesRows() {
                return ((columntypesRow[])(this.GetChildRows(this.Table.ChildRelations["customobjectcolumntypes"])));
            }
            
            public viewcolumnRow[] GetviewcolumnRows() {
                return ((viewcolumnRow[])(this.GetChildRows(this.Table.ChildRelations["customobjectviewcolumn"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customobjectRowChangeEvent : EventArgs {
            
            private customobjectRow eventRow;
            
            private DataRowAction eventAction;
            
            public customobjectRowChangeEvent(customobjectRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public customobjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class columntypesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntablename;
            
            private DataColumn columnfield;
            
            private DataColumn columniskey;
            
            private DataColumn columnsqltype;
            
            private DataColumn columncol_len;
            
            private DataColumn columncol_precision;
            
            private DataColumn columncol_scale;
            
            private DataColumn columnsystemtype;
            
            private DataColumn columnsqldeclaration;
            
            private DataColumn columnallownull;
            
            private DataColumn columndefaultvalue;
            
            private DataColumn columnformat;
            
            private DataColumn columndenynull;
            
            private DataColumn columnlastmoduser;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columncreateuser;
            
            private DataColumn columncreatetimestamp;
            
            internal columntypesDataTable() : 
                    base("columntypes") {
                this.InitClass();
            }
            
            internal columntypesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn tablenameColumn {
                get {
                    return this.columntablename;
                }
            }
            
            internal DataColumn fieldColumn {
                get {
                    return this.columnfield;
                }
            }
            
            internal DataColumn iskeyColumn {
                get {
                    return this.columniskey;
                }
            }
            
            internal DataColumn sqltypeColumn {
                get {
                    return this.columnsqltype;
                }
            }
            
            internal DataColumn col_lenColumn {
                get {
                    return this.columncol_len;
                }
            }
            
            internal DataColumn col_precisionColumn {
                get {
                    return this.columncol_precision;
                }
            }
            
            internal DataColumn col_scaleColumn {
                get {
                    return this.columncol_scale;
                }
            }
            
            internal DataColumn systemtypeColumn {
                get {
                    return this.columnsystemtype;
                }
            }
            
            internal DataColumn sqldeclarationColumn {
                get {
                    return this.columnsqldeclaration;
                }
            }
            
            internal DataColumn allownullColumn {
                get {
                    return this.columnallownull;
                }
            }
            
            internal DataColumn defaultvalueColumn {
                get {
                    return this.columndefaultvalue;
                }
            }
            
            internal DataColumn formatColumn {
                get {
                    return this.columnformat;
                }
            }
            
            internal DataColumn denynullColumn {
                get {
                    return this.columndenynull;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn createuserColumn {
                get {
                    return this.columncreateuser;
                }
            }
            
            internal DataColumn createtimestampColumn {
                get {
                    return this.columncreatetimestamp;
                }
            }
            
            public columntypesRow this[int index] {
                get {
                    return ((columntypesRow)(this.Rows[index]));
                }
            }
            
            public event columntypesRowChangeEventHandler columntypesRowChanged;
            
            public event columntypesRowChangeEventHandler columntypesRowChanging;
            
            public event columntypesRowChangeEventHandler columntypesRowDeleted;
            
            public event columntypesRowChangeEventHandler columntypesRowDeleting;
            
            public void AddcolumntypesRow(columntypesRow row) {
                this.Rows.Add(row);
            }
            
            public columntypesRow AddcolumntypesRow(
                        customobjectRow parentcustomobjectRowBycustomobjectcolumntypes, 
                        string field, 
                        string iskey, 
                        string sqltype, 
                        int col_len, 
                        int col_precision, 
                        int col_scale, 
                        string systemtype, 
                        string sqldeclaration, 
                        string allownull, 
                        string defaultvalue, 
                        string format, 
                        string denynull, 
                        string lastmoduser, 
                        System.DateTime lastmodtimestamp, 
                        string createuser, 
                        System.DateTime createtimestamp) {
                columntypesRow rowcolumntypesRow = ((columntypesRow)(this.NewRow()));
                rowcolumntypesRow.ItemArray = new object[] {
                        parentcustomobjectRowBycustomobjectcolumntypes[0],
                        field,
                        iskey,
                        sqltype,
                        col_len,
                        col_precision,
                        col_scale,
                        systemtype,
                        sqldeclaration,
                        allownull,
                        defaultvalue,
                        format,
                        denynull,
                        lastmoduser,
                        lastmodtimestamp,
                        createuser,
                        createtimestamp};
                this.Rows.Add(rowcolumntypesRow);
                return rowcolumntypesRow;
            }
            
            public columntypesRow FindBytablenamefield(string tablename, string field) {
                return ((columntypesRow)(this.Rows.Find(new object[] {
                            tablename,
                            field})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                columntypesDataTable cln = ((columntypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new columntypesDataTable();
            }
            
            internal void InitVars() {
                this.columntablename = this.Columns["tablename"];
                this.columnfield = this.Columns["field"];
                this.columniskey = this.Columns["iskey"];
                this.columnsqltype = this.Columns["sqltype"];
                this.columncol_len = this.Columns["col_len"];
                this.columncol_precision = this.Columns["col_precision"];
                this.columncol_scale = this.Columns["col_scale"];
                this.columnsystemtype = this.Columns["systemtype"];
                this.columnsqldeclaration = this.Columns["sqldeclaration"];
                this.columnallownull = this.Columns["allownull"];
                this.columndefaultvalue = this.Columns["defaultvalue"];
                this.columnformat = this.Columns["format"];
                this.columndenynull = this.Columns["denynull"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columncreateuser = this.Columns["createuser"];
                this.columncreatetimestamp = this.Columns["createtimestamp"];
            }
            
            private void InitClass() {
                this.columntablename = new DataColumn("tablename", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntablename);
                this.columnfield = new DataColumn("field", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfield);
                this.columniskey = new DataColumn("iskey", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columniskey);
                this.columnsqltype = new DataColumn("sqltype", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsqltype);
                this.columncol_len = new DataColumn("col_len", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncol_len);
                this.columncol_precision = new DataColumn("col_precision", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncol_precision);
                this.columncol_scale = new DataColumn("col_scale", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncol_scale);
                this.columnsystemtype = new DataColumn("systemtype", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsystemtype);
                this.columnsqldeclaration = new DataColumn("sqldeclaration", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsqldeclaration);
                this.columnallownull = new DataColumn("allownull", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnallownull);
                this.columndefaultvalue = new DataColumn("defaultvalue", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndefaultvalue);
                this.columnformat = new DataColumn("format", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnformat);
                this.columndenynull = new DataColumn("denynull", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndenynull);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columncreateuser = new DataColumn("createuser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncreateuser);
                this.columncreatetimestamp = new DataColumn("createtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncreatetimestamp);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey4", new DataColumn[] {
                                this.columntablename,
                                this.columnfield}, true));
                this.columntablename.AllowDBNull = false;
                this.columnfield.AllowDBNull = false;
                this.columniskey.AllowDBNull = false;
                this.columnsqltype.AllowDBNull = false;
                this.columnsqldeclaration.AllowDBNull = false;
                this.columnallownull.AllowDBNull = false;
                this.columndenynull.AllowDBNull = false;
            }
            
            public columntypesRow NewcolumntypesRow() {
                return ((columntypesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new columntypesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(columntypesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.columntypesRowChanged != null)) {
                    this.columntypesRowChanged(this, new columntypesRowChangeEvent(((columntypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.columntypesRowChanging != null)) {
                    this.columntypesRowChanging(this, new columntypesRowChangeEvent(((columntypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.columntypesRowDeleted != null)) {
                    this.columntypesRowDeleted(this, new columntypesRowChangeEvent(((columntypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.columntypesRowDeleting != null)) {
                    this.columntypesRowDeleting(this, new columntypesRowChangeEvent(((columntypesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecolumntypesRow(columntypesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class columntypesRow : DataRow {
            
            private columntypesDataTable tablecolumntypes;
            
            internal columntypesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecolumntypes = ((columntypesDataTable)(this.Table));
            }
            
            public string tablename {
                get {
                    return ((string)(this[this.tablecolumntypes.tablenameColumn]));
                }
                set {
                    this[this.tablecolumntypes.tablenameColumn] = value;
                }
            }
            
            public string field {
                get {
                    return ((string)(this[this.tablecolumntypes.fieldColumn]));
                }
                set {
                    this[this.tablecolumntypes.fieldColumn] = value;
                }
            }
            
            public string iskey {
                get {
                    return ((string)(this[this.tablecolumntypes.iskeyColumn]));
                }
                set {
                    this[this.tablecolumntypes.iskeyColumn] = value;
                }
            }
            
            public string sqltype {
                get {
                    return ((string)(this[this.tablecolumntypes.sqltypeColumn]));
                }
                set {
                    this[this.tablecolumntypes.sqltypeColumn] = value;
                }
            }
            
            public int col_len {
                get {
                    try {
                        return ((int)(this[this.tablecolumntypes.col_lenColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecolumntypes.col_lenColumn] = value;
                }
            }
            
            public int col_precision {
                get {
                    try {
                        return ((int)(this[this.tablecolumntypes.col_precisionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecolumntypes.col_precisionColumn] = value;
                }
            }
            
            public int col_scale {
                get {
                    try {
                        return ((int)(this[this.tablecolumntypes.col_scaleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecolumntypes.col_scaleColumn] = value;
                }
            }
            
            public string systemtype {
                get {
                    try {
                        return ((string)(this[this.tablecolumntypes.systemtypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecolumntypes.systemtypeColumn] = value;
                }
            }
            
            public string sqldeclaration {
                get {
                    return ((string)(this[this.tablecolumntypes.sqldeclarationColumn]));
                }
                set {
                    this[this.tablecolumntypes.sqldeclarationColumn] = value;
                }
            }
            
            public string allownull {
                get {
                    return ((string)(this[this.tablecolumntypes.allownullColumn]));
                }
                set {
                    this[this.tablecolumntypes.allownullColumn] = value;
                }
            }
            
            public string defaultvalue {
                get {
                    try {
                        return ((string)(this[this.tablecolumntypes.defaultvalueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecolumntypes.defaultvalueColumn] = value;
                }
            }
            
            public string format {
                get {
                    try {
                        return ((string)(this[this.tablecolumntypes.formatColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecolumntypes.formatColumn] = value;
                }
            }
            
            public string denynull {
                get {
                    return ((string)(this[this.tablecolumntypes.denynullColumn]));
                }
                set {
                    this[this.tablecolumntypes.denynullColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablecolumntypes.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecolumntypes.lastmoduserColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecolumntypes.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecolumntypes.lastmodtimestampColumn] = value;
                }
            }
            
            public string createuser {
                get {
                    try {
                        return ((string)(this[this.tablecolumntypes.createuserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecolumntypes.createuserColumn] = value;
                }
            }
            
            public System.DateTime createtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecolumntypes.createtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecolumntypes.createtimestampColumn] = value;
                }
            }
            
            public customobjectRow customobjectRow {
                get {
                    return ((customobjectRow)(this.GetParentRow(this.Table.ParentRelations["customobjectcolumntypes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["customobjectcolumntypes"]);
                }
            }
            
            public bool Iscol_lenNull() {
                return this.IsNull(this.tablecolumntypes.col_lenColumn);
            }
            
            public void Setcol_lenNull() {
                this[this.tablecolumntypes.col_lenColumn] = System.Convert.DBNull;
            }
            
            public bool Iscol_precisionNull() {
                return this.IsNull(this.tablecolumntypes.col_precisionColumn);
            }
            
            public void Setcol_precisionNull() {
                this[this.tablecolumntypes.col_precisionColumn] = System.Convert.DBNull;
            }
            
            public bool Iscol_scaleNull() {
                return this.IsNull(this.tablecolumntypes.col_scaleColumn);
            }
            
            public void Setcol_scaleNull() {
                this[this.tablecolumntypes.col_scaleColumn] = System.Convert.DBNull;
            }
            
            public bool IssystemtypeNull() {
                return this.IsNull(this.tablecolumntypes.systemtypeColumn);
            }
            
            public void SetsystemtypeNull() {
                this[this.tablecolumntypes.systemtypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsdefaultvalueNull() {
                return this.IsNull(this.tablecolumntypes.defaultvalueColumn);
            }
            
            public void SetdefaultvalueNull() {
                this[this.tablecolumntypes.defaultvalueColumn] = System.Convert.DBNull;
            }
            
            public bool IsformatNull() {
                return this.IsNull(this.tablecolumntypes.formatColumn);
            }
            
            public void SetformatNull() {
                this[this.tablecolumntypes.formatColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablecolumntypes.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablecolumntypes.lastmoduserColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablecolumntypes.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablecolumntypes.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IscreateuserNull() {
                return this.IsNull(this.tablecolumntypes.createuserColumn);
            }
            
            public void SetcreateuserNull() {
                this[this.tablecolumntypes.createuserColumn] = System.Convert.DBNull;
            }
            
            public bool IscreatetimestampNull() {
                return this.IsNull(this.tablecolumntypes.createtimestampColumn);
            }
            
            public void SetcreatetimestampNull() {
                this[this.tablecolumntypes.createtimestampColumn] = System.Convert.DBNull;
            }
            
            public viewcolumnRow[] GetviewcolumnRows() {
                return ((viewcolumnRow[])(this.GetChildRows(this.Table.ChildRelations["columntypesviewcolumn"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class columntypesRowChangeEvent : EventArgs {
            
            private columntypesRow eventRow;
            
            private DataRowAction eventAction;
            
            public columntypesRowChangeEvent(columntypesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public columntypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class columntypesprincipaleDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntablename;
            
            private DataColumn columnfield;
            
            internal columntypesprincipaleDataTable() : 
                    base("columntypesprincipale") {
                this.InitClass();
            }
            
            internal columntypesprincipaleDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn tablenameColumn {
                get {
                    return this.columntablename;
                }
            }
            
            internal DataColumn fieldColumn {
                get {
                    return this.columnfield;
                }
            }
            
            public columntypesprincipaleRow this[int index] {
                get {
                    return ((columntypesprincipaleRow)(this.Rows[index]));
                }
            }
            
            public event columntypesprincipaleRowChangeEventHandler columntypesprincipaleRowChanged;
            
            public event columntypesprincipaleRowChangeEventHandler columntypesprincipaleRowChanging;
            
            public event columntypesprincipaleRowChangeEventHandler columntypesprincipaleRowDeleted;
            
            public event columntypesprincipaleRowChangeEventHandler columntypesprincipaleRowDeleting;
            
            public void AddcolumntypesprincipaleRow(columntypesprincipaleRow row) {
                this.Rows.Add(row);
            }
            
            public columntypesprincipaleRow AddcolumntypesprincipaleRow(string tablename, string field) {
                columntypesprincipaleRow rowcolumntypesprincipaleRow = ((columntypesprincipaleRow)(this.NewRow()));
                rowcolumntypesprincipaleRow.ItemArray = new object[] {
                        tablename,
                        field};
                this.Rows.Add(rowcolumntypesprincipaleRow);
                return rowcolumntypesprincipaleRow;
            }
            
            public columntypesprincipaleRow FindBytablenamefield(string tablename, string field) {
                return ((columntypesprincipaleRow)(this.Rows.Find(new object[] {
                            tablename,
                            field})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                columntypesprincipaleDataTable cln = ((columntypesprincipaleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new columntypesprincipaleDataTable();
            }
            
            internal void InitVars() {
                this.columntablename = this.Columns["tablename"];
                this.columnfield = this.Columns["field"];
            }
            
            private void InitClass() {
                this.columntablename = new DataColumn("tablename", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntablename);
                this.columnfield = new DataColumn("field", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfield);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey5", new DataColumn[] {
                                this.columntablename,
                                this.columnfield}, true));
                this.Constraints.Add(new UniqueConstraint("vistaFormKey7", new DataColumn[] {
                                this.columnfield}, false));
                this.columntablename.AllowDBNull = false;
                this.columnfield.AllowDBNull = false;
                this.columnfield.Unique = true;
            }
            
            public columntypesprincipaleRow NewcolumntypesprincipaleRow() {
                return ((columntypesprincipaleRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new columntypesprincipaleRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(columntypesprincipaleRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.columntypesprincipaleRowChanged != null)) {
                    this.columntypesprincipaleRowChanged(this, new columntypesprincipaleRowChangeEvent(((columntypesprincipaleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.columntypesprincipaleRowChanging != null)) {
                    this.columntypesprincipaleRowChanging(this, new columntypesprincipaleRowChangeEvent(((columntypesprincipaleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.columntypesprincipaleRowDeleted != null)) {
                    this.columntypesprincipaleRowDeleted(this, new columntypesprincipaleRowChangeEvent(((columntypesprincipaleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.columntypesprincipaleRowDeleting != null)) {
                    this.columntypesprincipaleRowDeleting(this, new columntypesprincipaleRowChangeEvent(((columntypesprincipaleRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecolumntypesprincipaleRow(columntypesprincipaleRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class columntypesprincipaleRow : DataRow {
            
            private columntypesprincipaleDataTable tablecolumntypesprincipale;
            
            internal columntypesprincipaleRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecolumntypesprincipale = ((columntypesprincipaleDataTable)(this.Table));
            }
            
            public string tablename {
                get {
                    return ((string)(this[this.tablecolumntypesprincipale.tablenameColumn]));
                }
                set {
                    this[this.tablecolumntypesprincipale.tablenameColumn] = value;
                }
            }
            
            public string field {
                get {
                    return ((string)(this[this.tablecolumntypesprincipale.fieldColumn]));
                }
                set {
                    this[this.tablecolumntypesprincipale.fieldColumn] = value;
                }
            }
            
            public viewcolumnRow[] GetviewcolumnRows() {
                return ((viewcolumnRow[])(this.GetChildRows(this.Table.ChildRelations["columntypesviewviewcolumn"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class columntypesprincipaleRowChangeEvent : EventArgs {
            
            private columntypesprincipaleRow eventRow;
            
            private DataRowAction eventAction;
            
            public columntypesprincipaleRowChangeEvent(columntypesprincipaleRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public columntypesprincipaleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
