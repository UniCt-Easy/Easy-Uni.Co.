
/*
Easy
Copyright (C) 2021 Università degli Studi di Catania (www.unict.it)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.510
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace customdirectrel{//customdirectrel//
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class vistaForm : DataSet {
        
        private fromtableDataTable tablefromtable;
        
        private customdirectrelDataTable tablecustomdirectrel;
        
        private customdirectrelcolDataTable tablecustomdirectrelcol;
        
        private totableDataTable tabletotable;
        
        private DataRelation relationcustomobjectcustomdirectrel;
        
        private DataRelation relationtotablecustomdirectrel;
        
        private DataRelation relationcustomdirectrelcustomdirectrelcol;
        
        public vistaForm() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected vistaForm(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["fromtable"] != null)) {
                    this.Tables.Add(new fromtableDataTable(ds.Tables["fromtable"]));
                }
                if ((ds.Tables["customdirectrel"] != null)) {
                    this.Tables.Add(new customdirectrelDataTable(ds.Tables["customdirectrel"]));
                }
                if ((ds.Tables["customdirectrelcol"] != null)) {
                    this.Tables.Add(new customdirectrelcolDataTable(ds.Tables["customdirectrelcol"]));
                }
                if ((ds.Tables["totable"] != null)) {
                    this.Tables.Add(new totableDataTable(ds.Tables["totable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public fromtableDataTable fromtable {
            get {
                return this.tablefromtable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public customdirectrelDataTable customdirectrel {
            get {
                return this.tablecustomdirectrel;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public customdirectrelcolDataTable customdirectrelcol {
            get {
                return this.tablecustomdirectrelcol;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public totableDataTable totable {
            get {
                return this.tabletotable;
            }
        }
        
        public override DataSet Clone() {
            vistaForm cln = ((vistaForm)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["fromtable"] != null)) {
                this.Tables.Add(new fromtableDataTable(ds.Tables["fromtable"]));
            }
            if ((ds.Tables["customdirectrel"] != null)) {
                this.Tables.Add(new customdirectrelDataTable(ds.Tables["customdirectrel"]));
            }
            if ((ds.Tables["customdirectrelcol"] != null)) {
                this.Tables.Add(new customdirectrelcolDataTable(ds.Tables["customdirectrelcol"]));
            }
            if ((ds.Tables["totable"] != null)) {
                this.Tables.Add(new totableDataTable(ds.Tables["totable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablefromtable = ((fromtableDataTable)(this.Tables["fromtable"]));
            if ((this.tablefromtable != null)) {
                this.tablefromtable.InitVars();
            }
            this.tablecustomdirectrel = ((customdirectrelDataTable)(this.Tables["customdirectrel"]));
            if ((this.tablecustomdirectrel != null)) {
                this.tablecustomdirectrel.InitVars();
            }
            this.tablecustomdirectrelcol = ((customdirectrelcolDataTable)(this.Tables["customdirectrelcol"]));
            if ((this.tablecustomdirectrelcol != null)) {
                this.tablecustomdirectrelcol.InitVars();
            }
            this.tabletotable = ((totableDataTable)(this.Tables["totable"]));
            if ((this.tabletotable != null)) {
                this.tabletotable.InitVars();
            }
            this.relationcustomobjectcustomdirectrel = this.Relations["customobjectcustomdirectrel"];
            this.relationtotablecustomdirectrel = this.Relations["totablecustomdirectrel"];
            this.relationcustomdirectrelcustomdirectrelcol = this.Relations["customdirectrelcustomdirectrelcol"];
        }
        
        private void InitClass() {
            this.DataSetName = "vistaForm";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/vistaForm.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablefromtable = new fromtableDataTable();
            this.Tables.Add(this.tablefromtable);
            this.tablecustomdirectrel = new customdirectrelDataTable();
            this.Tables.Add(this.tablecustomdirectrel);
            this.tablecustomdirectrelcol = new customdirectrelcolDataTable();
            this.Tables.Add(this.tablecustomdirectrelcol);
            this.tabletotable = new totableDataTable();
            this.Tables.Add(this.tabletotable);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("customobjectcustomdirectrel", new DataColumn[] {
                        this.tablefromtable.objectnameColumn}, new DataColumn[] {
                        this.tablecustomdirectrel.fromtableColumn});
            this.tablecustomdirectrel.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("totablecustomdirectrel", new DataColumn[] {
                        this.tabletotable.objectnameColumn}, new DataColumn[] {
                        this.tablecustomdirectrel.totableColumn});
            this.tablecustomdirectrel.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("customdirectrelcustomdirectrelcol", new DataColumn[] {
                        this.tablecustomdirectrel.idcustomdirectrelColumn}, new DataColumn[] {
                        this.tablecustomdirectrelcol.idcustomdirectrelColumn});
            this.tablecustomdirectrelcol.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationcustomobjectcustomdirectrel = new DataRelation("customobjectcustomdirectrel", new DataColumn[] {
                        this.tablefromtable.objectnameColumn}, new DataColumn[] {
                        this.tablecustomdirectrel.fromtableColumn}, false);
            this.Relations.Add(this.relationcustomobjectcustomdirectrel);
            this.relationtotablecustomdirectrel = new DataRelation("totablecustomdirectrel", new DataColumn[] {
                        this.tabletotable.objectnameColumn}, new DataColumn[] {
                        this.tablecustomdirectrel.totableColumn}, false);
            this.Relations.Add(this.relationtotablecustomdirectrel);
            this.relationcustomdirectrelcustomdirectrelcol = new DataRelation("customdirectrelcustomdirectrelcol", new DataColumn[] {
                        this.tablecustomdirectrel.idcustomdirectrelColumn}, new DataColumn[] {
                        this.tablecustomdirectrelcol.idcustomdirectrelColumn}, false);
            this.Relations.Add(this.relationcustomdirectrelcustomdirectrelcol);
        }
        
        private bool ShouldSerializefromtable() {
            return false;
        }
        
        private bool ShouldSerializecustomdirectrel() {
            return false;
        }
        
        private bool ShouldSerializecustomdirectrelcol() {
            return false;
        }
        
        private bool ShouldSerializetotable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void fromtableRowChangeEventHandler(object sender, fromtableRowChangeEvent e);
        
        public delegate void customdirectrelRowChangeEventHandler(object sender, customdirectrelRowChangeEvent e);
        
        public delegate void customdirectrelcolRowChangeEventHandler(object sender, customdirectrelcolRowChangeEvent e);
        
        public delegate void totableRowChangeEventHandler(object sender, totableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fromtableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnobjectname;
            
            private DataColumn columndescription;
            
            private DataColumn columnisreal;
            
            private DataColumn columnrealtable;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            internal fromtableDataTable() : 
                    base("fromtable") {
                this.InitClass();
            }
            
            internal fromtableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn objectnameColumn {
                get {
                    return this.columnobjectname;
                }
            }
            
            internal DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            internal DataColumn isrealColumn {
                get {
                    return this.columnisreal;
                }
            }
            
            internal DataColumn realtableColumn {
                get {
                    return this.columnrealtable;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            public fromtableRow this[int index] {
                get {
                    return ((fromtableRow)(this.Rows[index]));
                }
            }
            
            public event fromtableRowChangeEventHandler fromtableRowChanged;
            
            public event fromtableRowChangeEventHandler fromtableRowChanging;
            
            public event fromtableRowChangeEventHandler fromtableRowDeleted;
            
            public event fromtableRowChangeEventHandler fromtableRowDeleting;
            
            public void AddfromtableRow(fromtableRow row) {
                this.Rows.Add(row);
            }
            
            public fromtableRow AddfromtableRow(string objectname, string description, string isreal, string realtable, System.DateTime lastmodtimestamp, string lastmoduser) {
                fromtableRow rowfromtableRow = ((fromtableRow)(this.NewRow()));
                rowfromtableRow.ItemArray = new object[] {
                        objectname,
                        description,
                        isreal,
                        realtable,
                        lastmodtimestamp,
                        lastmoduser};
                this.Rows.Add(rowfromtableRow);
                return rowfromtableRow;
            }
            
            public fromtableRow FindByobjectname(string objectname) {
                return ((fromtableRow)(this.Rows.Find(new object[] {
                            objectname})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                fromtableDataTable cln = ((fromtableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new fromtableDataTable();
            }
            
            internal void InitVars() {
                this.columnobjectname = this.Columns["objectname"];
                this.columndescription = this.Columns["description"];
                this.columnisreal = this.Columns["isreal"];
                this.columnrealtable = this.Columns["realtable"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
            }
            
            private void InitClass() {
                this.columnobjectname = new DataColumn("objectname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnobjectname);
                this.columndescription = new DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescription);
                this.columnisreal = new DataColumn("isreal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisreal);
                this.columnrealtable = new DataColumn("realtable", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrealtable);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey2", new DataColumn[] {
                                this.columnobjectname}, true));
                this.columnobjectname.AllowDBNull = false;
                this.columnobjectname.Unique = true;
                this.columnisreal.AllowDBNull = false;
            }
            
            public fromtableRow NewfromtableRow() {
                return ((fromtableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new fromtableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(fromtableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.fromtableRowChanged != null)) {
                    this.fromtableRowChanged(this, new fromtableRowChangeEvent(((fromtableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.fromtableRowChanging != null)) {
                    this.fromtableRowChanging(this, new fromtableRowChangeEvent(((fromtableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.fromtableRowDeleted != null)) {
                    this.fromtableRowDeleted(this, new fromtableRowChangeEvent(((fromtableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.fromtableRowDeleting != null)) {
                    this.fromtableRowDeleting(this, new fromtableRowChangeEvent(((fromtableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovefromtableRow(fromtableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fromtableRow : DataRow {
            
            private fromtableDataTable tablefromtable;
            
            internal fromtableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablefromtable = ((fromtableDataTable)(this.Table));
            }
            
            public string objectname {
                get {
                    return ((string)(this[this.tablefromtable.objectnameColumn]));
                }
                set {
                    this[this.tablefromtable.objectnameColumn] = value;
                }
            }
            
            public string description {
                get {
                    try {
                        return ((string)(this[this.tablefromtable.descriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefromtable.descriptionColumn] = value;
                }
            }
            
            public string isreal {
                get {
                    return ((string)(this[this.tablefromtable.isrealColumn]));
                }
                set {
                    this[this.tablefromtable.isrealColumn] = value;
                }
            }
            
            public string realtable {
                get {
                    try {
                        return ((string)(this[this.tablefromtable.realtableColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefromtable.realtableColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablefromtable.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefromtable.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablefromtable.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefromtable.lastmoduserColumn] = value;
                }
            }
            
            public bool IsdescriptionNull() {
                return this.IsNull(this.tablefromtable.descriptionColumn);
            }
            
            public void SetdescriptionNull() {
                this[this.tablefromtable.descriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsrealtableNull() {
                return this.IsNull(this.tablefromtable.realtableColumn);
            }
            
            public void SetrealtableNull() {
                this[this.tablefromtable.realtableColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablefromtable.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablefromtable.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablefromtable.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablefromtable.lastmoduserColumn] = System.Convert.DBNull;
            }
            
            public customdirectrelRow[] GetcustomdirectrelRows() {
                return ((customdirectrelRow[])(this.GetChildRows(this.Table.ChildRelations["customobjectcustomdirectrel"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fromtableRowChangeEvent : EventArgs {
            
            private fromtableRow eventRow;
            
            private DataRowAction eventAction;
            
            public fromtableRowChangeEvent(fromtableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public fromtableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customdirectrelDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidcustomdirectrel;
            
            private DataColumn columnfromtable;
            
            private DataColumn columntotable;
            
            private DataColumn columndescription;
            
            private DataColumn columnedittype;
            
            private DataColumn columnflag;
            
            private DataColumn columnfilter;
            
            private DataColumn columnlastmoduser;
            
            private DataColumn columnlastmodtimestamp;
            
            internal customdirectrelDataTable() : 
                    base("customdirectrel") {
                this.InitClass();
            }
            
            internal customdirectrelDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idcustomdirectrelColumn {
                get {
                    return this.columnidcustomdirectrel;
                }
            }
            
            internal DataColumn fromtableColumn {
                get {
                    return this.columnfromtable;
                }
            }
            
            internal DataColumn totableColumn {
                get {
                    return this.columntotable;
                }
            }
            
            internal DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            internal DataColumn edittypeColumn {
                get {
                    return this.columnedittype;
                }
            }
            
            internal DataColumn flagColumn {
                get {
                    return this.columnflag;
                }
            }
            
            internal DataColumn filterColumn {
                get {
                    return this.columnfilter;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            public customdirectrelRow this[int index] {
                get {
                    return ((customdirectrelRow)(this.Rows[index]));
                }
            }
            
            public event customdirectrelRowChangeEventHandler customdirectrelRowChanged;
            
            public event customdirectrelRowChangeEventHandler customdirectrelRowChanging;
            
            public event customdirectrelRowChangeEventHandler customdirectrelRowDeleted;
            
            public event customdirectrelRowChangeEventHandler customdirectrelRowDeleting;
            
            public void AddcustomdirectrelRow(customdirectrelRow row) {
                this.Rows.Add(row);
            }
            
            public customdirectrelRow AddcustomdirectrelRow(int idcustomdirectrel, fromtableRow parentfromtableRowBycustomobjectcustomdirectrel, totableRow parenttotableRowBytotablecustomdirectrel, string description, string edittype, int flag, string filter, string lastmoduser, System.DateTime lastmodtimestamp) {
                customdirectrelRow rowcustomdirectrelRow = ((customdirectrelRow)(this.NewRow()));
                rowcustomdirectrelRow.ItemArray = new object[] {
                        idcustomdirectrel,
                        parentfromtableRowBycustomobjectcustomdirectrel[0],
                        parenttotableRowBytotablecustomdirectrel[0],
                        description,
                        edittype,
                        flag,
                        filter,
                        lastmoduser,
                        lastmodtimestamp};
                this.Rows.Add(rowcustomdirectrelRow);
                return rowcustomdirectrelRow;
            }
            
            public customdirectrelRow FindByidcustomdirectrel(int idcustomdirectrel) {
                return ((customdirectrelRow)(this.Rows.Find(new object[] {
                            idcustomdirectrel})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                customdirectrelDataTable cln = ((customdirectrelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new customdirectrelDataTable();
            }
            
            internal void InitVars() {
                this.columnidcustomdirectrel = this.Columns["idcustomdirectrel"];
                this.columnfromtable = this.Columns["fromtable"];
                this.columntotable = this.Columns["totable"];
                this.columndescription = this.Columns["description"];
                this.columnedittype = this.Columns["edittype"];
                this.columnflag = this.Columns["flag"];
                this.columnfilter = this.Columns["filter"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
            }
            
            private void InitClass() {
                this.columnidcustomdirectrel = new DataColumn("idcustomdirectrel", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidcustomdirectrel);
                this.columnfromtable = new DataColumn("fromtable", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfromtable);
                this.columntotable = new DataColumn("totable", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntotable);
                this.columndescription = new DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescription);
                this.columnedittype = new DataColumn("edittype", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnedittype);
                this.columnflag = new DataColumn("flag", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnflag);
                this.columnfilter = new DataColumn("filter", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfilter);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey1", new DataColumn[] {
                                this.columnidcustomdirectrel}, true));
                this.columnidcustomdirectrel.AllowDBNull = false;
                this.columnidcustomdirectrel.Unique = true;
                this.columnfromtable.AllowDBNull = false;
                this.columntotable.AllowDBNull = false;
                this.columndescription.AllowDBNull = false;
                this.columnedittype.AllowDBNull = false;
                this.columnflag.AllowDBNull = false;
            }
            
            public customdirectrelRow NewcustomdirectrelRow() {
                return ((customdirectrelRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new customdirectrelRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(customdirectrelRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.customdirectrelRowChanged != null)) {
                    this.customdirectrelRowChanged(this, new customdirectrelRowChangeEvent(((customdirectrelRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.customdirectrelRowChanging != null)) {
                    this.customdirectrelRowChanging(this, new customdirectrelRowChangeEvent(((customdirectrelRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.customdirectrelRowDeleted != null)) {
                    this.customdirectrelRowDeleted(this, new customdirectrelRowChangeEvent(((customdirectrelRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.customdirectrelRowDeleting != null)) {
                    this.customdirectrelRowDeleting(this, new customdirectrelRowChangeEvent(((customdirectrelRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecustomdirectrelRow(customdirectrelRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customdirectrelRow : DataRow {
            
            private customdirectrelDataTable tablecustomdirectrel;
            
            internal customdirectrelRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecustomdirectrel = ((customdirectrelDataTable)(this.Table));
            }
            
            public int idcustomdirectrel {
                get {
                    return ((int)(this[this.tablecustomdirectrel.idcustomdirectrelColumn]));
                }
                set {
                    this[this.tablecustomdirectrel.idcustomdirectrelColumn] = value;
                }
            }
            
            public string fromtable {
                get {
                    return ((string)(this[this.tablecustomdirectrel.fromtableColumn]));
                }
                set {
                    this[this.tablecustomdirectrel.fromtableColumn] = value;
                }
            }
            
            public string totable {
                get {
                    return ((string)(this[this.tablecustomdirectrel.totableColumn]));
                }
                set {
                    this[this.tablecustomdirectrel.totableColumn] = value;
                }
            }
            
            public string description {
                get {
                    return ((string)(this[this.tablecustomdirectrel.descriptionColumn]));
                }
                set {
                    this[this.tablecustomdirectrel.descriptionColumn] = value;
                }
            }
            
            public string edittype {
                get {
                    return ((string)(this[this.tablecustomdirectrel.edittypeColumn]));
                }
                set {
                    this[this.tablecustomdirectrel.edittypeColumn] = value;
                }
            }
            
            public int flag {
                get {
                    return ((int)(this[this.tablecustomdirectrel.flagColumn]));
                }
                set {
                    this[this.tablecustomdirectrel.flagColumn] = value;
                }
            }
            
            public string filter {
                get {
                    try {
                        return ((string)(this[this.tablecustomdirectrel.filterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomdirectrel.filterColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablecustomdirectrel.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomdirectrel.lastmoduserColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecustomdirectrel.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomdirectrel.lastmodtimestampColumn] = value;
                }
            }
            
            public fromtableRow fromtableRow {
                get {
                    return ((fromtableRow)(this.GetParentRow(this.Table.ParentRelations["customobjectcustomdirectrel"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["customobjectcustomdirectrel"]);
                }
            }
            
            public totableRow totableRow {
                get {
                    return ((totableRow)(this.GetParentRow(this.Table.ParentRelations["totablecustomdirectrel"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["totablecustomdirectrel"]);
                }
            }
            
            public bool IsfilterNull() {
                return this.IsNull(this.tablecustomdirectrel.filterColumn);
            }
            
            public void SetfilterNull() {
                this[this.tablecustomdirectrel.filterColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablecustomdirectrel.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablecustomdirectrel.lastmoduserColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablecustomdirectrel.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablecustomdirectrel.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public customdirectrelcolRow[] GetcustomdirectrelcolRows() {
                return ((customdirectrelcolRow[])(this.GetChildRows(this.Table.ChildRelations["customdirectrelcustomdirectrelcol"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customdirectrelRowChangeEvent : EventArgs {
            
            private customdirectrelRow eventRow;
            
            private DataRowAction eventAction;
            
            public customdirectrelRowChangeEvent(customdirectrelRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public customdirectrelRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customdirectrelcolDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidcustomdirectrel;
            
            private DataColumn columnfromfield;
            
            private DataColumn columntofield;
            
            private DataColumn columnlastmoduser;
            
            private DataColumn columnlastmodtimestamp;
            
            internal customdirectrelcolDataTable() : 
                    base("customdirectrelcol") {
                this.InitClass();
            }
            
            internal customdirectrelcolDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idcustomdirectrelColumn {
                get {
                    return this.columnidcustomdirectrel;
                }
            }
            
            internal DataColumn fromfieldColumn {
                get {
                    return this.columnfromfield;
                }
            }
            
            internal DataColumn tofieldColumn {
                get {
                    return this.columntofield;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            public customdirectrelcolRow this[int index] {
                get {
                    return ((customdirectrelcolRow)(this.Rows[index]));
                }
            }
            
            public event customdirectrelcolRowChangeEventHandler customdirectrelcolRowChanged;
            
            public event customdirectrelcolRowChangeEventHandler customdirectrelcolRowChanging;
            
            public event customdirectrelcolRowChangeEventHandler customdirectrelcolRowDeleted;
            
            public event customdirectrelcolRowChangeEventHandler customdirectrelcolRowDeleting;
            
            public void AddcustomdirectrelcolRow(customdirectrelcolRow row) {
                this.Rows.Add(row);
            }
            
            public customdirectrelcolRow AddcustomdirectrelcolRow(customdirectrelRow parentcustomdirectrelRowBycustomdirectrelcustomdirectrelcol, string fromfield, string tofield, string lastmoduser, System.DateTime lastmodtimestamp) {
                customdirectrelcolRow rowcustomdirectrelcolRow = ((customdirectrelcolRow)(this.NewRow()));
                rowcustomdirectrelcolRow.ItemArray = new object[] {
                        parentcustomdirectrelRowBycustomdirectrelcustomdirectrelcol[0],
                        fromfield,
                        tofield,
                        lastmoduser,
                        lastmodtimestamp};
                this.Rows.Add(rowcustomdirectrelcolRow);
                return rowcustomdirectrelcolRow;
            }
            
            public customdirectrelcolRow FindByidcustomdirectrelfromfieldtofield(int idcustomdirectrel, string fromfield, string tofield) {
                return ((customdirectrelcolRow)(this.Rows.Find(new object[] {
                            idcustomdirectrel,
                            fromfield,
                            tofield})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                customdirectrelcolDataTable cln = ((customdirectrelcolDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new customdirectrelcolDataTable();
            }
            
            internal void InitVars() {
                this.columnidcustomdirectrel = this.Columns["idcustomdirectrel"];
                this.columnfromfield = this.Columns["fromfield"];
                this.columntofield = this.Columns["tofield"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
            }
            
            private void InitClass() {
                this.columnidcustomdirectrel = new DataColumn("idcustomdirectrel", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidcustomdirectrel);
                this.columnfromfield = new DataColumn("fromfield", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfromfield);
                this.columntofield = new DataColumn("tofield", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntofield);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey3", new DataColumn[] {
                                this.columnidcustomdirectrel,
                                this.columnfromfield,
                                this.columntofield}, true));
                this.columnidcustomdirectrel.AllowDBNull = false;
                this.columnfromfield.AllowDBNull = false;
                this.columntofield.AllowDBNull = false;
            }
            
            public customdirectrelcolRow NewcustomdirectrelcolRow() {
                return ((customdirectrelcolRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new customdirectrelcolRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(customdirectrelcolRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.customdirectrelcolRowChanged != null)) {
                    this.customdirectrelcolRowChanged(this, new customdirectrelcolRowChangeEvent(((customdirectrelcolRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.customdirectrelcolRowChanging != null)) {
                    this.customdirectrelcolRowChanging(this, new customdirectrelcolRowChangeEvent(((customdirectrelcolRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.customdirectrelcolRowDeleted != null)) {
                    this.customdirectrelcolRowDeleted(this, new customdirectrelcolRowChangeEvent(((customdirectrelcolRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.customdirectrelcolRowDeleting != null)) {
                    this.customdirectrelcolRowDeleting(this, new customdirectrelcolRowChangeEvent(((customdirectrelcolRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecustomdirectrelcolRow(customdirectrelcolRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customdirectrelcolRow : DataRow {
            
            private customdirectrelcolDataTable tablecustomdirectrelcol;
            
            internal customdirectrelcolRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecustomdirectrelcol = ((customdirectrelcolDataTable)(this.Table));
            }
            
            public int idcustomdirectrel {
                get {
                    return ((int)(this[this.tablecustomdirectrelcol.idcustomdirectrelColumn]));
                }
                set {
                    this[this.tablecustomdirectrelcol.idcustomdirectrelColumn] = value;
                }
            }
            
            public string fromfield {
                get {
                    return ((string)(this[this.tablecustomdirectrelcol.fromfieldColumn]));
                }
                set {
                    this[this.tablecustomdirectrelcol.fromfieldColumn] = value;
                }
            }
            
            public string tofield {
                get {
                    return ((string)(this[this.tablecustomdirectrelcol.tofieldColumn]));
                }
                set {
                    this[this.tablecustomdirectrelcol.tofieldColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablecustomdirectrelcol.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomdirectrelcol.lastmoduserColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecustomdirectrelcol.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomdirectrelcol.lastmodtimestampColumn] = value;
                }
            }
            
            public customdirectrelRow customdirectrelRow {
                get {
                    return ((customdirectrelRow)(this.GetParentRow(this.Table.ParentRelations["customdirectrelcustomdirectrelcol"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["customdirectrelcustomdirectrelcol"]);
                }
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablecustomdirectrelcol.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablecustomdirectrelcol.lastmoduserColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablecustomdirectrelcol.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablecustomdirectrelcol.lastmodtimestampColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customdirectrelcolRowChangeEvent : EventArgs {
            
            private customdirectrelcolRow eventRow;
            
            private DataRowAction eventAction;
            
            public customdirectrelcolRowChangeEvent(customdirectrelcolRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public customdirectrelcolRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class totableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnobjectname;
            
            private DataColumn columndescription;
            
            private DataColumn columnisreal;
            
            private DataColumn columnrealtable;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            internal totableDataTable() : 
                    base("totable") {
                this.InitClass();
            }
            
            internal totableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn objectnameColumn {
                get {
                    return this.columnobjectname;
                }
            }
            
            internal DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            internal DataColumn isrealColumn {
                get {
                    return this.columnisreal;
                }
            }
            
            internal DataColumn realtableColumn {
                get {
                    return this.columnrealtable;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            public totableRow this[int index] {
                get {
                    return ((totableRow)(this.Rows[index]));
                }
            }
            
            public event totableRowChangeEventHandler totableRowChanged;
            
            public event totableRowChangeEventHandler totableRowChanging;
            
            public event totableRowChangeEventHandler totableRowDeleted;
            
            public event totableRowChangeEventHandler totableRowDeleting;
            
            public void AddtotableRow(totableRow row) {
                this.Rows.Add(row);
            }
            
            public totableRow AddtotableRow(string objectname, string description, string isreal, string realtable, System.DateTime lastmodtimestamp, string lastmoduser) {
                totableRow rowtotableRow = ((totableRow)(this.NewRow()));
                rowtotableRow.ItemArray = new object[] {
                        objectname,
                        description,
                        isreal,
                        realtable,
                        lastmodtimestamp,
                        lastmoduser};
                this.Rows.Add(rowtotableRow);
                return rowtotableRow;
            }
            
            public totableRow FindByobjectname(string objectname) {
                return ((totableRow)(this.Rows.Find(new object[] {
                            objectname})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                totableDataTable cln = ((totableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new totableDataTable();
            }
            
            internal void InitVars() {
                this.columnobjectname = this.Columns["objectname"];
                this.columndescription = this.Columns["description"];
                this.columnisreal = this.Columns["isreal"];
                this.columnrealtable = this.Columns["realtable"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
            }
            
            private void InitClass() {
                this.columnobjectname = new DataColumn("objectname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnobjectname);
                this.columndescription = new DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescription);
                this.columnisreal = new DataColumn("isreal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisreal);
                this.columnrealtable = new DataColumn("realtable", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrealtable);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey4", new DataColumn[] {
                                this.columnobjectname}, true));
                this.columnobjectname.AllowDBNull = false;
                this.columnobjectname.Unique = true;
                this.columnisreal.AllowDBNull = false;
            }
            
            public totableRow NewtotableRow() {
                return ((totableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new totableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(totableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.totableRowChanged != null)) {
                    this.totableRowChanged(this, new totableRowChangeEvent(((totableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.totableRowChanging != null)) {
                    this.totableRowChanging(this, new totableRowChangeEvent(((totableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.totableRowDeleted != null)) {
                    this.totableRowDeleted(this, new totableRowChangeEvent(((totableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.totableRowDeleting != null)) {
                    this.totableRowDeleting(this, new totableRowChangeEvent(((totableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetotableRow(totableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class totableRow : DataRow {
            
            private totableDataTable tabletotable;
            
            internal totableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletotable = ((totableDataTable)(this.Table));
            }
            
            public string objectname {
                get {
                    return ((string)(this[this.tabletotable.objectnameColumn]));
                }
                set {
                    this[this.tabletotable.objectnameColumn] = value;
                }
            }
            
            public string description {
                get {
                    try {
                        return ((string)(this[this.tabletotable.descriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletotable.descriptionColumn] = value;
                }
            }
            
            public string isreal {
                get {
                    return ((string)(this[this.tabletotable.isrealColumn]));
                }
                set {
                    this[this.tabletotable.isrealColumn] = value;
                }
            }
            
            public string realtable {
                get {
                    try {
                        return ((string)(this[this.tabletotable.realtableColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletotable.realtableColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabletotable.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletotable.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tabletotable.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletotable.lastmoduserColumn] = value;
                }
            }
            
            public bool IsdescriptionNull() {
                return this.IsNull(this.tabletotable.descriptionColumn);
            }
            
            public void SetdescriptionNull() {
                this[this.tabletotable.descriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsrealtableNull() {
                return this.IsNull(this.tabletotable.realtableColumn);
            }
            
            public void SetrealtableNull() {
                this[this.tabletotable.realtableColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tabletotable.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tabletotable.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tabletotable.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tabletotable.lastmoduserColumn] = System.Convert.DBNull;
            }
            
            public customdirectrelRow[] GetcustomdirectrelRows() {
                return ((customdirectrelRow[])(this.GetChildRows(this.Table.ChildRelations["totablecustomdirectrel"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class totableRowChangeEvent : EventArgs {
            
            private totableRow eventRow;
            
            private DataRowAction eventAction;
            
            public totableRowChangeEvent(totableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public totableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
