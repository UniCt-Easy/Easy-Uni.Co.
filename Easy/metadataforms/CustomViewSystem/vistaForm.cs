
/*
Easy
Copyright (C) 2024 Università degli Studi di Catania (www.unict.it)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.510
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace CustomViewSystem{//CustomViewSystem//
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class vistaForm : DataSet {
        
        private customviewDataTable tablecustomview;
        
        private customviewcolumnDataTable tablecustomviewcolumn;
        
        private customvieworderbyDataTable tablecustomvieworderby;
        
        private customviewwhereDataTable tablecustomviewwhere;
        
        private columntypesDataTable tablecolumntypes;
        
        private connectorDataTable tableconnector;
        
        private customoperatorDataTable tablecustomoperator;
        
        private DataRelation relationcustomviewcustomviewcolumn;
        
        private DataRelation relationcustomviewcustomvieworderby;
        
        private DataRelation relationcustomviewcustomviewwhere;
        
        private DataRelation relationcustomviewcolumntypes;
        
        private DataRelation relationconnectorcustomviewwhere;
        
        private DataRelation relationcustomoperatorcustomviewwhere;
        
        public vistaForm() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected vistaForm(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["customview"] != null)) {
                    this.Tables.Add(new customviewDataTable(ds.Tables["customview"]));
                }
                if ((ds.Tables["customviewcolumn"] != null)) {
                    this.Tables.Add(new customviewcolumnDataTable(ds.Tables["customviewcolumn"]));
                }
                if ((ds.Tables["customvieworderby"] != null)) {
                    this.Tables.Add(new customvieworderbyDataTable(ds.Tables["customvieworderby"]));
                }
                if ((ds.Tables["customviewwhere"] != null)) {
                    this.Tables.Add(new customviewwhereDataTable(ds.Tables["customviewwhere"]));
                }
                if ((ds.Tables["columntypes"] != null)) {
                    this.Tables.Add(new columntypesDataTable(ds.Tables["columntypes"]));
                }
                if ((ds.Tables["connector"] != null)) {
                    this.Tables.Add(new connectorDataTable(ds.Tables["connector"]));
                }
                if ((ds.Tables["customoperator"] != null)) {
                    this.Tables.Add(new customoperatorDataTable(ds.Tables["customoperator"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public customviewDataTable customview {
            get {
                return this.tablecustomview;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public customviewcolumnDataTable customviewcolumn {
            get {
                return this.tablecustomviewcolumn;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public customvieworderbyDataTable customvieworderby {
            get {
                return this.tablecustomvieworderby;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public customviewwhereDataTable customviewwhere {
            get {
                return this.tablecustomviewwhere;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public columntypesDataTable columntypes {
            get {
                return this.tablecolumntypes;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public connectorDataTable connector {
            get {
                return this.tableconnector;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public customoperatorDataTable customoperator {
            get {
                return this.tablecustomoperator;
            }
        }
        
        public override DataSet Clone() {
            vistaForm cln = ((vistaForm)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["customview"] != null)) {
                this.Tables.Add(new customviewDataTable(ds.Tables["customview"]));
            }
            if ((ds.Tables["customviewcolumn"] != null)) {
                this.Tables.Add(new customviewcolumnDataTable(ds.Tables["customviewcolumn"]));
            }
            if ((ds.Tables["customvieworderby"] != null)) {
                this.Tables.Add(new customvieworderbyDataTable(ds.Tables["customvieworderby"]));
            }
            if ((ds.Tables["customviewwhere"] != null)) {
                this.Tables.Add(new customviewwhereDataTable(ds.Tables["customviewwhere"]));
            }
            if ((ds.Tables["columntypes"] != null)) {
                this.Tables.Add(new columntypesDataTable(ds.Tables["columntypes"]));
            }
            if ((ds.Tables["connector"] != null)) {
                this.Tables.Add(new connectorDataTable(ds.Tables["connector"]));
            }
            if ((ds.Tables["customoperator"] != null)) {
                this.Tables.Add(new customoperatorDataTable(ds.Tables["customoperator"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablecustomview = ((customviewDataTable)(this.Tables["customview"]));
            if ((this.tablecustomview != null)) {
                this.tablecustomview.InitVars();
            }
            this.tablecustomviewcolumn = ((customviewcolumnDataTable)(this.Tables["customviewcolumn"]));
            if ((this.tablecustomviewcolumn != null)) {
                this.tablecustomviewcolumn.InitVars();
            }
            this.tablecustomvieworderby = ((customvieworderbyDataTable)(this.Tables["customvieworderby"]));
            if ((this.tablecustomvieworderby != null)) {
                this.tablecustomvieworderby.InitVars();
            }
            this.tablecustomviewwhere = ((customviewwhereDataTable)(this.Tables["customviewwhere"]));
            if ((this.tablecustomviewwhere != null)) {
                this.tablecustomviewwhere.InitVars();
            }
            this.tablecolumntypes = ((columntypesDataTable)(this.Tables["columntypes"]));
            if ((this.tablecolumntypes != null)) {
                this.tablecolumntypes.InitVars();
            }
            this.tableconnector = ((connectorDataTable)(this.Tables["connector"]));
            if ((this.tableconnector != null)) {
                this.tableconnector.InitVars();
            }
            this.tablecustomoperator = ((customoperatorDataTable)(this.Tables["customoperator"]));
            if ((this.tablecustomoperator != null)) {
                this.tablecustomoperator.InitVars();
            }
            this.relationcustomviewcustomviewcolumn = this.Relations["customviewcustomviewcolumn"];
            this.relationcustomviewcustomvieworderby = this.Relations["customviewcustomvieworderby"];
            this.relationcustomviewcustomviewwhere = this.Relations["customviewcustomviewwhere"];
            this.relationcustomviewcolumntypes = this.Relations["customviewcolumntypes"];
            this.relationconnectorcustomviewwhere = this.Relations["connectorcustomviewwhere"];
            this.relationcustomoperatorcustomviewwhere = this.Relations["customoperatorcustomviewwhere"];
        }
        
        private void InitClass() {
            this.DataSetName = "vistaForm";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/vistaForm.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablecustomview = new customviewDataTable();
            this.Tables.Add(this.tablecustomview);
            this.tablecustomviewcolumn = new customviewcolumnDataTable();
            this.Tables.Add(this.tablecustomviewcolumn);
            this.tablecustomvieworderby = new customvieworderbyDataTable();
            this.Tables.Add(this.tablecustomvieworderby);
            this.tablecustomviewwhere = new customviewwhereDataTable();
            this.Tables.Add(this.tablecustomviewwhere);
            this.tablecolumntypes = new columntypesDataTable();
            this.Tables.Add(this.tablecolumntypes);
            this.tableconnector = new connectorDataTable();
            this.Tables.Add(this.tableconnector);
            this.tablecustomoperator = new customoperatorDataTable();
            this.Tables.Add(this.tablecustomoperator);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("customviewcustomviewcolumn", new DataColumn[] {
                        this.tablecustomview.objectnameColumn,
                        this.tablecustomview.viewnameColumn}, new DataColumn[] {
                        this.tablecustomviewcolumn.objectnameColumn,
                        this.tablecustomviewcolumn.viewnameColumn});
            this.tablecustomviewcolumn.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("customviewcustomvieworderby", new DataColumn[] {
                        this.tablecustomview.objectnameColumn,
                        this.tablecustomview.viewnameColumn}, new DataColumn[] {
                        this.tablecustomvieworderby.objectnameColumn,
                        this.tablecustomvieworderby.viewnameColumn});
            this.tablecustomvieworderby.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("customviewcustomviewwhere", new DataColumn[] {
                        this.tablecustomview.objectnameColumn,
                        this.tablecustomview.viewnameColumn}, new DataColumn[] {
                        this.tablecustomviewwhere.objectnameColumn,
                        this.tablecustomviewwhere.viewnameColumn});
            this.tablecustomviewwhere.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("connectorcustomviewwhere", new DataColumn[] {
                        this.tableconnector.idconnectorColumn}, new DataColumn[] {
                        this.tablecustomviewwhere.connectorColumn});
            this.tablecustomviewwhere.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("customoperatorcustomviewwhere", new DataColumn[] {
                        this.tablecustomoperator.idoperatorColumn}, new DataColumn[] {
                        this.tablecustomviewwhere._operatorColumn});
            this.tablecustomviewwhere.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("customviewcolumntypes", new DataColumn[] {
                        this.tablecustomview.objectnameColumn}, new DataColumn[] {
                        this.tablecolumntypes.tablenameColumn});
            this.tablecolumntypes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationcustomviewcustomviewcolumn = new DataRelation("customviewcustomviewcolumn", new DataColumn[] {
                        this.tablecustomview.objectnameColumn,
                        this.tablecustomview.viewnameColumn}, new DataColumn[] {
                        this.tablecustomviewcolumn.objectnameColumn,
                        this.tablecustomviewcolumn.viewnameColumn}, false);
            this.Relations.Add(this.relationcustomviewcustomviewcolumn);
            this.relationcustomviewcustomvieworderby = new DataRelation("customviewcustomvieworderby", new DataColumn[] {
                        this.tablecustomview.objectnameColumn,
                        this.tablecustomview.viewnameColumn}, new DataColumn[] {
                        this.tablecustomvieworderby.objectnameColumn,
                        this.tablecustomvieworderby.viewnameColumn}, false);
            this.Relations.Add(this.relationcustomviewcustomvieworderby);
            this.relationcustomviewcustomviewwhere = new DataRelation("customviewcustomviewwhere", new DataColumn[] {
                        this.tablecustomview.objectnameColumn,
                        this.tablecustomview.viewnameColumn}, new DataColumn[] {
                        this.tablecustomviewwhere.objectnameColumn,
                        this.tablecustomviewwhere.viewnameColumn}, false);
            this.Relations.Add(this.relationcustomviewcustomviewwhere);
            this.relationcustomviewcolumntypes = new DataRelation("customviewcolumntypes", new DataColumn[] {
                        this.tablecustomview.objectnameColumn}, new DataColumn[] {
                        this.tablecolumntypes.tablenameColumn}, false);
            this.Relations.Add(this.relationcustomviewcolumntypes);
            this.relationconnectorcustomviewwhere = new DataRelation("connectorcustomviewwhere", new DataColumn[] {
                        this.tableconnector.idconnectorColumn}, new DataColumn[] {
                        this.tablecustomviewwhere.connectorColumn}, false);
            this.Relations.Add(this.relationconnectorcustomviewwhere);
            this.relationcustomoperatorcustomviewwhere = new DataRelation("customoperatorcustomviewwhere", new DataColumn[] {
                        this.tablecustomoperator.idoperatorColumn}, new DataColumn[] {
                        this.tablecustomviewwhere._operatorColumn}, false);
            this.Relations.Add(this.relationcustomoperatorcustomviewwhere);
        }
        
        private bool ShouldSerializecustomview() {
            return false;
        }
        
        private bool ShouldSerializecustomviewcolumn() {
            return false;
        }
        
        private bool ShouldSerializecustomvieworderby() {
            return false;
        }
        
        private bool ShouldSerializecustomviewwhere() {
            return false;
        }
        
        private bool ShouldSerializecolumntypes() {
            return false;
        }
        
        private bool ShouldSerializeconnector() {
            return false;
        }
        
        private bool ShouldSerializecustomoperator() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void customviewRowChangeEventHandler(object sender, customviewRowChangeEvent e);
        
        public delegate void customviewcolumnRowChangeEventHandler(object sender, customviewcolumnRowChangeEvent e);
        
        public delegate void customvieworderbyRowChangeEventHandler(object sender, customvieworderbyRowChangeEvent e);
        
        public delegate void customviewwhereRowChangeEventHandler(object sender, customviewwhereRowChangeEvent e);
        
        public delegate void columntypesRowChangeEventHandler(object sender, columntypesRowChangeEvent e);
        
        public delegate void connectorRowChangeEventHandler(object sender, connectorRowChangeEvent e);
        
        public delegate void customoperatorRowChangeEventHandler(object sender, customoperatorRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnobjectname;
            
            private DataColumn columnviewname;
            
            private DataColumn columnheader;
            
            private DataColumn columnfooter;
            
            private DataColumn columntopmargin;
            
            private DataColumn columnbottommargin;
            
            private DataColumn columnrightmargin;
            
            private DataColumn columnleftmargin;
            
            private DataColumn columnlefttoright;
            
            private DataColumn columnhcenter;
            
            private DataColumn columnvcenter;
            
            private DataColumn columngridlines;
            
            private DataColumn columnrowheading;
            
            private DataColumn columncolheading;
            
            private DataColumn columnlandscape;
            
            private DataColumn columnscale;
            
            private DataColumn columnfittopage;
            
            private DataColumn columnvpages;
            
            private DataColumn columnhpages;
            
            private DataColumn columnisreal;
            
            private DataColumn columnissystem;
            
            private DataColumn columnstaticfilter;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            internal customviewDataTable() : 
                    base("customview") {
                this.InitClass();
            }
            
            internal customviewDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn objectnameColumn {
                get {
                    return this.columnobjectname;
                }
            }
            
            internal DataColumn viewnameColumn {
                get {
                    return this.columnviewname;
                }
            }
            
            internal DataColumn headerColumn {
                get {
                    return this.columnheader;
                }
            }
            
            internal DataColumn footerColumn {
                get {
                    return this.columnfooter;
                }
            }
            
            internal DataColumn topmarginColumn {
                get {
                    return this.columntopmargin;
                }
            }
            
            internal DataColumn bottommarginColumn {
                get {
                    return this.columnbottommargin;
                }
            }
            
            internal DataColumn rightmarginColumn {
                get {
                    return this.columnrightmargin;
                }
            }
            
            internal DataColumn leftmarginColumn {
                get {
                    return this.columnleftmargin;
                }
            }
            
            internal DataColumn lefttorightColumn {
                get {
                    return this.columnlefttoright;
                }
            }
            
            internal DataColumn hcenterColumn {
                get {
                    return this.columnhcenter;
                }
            }
            
            internal DataColumn vcenterColumn {
                get {
                    return this.columnvcenter;
                }
            }
            
            internal DataColumn gridlinesColumn {
                get {
                    return this.columngridlines;
                }
            }
            
            internal DataColumn rowheadingColumn {
                get {
                    return this.columnrowheading;
                }
            }
            
            internal DataColumn colheadingColumn {
                get {
                    return this.columncolheading;
                }
            }
            
            internal DataColumn landscapeColumn {
                get {
                    return this.columnlandscape;
                }
            }
            
            internal DataColumn scaleColumn {
                get {
                    return this.columnscale;
                }
            }
            
            internal DataColumn fittopageColumn {
                get {
                    return this.columnfittopage;
                }
            }
            
            internal DataColumn vpagesColumn {
                get {
                    return this.columnvpages;
                }
            }
            
            internal DataColumn hpagesColumn {
                get {
                    return this.columnhpages;
                }
            }
            
            internal DataColumn isrealColumn {
                get {
                    return this.columnisreal;
                }
            }
            
            internal DataColumn issystemColumn {
                get {
                    return this.columnissystem;
                }
            }
            
            internal DataColumn staticfilterColumn {
                get {
                    return this.columnstaticfilter;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            public customviewRow this[int index] {
                get {
                    return ((customviewRow)(this.Rows[index]));
                }
            }
            
            public event customviewRowChangeEventHandler customviewRowChanged;
            
            public event customviewRowChangeEventHandler customviewRowChanging;
            
            public event customviewRowChangeEventHandler customviewRowDeleted;
            
            public event customviewRowChangeEventHandler customviewRowDeleting;
            
            public void AddcustomviewRow(customviewRow row) {
                this.Rows.Add(row);
            }
            
            public customviewRow AddcustomviewRow(
                        string objectname, 
                        string viewname, 
                        string header, 
                        string footer, 
                        System.Double topmargin, 
                        System.Double bottommargin, 
                        System.Double rightmargin, 
                        System.Double leftmargin, 
                        short lefttoright, 
                        short hcenter, 
                        short vcenter, 
                        short gridlines, 
                        short rowheading, 
                        short colheading, 
                        short landscape, 
                        short scale, 
                        short fittopage, 
                        short vpages, 
                        short hpages, 
                        string isreal, 
                        string issystem, 
                        string staticfilter, 
                        System.DateTime lastmodtimestamp, 
                        string lastmoduser) {
                customviewRow rowcustomviewRow = ((customviewRow)(this.NewRow()));
                rowcustomviewRow.ItemArray = new object[] {
                        objectname,
                        viewname,
                        header,
                        footer,
                        topmargin,
                        bottommargin,
                        rightmargin,
                        leftmargin,
                        lefttoright,
                        hcenter,
                        vcenter,
                        gridlines,
                        rowheading,
                        colheading,
                        landscape,
                        scale,
                        fittopage,
                        vpages,
                        hpages,
                        isreal,
                        issystem,
                        staticfilter,
                        lastmodtimestamp,
                        lastmoduser};
                this.Rows.Add(rowcustomviewRow);
                return rowcustomviewRow;
            }
            
            public customviewRow FindByobjectnameviewname(string objectname, string viewname) {
                return ((customviewRow)(this.Rows.Find(new object[] {
                            objectname,
                            viewname})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                customviewDataTable cln = ((customviewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new customviewDataTable();
            }
            
            internal void InitVars() {
                this.columnobjectname = this.Columns["objectname"];
                this.columnviewname = this.Columns["viewname"];
                this.columnheader = this.Columns["header"];
                this.columnfooter = this.Columns["footer"];
                this.columntopmargin = this.Columns["topmargin"];
                this.columnbottommargin = this.Columns["bottommargin"];
                this.columnrightmargin = this.Columns["rightmargin"];
                this.columnleftmargin = this.Columns["leftmargin"];
                this.columnlefttoright = this.Columns["lefttoright"];
                this.columnhcenter = this.Columns["hcenter"];
                this.columnvcenter = this.Columns["vcenter"];
                this.columngridlines = this.Columns["gridlines"];
                this.columnrowheading = this.Columns["rowheading"];
                this.columncolheading = this.Columns["colheading"];
                this.columnlandscape = this.Columns["landscape"];
                this.columnscale = this.Columns["scale"];
                this.columnfittopage = this.Columns["fittopage"];
                this.columnvpages = this.Columns["vpages"];
                this.columnhpages = this.Columns["hpages"];
                this.columnisreal = this.Columns["isreal"];
                this.columnissystem = this.Columns["issystem"];
                this.columnstaticfilter = this.Columns["staticfilter"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
            }
            
            private void InitClass() {
                this.columnobjectname = new DataColumn("objectname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnobjectname);
                this.columnviewname = new DataColumn("viewname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnviewname);
                this.columnheader = new DataColumn("header", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnheader);
                this.columnfooter = new DataColumn("footer", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfooter);
                this.columntopmargin = new DataColumn("topmargin", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntopmargin);
                this.columnbottommargin = new DataColumn("bottommargin", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbottommargin);
                this.columnrightmargin = new DataColumn("rightmargin", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrightmargin);
                this.columnleftmargin = new DataColumn("leftmargin", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnleftmargin);
                this.columnlefttoright = new DataColumn("lefttoright", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlefttoright);
                this.columnhcenter = new DataColumn("hcenter", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnhcenter);
                this.columnvcenter = new DataColumn("vcenter", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvcenter);
                this.columngridlines = new DataColumn("gridlines", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columngridlines);
                this.columnrowheading = new DataColumn("rowheading", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrowheading);
                this.columncolheading = new DataColumn("colheading", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncolheading);
                this.columnlandscape = new DataColumn("landscape", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlandscape);
                this.columnscale = new DataColumn("scale", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnscale);
                this.columnfittopage = new DataColumn("fittopage", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfittopage);
                this.columnvpages = new DataColumn("vpages", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvpages);
                this.columnhpages = new DataColumn("hpages", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnhpages);
                this.columnisreal = new DataColumn("isreal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisreal);
                this.columnissystem = new DataColumn("issystem", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnissystem);
                this.columnstaticfilter = new DataColumn("staticfilter", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstaticfilter);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey1", new DataColumn[] {
                                this.columnobjectname,
                                this.columnviewname}, true));
                this.Constraints.Add(new UniqueConstraint("key1", new DataColumn[] {
                                this.columnobjectname}, false));
                this.columnobjectname.AllowDBNull = false;
                this.columnobjectname.Unique = true;
                this.columnviewname.AllowDBNull = false;
            }
            
            public customviewRow NewcustomviewRow() {
                return ((customviewRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new customviewRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(customviewRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.customviewRowChanged != null)) {
                    this.customviewRowChanged(this, new customviewRowChangeEvent(((customviewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.customviewRowChanging != null)) {
                    this.customviewRowChanging(this, new customviewRowChangeEvent(((customviewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.customviewRowDeleted != null)) {
                    this.customviewRowDeleted(this, new customviewRowChangeEvent(((customviewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.customviewRowDeleting != null)) {
                    this.customviewRowDeleting(this, new customviewRowChangeEvent(((customviewRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecustomviewRow(customviewRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewRow : DataRow {
            
            private customviewDataTable tablecustomview;
            
            internal customviewRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecustomview = ((customviewDataTable)(this.Table));
            }
            
            public string objectname {
                get {
                    return ((string)(this[this.tablecustomview.objectnameColumn]));
                }
                set {
                    this[this.tablecustomview.objectnameColumn] = value;
                }
            }
            
            public string viewname {
                get {
                    return ((string)(this[this.tablecustomview.viewnameColumn]));
                }
                set {
                    this[this.tablecustomview.viewnameColumn] = value;
                }
            }
            
            public string header {
                get {
                    try {
                        return ((string)(this[this.tablecustomview.headerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.headerColumn] = value;
                }
            }
            
            public string footer {
                get {
                    try {
                        return ((string)(this[this.tablecustomview.footerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.footerColumn] = value;
                }
            }
            
            public System.Double topmargin {
                get {
                    try {
                        return ((System.Double)(this[this.tablecustomview.topmarginColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.topmarginColumn] = value;
                }
            }
            
            public System.Double bottommargin {
                get {
                    try {
                        return ((System.Double)(this[this.tablecustomview.bottommarginColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.bottommarginColumn] = value;
                }
            }
            
            public System.Double rightmargin {
                get {
                    try {
                        return ((System.Double)(this[this.tablecustomview.rightmarginColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.rightmarginColumn] = value;
                }
            }
            
            public System.Double leftmargin {
                get {
                    try {
                        return ((System.Double)(this[this.tablecustomview.leftmarginColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.leftmarginColumn] = value;
                }
            }
            
            public short lefttoright {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.lefttorightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.lefttorightColumn] = value;
                }
            }
            
            public short hcenter {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.hcenterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.hcenterColumn] = value;
                }
            }
            
            public short vcenter {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.vcenterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.vcenterColumn] = value;
                }
            }
            
            public short gridlines {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.gridlinesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.gridlinesColumn] = value;
                }
            }
            
            public short rowheading {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.rowheadingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.rowheadingColumn] = value;
                }
            }
            
            public short colheading {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.colheadingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.colheadingColumn] = value;
                }
            }
            
            public short landscape {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.landscapeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.landscapeColumn] = value;
                }
            }
            
            public short scale {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.scaleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.scaleColumn] = value;
                }
            }
            
            public short fittopage {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.fittopageColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.fittopageColumn] = value;
                }
            }
            
            public short vpages {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.vpagesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.vpagesColumn] = value;
                }
            }
            
            public short hpages {
                get {
                    try {
                        return ((short)(this[this.tablecustomview.hpagesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.hpagesColumn] = value;
                }
            }
            
            public string isreal {
                get {
                    try {
                        return ((string)(this[this.tablecustomview.isrealColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.isrealColumn] = value;
                }
            }
            
            public string issystem {
                get {
                    try {
                        return ((string)(this[this.tablecustomview.issystemColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.issystemColumn] = value;
                }
            }
            
            public string staticfilter {
                get {
                    try {
                        return ((string)(this[this.tablecustomview.staticfilterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.staticfilterColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecustomview.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablecustomview.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomview.lastmoduserColumn] = value;
                }
            }
            
            public bool IsheaderNull() {
                return this.IsNull(this.tablecustomview.headerColumn);
            }
            
            public void SetheaderNull() {
                this[this.tablecustomview.headerColumn] = System.Convert.DBNull;
            }
            
            public bool IsfooterNull() {
                return this.IsNull(this.tablecustomview.footerColumn);
            }
            
            public void SetfooterNull() {
                this[this.tablecustomview.footerColumn] = System.Convert.DBNull;
            }
            
            public bool IstopmarginNull() {
                return this.IsNull(this.tablecustomview.topmarginColumn);
            }
            
            public void SettopmarginNull() {
                this[this.tablecustomview.topmarginColumn] = System.Convert.DBNull;
            }
            
            public bool IsbottommarginNull() {
                return this.IsNull(this.tablecustomview.bottommarginColumn);
            }
            
            public void SetbottommarginNull() {
                this[this.tablecustomview.bottommarginColumn] = System.Convert.DBNull;
            }
            
            public bool IsrightmarginNull() {
                return this.IsNull(this.tablecustomview.rightmarginColumn);
            }
            
            public void SetrightmarginNull() {
                this[this.tablecustomview.rightmarginColumn] = System.Convert.DBNull;
            }
            
            public bool IsleftmarginNull() {
                return this.IsNull(this.tablecustomview.leftmarginColumn);
            }
            
            public void SetleftmarginNull() {
                this[this.tablecustomview.leftmarginColumn] = System.Convert.DBNull;
            }
            
            public bool IslefttorightNull() {
                return this.IsNull(this.tablecustomview.lefttorightColumn);
            }
            
            public void SetlefttorightNull() {
                this[this.tablecustomview.lefttorightColumn] = System.Convert.DBNull;
            }
            
            public bool IshcenterNull() {
                return this.IsNull(this.tablecustomview.hcenterColumn);
            }
            
            public void SethcenterNull() {
                this[this.tablecustomview.hcenterColumn] = System.Convert.DBNull;
            }
            
            public bool IsvcenterNull() {
                return this.IsNull(this.tablecustomview.vcenterColumn);
            }
            
            public void SetvcenterNull() {
                this[this.tablecustomview.vcenterColumn] = System.Convert.DBNull;
            }
            
            public bool IsgridlinesNull() {
                return this.IsNull(this.tablecustomview.gridlinesColumn);
            }
            
            public void SetgridlinesNull() {
                this[this.tablecustomview.gridlinesColumn] = System.Convert.DBNull;
            }
            
            public bool IsrowheadingNull() {
                return this.IsNull(this.tablecustomview.rowheadingColumn);
            }
            
            public void SetrowheadingNull() {
                this[this.tablecustomview.rowheadingColumn] = System.Convert.DBNull;
            }
            
            public bool IscolheadingNull() {
                return this.IsNull(this.tablecustomview.colheadingColumn);
            }
            
            public void SetcolheadingNull() {
                this[this.tablecustomview.colheadingColumn] = System.Convert.DBNull;
            }
            
            public bool IslandscapeNull() {
                return this.IsNull(this.tablecustomview.landscapeColumn);
            }
            
            public void SetlandscapeNull() {
                this[this.tablecustomview.landscapeColumn] = System.Convert.DBNull;
            }
            
            public bool IsscaleNull() {
                return this.IsNull(this.tablecustomview.scaleColumn);
            }
            
            public void SetscaleNull() {
                this[this.tablecustomview.scaleColumn] = System.Convert.DBNull;
            }
            
            public bool IsfittopageNull() {
                return this.IsNull(this.tablecustomview.fittopageColumn);
            }
            
            public void SetfittopageNull() {
                this[this.tablecustomview.fittopageColumn] = System.Convert.DBNull;
            }
            
            public bool IsvpagesNull() {
                return this.IsNull(this.tablecustomview.vpagesColumn);
            }
            
            public void SetvpagesNull() {
                this[this.tablecustomview.vpagesColumn] = System.Convert.DBNull;
            }
            
            public bool IshpagesNull() {
                return this.IsNull(this.tablecustomview.hpagesColumn);
            }
            
            public void SethpagesNull() {
                this[this.tablecustomview.hpagesColumn] = System.Convert.DBNull;
            }
            
            public bool IsisrealNull() {
                return this.IsNull(this.tablecustomview.isrealColumn);
            }
            
            public void SetisrealNull() {
                this[this.tablecustomview.isrealColumn] = System.Convert.DBNull;
            }
            
            public bool IsissystemNull() {
                return this.IsNull(this.tablecustomview.issystemColumn);
            }
            
            public void SetissystemNull() {
                this[this.tablecustomview.issystemColumn] = System.Convert.DBNull;
            }
            
            public bool IsstaticfilterNull() {
                return this.IsNull(this.tablecustomview.staticfilterColumn);
            }
            
            public void SetstaticfilterNull() {
                this[this.tablecustomview.staticfilterColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablecustomview.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablecustomview.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablecustomview.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablecustomview.lastmoduserColumn] = System.Convert.DBNull;
            }
            
            public customviewcolumnRow[] GetcustomviewcolumnRows() {
                return ((customviewcolumnRow[])(this.GetChildRows(this.Table.ChildRelations["customviewcustomviewcolumn"])));
            }
            
            public customvieworderbyRow[] GetcustomvieworderbyRows() {
                return ((customvieworderbyRow[])(this.GetChildRows(this.Table.ChildRelations["customviewcustomvieworderby"])));
            }
            
            public customviewwhereRow[] GetcustomviewwhereRows() {
                return ((customviewwhereRow[])(this.GetChildRows(this.Table.ChildRelations["customviewcustomviewwhere"])));
            }
            
            public columntypesRow[] GetcolumntypesRows() {
                return ((columntypesRow[])(this.GetChildRows(this.Table.ChildRelations["customviewcolumntypes"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewRowChangeEvent : EventArgs {
            
            private customviewRow eventRow;
            
            private DataRowAction eventAction;
            
            public customviewRowChangeEvent(customviewRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public customviewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewcolumnDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnobjectname;
            
            private DataColumn columnviewname;
            
            private DataColumn columncolnumber;
            
            private DataColumn columnheading;
            
            private DataColumn columncolwidth;
            
            private DataColumn columnvisible;
            
            private DataColumn columnfontname;
            
            private DataColumn columnfontsize;
            
            private DataColumn columnbold;
            
            private DataColumn columnitalic;
            
            private DataColumn columnunderline;
            
            private DataColumn columnstrikeout;
            
            private DataColumn columncolor;
            
            private DataColumn columnformat;
            
            private DataColumn columnisreal;
            
            private DataColumn columnexpression;
            
            private DataColumn columncolname;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            private DataColumn columnsystemtype;
            
            internal customviewcolumnDataTable() : 
                    base("customviewcolumn") {
                this.InitClass();
            }
            
            internal customviewcolumnDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn objectnameColumn {
                get {
                    return this.columnobjectname;
                }
            }
            
            internal DataColumn viewnameColumn {
                get {
                    return this.columnviewname;
                }
            }
            
            internal DataColumn colnumberColumn {
                get {
                    return this.columncolnumber;
                }
            }
            
            internal DataColumn headingColumn {
                get {
                    return this.columnheading;
                }
            }
            
            internal DataColumn colwidthColumn {
                get {
                    return this.columncolwidth;
                }
            }
            
            internal DataColumn visibleColumn {
                get {
                    return this.columnvisible;
                }
            }
            
            internal DataColumn fontnameColumn {
                get {
                    return this.columnfontname;
                }
            }
            
            internal DataColumn fontsizeColumn {
                get {
                    return this.columnfontsize;
                }
            }
            
            internal DataColumn boldColumn {
                get {
                    return this.columnbold;
                }
            }
            
            internal DataColumn italicColumn {
                get {
                    return this.columnitalic;
                }
            }
            
            internal DataColumn underlineColumn {
                get {
                    return this.columnunderline;
                }
            }
            
            internal DataColumn strikeoutColumn {
                get {
                    return this.columnstrikeout;
                }
            }
            
            internal DataColumn colorColumn {
                get {
                    return this.columncolor;
                }
            }
            
            internal DataColumn formatColumn {
                get {
                    return this.columnformat;
                }
            }
            
            internal DataColumn isrealColumn {
                get {
                    return this.columnisreal;
                }
            }
            
            internal DataColumn expressionColumn {
                get {
                    return this.columnexpression;
                }
            }
            
            internal DataColumn colnameColumn {
                get {
                    return this.columncolname;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            internal DataColumn systemtypeColumn {
                get {
                    return this.columnsystemtype;
                }
            }
            
            public customviewcolumnRow this[int index] {
                get {
                    return ((customviewcolumnRow)(this.Rows[index]));
                }
            }
            
            public event customviewcolumnRowChangeEventHandler customviewcolumnRowChanged;
            
            public event customviewcolumnRowChangeEventHandler customviewcolumnRowChanging;
            
            public event customviewcolumnRowChangeEventHandler customviewcolumnRowDeleted;
            
            public event customviewcolumnRowChangeEventHandler customviewcolumnRowDeleting;
            
            public void AddcustomviewcolumnRow(customviewcolumnRow row) {
                this.Rows.Add(row);
            }
            
            public customviewcolumnRow AddcustomviewcolumnRow(
                        string objectname, 
                        string viewname, 
                        short colnumber, 
                        string heading, 
                        int colwidth, 
                        short visible, 
                        string fontname, 
                        short fontsize, 
                        short bold, 
                        short italic, 
                        short underline, 
                        short strikeout, 
                        int color, 
                        string format, 
                        string isreal, 
                        string expression, 
                        string colname, 
                        System.DateTime lastmodtimestamp, 
                        string lastmoduser, 
                        string systemtype) {
                customviewcolumnRow rowcustomviewcolumnRow = ((customviewcolumnRow)(this.NewRow()));
                rowcustomviewcolumnRow.ItemArray = new object[] {
                        objectname,
                        viewname,
                        colnumber,
                        heading,
                        colwidth,
                        visible,
                        fontname,
                        fontsize,
                        bold,
                        italic,
                        underline,
                        strikeout,
                        color,
                        format,
                        isreal,
                        expression,
                        colname,
                        lastmodtimestamp,
                        lastmoduser,
                        systemtype};
                this.Rows.Add(rowcustomviewcolumnRow);
                return rowcustomviewcolumnRow;
            }
            
            public customviewcolumnRow FindByobjectnameviewnamecolnumber(string objectname, string viewname, short colnumber) {
                return ((customviewcolumnRow)(this.Rows.Find(new object[] {
                            objectname,
                            viewname,
                            colnumber})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                customviewcolumnDataTable cln = ((customviewcolumnDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new customviewcolumnDataTable();
            }
            
            internal void InitVars() {
                this.columnobjectname = this.Columns["objectname"];
                this.columnviewname = this.Columns["viewname"];
                this.columncolnumber = this.Columns["colnumber"];
                this.columnheading = this.Columns["heading"];
                this.columncolwidth = this.Columns["colwidth"];
                this.columnvisible = this.Columns["visible"];
                this.columnfontname = this.Columns["fontname"];
                this.columnfontsize = this.Columns["fontsize"];
                this.columnbold = this.Columns["bold"];
                this.columnitalic = this.Columns["italic"];
                this.columnunderline = this.Columns["underline"];
                this.columnstrikeout = this.Columns["strikeout"];
                this.columncolor = this.Columns["color"];
                this.columnformat = this.Columns["format"];
                this.columnisreal = this.Columns["isreal"];
                this.columnexpression = this.Columns["expression"];
                this.columncolname = this.Columns["colname"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
                this.columnsystemtype = this.Columns["systemtype"];
            }
            
            private void InitClass() {
                this.columnobjectname = new DataColumn("objectname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnobjectname);
                this.columnviewname = new DataColumn("viewname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnviewname);
                this.columncolnumber = new DataColumn("colnumber", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncolnumber);
                this.columnheading = new DataColumn("heading", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnheading);
                this.columncolwidth = new DataColumn("colwidth", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncolwidth);
                this.columnvisible = new DataColumn("visible", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvisible);
                this.columnfontname = new DataColumn("fontname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfontname);
                this.columnfontsize = new DataColumn("fontsize", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfontsize);
                this.columnbold = new DataColumn("bold", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbold);
                this.columnitalic = new DataColumn("italic", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnitalic);
                this.columnunderline = new DataColumn("underline", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnunderline);
                this.columnstrikeout = new DataColumn("strikeout", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstrikeout);
                this.columncolor = new DataColumn("color", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncolor);
                this.columnformat = new DataColumn("format", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnformat);
                this.columnisreal = new DataColumn("isreal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisreal);
                this.columnexpression = new DataColumn("expression", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnexpression);
                this.columncolname = new DataColumn("colname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncolname);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.columnsystemtype = new DataColumn("systemtype", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsystemtype);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey2", new DataColumn[] {
                                this.columnobjectname,
                                this.columnviewname,
                                this.columncolnumber}, true));
                this.columnobjectname.AllowDBNull = false;
                this.columnviewname.AllowDBNull = false;
                this.columncolnumber.AllowDBNull = false;
            }
            
            public customviewcolumnRow NewcustomviewcolumnRow() {
                return ((customviewcolumnRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new customviewcolumnRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(customviewcolumnRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.customviewcolumnRowChanged != null)) {
                    this.customviewcolumnRowChanged(this, new customviewcolumnRowChangeEvent(((customviewcolumnRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.customviewcolumnRowChanging != null)) {
                    this.customviewcolumnRowChanging(this, new customviewcolumnRowChangeEvent(((customviewcolumnRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.customviewcolumnRowDeleted != null)) {
                    this.customviewcolumnRowDeleted(this, new customviewcolumnRowChangeEvent(((customviewcolumnRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.customviewcolumnRowDeleting != null)) {
                    this.customviewcolumnRowDeleting(this, new customviewcolumnRowChangeEvent(((customviewcolumnRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecustomviewcolumnRow(customviewcolumnRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewcolumnRow : DataRow {
            
            private customviewcolumnDataTable tablecustomviewcolumn;
            
            internal customviewcolumnRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecustomviewcolumn = ((customviewcolumnDataTable)(this.Table));
            }
            
            public string objectname {
                get {
                    return ((string)(this[this.tablecustomviewcolumn.objectnameColumn]));
                }
                set {
                    this[this.tablecustomviewcolumn.objectnameColumn] = value;
                }
            }
            
            public string viewname {
                get {
                    return ((string)(this[this.tablecustomviewcolumn.viewnameColumn]));
                }
                set {
                    this[this.tablecustomviewcolumn.viewnameColumn] = value;
                }
            }
            
            public short colnumber {
                get {
                    return ((short)(this[this.tablecustomviewcolumn.colnumberColumn]));
                }
                set {
                    this[this.tablecustomviewcolumn.colnumberColumn] = value;
                }
            }
            
            public string heading {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewcolumn.headingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.headingColumn] = value;
                }
            }
            
            public int colwidth {
                get {
                    try {
                        return ((int)(this[this.tablecustomviewcolumn.colwidthColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.colwidthColumn] = value;
                }
            }
            
            public short visible {
                get {
                    try {
                        return ((short)(this[this.tablecustomviewcolumn.visibleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.visibleColumn] = value;
                }
            }
            
            public string fontname {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewcolumn.fontnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.fontnameColumn] = value;
                }
            }
            
            public short fontsize {
                get {
                    try {
                        return ((short)(this[this.tablecustomviewcolumn.fontsizeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.fontsizeColumn] = value;
                }
            }
            
            public short bold {
                get {
                    try {
                        return ((short)(this[this.tablecustomviewcolumn.boldColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.boldColumn] = value;
                }
            }
            
            public short italic {
                get {
                    try {
                        return ((short)(this[this.tablecustomviewcolumn.italicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.italicColumn] = value;
                }
            }
            
            public short underline {
                get {
                    try {
                        return ((short)(this[this.tablecustomviewcolumn.underlineColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.underlineColumn] = value;
                }
            }
            
            public short strikeout {
                get {
                    try {
                        return ((short)(this[this.tablecustomviewcolumn.strikeoutColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.strikeoutColumn] = value;
                }
            }
            
            public int color {
                get {
                    try {
                        return ((int)(this[this.tablecustomviewcolumn.colorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.colorColumn] = value;
                }
            }
            
            public string format {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewcolumn.formatColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.formatColumn] = value;
                }
            }
            
            public string isreal {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewcolumn.isrealColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.isrealColumn] = value;
                }
            }
            
            public string expression {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewcolumn.expressionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.expressionColumn] = value;
                }
            }
            
            public string colname {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewcolumn.colnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.colnameColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecustomviewcolumn.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewcolumn.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.lastmoduserColumn] = value;
                }
            }
            
            public string systemtype {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewcolumn.systemtypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewcolumn.systemtypeColumn] = value;
                }
            }
            
            public customviewRow customviewRowParent {
                get {
                    return ((customviewRow)(this.GetParentRow(this.Table.ParentRelations["customviewcustomviewcolumn"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["customviewcustomviewcolumn"]);
                }
            }
            
            public bool IsheadingNull() {
                return this.IsNull(this.tablecustomviewcolumn.headingColumn);
            }
            
            public void SetheadingNull() {
                this[this.tablecustomviewcolumn.headingColumn] = System.Convert.DBNull;
            }
            
            public bool IscolwidthNull() {
                return this.IsNull(this.tablecustomviewcolumn.colwidthColumn);
            }
            
            public void SetcolwidthNull() {
                this[this.tablecustomviewcolumn.colwidthColumn] = System.Convert.DBNull;
            }
            
            public bool IsvisibleNull() {
                return this.IsNull(this.tablecustomviewcolumn.visibleColumn);
            }
            
            public void SetvisibleNull() {
                this[this.tablecustomviewcolumn.visibleColumn] = System.Convert.DBNull;
            }
            
            public bool IsfontnameNull() {
                return this.IsNull(this.tablecustomviewcolumn.fontnameColumn);
            }
            
            public void SetfontnameNull() {
                this[this.tablecustomviewcolumn.fontnameColumn] = System.Convert.DBNull;
            }
            
            public bool IsfontsizeNull() {
                return this.IsNull(this.tablecustomviewcolumn.fontsizeColumn);
            }
            
            public void SetfontsizeNull() {
                this[this.tablecustomviewcolumn.fontsizeColumn] = System.Convert.DBNull;
            }
            
            public bool IsboldNull() {
                return this.IsNull(this.tablecustomviewcolumn.boldColumn);
            }
            
            public void SetboldNull() {
                this[this.tablecustomviewcolumn.boldColumn] = System.Convert.DBNull;
            }
            
            public bool IsitalicNull() {
                return this.IsNull(this.tablecustomviewcolumn.italicColumn);
            }
            
            public void SetitalicNull() {
                this[this.tablecustomviewcolumn.italicColumn] = System.Convert.DBNull;
            }
            
            public bool IsunderlineNull() {
                return this.IsNull(this.tablecustomviewcolumn.underlineColumn);
            }
            
            public void SetunderlineNull() {
                this[this.tablecustomviewcolumn.underlineColumn] = System.Convert.DBNull;
            }
            
            public bool IsstrikeoutNull() {
                return this.IsNull(this.tablecustomviewcolumn.strikeoutColumn);
            }
            
            public void SetstrikeoutNull() {
                this[this.tablecustomviewcolumn.strikeoutColumn] = System.Convert.DBNull;
            }
            
            public bool IscolorNull() {
                return this.IsNull(this.tablecustomviewcolumn.colorColumn);
            }
            
            public void SetcolorNull() {
                this[this.tablecustomviewcolumn.colorColumn] = System.Convert.DBNull;
            }
            
            public bool IsformatNull() {
                return this.IsNull(this.tablecustomviewcolumn.formatColumn);
            }
            
            public void SetformatNull() {
                this[this.tablecustomviewcolumn.formatColumn] = System.Convert.DBNull;
            }
            
            public bool IsisrealNull() {
                return this.IsNull(this.tablecustomviewcolumn.isrealColumn);
            }
            
            public void SetisrealNull() {
                this[this.tablecustomviewcolumn.isrealColumn] = System.Convert.DBNull;
            }
            
            public bool IsexpressionNull() {
                return this.IsNull(this.tablecustomviewcolumn.expressionColumn);
            }
            
            public void SetexpressionNull() {
                this[this.tablecustomviewcolumn.expressionColumn] = System.Convert.DBNull;
            }
            
            public bool IscolnameNull() {
                return this.IsNull(this.tablecustomviewcolumn.colnameColumn);
            }
            
            public void SetcolnameNull() {
                this[this.tablecustomviewcolumn.colnameColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablecustomviewcolumn.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablecustomviewcolumn.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablecustomviewcolumn.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablecustomviewcolumn.lastmoduserColumn] = System.Convert.DBNull;
            }
            
            public bool IssystemtypeNull() {
                return this.IsNull(this.tablecustomviewcolumn.systemtypeColumn);
            }
            
            public void SetsystemtypeNull() {
                this[this.tablecustomviewcolumn.systemtypeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewcolumnRowChangeEvent : EventArgs {
            
            private customviewcolumnRow eventRow;
            
            private DataRowAction eventAction;
            
            public customviewcolumnRowChangeEvent(customviewcolumnRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public customviewcolumnRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customvieworderbyDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnobjectname;
            
            private DataColumn columnviewname;
            
            private DataColumn columnperiodnumber;
            
            private DataColumn columncolumnname;
            
            private DataColumn columndirection;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            internal customvieworderbyDataTable() : 
                    base("customvieworderby") {
                this.InitClass();
            }
            
            internal customvieworderbyDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn objectnameColumn {
                get {
                    return this.columnobjectname;
                }
            }
            
            internal DataColumn viewnameColumn {
                get {
                    return this.columnviewname;
                }
            }
            
            internal DataColumn periodnumberColumn {
                get {
                    return this.columnperiodnumber;
                }
            }
            
            internal DataColumn columnnameColumn {
                get {
                    return this.columncolumnname;
                }
            }
            
            internal DataColumn directionColumn {
                get {
                    return this.columndirection;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            public customvieworderbyRow this[int index] {
                get {
                    return ((customvieworderbyRow)(this.Rows[index]));
                }
            }
            
            public event customvieworderbyRowChangeEventHandler customvieworderbyRowChanged;
            
            public event customvieworderbyRowChangeEventHandler customvieworderbyRowChanging;
            
            public event customvieworderbyRowChangeEventHandler customvieworderbyRowDeleted;
            
            public event customvieworderbyRowChangeEventHandler customvieworderbyRowDeleting;
            
            public void AddcustomvieworderbyRow(customvieworderbyRow row) {
                this.Rows.Add(row);
            }
            
            public customvieworderbyRow AddcustomvieworderbyRow(string objectname, string viewname, short periodnumber, string columnname, int direction, System.DateTime lastmodtimestamp, string lastmoduser) {
                customvieworderbyRow rowcustomvieworderbyRow = ((customvieworderbyRow)(this.NewRow()));
                rowcustomvieworderbyRow.ItemArray = new object[] {
                        objectname,
                        viewname,
                        periodnumber,
                        columnname,
                        direction,
                        lastmodtimestamp,
                        lastmoduser};
                this.Rows.Add(rowcustomvieworderbyRow);
                return rowcustomvieworderbyRow;
            }
            
            public customvieworderbyRow FindByobjectnameviewnameperiodnumber(string objectname, string viewname, short periodnumber) {
                return ((customvieworderbyRow)(this.Rows.Find(new object[] {
                            objectname,
                            viewname,
                            periodnumber})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                customvieworderbyDataTable cln = ((customvieworderbyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new customvieworderbyDataTable();
            }
            
            internal void InitVars() {
                this.columnobjectname = this.Columns["objectname"];
                this.columnviewname = this.Columns["viewname"];
                this.columnperiodnumber = this.Columns["periodnumber"];
                this.columncolumnname = this.Columns["columnname"];
                this.columndirection = this.Columns["direction"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
            }
            
            private void InitClass() {
                this.columnobjectname = new DataColumn("objectname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnobjectname);
                this.columnviewname = new DataColumn("viewname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnviewname);
                this.columnperiodnumber = new DataColumn("periodnumber", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnperiodnumber);
                this.columncolumnname = new DataColumn("columnname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncolumnname);
                this.columndirection = new DataColumn("direction", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndirection);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey3", new DataColumn[] {
                                this.columnobjectname,
                                this.columnviewname,
                                this.columnperiodnumber}, true));
                this.columnobjectname.AllowDBNull = false;
                this.columnviewname.AllowDBNull = false;
                this.columnperiodnumber.AllowDBNull = false;
            }
            
            public customvieworderbyRow NewcustomvieworderbyRow() {
                return ((customvieworderbyRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new customvieworderbyRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(customvieworderbyRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.customvieworderbyRowChanged != null)) {
                    this.customvieworderbyRowChanged(this, new customvieworderbyRowChangeEvent(((customvieworderbyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.customvieworderbyRowChanging != null)) {
                    this.customvieworderbyRowChanging(this, new customvieworderbyRowChangeEvent(((customvieworderbyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.customvieworderbyRowDeleted != null)) {
                    this.customvieworderbyRowDeleted(this, new customvieworderbyRowChangeEvent(((customvieworderbyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.customvieworderbyRowDeleting != null)) {
                    this.customvieworderbyRowDeleting(this, new customvieworderbyRowChangeEvent(((customvieworderbyRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecustomvieworderbyRow(customvieworderbyRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customvieworderbyRow : DataRow {
            
            private customvieworderbyDataTable tablecustomvieworderby;
            
            internal customvieworderbyRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecustomvieworderby = ((customvieworderbyDataTable)(this.Table));
            }
            
            public string objectname {
                get {
                    return ((string)(this[this.tablecustomvieworderby.objectnameColumn]));
                }
                set {
                    this[this.tablecustomvieworderby.objectnameColumn] = value;
                }
            }
            
            public string viewname {
                get {
                    return ((string)(this[this.tablecustomvieworderby.viewnameColumn]));
                }
                set {
                    this[this.tablecustomvieworderby.viewnameColumn] = value;
                }
            }
            
            public short periodnumber {
                get {
                    return ((short)(this[this.tablecustomvieworderby.periodnumberColumn]));
                }
                set {
                    this[this.tablecustomvieworderby.periodnumberColumn] = value;
                }
            }
            
            public string columnname {
                get {
                    try {
                        return ((string)(this[this.tablecustomvieworderby.columnnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomvieworderby.columnnameColumn] = value;
                }
            }
            
            public int direction {
                get {
                    try {
                        return ((int)(this[this.tablecustomvieworderby.directionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomvieworderby.directionColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecustomvieworderby.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomvieworderby.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablecustomvieworderby.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomvieworderby.lastmoduserColumn] = value;
                }
            }
            
            public customviewRow customviewRowParent {
                get {
                    return ((customviewRow)(this.GetParentRow(this.Table.ParentRelations["customviewcustomvieworderby"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["customviewcustomvieworderby"]);
                }
            }
            
            public bool IscolumnnameNull() {
                return this.IsNull(this.tablecustomvieworderby.columnnameColumn);
            }
            
            public void SetcolumnnameNull() {
                this[this.tablecustomvieworderby.columnnameColumn] = System.Convert.DBNull;
            }
            
            public bool IsdirectionNull() {
                return this.IsNull(this.tablecustomvieworderby.directionColumn);
            }
            
            public void SetdirectionNull() {
                this[this.tablecustomvieworderby.directionColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablecustomvieworderby.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablecustomvieworderby.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablecustomvieworderby.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablecustomvieworderby.lastmoduserColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customvieworderbyRowChangeEvent : EventArgs {
            
            private customvieworderbyRow eventRow;
            
            private DataRowAction eventAction;
            
            public customvieworderbyRowChangeEvent(customvieworderbyRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public customvieworderbyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewwhereDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnobjectname;
            
            private DataColumn columnviewname;
            
            private DataColumn columnperiodnumber;
            
            private DataColumn columnconnector;
            
            private DataColumn columncolumnname;
            
            private DataColumn column_operator;
            
            private DataColumn columnvalue;
            
            private DataColumn columnruntime;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            internal customviewwhereDataTable() : 
                    base("customviewwhere") {
                this.InitClass();
            }
            
            internal customviewwhereDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn objectnameColumn {
                get {
                    return this.columnobjectname;
                }
            }
            
            internal DataColumn viewnameColumn {
                get {
                    return this.columnviewname;
                }
            }
            
            internal DataColumn periodnumberColumn {
                get {
                    return this.columnperiodnumber;
                }
            }
            
            internal DataColumn connectorColumn {
                get {
                    return this.columnconnector;
                }
            }
            
            internal DataColumn columnnameColumn {
                get {
                    return this.columncolumnname;
                }
            }
            
            internal DataColumn _operatorColumn {
                get {
                    return this.column_operator;
                }
            }
            
            internal DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            internal DataColumn runtimeColumn {
                get {
                    return this.columnruntime;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            public customviewwhereRow this[int index] {
                get {
                    return ((customviewwhereRow)(this.Rows[index]));
                }
            }
            
            public event customviewwhereRowChangeEventHandler customviewwhereRowChanged;
            
            public event customviewwhereRowChangeEventHandler customviewwhereRowChanging;
            
            public event customviewwhereRowChangeEventHandler customviewwhereRowDeleted;
            
            public event customviewwhereRowChangeEventHandler customviewwhereRowDeleting;
            
            public void AddcustomviewwhereRow(customviewwhereRow row) {
                this.Rows.Add(row);
            }
            
            public customviewwhereRow AddcustomviewwhereRow(string objectname, string viewname, short periodnumber, connectorRow parentconnectorRowByconnectorcustomviewwhere, string columnname, customoperatorRow parentcustomoperatorRowBycustomoperatorcustomviewwhere, string value, int runtime, System.DateTime lastmodtimestamp, string lastmoduser) {
                customviewwhereRow rowcustomviewwhereRow = ((customviewwhereRow)(this.NewRow()));
                rowcustomviewwhereRow.ItemArray = new object[] {
                        objectname,
                        viewname,
                        periodnumber,
                        parentconnectorRowByconnectorcustomviewwhere[0],
                        columnname,
                        parentcustomoperatorRowBycustomoperatorcustomviewwhere[0],
                        value,
                        runtime,
                        lastmodtimestamp,
                        lastmoduser};
                this.Rows.Add(rowcustomviewwhereRow);
                return rowcustomviewwhereRow;
            }
            
            public customviewwhereRow FindByobjectnameviewnameperiodnumber(string objectname, string viewname, short periodnumber) {
                return ((customviewwhereRow)(this.Rows.Find(new object[] {
                            objectname,
                            viewname,
                            periodnumber})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                customviewwhereDataTable cln = ((customviewwhereDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new customviewwhereDataTable();
            }
            
            internal void InitVars() {
                this.columnobjectname = this.Columns["objectname"];
                this.columnviewname = this.Columns["viewname"];
                this.columnperiodnumber = this.Columns["periodnumber"];
                this.columnconnector = this.Columns["connector"];
                this.columncolumnname = this.Columns["columnname"];
                this.column_operator = this.Columns["operator"];
                this.columnvalue = this.Columns["value"];
                this.columnruntime = this.Columns["runtime"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
            }
            
            private void InitClass() {
                this.columnobjectname = new DataColumn("objectname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnobjectname);
                this.columnviewname = new DataColumn("viewname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnviewname);
                this.columnperiodnumber = new DataColumn("periodnumber", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnperiodnumber);
                this.columnconnector = new DataColumn("connector", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnconnector);
                this.columncolumnname = new DataColumn("columnname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncolumnname);
                this.column_operator = new DataColumn("operator", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column_operator);
                this.columnvalue = new DataColumn("value", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvalue);
                this.columnruntime = new DataColumn("runtime", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnruntime);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey4", new DataColumn[] {
                                this.columnobjectname,
                                this.columnviewname,
                                this.columnperiodnumber}, true));
                this.columnobjectname.AllowDBNull = false;
                this.columnviewname.AllowDBNull = false;
                this.columnperiodnumber.AllowDBNull = false;
            }
            
            public customviewwhereRow NewcustomviewwhereRow() {
                return ((customviewwhereRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new customviewwhereRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(customviewwhereRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.customviewwhereRowChanged != null)) {
                    this.customviewwhereRowChanged(this, new customviewwhereRowChangeEvent(((customviewwhereRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.customviewwhereRowChanging != null)) {
                    this.customviewwhereRowChanging(this, new customviewwhereRowChangeEvent(((customviewwhereRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.customviewwhereRowDeleted != null)) {
                    this.customviewwhereRowDeleted(this, new customviewwhereRowChangeEvent(((customviewwhereRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.customviewwhereRowDeleting != null)) {
                    this.customviewwhereRowDeleting(this, new customviewwhereRowChangeEvent(((customviewwhereRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecustomviewwhereRow(customviewwhereRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewwhereRow : DataRow {
            
            private customviewwhereDataTable tablecustomviewwhere;
            
            internal customviewwhereRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecustomviewwhere = ((customviewwhereDataTable)(this.Table));
            }
            
            public string objectname {
                get {
                    return ((string)(this[this.tablecustomviewwhere.objectnameColumn]));
                }
                set {
                    this[this.tablecustomviewwhere.objectnameColumn] = value;
                }
            }
            
            public string viewname {
                get {
                    return ((string)(this[this.tablecustomviewwhere.viewnameColumn]));
                }
                set {
                    this[this.tablecustomviewwhere.viewnameColumn] = value;
                }
            }
            
            public short periodnumber {
                get {
                    return ((short)(this[this.tablecustomviewwhere.periodnumberColumn]));
                }
                set {
                    this[this.tablecustomviewwhere.periodnumberColumn] = value;
                }
            }
            
            public int connector {
                get {
                    try {
                        return ((int)(this[this.tablecustomviewwhere.connectorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewwhere.connectorColumn] = value;
                }
            }
            
            public string columnname {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewwhere.columnnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewwhere.columnnameColumn] = value;
                }
            }
            
            public int _operator {
                get {
                    try {
                        return ((int)(this[this.tablecustomviewwhere._operatorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewwhere._operatorColumn] = value;
                }
            }
            
            public string value {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewwhere.valueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewwhere.valueColumn] = value;
                }
            }
            
            public int runtime {
                get {
                    try {
                        return ((int)(this[this.tablecustomviewwhere.runtimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewwhere.runtimeColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecustomviewwhere.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewwhere.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablecustomviewwhere.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomviewwhere.lastmoduserColumn] = value;
                }
            }
            
            public customviewRow customviewRowParent {
                get {
                    return ((customviewRow)(this.GetParentRow(this.Table.ParentRelations["customviewcustomviewwhere"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["customviewcustomviewwhere"]);
                }
            }
            
            public connectorRow connectorRow {
                get {
                    return ((connectorRow)(this.GetParentRow(this.Table.ParentRelations["connectorcustomviewwhere"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["connectorcustomviewwhere"]);
                }
            }
            
            public customoperatorRow customoperatorRow {
                get {
                    return ((customoperatorRow)(this.GetParentRow(this.Table.ParentRelations["customoperatorcustomviewwhere"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["customoperatorcustomviewwhere"]);
                }
            }
            
            public bool IsconnectorNull() {
                return this.IsNull(this.tablecustomviewwhere.connectorColumn);
            }
            
            public void SetconnectorNull() {
                this[this.tablecustomviewwhere.connectorColumn] = System.Convert.DBNull;
            }
            
            public bool IscolumnnameNull() {
                return this.IsNull(this.tablecustomviewwhere.columnnameColumn);
            }
            
            public void SetcolumnnameNull() {
                this[this.tablecustomviewwhere.columnnameColumn] = System.Convert.DBNull;
            }
            
            public bool Is_operatorNull() {
                return this.IsNull(this.tablecustomviewwhere._operatorColumn);
            }
            
            public void Set_operatorNull() {
                this[this.tablecustomviewwhere._operatorColumn] = System.Convert.DBNull;
            }
            
            public bool IsvalueNull() {
                return this.IsNull(this.tablecustomviewwhere.valueColumn);
            }
            
            public void SetvalueNull() {
                this[this.tablecustomviewwhere.valueColumn] = System.Convert.DBNull;
            }
            
            public bool IsruntimeNull() {
                return this.IsNull(this.tablecustomviewwhere.runtimeColumn);
            }
            
            public void SetruntimeNull() {
                this[this.tablecustomviewwhere.runtimeColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablecustomviewwhere.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablecustomviewwhere.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablecustomviewwhere.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablecustomviewwhere.lastmoduserColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customviewwhereRowChangeEvent : EventArgs {
            
            private customviewwhereRow eventRow;
            
            private DataRowAction eventAction;
            
            public customviewwhereRowChangeEvent(customviewwhereRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public customviewwhereRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class columntypesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntablename;
            
            private DataColumn columnfield;
            
            private DataColumn columniskey;
            
            private DataColumn columnsqltype;
            
            private DataColumn columncol_len;
            
            private DataColumn columncol_precision;
            
            private DataColumn columncol_scale;
            
            private DataColumn columnsystemtype;
            
            private DataColumn columnsqldeclaration;
            
            private DataColumn columnallownull;
            
            private DataColumn columndefaultvalue;
            
            private DataColumn columnformat;
            
            private DataColumn columndenynull;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            internal columntypesDataTable() : 
                    base("columntypes") {
                this.InitClass();
            }
            
            internal columntypesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn tablenameColumn {
                get {
                    return this.columntablename;
                }
            }
            
            internal DataColumn fieldColumn {
                get {
                    return this.columnfield;
                }
            }
            
            internal DataColumn iskeyColumn {
                get {
                    return this.columniskey;
                }
            }
            
            internal DataColumn sqltypeColumn {
                get {
                    return this.columnsqltype;
                }
            }
            
            internal DataColumn col_lenColumn {
                get {
                    return this.columncol_len;
                }
            }
            
            internal DataColumn col_precisionColumn {
                get {
                    return this.columncol_precision;
                }
            }
            
            internal DataColumn col_scaleColumn {
                get {
                    return this.columncol_scale;
                }
            }
            
            internal DataColumn systemtypeColumn {
                get {
                    return this.columnsystemtype;
                }
            }
            
            internal DataColumn sqldeclarationColumn {
                get {
                    return this.columnsqldeclaration;
                }
            }
            
            internal DataColumn allownullColumn {
                get {
                    return this.columnallownull;
                }
            }
            
            internal DataColumn defaultvalueColumn {
                get {
                    return this.columndefaultvalue;
                }
            }
            
            internal DataColumn formatColumn {
                get {
                    return this.columnformat;
                }
            }
            
            internal DataColumn denynullColumn {
                get {
                    return this.columndenynull;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            public columntypesRow this[int index] {
                get {
                    return ((columntypesRow)(this.Rows[index]));
                }
            }
            
            public event columntypesRowChangeEventHandler columntypesRowChanged;
            
            public event columntypesRowChangeEventHandler columntypesRowChanging;
            
            public event columntypesRowChangeEventHandler columntypesRowDeleted;
            
            public event columntypesRowChangeEventHandler columntypesRowDeleting;
            
            public void AddcolumntypesRow(columntypesRow row) {
                this.Rows.Add(row);
            }
            
            public columntypesRow AddcolumntypesRow(customviewRow parentcustomviewRowBycustomviewcolumntypes, string field, string iskey, string sqltype, int col_len, int col_precision, int col_scale, string systemtype, string sqldeclaration, string allownull, string defaultvalue, string format, string denynull, System.DateTime lastmodtimestamp, string lastmoduser) {
                columntypesRow rowcolumntypesRow = ((columntypesRow)(this.NewRow()));
                rowcolumntypesRow.ItemArray = new object[] {
                        parentcustomviewRowBycustomviewcolumntypes[0],
                        field,
                        iskey,
                        sqltype,
                        col_len,
                        col_precision,
                        col_scale,
                        systemtype,
                        sqldeclaration,
                        allownull,
                        defaultvalue,
                        format,
                        denynull,
                        lastmodtimestamp,
                        lastmoduser};
                this.Rows.Add(rowcolumntypesRow);
                return rowcolumntypesRow;
            }
            
            public columntypesRow FindBytablenamefield(string tablename, string field) {
                return ((columntypesRow)(this.Rows.Find(new object[] {
                            tablename,
                            field})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                columntypesDataTable cln = ((columntypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new columntypesDataTable();
            }
            
            internal void InitVars() {
                this.columntablename = this.Columns["tablename"];
                this.columnfield = this.Columns["field"];
                this.columniskey = this.Columns["iskey"];
                this.columnsqltype = this.Columns["sqltype"];
                this.columncol_len = this.Columns["col_len"];
                this.columncol_precision = this.Columns["col_precision"];
                this.columncol_scale = this.Columns["col_scale"];
                this.columnsystemtype = this.Columns["systemtype"];
                this.columnsqldeclaration = this.Columns["sqldeclaration"];
                this.columnallownull = this.Columns["allownull"];
                this.columndefaultvalue = this.Columns["defaultvalue"];
                this.columnformat = this.Columns["format"];
                this.columndenynull = this.Columns["denynull"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
            }
            
            private void InitClass() {
                this.columntablename = new DataColumn("tablename", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntablename);
                this.columnfield = new DataColumn("field", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfield);
                this.columniskey = new DataColumn("iskey", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columniskey);
                this.columnsqltype = new DataColumn("sqltype", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsqltype);
                this.columncol_len = new DataColumn("col_len", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncol_len);
                this.columncol_precision = new DataColumn("col_precision", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncol_precision);
                this.columncol_scale = new DataColumn("col_scale", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncol_scale);
                this.columnsystemtype = new DataColumn("systemtype", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsystemtype);
                this.columnsqldeclaration = new DataColumn("sqldeclaration", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsqldeclaration);
                this.columnallownull = new DataColumn("allownull", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnallownull);
                this.columndefaultvalue = new DataColumn("defaultvalue", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndefaultvalue);
                this.columnformat = new DataColumn("format", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnformat);
                this.columndenynull = new DataColumn("denynull", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndenynull);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey5", new DataColumn[] {
                                this.columntablename,
                                this.columnfield}, true));
                this.columntablename.AllowDBNull = false;
                this.columnfield.AllowDBNull = false;
                this.columniskey.AllowDBNull = false;
                this.columnsqltype.AllowDBNull = false;
                this.columnsqldeclaration.AllowDBNull = false;
                this.columnallownull.AllowDBNull = false;
                this.columndenynull.AllowDBNull = false;
            }
            
            public columntypesRow NewcolumntypesRow() {
                return ((columntypesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new columntypesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(columntypesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.columntypesRowChanged != null)) {
                    this.columntypesRowChanged(this, new columntypesRowChangeEvent(((columntypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.columntypesRowChanging != null)) {
                    this.columntypesRowChanging(this, new columntypesRowChangeEvent(((columntypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.columntypesRowDeleted != null)) {
                    this.columntypesRowDeleted(this, new columntypesRowChangeEvent(((columntypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.columntypesRowDeleting != null)) {
                    this.columntypesRowDeleting(this, new columntypesRowChangeEvent(((columntypesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecolumntypesRow(columntypesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class columntypesRow : DataRow {
            
            private columntypesDataTable tablecolumntypes;
            
            internal columntypesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecolumntypes = ((columntypesDataTable)(this.Table));
            }
            
            public string tablename {
                get {
                    return ((string)(this[this.tablecolumntypes.tablenameColumn]));
                }
                set {
                    this[this.tablecolumntypes.tablenameColumn] = value;
                }
            }
            
            public string field {
                get {
                    return ((string)(this[this.tablecolumntypes.fieldColumn]));
                }
                set {
                    this[this.tablecolumntypes.fieldColumn] = value;
                }
            }
            
            public string iskey {
                get {
                    return ((string)(this[this.tablecolumntypes.iskeyColumn]));
                }
                set {
                    this[this.tablecolumntypes.iskeyColumn] = value;
                }
            }
            
            public string sqltype {
                get {
                    return ((string)(this[this.tablecolumntypes.sqltypeColumn]));
                }
                set {
                    this[this.tablecolumntypes.sqltypeColumn] = value;
                }
            }
            
            public int col_len {
                get {
                    try {
                        return ((int)(this[this.tablecolumntypes.col_lenColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecolumntypes.col_lenColumn] = value;
                }
            }
            
            public int col_precision {
                get {
                    try {
                        return ((int)(this[this.tablecolumntypes.col_precisionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecolumntypes.col_precisionColumn] = value;
                }
            }
            
            public int col_scale {
                get {
                    try {
                        return ((int)(this[this.tablecolumntypes.col_scaleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecolumntypes.col_scaleColumn] = value;
                }
            }
            
            public string systemtype {
                get {
                    try {
                        return ((string)(this[this.tablecolumntypes.systemtypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecolumntypes.systemtypeColumn] = value;
                }
            }
            
            public string sqldeclaration {
                get {
                    return ((string)(this[this.tablecolumntypes.sqldeclarationColumn]));
                }
                set {
                    this[this.tablecolumntypes.sqldeclarationColumn] = value;
                }
            }
            
            public string allownull {
                get {
                    return ((string)(this[this.tablecolumntypes.allownullColumn]));
                }
                set {
                    this[this.tablecolumntypes.allownullColumn] = value;
                }
            }
            
            public string defaultvalue {
                get {
                    try {
                        return ((string)(this[this.tablecolumntypes.defaultvalueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecolumntypes.defaultvalueColumn] = value;
                }
            }
            
            public string format {
                get {
                    try {
                        return ((string)(this[this.tablecolumntypes.formatColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecolumntypes.formatColumn] = value;
                }
            }
            
            public string denynull {
                get {
                    return ((string)(this[this.tablecolumntypes.denynullColumn]));
                }
                set {
                    this[this.tablecolumntypes.denynullColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecolumntypes.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecolumntypes.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablecolumntypes.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecolumntypes.lastmoduserColumn] = value;
                }
            }
            
            public customviewRow customviewRow {
                get {
                    return ((customviewRow)(this.GetParentRow(this.Table.ParentRelations["customviewcolumntypes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["customviewcolumntypes"]);
                }
            }
            
            public bool Iscol_lenNull() {
                return this.IsNull(this.tablecolumntypes.col_lenColumn);
            }
            
            public void Setcol_lenNull() {
                this[this.tablecolumntypes.col_lenColumn] = System.Convert.DBNull;
            }
            
            public bool Iscol_precisionNull() {
                return this.IsNull(this.tablecolumntypes.col_precisionColumn);
            }
            
            public void Setcol_precisionNull() {
                this[this.tablecolumntypes.col_precisionColumn] = System.Convert.DBNull;
            }
            
            public bool Iscol_scaleNull() {
                return this.IsNull(this.tablecolumntypes.col_scaleColumn);
            }
            
            public void Setcol_scaleNull() {
                this[this.tablecolumntypes.col_scaleColumn] = System.Convert.DBNull;
            }
            
            public bool IssystemtypeNull() {
                return this.IsNull(this.tablecolumntypes.systemtypeColumn);
            }
            
            public void SetsystemtypeNull() {
                this[this.tablecolumntypes.systemtypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsdefaultvalueNull() {
                return this.IsNull(this.tablecolumntypes.defaultvalueColumn);
            }
            
            public void SetdefaultvalueNull() {
                this[this.tablecolumntypes.defaultvalueColumn] = System.Convert.DBNull;
            }
            
            public bool IsformatNull() {
                return this.IsNull(this.tablecolumntypes.formatColumn);
            }
            
            public void SetformatNull() {
                this[this.tablecolumntypes.formatColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablecolumntypes.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablecolumntypes.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablecolumntypes.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablecolumntypes.lastmoduserColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class columntypesRowChangeEvent : EventArgs {
            
            private columntypesRow eventRow;
            
            private DataRowAction eventAction;
            
            public columntypesRowChangeEvent(columntypesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public columntypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class connectorDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidconnector;
            
            private DataColumn columnname;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            internal connectorDataTable() : 
                    base("connector") {
                this.InitClass();
            }
            
            internal connectorDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idconnectorColumn {
                get {
                    return this.columnidconnector;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            public connectorRow this[int index] {
                get {
                    return ((connectorRow)(this.Rows[index]));
                }
            }
            
            public event connectorRowChangeEventHandler connectorRowChanged;
            
            public event connectorRowChangeEventHandler connectorRowChanging;
            
            public event connectorRowChangeEventHandler connectorRowDeleted;
            
            public event connectorRowChangeEventHandler connectorRowDeleting;
            
            public void AddconnectorRow(connectorRow row) {
                this.Rows.Add(row);
            }
            
            public connectorRow AddconnectorRow(int idconnector, string name, System.DateTime lastmodtimestamp, string lastmoduser) {
                connectorRow rowconnectorRow = ((connectorRow)(this.NewRow()));
                rowconnectorRow.ItemArray = new object[] {
                        idconnector,
                        name,
                        lastmodtimestamp,
                        lastmoduser};
                this.Rows.Add(rowconnectorRow);
                return rowconnectorRow;
            }
            
            public connectorRow FindByidconnector(int idconnector) {
                return ((connectorRow)(this.Rows.Find(new object[] {
                            idconnector})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                connectorDataTable cln = ((connectorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new connectorDataTable();
            }
            
            internal void InitVars() {
                this.columnidconnector = this.Columns["idconnector"];
                this.columnname = this.Columns["name"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
            }
            
            private void InitClass() {
                this.columnidconnector = new DataColumn("idconnector", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidconnector);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey6", new DataColumn[] {
                                this.columnidconnector}, true));
                this.columnidconnector.AllowDBNull = false;
                this.columnidconnector.Unique = true;
                this.columnname.AllowDBNull = false;
            }
            
            public connectorRow NewconnectorRow() {
                return ((connectorRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new connectorRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(connectorRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.connectorRowChanged != null)) {
                    this.connectorRowChanged(this, new connectorRowChangeEvent(((connectorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.connectorRowChanging != null)) {
                    this.connectorRowChanging(this, new connectorRowChangeEvent(((connectorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.connectorRowDeleted != null)) {
                    this.connectorRowDeleted(this, new connectorRowChangeEvent(((connectorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.connectorRowDeleting != null)) {
                    this.connectorRowDeleting(this, new connectorRowChangeEvent(((connectorRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveconnectorRow(connectorRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class connectorRow : DataRow {
            
            private connectorDataTable tableconnector;
            
            internal connectorRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableconnector = ((connectorDataTable)(this.Table));
            }
            
            public int idconnector {
                get {
                    return ((int)(this[this.tableconnector.idconnectorColumn]));
                }
                set {
                    this[this.tableconnector.idconnectorColumn] = value;
                }
            }
            
            public string name {
                get {
                    return ((string)(this[this.tableconnector.nameColumn]));
                }
                set {
                    this[this.tableconnector.nameColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableconnector.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconnector.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tableconnector.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableconnector.lastmoduserColumn] = value;
                }
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tableconnector.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tableconnector.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tableconnector.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tableconnector.lastmoduserColumn] = System.Convert.DBNull;
            }
            
            public customviewwhereRow[] GetcustomviewwhereRows() {
                return ((customviewwhereRow[])(this.GetChildRows(this.Table.ChildRelations["connectorcustomviewwhere"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class connectorRowChangeEvent : EventArgs {
            
            private connectorRow eventRow;
            
            private DataRowAction eventAction;
            
            public connectorRowChangeEvent(connectorRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public connectorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customoperatorDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidoperator;
            
            private DataColumn columnname;
            
            private DataColumn columnlastmodtimestamp;
            
            private DataColumn columnlastmoduser;
            
            internal customoperatorDataTable() : 
                    base("customoperator") {
                this.InitClass();
            }
            
            internal customoperatorDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idoperatorColumn {
                get {
                    return this.columnidoperator;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn lastmodtimestampColumn {
                get {
                    return this.columnlastmodtimestamp;
                }
            }
            
            internal DataColumn lastmoduserColumn {
                get {
                    return this.columnlastmoduser;
                }
            }
            
            public customoperatorRow this[int index] {
                get {
                    return ((customoperatorRow)(this.Rows[index]));
                }
            }
            
            public event customoperatorRowChangeEventHandler customoperatorRowChanged;
            
            public event customoperatorRowChangeEventHandler customoperatorRowChanging;
            
            public event customoperatorRowChangeEventHandler customoperatorRowDeleted;
            
            public event customoperatorRowChangeEventHandler customoperatorRowDeleting;
            
            public void AddcustomoperatorRow(customoperatorRow row) {
                this.Rows.Add(row);
            }
            
            public customoperatorRow AddcustomoperatorRow(int idoperator, string name, System.DateTime lastmodtimestamp, string lastmoduser) {
                customoperatorRow rowcustomoperatorRow = ((customoperatorRow)(this.NewRow()));
                rowcustomoperatorRow.ItemArray = new object[] {
                        idoperator,
                        name,
                        lastmodtimestamp,
                        lastmoduser};
                this.Rows.Add(rowcustomoperatorRow);
                return rowcustomoperatorRow;
            }
            
            public customoperatorRow FindByidoperator(int idoperator) {
                return ((customoperatorRow)(this.Rows.Find(new object[] {
                            idoperator})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                customoperatorDataTable cln = ((customoperatorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new customoperatorDataTable();
            }
            
            internal void InitVars() {
                this.columnidoperator = this.Columns["idoperator"];
                this.columnname = this.Columns["name"];
                this.columnlastmodtimestamp = this.Columns["lastmodtimestamp"];
                this.columnlastmoduser = this.Columns["lastmoduser"];
            }
            
            private void InitClass() {
                this.columnidoperator = new DataColumn("idoperator", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidoperator);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.columnlastmodtimestamp = new DataColumn("lastmodtimestamp", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmodtimestamp);
                this.columnlastmoduser = new DataColumn("lastmoduser", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlastmoduser);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey8", new DataColumn[] {
                                this.columnidoperator}, true));
                this.columnidoperator.AllowDBNull = false;
                this.columnidoperator.Unique = true;
                this.columnname.AllowDBNull = false;
            }
            
            public customoperatorRow NewcustomoperatorRow() {
                return ((customoperatorRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new customoperatorRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(customoperatorRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.customoperatorRowChanged != null)) {
                    this.customoperatorRowChanged(this, new customoperatorRowChangeEvent(((customoperatorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.customoperatorRowChanging != null)) {
                    this.customoperatorRowChanging(this, new customoperatorRowChangeEvent(((customoperatorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.customoperatorRowDeleted != null)) {
                    this.customoperatorRowDeleted(this, new customoperatorRowChangeEvent(((customoperatorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.customoperatorRowDeleting != null)) {
                    this.customoperatorRowDeleting(this, new customoperatorRowChangeEvent(((customoperatorRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovecustomoperatorRow(customoperatorRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customoperatorRow : DataRow {
            
            private customoperatorDataTable tablecustomoperator;
            
            internal customoperatorRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablecustomoperator = ((customoperatorDataTable)(this.Table));
            }
            
            public int idoperator {
                get {
                    return ((int)(this[this.tablecustomoperator.idoperatorColumn]));
                }
                set {
                    this[this.tablecustomoperator.idoperatorColumn] = value;
                }
            }
            
            public string name {
                get {
                    return ((string)(this[this.tablecustomoperator.nameColumn]));
                }
                set {
                    this[this.tablecustomoperator.nameColumn] = value;
                }
            }
            
            public System.DateTime lastmodtimestamp {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecustomoperator.lastmodtimestampColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomoperator.lastmodtimestampColumn] = value;
                }
            }
            
            public string lastmoduser {
                get {
                    try {
                        return ((string)(this[this.tablecustomoperator.lastmoduserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecustomoperator.lastmoduserColumn] = value;
                }
            }
            
            public bool IslastmodtimestampNull() {
                return this.IsNull(this.tablecustomoperator.lastmodtimestampColumn);
            }
            
            public void SetlastmodtimestampNull() {
                this[this.tablecustomoperator.lastmodtimestampColumn] = System.Convert.DBNull;
            }
            
            public bool IslastmoduserNull() {
                return this.IsNull(this.tablecustomoperator.lastmoduserColumn);
            }
            
            public void SetlastmoduserNull() {
                this[this.tablecustomoperator.lastmoduserColumn] = System.Convert.DBNull;
            }
            
            public customviewwhereRow[] GetcustomviewwhereRows() {
                return ((customviewwhereRow[])(this.GetChildRows(this.Table.ChildRelations["customoperatorcustomviewwhere"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class customoperatorRowChangeEvent : EventArgs {
            
            private customoperatorRow eventRow;
            
            private DataRowAction eventAction;
            
            public customoperatorRowChangeEvent(customoperatorRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public customoperatorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
