
/*
Easy
Copyright (C) 2022 Università degli Studi di Catania (www.unict.it)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:2.0.50727.832
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace regionalratevalidity_default {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("vistaForm")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class vistaForm : System.Data.DataSet {
        
        private regionalratevalidityDataTable tableregionalratevalidity;
        
        private taxDataTable tabletax;
        
        private regionalratebracketDataTable tableregionalratebracket;
        
        private geo_region_viewDataTable tablegeo_region_view;
        
        private regionalratevalidityviewDataTable tableregionalratevalidityview;
        
        private System.Data.DataRelation relationregionalratevaliditygeo_region_view;
        
        private System.Data.DataRelation relationregionalratevaliditytax;
        
        private System.Data.DataRelation relationregionalratebracketregionalratevalidity;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public vistaForm() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected vistaForm(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["regionalratevalidity"] != null)) {
                    base.Tables.Add(new regionalratevalidityDataTable(ds.Tables["regionalratevalidity"]));
                }
                if ((ds.Tables["tax"] != null)) {
                    base.Tables.Add(new taxDataTable(ds.Tables["tax"]));
                }
                if ((ds.Tables["regionalratebracket"] != null)) {
                    base.Tables.Add(new regionalratebracketDataTable(ds.Tables["regionalratebracket"]));
                }
                if ((ds.Tables["geo_region_view"] != null)) {
                    base.Tables.Add(new geo_region_viewDataTable(ds.Tables["geo_region_view"]));
                }
                if ((ds.Tables["regionalratevalidityview"] != null)) {
                    base.Tables.Add(new regionalratevalidityviewDataTable(ds.Tables["regionalratevalidityview"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public regionalratevalidityDataTable regionalratevalidity {
            get {
                return this.tableregionalratevalidity;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public taxDataTable tax {
            get {
                return this.tabletax;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public regionalratebracketDataTable regionalratebracket {
            get {
                return this.tableregionalratebracket;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public geo_region_viewDataTable geo_region_view {
            get {
                return this.tablegeo_region_view;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public regionalratevalidityviewDataTable regionalratevalidityview {
            get {
                return this.tableregionalratevalidityview;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            vistaForm cln = ((vistaForm)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["regionalratevalidity"] != null)) {
                    base.Tables.Add(new regionalratevalidityDataTable(ds.Tables["regionalratevalidity"]));
                }
                if ((ds.Tables["tax"] != null)) {
                    base.Tables.Add(new taxDataTable(ds.Tables["tax"]));
                }
                if ((ds.Tables["regionalratebracket"] != null)) {
                    base.Tables.Add(new regionalratebracketDataTable(ds.Tables["regionalratebracket"]));
                }
                if ((ds.Tables["geo_region_view"] != null)) {
                    base.Tables.Add(new geo_region_viewDataTable(ds.Tables["geo_region_view"]));
                }
                if ((ds.Tables["regionalratevalidityview"] != null)) {
                    base.Tables.Add(new regionalratevalidityviewDataTable(ds.Tables["regionalratevalidityview"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableregionalratevalidity = ((regionalratevalidityDataTable)(base.Tables["regionalratevalidity"]));
            if ((initTable == true)) {
                if ((this.tableregionalratevalidity != null)) {
                    this.tableregionalratevalidity.InitVars();
                }
            }
            this.tabletax = ((taxDataTable)(base.Tables["tax"]));
            if ((initTable == true)) {
                if ((this.tabletax != null)) {
                    this.tabletax.InitVars();
                }
            }
            this.tableregionalratebracket = ((regionalratebracketDataTable)(base.Tables["regionalratebracket"]));
            if ((initTable == true)) {
                if ((this.tableregionalratebracket != null)) {
                    this.tableregionalratebracket.InitVars();
                }
            }
            this.tablegeo_region_view = ((geo_region_viewDataTable)(base.Tables["geo_region_view"]));
            if ((initTable == true)) {
                if ((this.tablegeo_region_view != null)) {
                    this.tablegeo_region_view.InitVars();
                }
            }
            this.tableregionalratevalidityview = ((regionalratevalidityviewDataTable)(base.Tables["regionalratevalidityview"]));
            if ((initTable == true)) {
                if ((this.tableregionalratevalidityview != null)) {
                    this.tableregionalratevalidityview.InitVars();
                }
            }
            this.relationregionalratevaliditygeo_region_view = this.Relations["regionalratevaliditygeo_region_view"];
            this.relationregionalratevaliditytax = this.Relations["regionalratevaliditytax"];
            this.relationregionalratebracketregionalratevalidity = this.Relations["regionalratebracketregionalratevalidity"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "vistaForm";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/VistaStrutturaAliquoteRegionali.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.EnforceConstraints = false;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableregionalratevalidity = new regionalratevalidityDataTable();
            base.Tables.Add(this.tableregionalratevalidity);
            this.tabletax = new taxDataTable();
            base.Tables.Add(this.tabletax);
            this.tableregionalratebracket = new regionalratebracketDataTable();
            base.Tables.Add(this.tableregionalratebracket);
            this.tablegeo_region_view = new geo_region_viewDataTable();
            base.Tables.Add(this.tablegeo_region_view);
            this.tableregionalratevalidityview = new regionalratevalidityviewDataTable();
            base.Tables.Add(this.tableregionalratevalidityview);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("regionalratevaliditygeo_region_view", new System.Data.DataColumn[] {
                        this.tablegeo_region_view.idregionColumn}, new System.Data.DataColumn[] {
                        this.tableregionalratevalidity.idregionColumn});
            this.tableregionalratevalidity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("regionalratevaliditytax", new System.Data.DataColumn[] {
                        this.tabletax.taxcodeColumn}, new System.Data.DataColumn[] {
                        this.tableregionalratevalidity.taxcodeColumn});
            this.tableregionalratevalidity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("regionalratebracketregionalratevalidity", new System.Data.DataColumn[] {
                        this.tableregionalratevalidity.taxcodeColumn,
                        this.tableregionalratevalidity.idregionColumn,
                        this.tableregionalratevalidity.validitystartColumn}, new System.Data.DataColumn[] {
                        this.tableregionalratebracket.taxcodeColumn,
                        this.tableregionalratebracket.idregionColumn,
                        this.tableregionalratebracket.validitystartColumn});
            this.tableregionalratebracket.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationregionalratevaliditygeo_region_view = new System.Data.DataRelation("regionalratevaliditygeo_region_view", new System.Data.DataColumn[] {
                        this.tablegeo_region_view.idregionColumn}, new System.Data.DataColumn[] {
                        this.tableregionalratevalidity.idregionColumn}, false);
            this.Relations.Add(this.relationregionalratevaliditygeo_region_view);
            this.relationregionalratevaliditytax = new System.Data.DataRelation("regionalratevaliditytax", new System.Data.DataColumn[] {
                        this.tabletax.taxcodeColumn}, new System.Data.DataColumn[] {
                        this.tableregionalratevalidity.taxcodeColumn}, false);
            this.Relations.Add(this.relationregionalratevaliditytax);
            this.relationregionalratebracketregionalratevalidity = new System.Data.DataRelation("regionalratebracketregionalratevalidity", new System.Data.DataColumn[] {
                        this.tableregionalratevalidity.taxcodeColumn,
                        this.tableregionalratevalidity.idregionColumn,
                        this.tableregionalratevalidity.validitystartColumn}, new System.Data.DataColumn[] {
                        this.tableregionalratebracket.taxcodeColumn,
                        this.tableregionalratebracket.idregionColumn,
                        this.tableregionalratebracket.validitystartColumn}, false);
            this.Relations.Add(this.relationregionalratebracketregionalratevalidity);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeregionalratevalidity() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetax() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeregionalratebracket() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializegeo_region_view() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeregionalratevalidityview() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            vistaForm ds = new vistaForm();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void regionalratevalidityRowChangeEventHandler(object sender, regionalratevalidityRowChangeEvent e);
        
        public delegate void taxRowChangeEventHandler(object sender, taxRowChangeEvent e);
        
        public delegate void regionalratebracketRowChangeEventHandler(object sender, regionalratebracketRowChangeEvent e);
        
        public delegate void geo_region_viewRowChangeEventHandler(object sender, geo_region_viewRowChangeEvent e);
        
        public delegate void regionalratevalidityviewRowChangeEventHandler(object sender, regionalratevalidityviewRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class regionalratevalidityDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columntaxcode;
            
            private System.Data.DataColumn columnidregion;
            
            private System.Data.DataColumn columnvaliditystart;
            
            private System.Data.DataColumn columnlu;
            
            private System.Data.DataColumn columnlt;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratevalidityDataTable() {
                this.TableName = "regionalratevalidity";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal regionalratevalidityDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected regionalratevalidityDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn taxcodeColumn {
                get {
                    return this.columntaxcode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idregionColumn {
                get {
                    return this.columnidregion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn validitystartColumn {
                get {
                    return this.columnvaliditystart;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn luColumn {
                get {
                    return this.columnlu;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ltColumn {
                get {
                    return this.columnlt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratevalidityRow this[int index] {
                get {
                    return ((regionalratevalidityRow)(this.Rows[index]));
                }
            }
            
            public event regionalratevalidityRowChangeEventHandler regionalratevalidityRowChanging;
            
            public event regionalratevalidityRowChangeEventHandler regionalratevalidityRowChanged;
            
            public event regionalratevalidityRowChangeEventHandler regionalratevalidityRowDeleting;
            
            public event regionalratevalidityRowChangeEventHandler regionalratevalidityRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddregionalratevalidityRow(regionalratevalidityRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratevalidityRow AddregionalratevalidityRow(taxRow parenttaxRowByregionalratevaliditytax, geo_region_viewRow parentgeo_region_viewRowByregionalratevaliditygeo_region_view, System.DateTime validitystart, string lu, System.DateTime lt) {
                regionalratevalidityRow rowregionalratevalidityRow = ((regionalratevalidityRow)(this.NewRow()));
                rowregionalratevalidityRow.ItemArray = new object[] {
                        parenttaxRowByregionalratevaliditytax[0],
                        parentgeo_region_viewRowByregionalratevaliditygeo_region_view[0],
                        validitystart,
                        lu,
                        lt};
                this.Rows.Add(rowregionalratevalidityRow);
                return rowregionalratevalidityRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratevalidityRow FindBytaxcodeidregionvaliditystart(int taxcode, int idregion, System.DateTime validitystart) {
                return ((regionalratevalidityRow)(this.Rows.Find(new object[] {
                            taxcode,
                            idregion,
                            validitystart})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                regionalratevalidityDataTable cln = ((regionalratevalidityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new regionalratevalidityDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntaxcode = base.Columns["taxcode"];
                this.columnidregion = base.Columns["idregion"];
                this.columnvaliditystart = base.Columns["validitystart"];
                this.columnlu = base.Columns["lu"];
                this.columnlt = base.Columns["lt"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntaxcode = new System.Data.DataColumn("taxcode", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxcode);
                this.columnidregion = new System.Data.DataColumn("idregion", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidregion);
                this.columnvaliditystart = new System.Data.DataColumn("validitystart", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvaliditystart);
                this.columnlu = new System.Data.DataColumn("lu", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlu);
                this.columnlt = new System.Data.DataColumn("lt", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlt);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columntaxcode,
                                this.columnidregion,
                                this.columnvaliditystart}, true));
                this.columntaxcode.AllowDBNull = false;
                this.columnidregion.AllowDBNull = false;
                this.columnvaliditystart.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratevalidityRow NewregionalratevalidityRow() {
                return ((regionalratevalidityRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new regionalratevalidityRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(regionalratevalidityRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.regionalratevalidityRowChanged != null)) {
                    this.regionalratevalidityRowChanged(this, new regionalratevalidityRowChangeEvent(((regionalratevalidityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.regionalratevalidityRowChanging != null)) {
                    this.regionalratevalidityRowChanging(this, new regionalratevalidityRowChangeEvent(((regionalratevalidityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.regionalratevalidityRowDeleted != null)) {
                    this.regionalratevalidityRowDeleted(this, new regionalratevalidityRowChangeEvent(((regionalratevalidityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.regionalratevalidityRowDeleting != null)) {
                    this.regionalratevalidityRowDeleting(this, new regionalratevalidityRowChangeEvent(((regionalratevalidityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveregionalratevalidityRow(regionalratevalidityRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                vistaForm ds = new vistaForm();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "regionalratevalidityDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class taxDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columntaxcode;
            
            private System.Data.DataColumn columndescription;
            
            private System.Data.DataColumn columntaxkind;
            
            private System.Data.DataColumn columnfiscaltaxcode;
            
            private System.Data.DataColumn columnflagunabatable;
            
            private System.Data.DataColumn columncu;
            
            private System.Data.DataColumn columnct;
            
            private System.Data.DataColumn columnlu;
            
            private System.Data.DataColumn columnlt;
            
            private System.Data.DataColumn columnactive;
            
            private System.Data.DataColumn columntaxablecode;
            
            private System.Data.DataColumn columngeoappliance;
            
            private System.Data.DataColumn columnappliancebasis;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxDataTable() {
                this.TableName = "tax";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal taxDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected taxDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn taxcodeColumn {
                get {
                    return this.columntaxcode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn taxkindColumn {
                get {
                    return this.columntaxkind;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn fiscaltaxcodeColumn {
                get {
                    return this.columnfiscaltaxcode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn flagunabatableColumn {
                get {
                    return this.columnflagunabatable;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cuColumn {
                get {
                    return this.columncu;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ctColumn {
                get {
                    return this.columnct;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn luColumn {
                get {
                    return this.columnlu;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ltColumn {
                get {
                    return this.columnlt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn activeColumn {
                get {
                    return this.columnactive;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn taxablecodeColumn {
                get {
                    return this.columntaxablecode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn geoapplianceColumn {
                get {
                    return this.columngeoappliance;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn appliancebasisColumn {
                get {
                    return this.columnappliancebasis;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxRow this[int index] {
                get {
                    return ((taxRow)(this.Rows[index]));
                }
            }
            
            public event taxRowChangeEventHandler taxRowChanging;
            
            public event taxRowChangeEventHandler taxRowChanged;
            
            public event taxRowChangeEventHandler taxRowDeleting;
            
            public event taxRowChangeEventHandler taxRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtaxRow(taxRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxRow AddtaxRow(int taxcode, string description, short taxkind, string fiscaltaxcode, string flagunabatable, string cu, System.DateTime ct, string lu, System.DateTime lt, string active, string taxablecode, string geoappliance, string appliancebasis) {
                taxRow rowtaxRow = ((taxRow)(this.NewRow()));
                rowtaxRow.ItemArray = new object[] {
                        taxcode,
                        description,
                        taxkind,
                        fiscaltaxcode,
                        flagunabatable,
                        cu,
                        ct,
                        lu,
                        lt,
                        active,
                        taxablecode,
                        geoappliance,
                        appliancebasis};
                this.Rows.Add(rowtaxRow);
                return rowtaxRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxRow FindBytaxcode(int taxcode) {
                return ((taxRow)(this.Rows.Find(new object[] {
                            taxcode})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                taxDataTable cln = ((taxDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new taxDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntaxcode = base.Columns["taxcode"];
                this.columndescription = base.Columns["description"];
                this.columntaxkind = base.Columns["taxkind"];
                this.columnfiscaltaxcode = base.Columns["fiscaltaxcode"];
                this.columnflagunabatable = base.Columns["flagunabatable"];
                this.columncu = base.Columns["cu"];
                this.columnct = base.Columns["ct"];
                this.columnlu = base.Columns["lu"];
                this.columnlt = base.Columns["lt"];
                this.columnactive = base.Columns["active"];
                this.columntaxablecode = base.Columns["taxablecode"];
                this.columngeoappliance = base.Columns["geoappliance"];
                this.columnappliancebasis = base.Columns["appliancebasis"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntaxcode = new System.Data.DataColumn("taxcode", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxcode);
                this.columndescription = new System.Data.DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columntaxkind = new System.Data.DataColumn("taxkind", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxkind);
                this.columnfiscaltaxcode = new System.Data.DataColumn("fiscaltaxcode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfiscaltaxcode);
                this.columnflagunabatable = new System.Data.DataColumn("flagunabatable", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnflagunabatable);
                this.columncu = new System.Data.DataColumn("cu", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncu);
                this.columnct = new System.Data.DataColumn("ct", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnct);
                this.columnlu = new System.Data.DataColumn("lu", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlu);
                this.columnlt = new System.Data.DataColumn("lt", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlt);
                this.columnactive = new System.Data.DataColumn("active", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnactive);
                this.columntaxablecode = new System.Data.DataColumn("taxablecode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxablecode);
                this.columngeoappliance = new System.Data.DataColumn("geoappliance", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngeoappliance);
                this.columnappliancebasis = new System.Data.DataColumn("appliancebasis", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnappliancebasis);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columntaxcode}, true));
                this.columntaxcode.AllowDBNull = false;
                this.columntaxcode.Unique = true;
                this.columndescription.AllowDBNull = false;
                this.columncu.AllowDBNull = false;
                this.columnct.AllowDBNull = false;
                this.columnlu.AllowDBNull = false;
                this.columnlt.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxRow NewtaxRow() {
                return ((taxRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new taxRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(taxRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.taxRowChanged != null)) {
                    this.taxRowChanged(this, new taxRowChangeEvent(((taxRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.taxRowChanging != null)) {
                    this.taxRowChanging(this, new taxRowChangeEvent(((taxRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.taxRowDeleted != null)) {
                    this.taxRowDeleted(this, new taxRowChangeEvent(((taxRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.taxRowDeleting != null)) {
                    this.taxRowDeleting(this, new taxRowChangeEvent(((taxRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetaxRow(taxRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                vistaForm ds = new vistaForm();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "taxDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class regionalratebracketDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columntaxcode;
            
            private System.Data.DataColumn columnidregion;
            
            private System.Data.DataColumn columnvaliditystart;
            
            private System.Data.DataColumn columnnbracket;
            
            private System.Data.DataColumn columnminamount;
            
            private System.Data.DataColumn columnmaxamount;
            
            private System.Data.DataColumn columnlu;
            
            private System.Data.DataColumn columnlt;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratebracketDataTable() {
                this.TableName = "regionalratebracket";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal regionalratebracketDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected regionalratebracketDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn taxcodeColumn {
                get {
                    return this.columntaxcode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idregionColumn {
                get {
                    return this.columnidregion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn validitystartColumn {
                get {
                    return this.columnvaliditystart;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nbracketColumn {
                get {
                    return this.columnnbracket;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn minamountColumn {
                get {
                    return this.columnminamount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn maxamountColumn {
                get {
                    return this.columnmaxamount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn luColumn {
                get {
                    return this.columnlu;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ltColumn {
                get {
                    return this.columnlt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratebracketRow this[int index] {
                get {
                    return ((regionalratebracketRow)(this.Rows[index]));
                }
            }
            
            public event regionalratebracketRowChangeEventHandler regionalratebracketRowChanging;
            
            public event regionalratebracketRowChangeEventHandler regionalratebracketRowChanged;
            
            public event regionalratebracketRowChangeEventHandler regionalratebracketRowDeleting;
            
            public event regionalratebracketRowChangeEventHandler regionalratebracketRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddregionalratebracketRow(regionalratebracketRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratebracketRow AddregionalratebracketRow(int taxcode, int idregion, System.DateTime validitystart, int nbracket, decimal minamount, decimal maxamount, string lu, System.DateTime lt) {
                regionalratebracketRow rowregionalratebracketRow = ((regionalratebracketRow)(this.NewRow()));
                rowregionalratebracketRow.ItemArray = new object[] {
                        taxcode,
                        idregion,
                        validitystart,
                        nbracket,
                        minamount,
                        maxamount,
                        lu,
                        lt};
                this.Rows.Add(rowregionalratebracketRow);
                return rowregionalratebracketRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratebracketRow FindBytaxcodeidregionvaliditystartnbracket(int taxcode, int idregion, System.DateTime validitystart, int nbracket) {
                return ((regionalratebracketRow)(this.Rows.Find(new object[] {
                            taxcode,
                            idregion,
                            validitystart,
                            nbracket})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                regionalratebracketDataTable cln = ((regionalratebracketDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new regionalratebracketDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntaxcode = base.Columns["taxcode"];
                this.columnidregion = base.Columns["idregion"];
                this.columnvaliditystart = base.Columns["validitystart"];
                this.columnnbracket = base.Columns["nbracket"];
                this.columnminamount = base.Columns["minamount"];
                this.columnmaxamount = base.Columns["maxamount"];
                this.columnlu = base.Columns["lu"];
                this.columnlt = base.Columns["lt"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntaxcode = new System.Data.DataColumn("taxcode", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxcode);
                this.columnidregion = new System.Data.DataColumn("idregion", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidregion);
                this.columnvaliditystart = new System.Data.DataColumn("validitystart", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvaliditystart);
                this.columnnbracket = new System.Data.DataColumn("nbracket", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnbracket);
                this.columnminamount = new System.Data.DataColumn("minamount", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnminamount);
                this.columnmaxamount = new System.Data.DataColumn("maxamount", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmaxamount);
                this.columnlu = new System.Data.DataColumn("lu", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlu);
                this.columnlt = new System.Data.DataColumn("lt", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlt);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columntaxcode,
                                this.columnidregion,
                                this.columnvaliditystart,
                                this.columnnbracket}, true));
                this.columntaxcode.AllowDBNull = false;
                this.columnidregion.AllowDBNull = false;
                this.columnvaliditystart.AllowDBNull = false;
                this.columnnbracket.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratebracketRow NewregionalratebracketRow() {
                return ((regionalratebracketRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new regionalratebracketRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(regionalratebracketRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.regionalratebracketRowChanged != null)) {
                    this.regionalratebracketRowChanged(this, new regionalratebracketRowChangeEvent(((regionalratebracketRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.regionalratebracketRowChanging != null)) {
                    this.regionalratebracketRowChanging(this, new regionalratebracketRowChangeEvent(((regionalratebracketRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.regionalratebracketRowDeleted != null)) {
                    this.regionalratebracketRowDeleted(this, new regionalratebracketRowChangeEvent(((regionalratebracketRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.regionalratebracketRowDeleting != null)) {
                    this.regionalratebracketRowDeleting(this, new regionalratebracketRowChangeEvent(((regionalratebracketRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveregionalratebracketRow(regionalratebracketRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                vistaForm ds = new vistaForm();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "regionalratebracketDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class geo_region_viewDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnidregion;
            
            private System.Data.DataColumn columntitle;
            
            private System.Data.DataColumn columnstart;
            
            private System.Data.DataColumn columnstop;
            
            private System.Data.DataColumn columnoldregion;
            
            private System.Data.DataColumn columnnewregion;
            
            private System.Data.DataColumn columnidnation;
            
            private System.Data.DataColumn columnidcontinent;
            
            private System.Data.DataColumn columnnation;
            
            private System.Data.DataColumn columnnationdatestart;
            
            private System.Data.DataColumn columnnationdatestop;
            
            private System.Data.DataColumn columnoldnation;
            
            private System.Data.DataColumn columnnewnation;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public geo_region_viewDataTable() {
                this.TableName = "geo_region_view";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal geo_region_viewDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected geo_region_viewDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idregionColumn {
                get {
                    return this.columnidregion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn titleColumn {
                get {
                    return this.columntitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn startColumn {
                get {
                    return this.columnstart;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn stopColumn {
                get {
                    return this.columnstop;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn oldregionColumn {
                get {
                    return this.columnoldregion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn newregionColumn {
                get {
                    return this.columnnewregion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idnationColumn {
                get {
                    return this.columnidnation;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idcontinentColumn {
                get {
                    return this.columnidcontinent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nationColumn {
                get {
                    return this.columnnation;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nationdatestartColumn {
                get {
                    return this.columnnationdatestart;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nationdatestopColumn {
                get {
                    return this.columnnationdatestop;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn oldnationColumn {
                get {
                    return this.columnoldnation;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn newnationColumn {
                get {
                    return this.columnnewnation;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public geo_region_viewRow this[int index] {
                get {
                    return ((geo_region_viewRow)(this.Rows[index]));
                }
            }
            
            public event geo_region_viewRowChangeEventHandler geo_region_viewRowChanging;
            
            public event geo_region_viewRowChangeEventHandler geo_region_viewRowChanged;
            
            public event geo_region_viewRowChangeEventHandler geo_region_viewRowDeleting;
            
            public event geo_region_viewRowChangeEventHandler geo_region_viewRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addgeo_region_viewRow(geo_region_viewRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public geo_region_viewRow Addgeo_region_viewRow(int idregion, string title, System.DateTime start, System.DateTime stop, int oldregion, int newregion, int idnation, int idcontinent, string nation, System.DateTime nationdatestart, System.DateTime nationdatestop, int oldnation, int newnation) {
                geo_region_viewRow rowgeo_region_viewRow = ((geo_region_viewRow)(this.NewRow()));
                rowgeo_region_viewRow.ItemArray = new object[] {
                        idregion,
                        title,
                        start,
                        stop,
                        oldregion,
                        newregion,
                        idnation,
                        idcontinent,
                        nation,
                        nationdatestart,
                        nationdatestop,
                        oldnation,
                        newnation};
                this.Rows.Add(rowgeo_region_viewRow);
                return rowgeo_region_viewRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public geo_region_viewRow FindByidregion(int idregion) {
                return ((geo_region_viewRow)(this.Rows.Find(new object[] {
                            idregion})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                geo_region_viewDataTable cln = ((geo_region_viewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new geo_region_viewDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidregion = base.Columns["idregion"];
                this.columntitle = base.Columns["title"];
                this.columnstart = base.Columns["start"];
                this.columnstop = base.Columns["stop"];
                this.columnoldregion = base.Columns["oldregion"];
                this.columnnewregion = base.Columns["newregion"];
                this.columnidnation = base.Columns["idnation"];
                this.columnidcontinent = base.Columns["idcontinent"];
                this.columnnation = base.Columns["nation"];
                this.columnnationdatestart = base.Columns["nationdatestart"];
                this.columnnationdatestop = base.Columns["nationdatestop"];
                this.columnoldnation = base.Columns["oldnation"];
                this.columnnewnation = base.Columns["newnation"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidregion = new System.Data.DataColumn("idregion", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidregion);
                this.columntitle = new System.Data.DataColumn("title", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntitle);
                this.columnstart = new System.Data.DataColumn("start", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstart);
                this.columnstop = new System.Data.DataColumn("stop", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstop);
                this.columnoldregion = new System.Data.DataColumn("oldregion", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnoldregion);
                this.columnnewregion = new System.Data.DataColumn("newregion", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnewregion);
                this.columnidnation = new System.Data.DataColumn("idnation", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidnation);
                this.columnidcontinent = new System.Data.DataColumn("idcontinent", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidcontinent);
                this.columnnation = new System.Data.DataColumn("nation", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnation);
                this.columnnationdatestart = new System.Data.DataColumn("nationdatestart", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnationdatestart);
                this.columnnationdatestop = new System.Data.DataColumn("nationdatestop", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnationdatestop);
                this.columnoldnation = new System.Data.DataColumn("oldnation", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnoldnation);
                this.columnnewnation = new System.Data.DataColumn("newnation", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnewnation);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnidregion}, true));
                this.columnidregion.AllowDBNull = false;
                this.columnidregion.Unique = true;
                this.columnidnation.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public geo_region_viewRow Newgeo_region_viewRow() {
                return ((geo_region_viewRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new geo_region_viewRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(geo_region_viewRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.geo_region_viewRowChanged != null)) {
                    this.geo_region_viewRowChanged(this, new geo_region_viewRowChangeEvent(((geo_region_viewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.geo_region_viewRowChanging != null)) {
                    this.geo_region_viewRowChanging(this, new geo_region_viewRowChangeEvent(((geo_region_viewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.geo_region_viewRowDeleted != null)) {
                    this.geo_region_viewRowDeleted(this, new geo_region_viewRowChangeEvent(((geo_region_viewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.geo_region_viewRowDeleting != null)) {
                    this.geo_region_viewRowDeleting(this, new geo_region_viewRowChangeEvent(((geo_region_viewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removegeo_region_viewRow(geo_region_viewRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                vistaForm ds = new vistaForm();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "geo_region_viewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class regionalratevalidityviewDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columntaxcode;
            
            private System.Data.DataColumn columnidregion;
            
            private System.Data.DataColumn columnregion;
            
            private System.Data.DataColumn columnvaliditystart;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratevalidityviewDataTable() {
                this.TableName = "regionalratevalidityview";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal regionalratevalidityviewDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected regionalratevalidityviewDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn taxcodeColumn {
                get {
                    return this.columntaxcode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idregionColumn {
                get {
                    return this.columnidregion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn regionColumn {
                get {
                    return this.columnregion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn validitystartColumn {
                get {
                    return this.columnvaliditystart;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratevalidityviewRow this[int index] {
                get {
                    return ((regionalratevalidityviewRow)(this.Rows[index]));
                }
            }
            
            public event regionalratevalidityviewRowChangeEventHandler regionalratevalidityviewRowChanging;
            
            public event regionalratevalidityviewRowChangeEventHandler regionalratevalidityviewRowChanged;
            
            public event regionalratevalidityviewRowChangeEventHandler regionalratevalidityviewRowDeleting;
            
            public event regionalratevalidityviewRowChangeEventHandler regionalratevalidityviewRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddregionalratevalidityviewRow(regionalratevalidityviewRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratevalidityviewRow AddregionalratevalidityviewRow(int taxcode, int idregion, string region, System.DateTime validitystart) {
                regionalratevalidityviewRow rowregionalratevalidityviewRow = ((regionalratevalidityviewRow)(this.NewRow()));
                rowregionalratevalidityviewRow.ItemArray = new object[] {
                        taxcode,
                        idregion,
                        region,
                        validitystart};
                this.Rows.Add(rowregionalratevalidityviewRow);
                return rowregionalratevalidityviewRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                regionalratevalidityviewDataTable cln = ((regionalratevalidityviewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new regionalratevalidityviewDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntaxcode = base.Columns["taxcode"];
                this.columnidregion = base.Columns["idregion"];
                this.columnregion = base.Columns["region"];
                this.columnvaliditystart = base.Columns["validitystart"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntaxcode = new System.Data.DataColumn("taxcode", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxcode);
                this.columnidregion = new System.Data.DataColumn("idregion", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidregion);
                this.columnregion = new System.Data.DataColumn("region", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnregion);
                this.columnvaliditystart = new System.Data.DataColumn("validitystart", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvaliditystart);
                this.columntaxcode.AllowDBNull = false;
                this.columnidregion.AllowDBNull = false;
                this.columnvaliditystart.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratevalidityviewRow NewregionalratevalidityviewRow() {
                return ((regionalratevalidityviewRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new regionalratevalidityviewRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(regionalratevalidityviewRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.regionalratevalidityviewRowChanged != null)) {
                    this.regionalratevalidityviewRowChanged(this, new regionalratevalidityviewRowChangeEvent(((regionalratevalidityviewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.regionalratevalidityviewRowChanging != null)) {
                    this.regionalratevalidityviewRowChanging(this, new regionalratevalidityviewRowChangeEvent(((regionalratevalidityviewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.regionalratevalidityviewRowDeleted != null)) {
                    this.regionalratevalidityviewRowDeleted(this, new regionalratevalidityviewRowChangeEvent(((regionalratevalidityviewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.regionalratevalidityviewRowDeleting != null)) {
                    this.regionalratevalidityviewRowDeleting(this, new regionalratevalidityviewRowChangeEvent(((regionalratevalidityviewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveregionalratevalidityviewRow(regionalratevalidityviewRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                vistaForm ds = new vistaForm();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "regionalratevalidityviewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class regionalratevalidityRow : System.Data.DataRow {
            
            private regionalratevalidityDataTable tableregionalratevalidity;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal regionalratevalidityRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableregionalratevalidity = ((regionalratevalidityDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int taxcode {
                get {
                    return ((int)(this[this.tableregionalratevalidity.taxcodeColumn]));
                }
                set {
                    this[this.tableregionalratevalidity.taxcodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idregion {
                get {
                    return ((int)(this[this.tableregionalratevalidity.idregionColumn]));
                }
                set {
                    this[this.tableregionalratevalidity.idregionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime validitystart {
                get {
                    return ((System.DateTime)(this[this.tableregionalratevalidity.validitystartColumn]));
                }
                set {
                    this[this.tableregionalratevalidity.validitystartColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lu {
                get {
                    try {
                        return ((string)(this[this.tableregionalratevalidity.luColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'lu\' nella tabella \'regionalratevalidity\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tableregionalratevalidity.luColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime lt {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableregionalratevalidity.ltColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'lt\' nella tabella \'regionalratevalidity\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tableregionalratevalidity.ltColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public geo_region_viewRow geo_region_viewRow {
                get {
                    return ((geo_region_viewRow)(this.GetParentRow(this.Table.ParentRelations["regionalratevaliditygeo_region_view"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["regionalratevaliditygeo_region_view"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxRow taxRow {
                get {
                    return ((taxRow)(this.GetParentRow(this.Table.ParentRelations["regionalratevaliditytax"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["regionalratevaliditytax"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsluNull() {
                return this.IsNull(this.tableregionalratevalidity.luColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetluNull() {
                this[this.tableregionalratevalidity.luColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsltNull() {
                return this.IsNull(this.tableregionalratevalidity.ltColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetltNull() {
                this[this.tableregionalratevalidity.ltColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratebracketRow[] GetregionalratebracketRows() {
                return ((regionalratebracketRow[])(base.GetChildRows(this.Table.ChildRelations["regionalratebracketregionalratevalidity"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class taxRow : System.Data.DataRow {
            
            private taxDataTable tabletax;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal taxRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletax = ((taxDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int taxcode {
                get {
                    return ((int)(this[this.tabletax.taxcodeColumn]));
                }
                set {
                    this[this.tabletax.taxcodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    return ((string)(this[this.tabletax.descriptionColumn]));
                }
                set {
                    this[this.tabletax.descriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short taxkind {
                get {
                    try {
                        return ((short)(this[this.tabletax.taxkindColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'taxkind\' nella tabella \'tax\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletax.taxkindColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fiscaltaxcode {
                get {
                    try {
                        return ((string)(this[this.tabletax.fiscaltaxcodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'fiscaltaxcode\' nella tabella \'tax\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletax.fiscaltaxcodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string flagunabatable {
                get {
                    try {
                        return ((string)(this[this.tabletax.flagunabatableColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'flagunabatable\' nella tabella \'tax\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletax.flagunabatableColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cu {
                get {
                    return ((string)(this[this.tabletax.cuColumn]));
                }
                set {
                    this[this.tabletax.cuColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ct {
                get {
                    return ((System.DateTime)(this[this.tabletax.ctColumn]));
                }
                set {
                    this[this.tabletax.ctColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lu {
                get {
                    return ((string)(this[this.tabletax.luColumn]));
                }
                set {
                    this[this.tabletax.luColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime lt {
                get {
                    return ((System.DateTime)(this[this.tabletax.ltColumn]));
                }
                set {
                    this[this.tabletax.ltColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string active {
                get {
                    try {
                        return ((string)(this[this.tabletax.activeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'active\' nella tabella \'tax\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletax.activeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string taxablecode {
                get {
                    try {
                        return ((string)(this[this.tabletax.taxablecodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'taxablecode\' nella tabella \'tax\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletax.taxablecodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string geoappliance {
                get {
                    try {
                        return ((string)(this[this.tabletax.geoapplianceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'geoappliance\' nella tabella \'tax\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletax.geoapplianceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string appliancebasis {
                get {
                    try {
                        return ((string)(this[this.tabletax.appliancebasisColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'appliancebasis\' nella tabella \'tax\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tabletax.appliancebasisColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstaxkindNull() {
                return this.IsNull(this.tabletax.taxkindColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettaxkindNull() {
                this[this.tabletax.taxkindColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfiscaltaxcodeNull() {
                return this.IsNull(this.tabletax.fiscaltaxcodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfiscaltaxcodeNull() {
                this[this.tabletax.fiscaltaxcodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsflagunabatableNull() {
                return this.IsNull(this.tabletax.flagunabatableColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetflagunabatableNull() {
                this[this.tabletax.flagunabatableColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsactiveNull() {
                return this.IsNull(this.tabletax.activeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetactiveNull() {
                this[this.tabletax.activeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstaxablecodeNull() {
                return this.IsNull(this.tabletax.taxablecodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettaxablecodeNull() {
                this[this.tabletax.taxablecodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgeoapplianceNull() {
                return this.IsNull(this.tabletax.geoapplianceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgeoapplianceNull() {
                this[this.tabletax.geoapplianceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsappliancebasisNull() {
                return this.IsNull(this.tabletax.appliancebasisColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetappliancebasisNull() {
                this[this.tabletax.appliancebasisColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratevalidityRow[] GetregionalratevalidityRows() {
                return ((regionalratevalidityRow[])(base.GetChildRows(this.Table.ChildRelations["regionalratevaliditytax"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class regionalratebracketRow : System.Data.DataRow {
            
            private regionalratebracketDataTable tableregionalratebracket;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal regionalratebracketRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableregionalratebracket = ((regionalratebracketDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int taxcode {
                get {
                    return ((int)(this[this.tableregionalratebracket.taxcodeColumn]));
                }
                set {
                    this[this.tableregionalratebracket.taxcodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idregion {
                get {
                    return ((int)(this[this.tableregionalratebracket.idregionColumn]));
                }
                set {
                    this[this.tableregionalratebracket.idregionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime validitystart {
                get {
                    return ((System.DateTime)(this[this.tableregionalratebracket.validitystartColumn]));
                }
                set {
                    this[this.tableregionalratebracket.validitystartColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int nbracket {
                get {
                    return ((int)(this[this.tableregionalratebracket.nbracketColumn]));
                }
                set {
                    this[this.tableregionalratebracket.nbracketColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal minamount {
                get {
                    try {
                        return ((decimal)(this[this.tableregionalratebracket.minamountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'minamount\' nella tabella \'regionalratebracket\' è DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableregionalratebracket.minamountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal maxamount {
                get {
                    try {
                        return ((decimal)(this[this.tableregionalratebracket.maxamountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'maxamount\' nella tabella \'regionalratebracket\' è DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableregionalratebracket.maxamountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lu {
                get {
                    try {
                        return ((string)(this[this.tableregionalratebracket.luColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'lu\' nella tabella \'regionalratebracket\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tableregionalratebracket.luColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime lt {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableregionalratebracket.ltColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'lt\' nella tabella \'regionalratebracket\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tableregionalratebracket.ltColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratevalidityRow regionalratevalidityRowParent {
                get {
                    return ((regionalratevalidityRow)(this.GetParentRow(this.Table.ParentRelations["regionalratebracketregionalratevalidity"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["regionalratebracketregionalratevalidity"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsminamountNull() {
                return this.IsNull(this.tableregionalratebracket.minamountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetminamountNull() {
                this[this.tableregionalratebracket.minamountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaxamountNull() {
                return this.IsNull(this.tableregionalratebracket.maxamountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaxamountNull() {
                this[this.tableregionalratebracket.maxamountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsluNull() {
                return this.IsNull(this.tableregionalratebracket.luColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetluNull() {
                this[this.tableregionalratebracket.luColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsltNull() {
                return this.IsNull(this.tableregionalratebracket.ltColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetltNull() {
                this[this.tableregionalratebracket.ltColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class geo_region_viewRow : System.Data.DataRow {
            
            private geo_region_viewDataTable tablegeo_region_view;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal geo_region_viewRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablegeo_region_view = ((geo_region_viewDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idregion {
                get {
                    return ((int)(this[this.tablegeo_region_view.idregionColumn]));
                }
                set {
                    this[this.tablegeo_region_view.idregionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string title {
                get {
                    try {
                        return ((string)(this[this.tablegeo_region_view.titleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'title\' nella tabella \'geo_region_view\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_region_view.titleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime start {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_region_view.startColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'start\' nella tabella \'geo_region_view\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_region_view.startColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime stop {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_region_view.stopColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'stop\' nella tabella \'geo_region_view\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_region_view.stopColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int oldregion {
                get {
                    try {
                        return ((int)(this[this.tablegeo_region_view.oldregionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'oldregion\' nella tabella \'geo_region_view\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_region_view.oldregionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int newregion {
                get {
                    try {
                        return ((int)(this[this.tablegeo_region_view.newregionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'newregion\' nella tabella \'geo_region_view\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_region_view.newregionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idnation {
                get {
                    return ((int)(this[this.tablegeo_region_view.idnationColumn]));
                }
                set {
                    this[this.tablegeo_region_view.idnationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idcontinent {
                get {
                    try {
                        return ((int)(this[this.tablegeo_region_view.idcontinentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'idcontinent\' nella tabella \'geo_region_view\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_region_view.idcontinentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nation {
                get {
                    try {
                        return ((string)(this[this.tablegeo_region_view.nationColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'nation\' nella tabella \'geo_region_view\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_region_view.nationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime nationdatestart {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_region_view.nationdatestartColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'nationdatestart\' nella tabella \'geo_region_view\' è DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablegeo_region_view.nationdatestartColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime nationdatestop {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablegeo_region_view.nationdatestopColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'nationdatestop\' nella tabella \'geo_region_view\' è DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablegeo_region_view.nationdatestopColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int oldnation {
                get {
                    try {
                        return ((int)(this[this.tablegeo_region_view.oldnationColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'oldnation\' nella tabella \'geo_region_view\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_region_view.oldnationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int newnation {
                get {
                    try {
                        return ((int)(this[this.tablegeo_region_view.newnationColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'newnation\' nella tabella \'geo_region_view\' è DBNull.", e);
                    }
                }
                set {
                    this[this.tablegeo_region_view.newnationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstitleNull() {
                return this.IsNull(this.tablegeo_region_view.titleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettitleNull() {
                this[this.tablegeo_region_view.titleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstartNull() {
                return this.IsNull(this.tablegeo_region_view.startColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstartNull() {
                this[this.tablegeo_region_view.startColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstopNull() {
                return this.IsNull(this.tablegeo_region_view.stopColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstopNull() {
                this[this.tablegeo_region_view.stopColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsoldregionNull() {
                return this.IsNull(this.tablegeo_region_view.oldregionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetoldregionNull() {
                this[this.tablegeo_region_view.oldregionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnewregionNull() {
                return this.IsNull(this.tablegeo_region_view.newregionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnewregionNull() {
                this[this.tablegeo_region_view.newregionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidcontinentNull() {
                return this.IsNull(this.tablegeo_region_view.idcontinentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidcontinentNull() {
                this[this.tablegeo_region_view.idcontinentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnationNull() {
                return this.IsNull(this.tablegeo_region_view.nationColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnationNull() {
                this[this.tablegeo_region_view.nationColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnationdatestartNull() {
                return this.IsNull(this.tablegeo_region_view.nationdatestartColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnationdatestartNull() {
                this[this.tablegeo_region_view.nationdatestartColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnationdatestopNull() {
                return this.IsNull(this.tablegeo_region_view.nationdatestopColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnationdatestopNull() {
                this[this.tablegeo_region_view.nationdatestopColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsoldnationNull() {
                return this.IsNull(this.tablegeo_region_view.oldnationColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetoldnationNull() {
                this[this.tablegeo_region_view.oldnationColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnewnationNull() {
                return this.IsNull(this.tablegeo_region_view.newnationColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnewnationNull() {
                this[this.tablegeo_region_view.newnationColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratevalidityRow[] GetregionalratevalidityRows() {
                return ((regionalratevalidityRow[])(base.GetChildRows(this.Table.ChildRelations["regionalratevaliditygeo_region_view"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class regionalratevalidityviewRow : System.Data.DataRow {
            
            private regionalratevalidityviewDataTable tableregionalratevalidityview;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal regionalratevalidityviewRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableregionalratevalidityview = ((regionalratevalidityviewDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int taxcode {
                get {
                    return ((int)(this[this.tableregionalratevalidityview.taxcodeColumn]));
                }
                set {
                    this[this.tableregionalratevalidityview.taxcodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idregion {
                get {
                    return ((int)(this[this.tableregionalratevalidityview.idregionColumn]));
                }
                set {
                    this[this.tableregionalratevalidityview.idregionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string region {
                get {
                    try {
                        return ((string)(this[this.tableregionalratevalidityview.regionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("Il valore della colonna \'region\' nella tabella \'regionalratevalidityview\' è DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableregionalratevalidityview.regionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime validitystart {
                get {
                    return ((System.DateTime)(this[this.tableregionalratevalidityview.validitystartColumn]));
                }
                set {
                    this[this.tableregionalratevalidityview.validitystartColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsregionNull() {
                return this.IsNull(this.tableregionalratevalidityview.regionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetregionNull() {
                this[this.tableregionalratevalidityview.regionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class regionalratevalidityRowChangeEvent : System.EventArgs {
            
            private regionalratevalidityRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratevalidityRowChangeEvent(regionalratevalidityRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratevalidityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class taxRowChangeEvent : System.EventArgs {
            
            private taxRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxRowChangeEvent(taxRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class regionalratebracketRowChangeEvent : System.EventArgs {
            
            private regionalratebracketRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratebracketRowChangeEvent(regionalratebracketRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratebracketRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class geo_region_viewRowChangeEvent : System.EventArgs {
            
            private geo_region_viewRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public geo_region_viewRowChangeEvent(geo_region_viewRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public geo_region_viewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class regionalratevalidityviewRowChangeEvent : System.EventArgs {
            
            private regionalratevalidityviewRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratevalidityviewRowChangeEvent(regionalratevalidityviewRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public regionalratevalidityviewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
