
/*
Easy
Copyright (C) 2022 Università degli Studi di Catania (www.unict.it)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2300
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace proceedsdetail_single {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class vistaForm : DataSet {
        
        private proceedsdetailDataTable tableproceedsdetail;
        
        public vistaForm() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected vistaForm(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["proceedsdetail"] != null)) {
                    this.Tables.Add(new proceedsdetailDataTable(ds.Tables["proceedsdetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public proceedsdetailDataTable proceedsdetail {
            get {
                return this.tableproceedsdetail;
            }
        }
        
        public override DataSet Clone() {
            vistaForm cln = ((vistaForm)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["proceedsdetail"] != null)) {
                this.Tables.Add(new proceedsdetailDataTable(ds.Tables["proceedsdetail"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableproceedsdetail = ((proceedsdetailDataTable)(this.Tables["proceedsdetail"]));
            if ((this.tableproceedsdetail != null)) {
                this.tableproceedsdetail.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "vistaForm";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/vistaForm.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableproceedsdetail = new proceedsdetailDataTable();
            this.Tables.Add(this.tableproceedsdetail);
        }
        
        private bool ShouldSerializeproceedsdetail() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void proceedsdetailRowChangeEventHandler(object sender, proceedsdetailRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class proceedsdetailDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnypro;
            
            private DataColumn columnnpro;
            
            private DataColumn columnnoperation;
            
            private DataColumn columnbankreference;
            
            private DataColumn columntransactiondate;
            
            private DataColumn columnvaluedate;
            
            private DataColumn columnamount;
            
            private DataColumn columncu;
            
            private DataColumn columnct;
            
            private DataColumn columnlu;
            
            private DataColumn columnlt;
            
            internal proceedsdetailDataTable() : 
                    base("proceedsdetail") {
                this.InitClass();
            }
            
            internal proceedsdetailDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn yproColumn {
                get {
                    return this.columnypro;
                }
            }
            
            internal DataColumn nproColumn {
                get {
                    return this.columnnpro;
                }
            }
            
            internal DataColumn noperationColumn {
                get {
                    return this.columnnoperation;
                }
            }
            
            internal DataColumn bankreferenceColumn {
                get {
                    return this.columnbankreference;
                }
            }
            
            internal DataColumn transactiondateColumn {
                get {
                    return this.columntransactiondate;
                }
            }
            
            internal DataColumn valuedateColumn {
                get {
                    return this.columnvaluedate;
                }
            }
            
            internal DataColumn amountColumn {
                get {
                    return this.columnamount;
                }
            }
            
            internal DataColumn cuColumn {
                get {
                    return this.columncu;
                }
            }
            
            internal DataColumn ctColumn {
                get {
                    return this.columnct;
                }
            }
            
            internal DataColumn luColumn {
                get {
                    return this.columnlu;
                }
            }
            
            internal DataColumn ltColumn {
                get {
                    return this.columnlt;
                }
            }
            
            public proceedsdetailRow this[int index] {
                get {
                    return ((proceedsdetailRow)(this.Rows[index]));
                }
            }
            
            public event proceedsdetailRowChangeEventHandler proceedsdetailRowChanged;
            
            public event proceedsdetailRowChangeEventHandler proceedsdetailRowChanging;
            
            public event proceedsdetailRowChangeEventHandler proceedsdetailRowDeleted;
            
            public event proceedsdetailRowChangeEventHandler proceedsdetailRowDeleting;
            
            public void AddproceedsdetailRow(proceedsdetailRow row) {
                this.Rows.Add(row);
            }
            
            public proceedsdetailRow AddproceedsdetailRow(short ypro, int npro, int noperation, string bankreference, System.DateTime transactiondate, System.DateTime valuedate, System.Decimal amount, string cu, System.DateTime ct, string lu, System.DateTime lt) {
                proceedsdetailRow rowproceedsdetailRow = ((proceedsdetailRow)(this.NewRow()));
                rowproceedsdetailRow.ItemArray = new object[] {
                        ypro,
                        npro,
                        noperation,
                        bankreference,
                        transactiondate,
                        valuedate,
                        amount,
                        cu,
                        ct,
                        lu,
                        lt};
                this.Rows.Add(rowproceedsdetailRow);
                return rowproceedsdetailRow;
            }
            
            public proceedsdetailRow FindByypronpronoperation(short ypro, int npro, int noperation) {
                return ((proceedsdetailRow)(this.Rows.Find(new object[] {
                            ypro,
                            npro,
                            noperation})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                proceedsdetailDataTable cln = ((proceedsdetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new proceedsdetailDataTable();
            }
            
            internal void InitVars() {
                this.columnypro = this.Columns["ypro"];
                this.columnnpro = this.Columns["npro"];
                this.columnnoperation = this.Columns["noperation"];
                this.columnbankreference = this.Columns["bankreference"];
                this.columntransactiondate = this.Columns["transactiondate"];
                this.columnvaluedate = this.Columns["valuedate"];
                this.columnamount = this.Columns["amount"];
                this.columncu = this.Columns["cu"];
                this.columnct = this.Columns["ct"];
                this.columnlu = this.Columns["lu"];
                this.columnlt = this.Columns["lt"];
            }
            
            private void InitClass() {
                this.columnypro = new DataColumn("ypro", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnypro);
                this.columnnpro = new DataColumn("npro", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnpro);
                this.columnnoperation = new DataColumn("noperation", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnoperation);
                this.columnbankreference = new DataColumn("bankreference", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbankreference);
                this.columntransactiondate = new DataColumn("transactiondate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntransactiondate);
                this.columnvaluedate = new DataColumn("valuedate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvaluedate);
                this.columnamount = new DataColumn("amount", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnamount);
                this.columncu = new DataColumn("cu", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncu);
                this.columnct = new DataColumn("ct", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnct);
                this.columnlu = new DataColumn("lu", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlu);
                this.columnlt = new DataColumn("lt", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlt);
                this.Constraints.Add(new UniqueConstraint("vistaFormKey1", new DataColumn[] {
                                this.columnypro,
                                this.columnnpro,
                                this.columnnoperation}, true));
                this.columnypro.AllowDBNull = false;
                this.columnnpro.AllowDBNull = false;
                this.columnnoperation.AllowDBNull = false;
                this.columnamount.AllowDBNull = false;
                this.columncu.AllowDBNull = false;
                this.columnct.AllowDBNull = false;
                this.columnlu.AllowDBNull = false;
                this.columnlt.AllowDBNull = false;
            }
            
            public proceedsdetailRow NewproceedsdetailRow() {
                return ((proceedsdetailRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new proceedsdetailRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(proceedsdetailRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.proceedsdetailRowChanged != null)) {
                    this.proceedsdetailRowChanged(this, new proceedsdetailRowChangeEvent(((proceedsdetailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.proceedsdetailRowChanging != null)) {
                    this.proceedsdetailRowChanging(this, new proceedsdetailRowChangeEvent(((proceedsdetailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.proceedsdetailRowDeleted != null)) {
                    this.proceedsdetailRowDeleted(this, new proceedsdetailRowChangeEvent(((proceedsdetailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.proceedsdetailRowDeleting != null)) {
                    this.proceedsdetailRowDeleting(this, new proceedsdetailRowChangeEvent(((proceedsdetailRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveproceedsdetailRow(proceedsdetailRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class proceedsdetailRow : DataRow {
            
            private proceedsdetailDataTable tableproceedsdetail;
            
            internal proceedsdetailRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableproceedsdetail = ((proceedsdetailDataTable)(this.Table));
            }
            
            public short ypro {
                get {
                    return ((short)(this[this.tableproceedsdetail.yproColumn]));
                }
                set {
                    this[this.tableproceedsdetail.yproColumn] = value;
                }
            }
            
            public int npro {
                get {
                    return ((int)(this[this.tableproceedsdetail.nproColumn]));
                }
                set {
                    this[this.tableproceedsdetail.nproColumn] = value;
                }
            }
            
            public int noperation {
                get {
                    return ((int)(this[this.tableproceedsdetail.noperationColumn]));
                }
                set {
                    this[this.tableproceedsdetail.noperationColumn] = value;
                }
            }
            
            public string bankreference {
                get {
                    try {
                        return ((string)(this[this.tableproceedsdetail.bankreferenceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproceedsdetail.bankreferenceColumn] = value;
                }
            }
            
            public System.DateTime transactiondate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableproceedsdetail.transactiondateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproceedsdetail.transactiondateColumn] = value;
                }
            }
            
            public System.DateTime valuedate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableproceedsdetail.valuedateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproceedsdetail.valuedateColumn] = value;
                }
            }
            
            public System.Decimal amount {
                get {
                    return ((System.Decimal)(this[this.tableproceedsdetail.amountColumn]));
                }
                set {
                    this[this.tableproceedsdetail.amountColumn] = value;
                }
            }
            
            public string cu {
                get {
                    return ((string)(this[this.tableproceedsdetail.cuColumn]));
                }
                set {
                    this[this.tableproceedsdetail.cuColumn] = value;
                }
            }
            
            public System.DateTime ct {
                get {
                    return ((System.DateTime)(this[this.tableproceedsdetail.ctColumn]));
                }
                set {
                    this[this.tableproceedsdetail.ctColumn] = value;
                }
            }
            
            public string lu {
                get {
                    return ((string)(this[this.tableproceedsdetail.luColumn]));
                }
                set {
                    this[this.tableproceedsdetail.luColumn] = value;
                }
            }
            
            public System.DateTime lt {
                get {
                    return ((System.DateTime)(this[this.tableproceedsdetail.ltColumn]));
                }
                set {
                    this[this.tableproceedsdetail.ltColumn] = value;
                }
            }
            
            public bool IsbankreferenceNull() {
                return this.IsNull(this.tableproceedsdetail.bankreferenceColumn);
            }
            
            public void SetbankreferenceNull() {
                this[this.tableproceedsdetail.bankreferenceColumn] = System.Convert.DBNull;
            }
            
            public bool IstransactiondateNull() {
                return this.IsNull(this.tableproceedsdetail.transactiondateColumn);
            }
            
            public void SettransactiondateNull() {
                this[this.tableproceedsdetail.transactiondateColumn] = System.Convert.DBNull;
            }
            
            public bool IsvaluedateNull() {
                return this.IsNull(this.tableproceedsdetail.valuedateColumn);
            }
            
            public void SetvaluedateNull() {
                this[this.tableproceedsdetail.valuedateColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class proceedsdetailRowChangeEvent : EventArgs {
            
            private proceedsdetailRow eventRow;
            
            private DataRowAction eventAction;
            
            public proceedsdetailRowChangeEvent(proceedsdetailRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public proceedsdetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
