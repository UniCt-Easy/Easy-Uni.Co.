
/*
Easy
Copyright (C) 2022 Università degli Studi di Catania (www.unict.it)
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.1.854 Microsoft Reciprocal License (Ms-RL) 
//    <NameSpace>servicetrasmission_default</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>True</AutomaticProperties><GenerateShouldSerialize>True</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace servicetrasmission_default {
	using System;
	using System.Diagnostics;
	using System.Xml.Serialization;
	using System.Collections;
	using System.Xml.Schema;
	using System.ComponentModel;
	using System.IO;
	using System.Text;
	using System.Collections.Generic;
    using System.Globalization;

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = false)]
	public partial class comunicazione {

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlElementAttribute("cancellazioneincarico", typeof(cancellazioneincarico_incarico))]
		[System.Xml.Serialization.XmlElementAttribute("inserimentoincaricoconsulente", typeof(inserimento_incarico_consulente))]
		[System.Xml.Serialization.XmlElementAttribute("inserimentoincaricodipendente", typeof(inserimentoincaricodipendente))]
		[System.Xml.Serialization.XmlElementAttribute("variazioneincaricococonsulente", typeof(variazione_incarico_consulente))]
		[System.Xml.Serialization.XmlElementAttribute("variazioneincaricodipendente", typeof(variazione_incarico_dipendente))]
		public object Item { get; set; }


		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(comunicazione));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current comunicazione object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an comunicazione object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output comunicazione object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out comunicazione obj, out System.Exception exception) {
			exception = null;
			obj = default(comunicazione);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out comunicazione obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static comunicazione Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((comunicazione)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current comunicazione object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an comunicazione object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output comunicazione object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out comunicazione obj, out System.Exception exception) {
			exception = null;
			obj = default(comunicazione);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out comunicazione obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static comunicazione LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = true)]
	public partial class cancellazioneincarico_incarico {

		private amministrazione_dichiarante amministrazionedichiaranteField;

		private cancellazioneincarico_incaricoDatiincarico datiincaricoField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public cancellazioneincarico_incarico() {
			this.datiincaricoField = new cancellazioneincarico_incaricoDatiincarico();
			this.amministrazionedichiaranteField = new amministrazione_dichiarante();
		}

		public amministrazione_dichiarante amministrazionedichiarante {
			get {
				return this.amministrazionedichiaranteField;
			}
			set {
				this.amministrazionedichiaranteField = value;
			}
		}

		public cancellazioneincarico_incaricoDatiincarico datiincarico {
			get {
				return this.datiincaricoField;
			}
			set {
				this.datiincaricoField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(cancellazioneincarico_incarico));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current cancellazioneincarico_incarico object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an cancellazioneincarico_incarico object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output cancellazioneincarico_incarico object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out cancellazioneincarico_incarico obj, out System.Exception exception) {
			exception = null;
			obj = default(cancellazioneincarico_incarico);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out cancellazioneincarico_incarico obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static cancellazioneincarico_incarico Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((cancellazioneincarico_incarico)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current cancellazioneincarico_incarico object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an cancellazioneincarico_incarico object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output cancellazioneincarico_incarico object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out cancellazioneincarico_incarico obj, out System.Exception exception) {
			exception = null;
			obj = default(cancellazioneincarico_incarico);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out cancellazioneincarico_incarico obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static cancellazioneincarico_incarico LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = true)]
	public partial class amministrazione_dichiarante {

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string codicePaIpa { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string codiceFiscalePa { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string codiceAooIpa { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string codiceUoIpa { get; set; }


		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(amministrazione_dichiarante));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current amministrazione_dichiarante object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an amministrazione_dichiarante object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output amministrazione_dichiarante object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out amministrazione_dichiarante obj, out System.Exception exception) {
			exception = null;
			obj = default(amministrazione_dichiarante);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out amministrazione_dichiarante obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static amministrazione_dichiarante Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((amministrazione_dichiarante)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current amministrazione_dichiarante object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an amministrazione_dichiarante object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output amministrazione_dichiarante object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out amministrazione_dichiarante obj, out System.Exception exception) {
			exception = null;
			obj = default(amministrazione_dichiarante);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out amministrazione_dichiarante obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static amministrazione_dichiarante LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = true)]
	public partial class dati_economici_incarico_consulente_variazione {

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
		public string tipoCompenso { get; set; }

		[System.Xml.Serialization.XmlIgnore]
		public decimal _compenso;

		[System.Xml.Serialization.XmlAttributeAttribute(DataType="string")]
		public string  compenso
		{
			get { return _compenso.ToString("0.00", CultureInfo.InvariantCulture); }
			set { _compenso = Convert.ToDecimal(value); }
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public yesNo componentiVariabilCompenso { get; set; }

		[System.Xml.Serialization.XmlIgnore]
		public decimal _ammontareErogato;

		[System.Xml.Serialization.XmlAttributeAttribute(DataType="string")]
		public string  ammontareErogato
		{
			get { return _ammontareErogato.ToString("0.00", CultureInfo.InvariantCulture); }
			set { _ammontareErogato = Convert.ToDecimal(value); }
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public yesNo incaricoSaldato { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime dataFine { get; set; }

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool dataFineSpecified { get; set; }


		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(dati_economici_incarico_consulente_variazione));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current dati_economici_incarico_consulente_variazione object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an dati_economici_incarico_consulente_variazione object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output dati_economici_incarico_consulente_variazione object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out dati_economici_incarico_consulente_variazione obj, out System.Exception exception) {
			exception = null;
			obj = default(dati_economici_incarico_consulente_variazione);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out dati_economici_incarico_consulente_variazione obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static dati_economici_incarico_consulente_variazione Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((dati_economici_incarico_consulente_variazione)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current dati_economici_incarico_consulente_variazione object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an dati_economici_incarico_consulente_variazione object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output dati_economici_incarico_consulente_variazione object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out dati_economici_incarico_consulente_variazione obj, out System.Exception exception) {
			exception = null;
			obj = default(dati_economici_incarico_consulente_variazione);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out dati_economici_incarico_consulente_variazione obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static dati_economici_incarico_consulente_variazione LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = false)]
	public enum yesNo {

		/// <remarks/>
		Y,

		/// <remarks/>
		N,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = true)]
	public partial class dati_incarico_consulente_variazione {

		private dati_economici_incarico_consulente_variazione dateconomiciField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public ulong idIncarico { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string oggettoIncarico { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string estremiAttoConferimento { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
		public string serviziIstituzioniPubbliche { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
		public string tipoRapporto { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
		public string naturaConferimento { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public yesNo attestazioneVerificaInsussistenza { get; set; }

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool attestazioneVerificaInsussistenzaSpecified { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "anyURI")]
		public string sitoWebTrasparenza { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public yesNo riferimentoRegolamento { get; set; }

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool riferimentoRegolamentoSpecified { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime dataRevoca { get; set; }

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool dataRevocaSpecified { get; set; }


		public dati_incarico_consulente_variazione() {
			this.dateconomiciField = new dati_economici_incarico_consulente_variazione();
		}

		public dati_economici_incarico_consulente_variazione dateconomici {
			get {
				return this.dateconomiciField;
			}
			set {
				this.dateconomiciField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(dati_incarico_consulente_variazione));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current dati_incarico_consulente_variazione object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an dati_incarico_consulente_variazione object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output dati_incarico_consulente_variazione object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out dati_incarico_consulente_variazione obj, out System.Exception exception) {
			exception = null;
			obj = default(dati_incarico_consulente_variazione);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out dati_incarico_consulente_variazione obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static dati_incarico_consulente_variazione Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((dati_incarico_consulente_variazione)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current dati_incarico_consulente_variazione object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an dati_incarico_consulente_variazione object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output dati_incarico_consulente_variazione object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out dati_incarico_consulente_variazione obj, out System.Exception exception) {
			exception = null;
			obj = default(dati_incarico_consulente_variazione);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out dati_incarico_consulente_variazione obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static dati_incarico_consulente_variazione LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = true)]
	public partial class variazione_incarico_consulente {

		private amministrazione_dichiarante amministrazionedichiaranteField;

		private dati_incarico_consulente_variazione datiincaricoField;

		private riferimentonormativo riferimentonormativoField;

		private variazione_incarico_consulenteAllegati allegatiField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public variazione_incarico_consulente() {
			this.allegatiField = new variazione_incarico_consulenteAllegati();
			this.riferimentonormativoField = new riferimentonormativo();
			this.datiincaricoField = new dati_incarico_consulente_variazione();
			this.amministrazionedichiaranteField = new amministrazione_dichiarante();
		}

		public amministrazione_dichiarante amministrazionedichiarante {
			get {
				return this.amministrazionedichiaranteField;
			}
			set {
				this.amministrazionedichiaranteField = value;
			}
		}

		public dati_incarico_consulente_variazione datiincarico {
			get {
				return this.datiincaricoField;
			}
			set {
				this.datiincaricoField = value;
			}
		}

		public riferimentonormativo riferimentonormativo {
			get {
				return this.riferimentonormativoField;
			}
			set {
				this.riferimentonormativoField = value;
			}
		}

		public variazione_incarico_consulenteAllegati allegati {
			get {
				return this.allegatiField;
			}
			set {
				this.allegatiField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(variazione_incarico_consulente));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current variazione_incarico_consulente object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an variazione_incarico_consulente object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output variazione_incarico_consulente object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out variazione_incarico_consulente obj, out System.Exception exception) {
			exception = null;
			obj = default(variazione_incarico_consulente);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out variazione_incarico_consulente obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static variazione_incarico_consulente Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((variazione_incarico_consulente)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current variazione_incarico_consulente object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an variazione_incarico_consulente object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output variazione_incarico_consulente object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out variazione_incarico_consulente obj, out System.Exception exception) {
			exception = null;
			obj = default(variazione_incarico_consulente);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out variazione_incarico_consulente obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static variazione_incarico_consulente LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = true)]
	public partial class riferimentonormativo {

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
		public string riferimento { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string numero { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string articolo { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string comma { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime data { get; set; }


		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(riferimentonormativo));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current riferimentonormativo object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an riferimentonormativo object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output riferimentonormativo object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out riferimentonormativo obj, out System.Exception exception) {
			exception = null;
			obj = default(riferimentonormativo);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out riferimentonormativo obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static riferimentonormativo Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((riferimentonormativo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current riferimentonormativo object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an riferimentonormativo object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output riferimentonormativo object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out riferimentonormativo obj, out System.Exception exception) {
			exception = null;
			obj = default(riferimentonormativo);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out riferimentonormativo obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static riferimentonormativo LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	public partial class variazione_incarico_consulenteAllegati {

		private static System.Xml.Serialization.XmlSerializer serializer;

		public object fileCv { get; set; }

		public object fileDichiarazioneIncarichi { get; set; }


		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(variazione_incarico_consulenteAllegati));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current variazione_incarico_consulenteAllegati object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an variazione_incarico_consulenteAllegati object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output variazione_incarico_consulenteAllegati object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out variazione_incarico_consulenteAllegati obj, out System.Exception exception) {
			exception = null;
			obj = default(variazione_incarico_consulenteAllegati);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out variazione_incarico_consulenteAllegati obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static variazione_incarico_consulenteAllegati Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((variazione_incarico_consulenteAllegati)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current variazione_incarico_consulenteAllegati object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an variazione_incarico_consulenteAllegati object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output variazione_incarico_consulenteAllegati object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out variazione_incarico_consulenteAllegati obj, out System.Exception exception) {
			exception = null;
			obj = default(variazione_incarico_consulenteAllegati);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out variazione_incarico_consulenteAllegati obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static variazione_incarico_consulenteAllegati LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = true)]
	public partial class dati_economici_incarico_consulente_inserimento {

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
		public string tipoCompenso { get; set; }

		[System.Xml.Serialization.XmlIgnore]
		public decimal _compenso;

		[System.Xml.Serialization.XmlAttributeAttribute(DataType="string")]
		public string  compenso
		{
			get { return _compenso.ToString("0.00", CultureInfo.InvariantCulture); }
			set { _compenso = Convert.ToDecimal(value); }
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public yesNo componentiVariabilCompenso { get; set; }

		[System.Xml.Serialization.XmlIgnore]
		public decimal _ammontareErogato;

		[System.Xml.Serialization.XmlAttributeAttribute(DataType="string")]
		public string  ammontareErogato
		{
			get { return _ammontareErogato.ToString("0.00", CultureInfo.InvariantCulture); }
			set { _ammontareErogato = Convert.ToDecimal(value); }
		}


		[System.Xml.Serialization.XmlAttributeAttribute()]
		public yesNo incaricoSaldato { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime dataFine { get; set; }

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool dataFineSpecified { get; set; }


		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(dati_economici_incarico_consulente_inserimento));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current dati_economici_incarico_consulente_inserimento object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an dati_economici_incarico_consulente_inserimento object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output dati_economici_incarico_consulente_inserimento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out dati_economici_incarico_consulente_inserimento obj, out System.Exception exception) {
			exception = null;
			obj = default(dati_economici_incarico_consulente_inserimento);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out dati_economici_incarico_consulente_inserimento obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static dati_economici_incarico_consulente_inserimento Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((dati_economici_incarico_consulente_inserimento)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current dati_economici_incarico_consulente_inserimento object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an dati_economici_incarico_consulente_inserimento object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output dati_economici_incarico_consulente_inserimento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out dati_economici_incarico_consulente_inserimento obj, out System.Exception exception) {
			exception = null;
			obj = default(dati_economici_incarico_consulente_inserimento);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out dati_economici_incarico_consulente_inserimento obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static dati_economici_incarico_consulente_inserimento LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = true)]
	public partial class dati_incarico_consulente_inserimento {

		private dati_economici_incarico_consulente_inserimento dateconomiciField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string oggettoIncarico { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime dataConferimento { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime dataInizio { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string estremiAttoConferimento { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
		public string serviziIstituzioniPubbliche { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
		public string tipoRapporto { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
		public string naturaConferimento { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public yesNo attestazioneVerificaInsussistenza { get; set; }

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool attestazioneVerificaInsussistenzaSpecified { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "anyURI")]
		public string sitoWebTrasparenza { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public yesNo riferimentoRegolamento { get; set; }


		public dati_incarico_consulente_inserimento() {
			this.dateconomiciField = new dati_economici_incarico_consulente_inserimento();
		}

		public dati_economici_incarico_consulente_inserimento dateconomici {
			get {
				return this.dateconomiciField;
			}
			set {
				this.dateconomiciField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(dati_incarico_consulente_inserimento));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current dati_incarico_consulente_inserimento object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an dati_incarico_consulente_inserimento object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output dati_incarico_consulente_inserimento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out dati_incarico_consulente_inserimento obj, out System.Exception exception) {
			exception = null;
			obj = default(dati_incarico_consulente_inserimento);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out dati_incarico_consulente_inserimento obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static dati_incarico_consulente_inserimento Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((dati_incarico_consulente_inserimento)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current dati_incarico_consulente_inserimento object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an dati_incarico_consulente_inserimento object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output dati_incarico_consulente_inserimento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out dati_incarico_consulente_inserimento obj, out System.Exception exception) {
			exception = null;
			obj = default(dati_incarico_consulente_inserimento);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out dati_incarico_consulente_inserimento obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static dati_incarico_consulente_inserimento LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = true)]
	public partial class inserimento_incarico_consulente {

		private amministrazione_dichiarante amministrazionedichiaranteField;

		private inserimento_incarico_consulentePercettore percettoreField;

		private dati_incarico_consulente_inserimento datiincaricoField;

		private riferimentonormativo riferimentonormativoField;

		private inserimento_incarico_consulenteAllegati allegatiField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public inserimento_incarico_consulente() {
			this.allegatiField = new inserimento_incarico_consulenteAllegati();
			this.riferimentonormativoField = new riferimentonormativo();
			this.datiincaricoField = new dati_incarico_consulente_inserimento();
			this.percettoreField = new inserimento_incarico_consulentePercettore();
			this.amministrazionedichiaranteField = new amministrazione_dichiarante();
		}

		public amministrazione_dichiarante amministrazionedichiarante {
			get {
				return this.amministrazionedichiaranteField;
			}
			set {
				this.amministrazionedichiaranteField = value;
			}
		}

		public inserimento_incarico_consulentePercettore percettore {
			get {
				return this.percettoreField;
			}
			set {
				this.percettoreField = value;
			}
		}

		public dati_incarico_consulente_inserimento datiincarico {
			get {
				return this.datiincaricoField;
			}
			set {
				this.datiincaricoField = value;
			}
		}

		public riferimentonormativo riferimentonormativo {
			get {
				return this.riferimentonormativoField;
			}
			set {
				this.riferimentonormativoField = value;
			}
		}

		public inserimento_incarico_consulenteAllegati allegati {
			get {
				return this.allegatiField;
			}
			set {
				this.allegatiField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(inserimento_incarico_consulente));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current inserimento_incarico_consulente object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an inserimento_incarico_consulente object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output inserimento_incarico_consulente object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out inserimento_incarico_consulente obj, out System.Exception exception) {
			exception = null;
			obj = default(inserimento_incarico_consulente);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out inserimento_incarico_consulente obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static inserimento_incarico_consulente Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((inserimento_incarico_consulente)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current inserimento_incarico_consulente object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an inserimento_incarico_consulente object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output inserimento_incarico_consulente object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out inserimento_incarico_consulente obj, out System.Exception exception) {
			exception = null;
			obj = default(inserimento_incarico_consulente);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out inserimento_incarico_consulente obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static inserimento_incarico_consulente LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	public partial class inserimento_incarico_consulentePercettore {

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlElementAttribute("percettorepf", typeof(inserimento_incarico_consulentePercettorePercettorepf))]
		[System.Xml.Serialization.XmlElementAttribute("percettorepg", typeof(inserimento_incarico_consulentePercettorePercettorepg))]
		public object Item { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public tipoConsulente tipologia { get; set; }


		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(inserimento_incarico_consulentePercettore));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current inserimento_incarico_consulentePercettore object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an inserimento_incarico_consulentePercettore object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output inserimento_incarico_consulentePercettore object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out inserimento_incarico_consulentePercettore obj, out System.Exception exception) {
			exception = null;
			obj = default(inserimento_incarico_consulentePercettore);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out inserimento_incarico_consulentePercettore obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static inserimento_incarico_consulentePercettore Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((inserimento_incarico_consulentePercettore)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current inserimento_incarico_consulentePercettore object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an inserimento_incarico_consulentePercettore object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output inserimento_incarico_consulentePercettore object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out inserimento_incarico_consulentePercettore obj, out System.Exception exception) {
			exception = null;
			obj = default(inserimento_incarico_consulentePercettore);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out inserimento_incarico_consulentePercettore obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static inserimento_incarico_consulentePercettore LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	public partial class inserimento_incarico_consulentePercettorePercettorepf {

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public yesNo estero { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string codiceFiscale { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string cognome { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string nome { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public Sesso genere { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime dataNascita { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string comuneNascita { get; set; }


		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(inserimento_incarico_consulentePercettorePercettorepf));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current inserimento_incarico_consulentePercettorePercettorepf object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an inserimento_incarico_consulentePercettorePercettorepf object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output inserimento_incarico_consulentePercettorePercettorepf object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out inserimento_incarico_consulentePercettorePercettorepf obj, out System.Exception exception) {
			exception = null;
			obj = default(inserimento_incarico_consulentePercettorePercettorepf);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out inserimento_incarico_consulentePercettorePercettorepf obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static inserimento_incarico_consulentePercettorePercettorepf Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((inserimento_incarico_consulentePercettorePercettorepf)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current inserimento_incarico_consulentePercettorePercettorepf object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an inserimento_incarico_consulentePercettorePercettorepf object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output inserimento_incarico_consulentePercettorePercettorepf object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out inserimento_incarico_consulentePercettorePercettorepf obj, out System.Exception exception) {
			exception = null;
			obj = default(inserimento_incarico_consulentePercettorePercettorepf);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out inserimento_incarico_consulentePercettorePercettorepf obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static inserimento_incarico_consulentePercettorePercettorepf LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = false)]
	public enum Sesso {

		/// <remarks/>
		M,

		/// <remarks/>
		F,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	public partial class inserimento_incarico_consulentePercettorePercettorepg {

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public yesNo estero { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string codiceFiscale { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string denominazione { get; set; }


		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(inserimento_incarico_consulentePercettorePercettorepg));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current inserimento_incarico_consulentePercettorePercettorepg object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an inserimento_incarico_consulentePercettorePercettorepg object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output inserimento_incarico_consulentePercettorePercettorepg object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out inserimento_incarico_consulentePercettorePercettorepg obj, out System.Exception exception) {
			exception = null;
			obj = default(inserimento_incarico_consulentePercettorePercettorepg);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out inserimento_incarico_consulentePercettorePercettorepg obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static inserimento_incarico_consulentePercettorePercettorepg Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((inserimento_incarico_consulentePercettorePercettorepg)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current inserimento_incarico_consulentePercettorePercettorepg object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an inserimento_incarico_consulentePercettorePercettorepg object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output inserimento_incarico_consulentePercettorePercettorepg object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out inserimento_incarico_consulentePercettorePercettorepg obj, out System.Exception exception) {
			exception = null;
			obj = default(inserimento_incarico_consulentePercettorePercettorepg);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out inserimento_incarico_consulentePercettorePercettorepg obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static inserimento_incarico_consulentePercettorePercettorepg LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = false)]
	public enum tipoConsulente {

		/// <remarks/>
		F,

		/// <remarks/>
		G,
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	public partial class inserimento_incarico_consulenteAllegati {

		private static System.Xml.Serialization.XmlSerializer serializer;

	
		public object fileCv { get; set; }

		public object fileDichiarazioneIncarichi { get; set; }


		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(inserimento_incarico_consulenteAllegati));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current inserimento_incarico_consulenteAllegati object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an inserimento_incarico_consulenteAllegati object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output inserimento_incarico_consulenteAllegati object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out inserimento_incarico_consulenteAllegati obj, out System.Exception exception) {
			exception = null;
			obj = default(inserimento_incarico_consulenteAllegati);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out inserimento_incarico_consulenteAllegati obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static inserimento_incarico_consulenteAllegati Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((inserimento_incarico_consulenteAllegati)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current inserimento_incarico_consulenteAllegati object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an inserimento_incarico_consulenteAllegati object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output inserimento_incarico_consulenteAllegati object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out inserimento_incarico_consulenteAllegati obj, out System.Exception exception) {
			exception = null;
			obj = default(inserimento_incarico_consulenteAllegati);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out inserimento_incarico_consulenteAllegati obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static inserimento_incarico_consulenteAllegati LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[AttributeUsage(AttributeTargets.Property)]
	public class DecimalFormatterAttribute : Attribute
	{
		public DecimalFormatterAttribute(string formatString)
		{
			Format = formatString;
		}

		public string Format { get; private set; }
	}


	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = true)]
	public partial class dati_economici_incarico_dipendente_variazione {

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
		public string tipoCompenso { get; set; }

		[System.Xml.Serialization.XmlIgnore]
		public decimal _compenso;

		[System.Xml.Serialization.XmlAttributeAttribute(DataType="string")]
		public string  compenso
		{
			get { return _compenso.ToString("0.00", CultureInfo.InvariantCulture); }
			set { _compenso = Convert.ToDecimal(value); }
		}

		[System.Xml.Serialization.XmlIgnore]
		public  decimal  _ammontareErogato;

		[System.Xml.Serialization.XmlAttributeAttribute(DataType="string")]
		public string  ammontareErogato
		{
			get { return _ammontareErogato.ToString("0.00", CultureInfo.InvariantCulture); }
			set { _ammontareErogato = Convert.ToDecimal(value); }
		}


		[System.Xml.Serialization.XmlAttributeAttribute()]
		public yesNo incaricoSaldato { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime dataFine { get; set; }

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool dataFineSpecified { get; set; }


		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(dati_economici_incarico_dipendente_variazione));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current dati_economici_incarico_dipendente_variazione object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an dati_economici_incarico_dipendente_variazione object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output dati_economici_incarico_dipendente_variazione object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out dati_economici_incarico_dipendente_variazione obj, out System.Exception exception) {
			exception = null;
			obj = default(dati_economici_incarico_dipendente_variazione);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out dati_economici_incarico_dipendente_variazione obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static dati_economici_incarico_dipendente_variazione Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((dati_economici_incarico_dipendente_variazione)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current dati_economici_incarico_dipendente_variazione object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an dati_economici_incarico_dipendente_variazione object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output dati_economici_incarico_dipendente_variazione object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out dati_economici_incarico_dipendente_variazione obj, out System.Exception exception) {
			exception = null;
			obj = default(dati_economici_incarico_dipendente_variazione);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out dati_economici_incarico_dipendente_variazione obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static dati_economici_incarico_dipendente_variazione LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = true)]
	public partial class dati_incarico_dipendente_variazione {

		private dati_economici_incarico_dipendente_variazione dateconomiciField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public ulong idIncarico { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
		public string oggettoIncarico { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public yesNo doveriUfficio { get; set; }

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool doveriUfficioSpecified { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "anyURI")]
		public string sitoWebTrasparenza { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime dataRevoca { get; set; }

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool dataRevocaSpecified { get; set; }


		public dati_incarico_dipendente_variazione() {
			this.dateconomiciField = new dati_economici_incarico_dipendente_variazione();
		}

		public dati_economici_incarico_dipendente_variazione dateconomici {
			get {
				return this.dateconomiciField;
			}
			set {
				this.dateconomiciField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(dati_incarico_dipendente_variazione));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current dati_incarico_dipendente_variazione object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an dati_incarico_dipendente_variazione object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output dati_incarico_dipendente_variazione object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out dati_incarico_dipendente_variazione obj, out System.Exception exception) {
			exception = null;
			obj = default(dati_incarico_dipendente_variazione);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out dati_incarico_dipendente_variazione obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static dati_incarico_dipendente_variazione Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((dati_incarico_dipendente_variazione)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current dati_incarico_dipendente_variazione object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an dati_incarico_dipendente_variazione object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output dati_incarico_dipendente_variazione object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out dati_incarico_dipendente_variazione obj, out System.Exception exception) {
			exception = null;
			obj = default(dati_incarico_dipendente_variazione);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out dati_incarico_dipendente_variazione obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static dati_incarico_dipendente_variazione LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = true)]
	public partial class variazione_incarico_dipendente {

		private amministrazione_dichiarante amministrazionedichiaranteField;

		private variazione_incarico_dipendentePercettore percettoreField;

		private conferente conferenteField;

		private dati_incarico_dipendente_variazione datiincaricoField;

		private riferimentonormativo riferimentonormativoField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public variazione_incarico_dipendente() {
			this.riferimentonormativoField = new riferimentonormativo();
			this.datiincaricoField = new dati_incarico_dipendente_variazione();
			this.conferenteField = new conferente();
			this.percettoreField = new variazione_incarico_dipendentePercettore();
			this.amministrazionedichiaranteField = new amministrazione_dichiarante();
		}

		public amministrazione_dichiarante amministrazionedichiarante {
			get {
				return this.amministrazionedichiaranteField;
			}
			set {
				this.amministrazionedichiaranteField = value;
			}
		}

		public variazione_incarico_dipendentePercettore percettore {
			get {
				return this.percettoreField;
			}
			set {
				this.percettoreField = value;
			}
		}

		public conferente conferente {
			get {
				return this.conferenteField;
			}
			set {
				this.conferenteField = value;
			}
		}

		public dati_incarico_dipendente_variazione datiincarico {
			get {
				return this.datiincaricoField;
			}
			set {
				this.datiincaricoField = value;
			}
		}

		public riferimentonormativo riferimentonormativo {
			get {
				return this.riferimentonormativoField;
			}
			set {
				this.riferimentonormativoField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(variazione_incarico_dipendente));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current variazione_incarico_dipendente object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an variazione_incarico_dipendente object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output variazione_incarico_dipendente object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out variazione_incarico_dipendente obj, out System.Exception exception) {
			exception = null;
			obj = default(variazione_incarico_dipendente);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out variazione_incarico_dipendente obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static variazione_incarico_dipendente Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((variazione_incarico_dipendente)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current variazione_incarico_dipendente object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an variazione_incarico_dipendente object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output variazione_incarico_dipendente object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out variazione_incarico_dipendente obj, out System.Exception exception) {
			exception = null;
			obj = default(variazione_incarico_dipendente);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out variazione_incarico_dipendente obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static variazione_incarico_dipendente LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	public partial class variazione_incarico_dipendentePercettore {

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string qualifica { get; set; }


		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(variazione_incarico_dipendentePercettore));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current variazione_incarico_dipendentePercettore object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an variazione_incarico_dipendentePercettore object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output variazione_incarico_dipendentePercettore object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out variazione_incarico_dipendentePercettore obj, out System.Exception exception) {
			exception = null;
			obj = default(variazione_incarico_dipendentePercettore);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out variazione_incarico_dipendentePercettore obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static variazione_incarico_dipendentePercettore Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((variazione_incarico_dipendentePercettore)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current variazione_incarico_dipendentePercettore object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an variazione_incarico_dipendentePercettore object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output variazione_incarico_dipendentePercettore object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out variazione_incarico_dipendentePercettore obj, out System.Exception exception) {
			exception = null;
			obj = default(variazione_incarico_dipendentePercettore);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out variazione_incarico_dipendentePercettore obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static variazione_incarico_dipendentePercettore LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = true)]
	public partial class conferente {

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlElementAttribute("conferentepf", typeof(conferentepf))]
		[System.Xml.Serialization.XmlElementAttribute("conferentepg", typeof(conferentepg))]
		[System.Xml.Serialization.XmlElementAttribute("conferentepubblico", typeof(conferentepubblico))]
		public object Item { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
		public string tipologia { get; set; }


		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(conferente));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current conferente object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an conferente object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output conferente object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out conferente obj, out System.Exception exception) {
			exception = null;
			obj = default(conferente);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out conferente obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static conferente Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((conferente)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current conferente object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an conferente object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output conferente object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out conferente obj, out System.Exception exception) {
			exception = null;
			obj = default(conferente);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out conferente obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static conferente LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = true)]
	public partial class conferentepf {

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string codiceFiscale { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string cognome { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string nome { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public Sesso genere { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime dataNascita { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string comuneNascita { get; set; }


		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(conferentepf));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current conferentepf object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an conferentepf object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output conferentepf object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out conferentepf obj, out System.Exception exception) {
			exception = null;
			obj = default(conferentepf);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out conferentepf obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static conferentepf Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((conferentepf)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current conferentepf object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an conferentepf object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output conferentepf object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out conferentepf obj, out System.Exception exception) {
			exception = null;
			obj = default(conferentepf);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out conferentepf obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static conferentepf LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = true)]
	public partial class conferentepg {

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string codiceFiscale { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string denominazione { get; set; }


		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(conferentepg));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current conferentepg object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an conferentepg object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output conferentepg object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out conferentepg obj, out System.Exception exception) {
			exception = null;
			obj = default(conferentepg);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out conferentepg obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static conferentepg Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((conferentepg)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current conferentepg object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an conferentepg object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output conferentepg object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out conferentepg obj, out System.Exception exception) {
			exception = null;
			obj = default(conferentepg);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out conferentepg obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static conferentepg LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = true)]
	public partial class conferentepubblico {

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string codicePaIpa { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string codiceFiscalePa { get; set; }


		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(conferentepubblico));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current conferentepubblico object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an conferentepubblico object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output conferentepubblico object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out conferentepubblico obj, out System.Exception exception) {
			exception = null;
			obj = default(conferentepubblico);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out conferentepubblico obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static conferentepubblico Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((conferentepubblico)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current conferentepubblico object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an conferentepubblico object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output conferentepubblico object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out conferentepubblico obj, out System.Exception exception) {
			exception = null;
			obj = default(conferentepubblico);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out conferentepubblico obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static conferentepubblico LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = true)]
	public partial class dati_economici_incarico_dipendente_inserimento {

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
		public string tipoCompenso { get; set; }

		[System.Xml.Serialization.XmlIgnore]
		public decimal _compenso;

		[System.Xml.Serialization.XmlAttributeAttribute(DataType="string")]
		public string  compenso
		{
			get { return _compenso.ToString("0.00", CultureInfo.InvariantCulture); }
			set { _compenso = Convert.ToDecimal(value); }
		}

		[System.Xml.Serialization.XmlIgnore]
		public decimal _ammontareErogato;

		[System.Xml.Serialization.XmlAttributeAttribute(DataType="string")]
		public string  ammontareErogato
		{
			get { return _ammontareErogato.ToString("0.00", CultureInfo.InvariantCulture); }
			set { _ammontareErogato = Convert.ToDecimal(value); }
		}

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public yesNo incaricoSaldato { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime dataFine { get; set; }

		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool dataFineSpecified { get; set; }


		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(dati_economici_incarico_dipendente_inserimento));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current dati_economici_incarico_dipendente_inserimento object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an dati_economici_incarico_dipendente_inserimento object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output dati_economici_incarico_dipendente_inserimento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out dati_economici_incarico_dipendente_inserimento obj, out System.Exception exception) {
			exception = null;
			obj = default(dati_economici_incarico_dipendente_inserimento);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out dati_economici_incarico_dipendente_inserimento obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static dati_economici_incarico_dipendente_inserimento Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((dati_economici_incarico_dipendente_inserimento)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current dati_economici_incarico_dipendente_inserimento object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an dati_economici_incarico_dipendente_inserimento object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output dati_economici_incarico_dipendente_inserimento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out dati_economici_incarico_dipendente_inserimento obj, out System.Exception exception) {
			exception = null;
			obj = default(dati_economici_incarico_dipendente_inserimento);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out dati_economici_incarico_dipendente_inserimento obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static dati_economici_incarico_dipendente_inserimento LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = true)]
	public partial class dati_incarico_dipendente_inserimento {

		private dati_economici_incarico_dipendente_inserimento dateconomiciField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
		public string oggettoIncarico { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime dataAutorizzazioneConferimento { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime dataInizio { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public yesNo doveriUfficio { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "anyURI")]
		public string sitoWebTrasparenza { get; set; }


		public dati_incarico_dipendente_inserimento() {
			this.dateconomiciField = new dati_economici_incarico_dipendente_inserimento();
		}

		public dati_economici_incarico_dipendente_inserimento dateconomici {
			get {
				return this.dateconomiciField;
			}
			set {
				this.dateconomiciField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(dati_incarico_dipendente_inserimento));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current dati_incarico_dipendente_inserimento object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an dati_incarico_dipendente_inserimento object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output dati_incarico_dipendente_inserimento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out dati_incarico_dipendente_inserimento obj, out System.Exception exception) {
			exception = null;
			obj = default(dati_incarico_dipendente_inserimento);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out dati_incarico_dipendente_inserimento obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static dati_incarico_dipendente_inserimento Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((dati_incarico_dipendente_inserimento)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current dati_incarico_dipendente_inserimento object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an dati_incarico_dipendente_inserimento object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output dati_incarico_dipendente_inserimento object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out dati_incarico_dipendente_inserimento obj, out System.Exception exception) {
			exception = null;
			obj = default(dati_incarico_dipendente_inserimento);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out dati_incarico_dipendente_inserimento obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static dati_incarico_dipendente_inserimento LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi", IsNullable = true)]
	public partial class inserimentoincaricodipendente {

		private amministrazione_dichiarante amministrazionedichiaranteField;

		private inserimento_incarico_dipendentePercettore percettoreField;

		private conferente conferenteField;

		private dati_incarico_dipendente_inserimento datiincaricoField;

		private riferimentonormativo riferimentonormativoField;

		private static System.Xml.Serialization.XmlSerializer serializer;

		public inserimentoincaricodipendente() {
			this.riferimentonormativoField = new riferimentonormativo();
			this.datiincaricoField = new dati_incarico_dipendente_inserimento();
			this.conferenteField = new conferente();
			this.percettoreField = new inserimento_incarico_dipendentePercettore();
			this.amministrazionedichiaranteField = new amministrazione_dichiarante();
		}

		public amministrazione_dichiarante amministrazionedichiarante {
			get {
				return this.amministrazionedichiaranteField;
			}
			set {
				this.amministrazionedichiaranteField = value;
			}
		}

		public inserimento_incarico_dipendentePercettore percettore {
			get {
				return this.percettoreField;
			}
			set {
				this.percettoreField = value;
			}
		}

		public conferente conferente {
			get {
				return this.conferenteField;
			}
			set {
				this.conferenteField = value;
			}
		}

		public dati_incarico_dipendente_inserimento datiincarico {
			get {
				return this.datiincaricoField;
			}
			set {
				this.datiincaricoField = value;
			}
		}

		public riferimentonormativo riferimentonormativo {
			get {
				return this.riferimentonormativoField;
			}
			set {
				this.riferimentonormativoField = value;
			}
		}

		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(inserimentoincaricodipendente));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current inserimentoincaricodipendente object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an inserimento_incarico_dipendente object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output inserimento_incarico_dipendente object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out inserimentoincaricodipendente obj, out System.Exception exception) {
			exception = null;
			obj = default(inserimentoincaricodipendente);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out inserimentoincaricodipendente obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static inserimentoincaricodipendente Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((inserimentoincaricodipendente)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current inserimento_incarico_dipendente object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an inserimento_incarico_dipendente object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output inserimento_incarico_dipendente object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out inserimentoincaricodipendente obj, out System.Exception exception) {
			exception = null;
			obj = default(inserimentoincaricodipendente);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out inserimentoincaricodipendente obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static inserimentoincaricodipendente LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	public partial class inserimento_incarico_dipendentePercettore {

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string codiceFiscale { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string cognome { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string nome { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public Sesso genere { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime dataNascita { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string comuneNascita { get; set; }

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string qualifica { get; set; }


		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(inserimento_incarico_dipendentePercettore));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current inserimento_incarico_dipendentePercettore object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an inserimento_incarico_dipendentePercettore object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output inserimento_incarico_dipendentePercettore object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out inserimento_incarico_dipendentePercettore obj, out System.Exception exception) {
			exception = null;
			obj = default(inserimento_incarico_dipendentePercettore);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out inserimento_incarico_dipendentePercettore obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static inserimento_incarico_dipendentePercettore Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((inserimento_incarico_dipendentePercettore)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current inserimento_incarico_dipendentePercettore object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an inserimento_incarico_dipendentePercettore object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output inserimento_incarico_dipendentePercettore object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out inserimento_incarico_dipendentePercettore obj, out System.Exception exception) {
			exception = null;
			obj = default(inserimento_incarico_dipendentePercettore);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out inserimento_incarico_dipendentePercettore obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static inserimento_incarico_dipendentePercettore LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://perlapa.gov.it/anagrafeprestazioni_2018_incarichi")]
	public partial class cancellazioneincarico_incaricoDatiincarico {

		private static System.Xml.Serialization.XmlSerializer serializer;

		[System.Xml.Serialization.XmlAttributeAttribute()]
		public ulong idIncarico { get; set; }


		private static System.Xml.Serialization.XmlSerializer Serializer {
			get {
				if ((serializer == null)) {
					serializer = new System.Xml.Serialization.XmlSerializer(typeof(cancellazioneincarico_incaricoDatiincarico));
				}
				return serializer;
			}
		}

		#region Serialize/Deserialize
		/// <summary>
		/// Serializes current cancellazioneincarico_incaricoDatiincarico object into an XML document
		/// </summary>
		/// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.IO.StreamReader streamReader = null;
			System.IO.MemoryStream memoryStream = null;
			try {
				memoryStream = new System.IO.MemoryStream();
				Serializer.Serialize(memoryStream, this);
				memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
				streamReader = new System.IO.StreamReader(memoryStream);
				return streamReader.ReadToEnd();
			} finally {
				if ((streamReader != null)) {
					streamReader.Dispose();
				}
				if ((memoryStream != null)) {
					memoryStream.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes workflow markup into an cancellazioneincarico_incaricoDatiincarico object
		/// </summary>
		/// <param name="xml">string workflow markup to deserialize</param>
		/// <param name="obj">Output cancellazioneincarico_incaricoDatiincarico object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out cancellazioneincarico_incaricoDatiincarico obj, out System.Exception exception) {
			exception = null;
			obj = default(cancellazioneincarico_incaricoDatiincarico);
			try {
				obj = Deserialize(xml);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool Deserialize(string xml, out cancellazioneincarico_incaricoDatiincarico obj) {
			System.Exception exception = null;
			return Deserialize(xml, out obj, out exception);
		}

		public static cancellazioneincarico_incaricoDatiincarico Deserialize(string xml) {
			System.IO.StringReader stringReader = null;
			try {
				stringReader = new System.IO.StringReader(xml);
				return ((cancellazioneincarico_incaricoDatiincarico)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
			} finally {
				if ((stringReader != null)) {
					stringReader.Dispose();
				}
			}
		}

		/// <summary>
		/// Serializes current cancellazioneincarico_incaricoDatiincarico object into file
		/// </summary>
		/// <param name="fileName">full path of outupt xml file</param>
		/// <param name="exception">output Exception value if failed</param>
		/// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				SaveToFile(fileName);
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		public virtual void SaveToFile(string fileName) {
			System.IO.StreamWriter streamWriter = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
			} finally {
				if ((streamWriter != null)) {
					streamWriter.Dispose();
				}
			}
		}

		/// <summary>
		/// Deserializes xml markup from file into an cancellazioneincarico_incaricoDatiincarico object
		/// </summary>
		/// <param name="fileName">string xml file to load and deserialize</param>
		/// <param name="obj">Output cancellazioneincarico_incaricoDatiincarico object</param>
		/// <param name="exception">output Exception value if deserialize failed</param>
		/// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out cancellazioneincarico_incaricoDatiincarico obj, out System.Exception exception) {
			exception = null;
			obj = default(cancellazioneincarico_incaricoDatiincarico);
			try {
				obj = LoadFromFile(fileName);
				return true;
			} catch (System.Exception ex) {
				exception = ex;
				return false;
			}
		}

		public static bool LoadFromFile(string fileName, out cancellazioneincarico_incaricoDatiincarico obj) {
			System.Exception exception = null;
			return LoadFromFile(fileName, out obj, out exception);
		}

		public static cancellazioneincarico_incaricoDatiincarico LoadFromFile(string fileName) {
			System.IO.FileStream file = null;
			System.IO.StreamReader sr = null;
			try {
				file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString);
			} finally {
				if ((file != null)) {
					file.Dispose();
				}
				if ((sr != null)) {
					sr.Dispose();
				}
			}
		}
		#endregion
	}
}
